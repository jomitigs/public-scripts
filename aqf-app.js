(function () {
  'use strict';

  /******************************************************
   * add-head.js - Carga de recursos (KaTeX, Poppins, FontAwesome)
   ******************************************************/

  // Exportamos la función para poder usarla en otros módulos
  const esPaginaMoodle$1 = () => {
      // Método 1: Verificar la etiqueta meta "generator"
      const metaGenerator = document.querySelector('meta[name="generator"]');
      if (metaGenerator && metaGenerator.content.toLowerCase().includes('moodle')) return true;
    
      // Método 2: Verificar clases específicas en el <body>
      if (document.body.classList.contains('moodle')) return true;
    
      // Método 3: Verificar contenedores específicos de Moodle
      if (document.querySelector('.moodle-page')) return true;
    
      // Método 4: Verificar URLs o scripts específicos
      return Array.from(document.querySelectorAll('script[src]')).some(script =>
        script.src.toLowerCase().includes('moodle')
      );
    };
    
    const ejecutarCargaRecursos = async () => {
      const listaRecursos = [
        { tipo: "link", url: "https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&display=swap", patron: /fonts\.googleapis\.com\/css2\?family=Poppins/, nombre: "Fuente Poppins" },
        { tipo: "link", url: "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css", patron: /font-awesome/, nombre: "Font Awesome" },
        { tipo: "link", url: "https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css", patron: /katex\.min\.css/, nombre: "KaTeX CSS" }
      ];
    
      const agregarEnlaceSiNoExiste = (url, patron, nombre) => {
        const enlacesExistentes = Array.from(document.querySelectorAll('link[rel="stylesheet"]'));
        if (!enlacesExistentes.some(link => patron.test(link.href))) {
          const enlace = document.createElement('link');
          enlace.rel = 'stylesheet';
          enlace.href = url;
          document.head.appendChild(enlace);
          //console.log(`[add-head.js] ✅ ${nombre} agregado.`);
        }
      };
    
      const agregarScriptSiNoExiste = (url, patron, nombre) => {
        return new Promise(resolve => {
          const scriptsExistentes = Array.from(document.querySelectorAll('script[src]'));
          if (!scriptsExistentes.some(script => patron.test(script.src))) {
            const script = document.createElement('script');
            script.src = url;
            script.async = true;
            script.onload = () => {
              //console.log(`[add-head.js] ✅ ${nombre} cargado correctamente.`);
              resolve();
            };
            document.head.appendChild(script);
          } else {
            //console.log(`[add-head.js] ℹ️ ${nombre} ya existe.`);
            resolve();
          }
        });
      };
    
      // Recorrer y cargar cada recurso
      for (const recurso of listaRecursos) {
        if (recurso.tipo === "link") {
          agregarEnlaceSiNoExiste(recurso.url, recurso.patron, recurso.nombre);
        } else if (recurso.tipo === "script") {
          await agregarScriptSiNoExiste(recurso.url, recurso.patron, recurso.nombre);
        }
      }
    
      //console.log("[add-head.js] ✅ Todos los recursos se han cargado correctamente.");
    };
    
    // Ejecuta la carga de recursos solo si la URL incluye "altissia.org" o la página es Moodle
    if (window.location.href.includes('altissia.org') || esPaginaMoodle$1()) {
      ejecutarCargaRecursos();
    }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
   */
  const CONSTANTS = {
      /**
       * @define {boolean} Whether this is the client Node.js SDK.
       */
      NODE_CLIENT: false,
      /**
       * @define {boolean} Whether this is the Admin Node.js SDK.
       */
      NODE_ADMIN: false,
      /**
       * Firebase SDK Version
       */
      SDK_VERSION: '${JSCORE_VERSION}'
  };

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Throws an error if the provided assertion is falsy
   */
  const assert$1 = function (assertion, message) {
      if (!assertion) {
          throw assertionError(message);
      }
  };
  /**
   * Returns an Error object suitable for throwing.
   */
  const assertionError = function (message) {
      return new Error('Firebase Database (' +
          CONSTANTS.SDK_VERSION +
          ') INTERNAL ASSERT FAILED: ' +
          message);
  };

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const stringToByteArray$1 = function (str) {
      // TODO(user): Use native implementations if/when available
      const out = [];
      let p = 0;
      for (let i = 0; i < str.length; i++) {
          let c = str.charCodeAt(i);
          if (c < 128) {
              out[p++] = c;
          }
          else if (c < 2048) {
              out[p++] = (c >> 6) | 192;
              out[p++] = (c & 63) | 128;
          }
          else if ((c & 0xfc00) === 0xd800 &&
              i + 1 < str.length &&
              (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
              // Surrogate Pair
              c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
              out[p++] = (c >> 18) | 240;
              out[p++] = ((c >> 12) & 63) | 128;
              out[p++] = ((c >> 6) & 63) | 128;
              out[p++] = (c & 63) | 128;
          }
          else {
              out[p++] = (c >> 12) | 224;
              out[p++] = ((c >> 6) & 63) | 128;
              out[p++] = (c & 63) | 128;
          }
      }
      return out;
  };
  /**
   * Turns an array of numbers into the string given by the concatenation of the
   * characters to which the numbers correspond.
   * @param bytes Array of numbers representing characters.
   * @return Stringification of the array.
   */
  const byteArrayToString = function (bytes) {
      // TODO(user): Use native implementations if/when available
      const out = [];
      let pos = 0, c = 0;
      while (pos < bytes.length) {
          const c1 = bytes[pos++];
          if (c1 < 128) {
              out[c++] = String.fromCharCode(c1);
          }
          else if (c1 > 191 && c1 < 224) {
              const c2 = bytes[pos++];
              out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
          }
          else if (c1 > 239 && c1 < 365) {
              // Surrogate Pair
              const c2 = bytes[pos++];
              const c3 = bytes[pos++];
              const c4 = bytes[pos++];
              const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -
                  0x10000;
              out[c++] = String.fromCharCode(0xd800 + (u >> 10));
              out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
          }
          else {
              const c2 = bytes[pos++];
              const c3 = bytes[pos++];
              out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
          }
      }
      return out.join('');
  };
  // We define it as an object literal instead of a class because a class compiled down to es5 can't
  // be treeshaked. https://github.com/rollup/rollup/issues/1691
  // Static lookup maps, lazily populated by init_()
  // TODO(dlarocque): Define this as a class, since we no longer target ES5.
  const base64 = {
      /**
       * Maps bytes to characters.
       */
      byteToCharMap_: null,
      /**
       * Maps characters to bytes.
       */
      charToByteMap_: null,
      /**
       * Maps bytes to websafe characters.
       * @private
       */
      byteToCharMapWebSafe_: null,
      /**
       * Maps websafe characters to bytes.
       * @private
       */
      charToByteMapWebSafe_: null,
      /**
       * Our default alphabet, shared between
       * ENCODED_VALS and ENCODED_VALS_WEBSAFE
       */
      ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',
      /**
       * Our default alphabet. Value 64 (=) is special; it means "nothing."
       */
      get ENCODED_VALS() {
          return this.ENCODED_VALS_BASE + '+/=';
      },
      /**
       * Our websafe alphabet.
       */
      get ENCODED_VALS_WEBSAFE() {
          return this.ENCODED_VALS_BASE + '-_.';
      },
      /**
       * Whether this browser supports the atob and btoa functions. This extension
       * started at Mozilla but is now implemented by many browsers. We use the
       * ASSUME_* variables to avoid pulling in the full useragent detection library
       * but still allowing the standard per-browser compilations.
       *
       */
      HAS_NATIVE_SUPPORT: typeof atob === 'function',
      /**
       * Base64-encode an array of bytes.
       *
       * @param input An array of bytes (numbers with
       *     value in [0, 255]) to encode.
       * @param webSafe Boolean indicating we should use the
       *     alternative alphabet.
       * @return The base64 encoded string.
       */
      encodeByteArray(input, webSafe) {
          if (!Array.isArray(input)) {
              throw Error('encodeByteArray takes an array as a parameter');
          }
          this.init_();
          const byteToCharMap = webSafe
              ? this.byteToCharMapWebSafe_
              : this.byteToCharMap_;
          const output = [];
          for (let i = 0; i < input.length; i += 3) {
              const byte1 = input[i];
              const haveByte2 = i + 1 < input.length;
              const byte2 = haveByte2 ? input[i + 1] : 0;
              const haveByte3 = i + 2 < input.length;
              const byte3 = haveByte3 ? input[i + 2] : 0;
              const outByte1 = byte1 >> 2;
              const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
              let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);
              let outByte4 = byte3 & 0x3f;
              if (!haveByte3) {
                  outByte4 = 64;
                  if (!haveByte2) {
                      outByte3 = 64;
                  }
              }
              output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
          }
          return output.join('');
      },
      /**
       * Base64-encode a string.
       *
       * @param input A string to encode.
       * @param webSafe If true, we should use the
       *     alternative alphabet.
       * @return The base64 encoded string.
       */
      encodeString(input, webSafe) {
          // Shortcut for Mozilla browsers that implement
          // a native base64 encoder in the form of "btoa/atob"
          if (this.HAS_NATIVE_SUPPORT && !webSafe) {
              return btoa(input);
          }
          return this.encodeByteArray(stringToByteArray$1(input), webSafe);
      },
      /**
       * Base64-decode a string.
       *
       * @param input to decode.
       * @param webSafe True if we should use the
       *     alternative alphabet.
       * @return string representing the decoded value.
       */
      decodeString(input, webSafe) {
          // Shortcut for Mozilla browsers that implement
          // a native base64 encoder in the form of "btoa/atob"
          if (this.HAS_NATIVE_SUPPORT && !webSafe) {
              return atob(input);
          }
          return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
      },
      /**
       * Base64-decode a string.
       *
       * In base-64 decoding, groups of four characters are converted into three
       * bytes.  If the encoder did not apply padding, the input length may not
       * be a multiple of 4.
       *
       * In this case, the last group will have fewer than 4 characters, and
       * padding will be inferred.  If the group has one or two characters, it decodes
       * to one byte.  If the group has three characters, it decodes to two bytes.
       *
       * @param input Input to decode.
       * @param webSafe True if we should use the web-safe alphabet.
       * @return bytes representing the decoded value.
       */
      decodeStringToByteArray(input, webSafe) {
          this.init_();
          const charToByteMap = webSafe
              ? this.charToByteMapWebSafe_
              : this.charToByteMap_;
          const output = [];
          for (let i = 0; i < input.length;) {
              const byte1 = charToByteMap[input.charAt(i++)];
              const haveByte2 = i < input.length;
              const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
              ++i;
              const haveByte3 = i < input.length;
              const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
              ++i;
              const haveByte4 = i < input.length;
              const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
              ++i;
              if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
                  throw new DecodeBase64StringError();
              }
              const outByte1 = (byte1 << 2) | (byte2 >> 4);
              output.push(outByte1);
              if (byte3 !== 64) {
                  const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);
                  output.push(outByte2);
                  if (byte4 !== 64) {
                      const outByte3 = ((byte3 << 6) & 0xc0) | byte4;
                      output.push(outByte3);
                  }
              }
          }
          return output;
      },
      /**
       * Lazy static initialization function. Called before
       * accessing any of the static map variables.
       * @private
       */
      init_() {
          if (!this.byteToCharMap_) {
              this.byteToCharMap_ = {};
              this.charToByteMap_ = {};
              this.byteToCharMapWebSafe_ = {};
              this.charToByteMapWebSafe_ = {};
              // We want quick mappings back and forth, so we precompute two maps.
              for (let i = 0; i < this.ENCODED_VALS.length; i++) {
                  this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                  this.charToByteMap_[this.byteToCharMap_[i]] = i;
                  this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                  this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                  // Be forgiving when decoding and correctly decode both encodings.
                  if (i >= this.ENCODED_VALS_BASE.length) {
                      this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                      this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                  }
              }
          }
      }
  };
  /**
   * An error encountered while decoding base64 string.
   */
  class DecodeBase64StringError extends Error {
      constructor() {
          super(...arguments);
          this.name = 'DecodeBase64StringError';
      }
  }
  /**
   * URL-safe base64 encoding
   */
  const base64Encode = function (str) {
      const utf8Bytes = stringToByteArray$1(str);
      return base64.encodeByteArray(utf8Bytes, true);
  };
  /**
   * URL-safe base64 encoding (without "." padding in the end).
   * e.g. Used in JSON Web Token (JWT) parts.
   */
  const base64urlEncodeWithoutPadding = function (str) {
      // Use base64url encoding and remove padding in the end (dot characters).
      return base64Encode(str).replace(/\./g, '');
  };
  /**
   * URL-safe base64 decoding
   *
   * NOTE: DO NOT use the global atob() function - it does NOT support the
   * base64Url variant encoding.
   *
   * @param str To be decoded
   * @return Decoded result, if possible
   */
  const base64Decode = function (str) {
      try {
          return base64.decodeString(str, true);
      }
      catch (e) {
          console.error('base64Decode failed: ', e);
      }
      return null;
  };

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Do a deep-copy of basic JavaScript Objects or Arrays.
   */
  function deepCopy(value) {
      return deepExtend(undefined, value);
  }
  /**
   * Copy properties from source to target (recursively allows extension
   * of Objects and Arrays).  Scalar values in the target are over-written.
   * If target is undefined, an object of the appropriate type will be created
   * (and returned).
   *
   * We recursively copy all child properties of plain Objects in the source- so
   * that namespace- like dictionaries are merged.
   *
   * Note that the target can be a function, in which case the properties in
   * the source Object are copied onto it as static properties of the Function.
   *
   * Note: we don't merge __proto__ to prevent prototype pollution
   */
  function deepExtend(target, source) {
      if (!(source instanceof Object)) {
          return source;
      }
      switch (source.constructor) {
          case Date:
              // Treat Dates like scalars; if the target date object had any child
              // properties - they will be lost!
              const dateValue = source;
              return new Date(dateValue.getTime());
          case Object:
              if (target === undefined) {
                  target = {};
              }
              break;
          case Array:
              // Always copy the array source and overwrite the target.
              target = [];
              break;
          default:
              // Not a plain Object - treat it as a scalar.
              return source;
      }
      for (const prop in source) {
          // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202
          if (!source.hasOwnProperty(prop) || !isValidKey$1(prop)) {
              continue;
          }
          target[prop] = deepExtend(target[prop], source[prop]);
      }
      return target;
  }
  function isValidKey$1(key) {
      return key !== '__proto__';
  }

  /**
   * @license
   * Copyright 2022 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Polyfill for `globalThis` object.
   * @returns the `globalThis` object for the given environment.
   * @public
   */
  function getGlobal() {
      if (typeof self !== 'undefined') {
          return self;
      }
      if (typeof window !== 'undefined') {
          return window;
      }
      if (typeof global !== 'undefined') {
          return global;
      }
      throw new Error('Unable to locate global object.');
  }

  /**
   * @license
   * Copyright 2022 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const getDefaultsFromGlobal = () => getGlobal().__FIREBASE_DEFAULTS__;
  /**
   * Attempt to read defaults from a JSON string provided to
   * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in
   * process(.)env(.)__FIREBASE_DEFAULTS_PATH__
   * The dots are in parens because certain compilers (Vite?) cannot
   * handle seeing that variable in comments.
   * See https://github.com/firebase/firebase-js-sdk/issues/6838
   */
  const getDefaultsFromEnvVariable = () => {
      if (typeof process === 'undefined' || typeof process.env === 'undefined') {
          return;
      }
      const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;
      if (defaultsJsonString) {
          return JSON.parse(defaultsJsonString);
      }
  };
  const getDefaultsFromCookie = () => {
      if (typeof document === 'undefined') {
          return;
      }
      let match;
      try {
          match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);
      }
      catch (e) {
          // Some environments such as Angular Universal SSR have a
          // `document` object but error on accessing `document.cookie`.
          return;
      }
      const decoded = match && base64Decode(match[1]);
      return decoded && JSON.parse(decoded);
  };
  /**
   * Get the __FIREBASE_DEFAULTS__ object. It checks in order:
   * (1) if such an object exists as a property of `globalThis`
   * (2) if such an object was provided on a shell environment variable
   * (3) if such an object exists in a cookie
   * @public
   */
  const getDefaults = () => {
      try {
          return (getDefaultsFromGlobal() ||
              getDefaultsFromEnvVariable() ||
              getDefaultsFromCookie());
      }
      catch (e) {
          /**
           * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due
           * to any environment case we have not accounted for. Log to
           * info instead of swallowing so we can find these unknown cases
           * and add paths for them if needed.
           */
          console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);
          return;
      }
  };
  /**
   * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object
   * for the given product.
   * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available
   * @public
   */
  const getDefaultEmulatorHost = (productName) => { var _a, _b; return (_b = (_a = getDefaults()) === null || _a === undefined ? undefined : _a.emulatorHosts) === null || _b === undefined ? undefined : _b[productName]; };
  /**
   * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object
   * for the given product.
   * @returns a pair of hostname and port like `["::1", 4000]` if available
   * @public
   */
  const getDefaultEmulatorHostnameAndPort = (productName) => {
      const host = getDefaultEmulatorHost(productName);
      if (!host) {
          return undefined;
      }
      const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.
      if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {
          throw new Error(`Invalid host ${host} with no separate hostname and port!`);
      }
      // eslint-disable-next-line no-restricted-globals
      const port = parseInt(host.substring(separatorIndex + 1), 10);
      if (host[0] === '[') {
          // Bracket-quoted `[ipv6addr]:port` => return "ipv6addr" (without brackets).
          return [host.substring(1, separatorIndex - 1), port];
      }
      else {
          return [host.substring(0, separatorIndex), port];
      }
  };
  /**
   * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.
   * @public
   */
  const getDefaultAppConfig = () => { var _a; return (_a = getDefaults()) === null || _a === undefined ? undefined : _a.config; };
  /**
   * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties
   * prefixed by "_")
   * @public
   */
  const getExperimentalSetting = (name) => { var _a; return (_a = getDefaults()) === null || _a === undefined ? undefined : _a[`_${name}`]; };

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class Deferred {
      constructor() {
          this.reject = () => { };
          this.resolve = () => { };
          this.promise = new Promise((resolve, reject) => {
              this.resolve = resolve;
              this.reject = reject;
          });
      }
      /**
       * Our API internals are not promisified and cannot because our callback APIs have subtle expectations around
       * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
       * and returns a node-style callback which will resolve or reject the Deferred's promise.
       */
      wrapCallback(callback) {
          return (error, value) => {
              if (error) {
                  this.reject(error);
              }
              else {
                  this.resolve(value);
              }
              if (typeof callback === 'function') {
                  // Attaching noop handler just in case developer wasn't expecting
                  // promises
                  this.promise.catch(() => { });
                  // Some of our callbacks don't expect a value and our own tests
                  // assert that the parameter length is 1
                  if (callback.length === 1) {
                      callback(error);
                  }
                  else {
                      callback(error, value);
                  }
              }
          };
      }
  }

  /**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function createMockUserToken(token, projectId) {
      if (token.uid) {
          throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
      }
      // Unsecured JWTs use "none" as the algorithm.
      const header = {
          alg: 'none',
          type: 'JWT'
      };
      const project = projectId || 'demo-project';
      const iat = token.iat || 0;
      const sub = token.sub || token.user_id;
      if (!sub) {
          throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
      }
      const payload = Object.assign({ 
          // Set all required fields to decent defaults
          iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {
              sign_in_provider: 'custom',
              identities: {}
          } }, token);
      // Unsecured JWTs use the empty string as a signature.
      const signature = '';
      return [
          base64urlEncodeWithoutPadding(JSON.stringify(header)),
          base64urlEncodeWithoutPadding(JSON.stringify(payload)),
          signature
      ].join('.');
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Returns navigator.userAgent string or '' if it's not defined.
   * @return user agent string
   */
  function getUA() {
      if (typeof navigator !== 'undefined' &&
          typeof navigator['userAgent'] === 'string') {
          return navigator['userAgent'];
      }
      else {
          return '';
      }
  }
  /**
   * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
   *
   * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
   * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
   * wait for a callback.
   */
  function isMobileCordova() {
      return (typeof window !== 'undefined' &&
          // @ts-ignore Setting up an broadly applicable index signature for Window
          // just to deal with this case would probably be a bad idea.
          !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
          /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));
  }
  /**
   * Detect Cloudflare Worker context.
   */
  function isCloudflareWorker() {
      return (typeof navigator !== 'undefined' &&
          navigator.userAgent === 'Cloudflare-Workers');
  }
  function isBrowserExtension() {
      const runtime = typeof chrome === 'object'
          ? chrome.runtime
          : typeof browser === 'object'
              ? browser.runtime
              : undefined;
      return typeof runtime === 'object' && runtime.id !== undefined;
  }
  /**
   * Detect React Native.
   *
   * @return true if ReactNative environment is detected.
   */
  function isReactNative() {
      return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
  }
  /** Detects Internet Explorer. */
  function isIE() {
      const ua = getUA();
      return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
  }
  /**
   * Detect whether the current SDK build is the Node version.
   *
   * @return true if it's the Node SDK build.
   */
  function isNodeSdk() {
      return CONSTANTS.NODE_ADMIN === true;
  }
  /**
   * This method checks if indexedDB is supported by current browser/service worker context
   * @return true if indexedDB is supported by current browser/service worker context
   */
  function isIndexedDBAvailable() {
      try {
          return typeof indexedDB === 'object';
      }
      catch (e) {
          return false;
      }
  }
  /**
   * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject
   * if errors occur during the database open operation.
   *
   * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox
   * private browsing)
   */
  function validateIndexedDBOpenable() {
      return new Promise((resolve, reject) => {
          try {
              let preExist = true;
              const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';
              const request = self.indexedDB.open(DB_CHECK_NAME);
              request.onsuccess = () => {
                  request.result.close();
                  // delete database only when it doesn't pre-exist
                  if (!preExist) {
                      self.indexedDB.deleteDatabase(DB_CHECK_NAME);
                  }
                  resolve(true);
              };
              request.onupgradeneeded = () => {
                  preExist = false;
              };
              request.onerror = () => {
                  var _a;
                  reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');
              };
          }
          catch (error) {
              reject(error);
          }
      });
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @fileoverview Standardized Firebase Error.
   *
   * Usage:
   *
   *   // TypeScript string literals for type-safe codes
   *   type Err =
   *     'unknown' |
   *     'object-not-found'
   *     ;
   *
   *   // Closure enum for type-safe error codes
   *   // at-enum {string}
   *   var Err = {
   *     UNKNOWN: 'unknown',
   *     OBJECT_NOT_FOUND: 'object-not-found',
   *   }
   *
   *   let errors: Map<Err, string> = {
   *     'generic-error': "Unknown error",
   *     'file-not-found': "Could not find file: {$file}",
   *   };
   *
   *   // Type-safe function - must pass a valid error code as param.
   *   let error = new ErrorFactory<Err>('service', 'Service', errors);
   *
   *   ...
   *   throw error.create(Err.GENERIC);
   *   ...
   *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});
   *   ...
   *   // Service: Could not file file: foo.txt (service/file-not-found).
   *
   *   catch (e) {
   *     assert(e.message === "Could not find file: foo.txt.");
   *     if ((e as FirebaseError)?.code === 'service/file-not-found') {
   *       console.log("Could not read file: " + e['file']);
   *     }
   *   }
   */
  const ERROR_NAME = 'FirebaseError';
  // Based on code from:
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
  class FirebaseError extends Error {
      constructor(
      /** The error code for this error. */
      code, message, 
      /** Custom data for this error. */
      customData) {
          super(message);
          this.code = code;
          this.customData = customData;
          /** The custom name for all FirebaseErrors. */
          this.name = ERROR_NAME;
          // Fix For ES5
          // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
          // TODO(dlarocque): Replace this with `new.target`: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#support-for-newtarget
          //                   which we can now use since we no longer target ES5.
          Object.setPrototypeOf(this, FirebaseError.prototype);
          // Maintains proper stack trace for where our error was thrown.
          // Only available on V8.
          if (Error.captureStackTrace) {
              Error.captureStackTrace(this, ErrorFactory.prototype.create);
          }
      }
  }
  class ErrorFactory {
      constructor(service, serviceName, errors) {
          this.service = service;
          this.serviceName = serviceName;
          this.errors = errors;
      }
      create(code, ...data) {
          const customData = data[0] || {};
          const fullCode = `${this.service}/${code}`;
          const template = this.errors[code];
          const message = template ? replaceTemplate(template, customData) : 'Error';
          // Service Name: Error message (service/code).
          const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;
          const error = new FirebaseError(fullCode, fullMessage, customData);
          return error;
      }
  }
  function replaceTemplate(template, data) {
      return template.replace(PATTERN, (_, key) => {
          const value = data[key];
          return value != null ? String(value) : `<${key}?>`;
      });
  }
  const PATTERN = /\{\$([^}]+)}/g;

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Evaluates a JSON string into a javascript object.
   *
   * @param {string} str A string containing JSON.
   * @return {*} The javascript object representing the specified JSON.
   */
  function jsonEval(str) {
      return JSON.parse(str);
  }
  /**
   * Returns JSON representing a javascript object.
   * @param {*} data JavaScript object to be stringified.
   * @return {string} The JSON contents of the object.
   */
  function stringify(data) {
      return JSON.stringify(data);
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Decodes a Firebase auth. token into constituent parts.
   *
   * Notes:
   * - May return with invalid / incomplete claims if there's no native base64 decoding support.
   * - Doesn't check if the token is actually valid.
   */
  const decode = function (token) {
      let header = {}, claims = {}, data = {}, signature = '';
      try {
          const parts = token.split('.');
          header = jsonEval(base64Decode(parts[0]) || '');
          claims = jsonEval(base64Decode(parts[1]) || '');
          signature = parts[2];
          data = claims['d'] || {};
          delete claims['d'];
      }
      catch (e) { }
      return {
          header,
          claims,
          data,
          signature
      };
  };
  /**
   * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
   *
   * Notes:
   * - May return a false negative if there's no native base64 decoding support.
   * - Doesn't check if the token is actually valid.
   */
  const isValidFormat = function (token) {
      const decoded = decode(token), claims = decoded.claims;
      return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
  };
  /**
   * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
   *
   * Notes:
   * - May return a false negative if there's no native base64 decoding support.
   * - Doesn't check if the token is actually valid.
   */
  const isAdmin = function (token) {
      const claims = decode(token).claims;
      return typeof claims === 'object' && claims['admin'] === true;
  };

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function contains$1(obj, key) {
      return Object.prototype.hasOwnProperty.call(obj, key);
  }
  function safeGet(obj, key) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
          return obj[key];
      }
      else {
          return undefined;
      }
  }
  function isEmpty(obj) {
      for (const key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
              return false;
          }
      }
      return true;
  }
  function map(obj, fn, contextObj) {
      const res = {};
      for (const key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
              res[key] = fn.call(contextObj, obj[key], key, obj);
          }
      }
      return res;
  }
  /**
   * Deep equal two objects. Support Arrays and Objects.
   */
  function deepEqual(a, b) {
      if (a === b) {
          return true;
      }
      const aKeys = Object.keys(a);
      const bKeys = Object.keys(b);
      for (const k of aKeys) {
          if (!bKeys.includes(k)) {
              return false;
          }
          const aProp = a[k];
          const bProp = b[k];
          if (isObject(aProp) && isObject(bProp)) {
              if (!deepEqual(aProp, bProp)) {
                  return false;
              }
          }
          else if (aProp !== bProp) {
              return false;
          }
      }
      for (const k of bKeys) {
          if (!aKeys.includes(k)) {
              return false;
          }
      }
      return true;
  }
  function isObject(thing) {
      return thing !== null && typeof thing === 'object';
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
   * params object (e.g. {arg: 'val', arg2: 'val2'})
   * Note: You must prepend it with ? when adding it to a URL.
   */
  function querystring(querystringParams) {
      const params = [];
      for (const [key, value] of Object.entries(querystringParams)) {
          if (Array.isArray(value)) {
              value.forEach(arrayVal => {
                  params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
              });
          }
          else {
              params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
          }
      }
      return params.length ? '&' + params.join('&') : '';
  }
  /**
   * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object
   * (e.g. {arg: 'val', arg2: 'val2'})
   */
  function querystringDecode(querystring) {
      const obj = {};
      const tokens = querystring.replace(/^\?/, '').split('&');
      tokens.forEach(token => {
          if (token) {
              const [key, value] = token.split('=');
              obj[decodeURIComponent(key)] = decodeURIComponent(value);
          }
      });
      return obj;
  }
  /**
   * Extract the query string part of a URL, including the leading question mark (if present).
   */
  function extractQuerystring(url) {
      const queryStart = url.indexOf('?');
      if (!queryStart) {
          return '';
      }
      const fragmentStart = url.indexOf('#', queryStart);
      return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @fileoverview SHA-1 cryptographic hash.
   * Variable names follow the notation in FIPS PUB 180-3:
   * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
   *
   * Usage:
   *   var sha1 = new sha1();
   *   sha1.update(bytes);
   *   var hash = sha1.digest();
   *
   * Performance:
   *   Chrome 23:   ~400 Mbit/s
   *   Firefox 16:  ~250 Mbit/s
   *
   */
  /**
   * SHA-1 cryptographic hash constructor.
   *
   * The properties declared here are discussed in the above algorithm document.
   * @constructor
   * @final
   * @struct
   */
  class Sha1 {
      constructor() {
          /**
           * Holds the previous values of accumulated variables a-e in the compress_
           * function.
           * @private
           */
          this.chain_ = [];
          /**
           * A buffer holding the partially computed hash result.
           * @private
           */
          this.buf_ = [];
          /**
           * An array of 80 bytes, each a part of the message to be hashed.  Referred to
           * as the message schedule in the docs.
           * @private
           */
          this.W_ = [];
          /**
           * Contains data needed to pad messages less than 64 bytes.
           * @private
           */
          this.pad_ = [];
          /**
           * @private {number}
           */
          this.inbuf_ = 0;
          /**
           * @private {number}
           */
          this.total_ = 0;
          this.blockSize = 512 / 8;
          this.pad_[0] = 128;
          for (let i = 1; i < this.blockSize; ++i) {
              this.pad_[i] = 0;
          }
          this.reset();
      }
      reset() {
          this.chain_[0] = 0x67452301;
          this.chain_[1] = 0xefcdab89;
          this.chain_[2] = 0x98badcfe;
          this.chain_[3] = 0x10325476;
          this.chain_[4] = 0xc3d2e1f0;
          this.inbuf_ = 0;
          this.total_ = 0;
      }
      /**
       * Internal compress helper function.
       * @param buf Block to compress.
       * @param offset Offset of the block in the buffer.
       * @private
       */
      compress_(buf, offset) {
          if (!offset) {
              offset = 0;
          }
          const W = this.W_;
          // get 16 big endian words
          if (typeof buf === 'string') {
              for (let i = 0; i < 16; i++) {
                  // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
                  // have a bug that turns the post-increment ++ operator into pre-increment
                  // during JIT compilation.  We have code that depends heavily on SHA-1 for
                  // correctness and which is affected by this bug, so I've removed all uses
                  // of post-increment ++ in which the result value is used.  We can revert
                  // this change once the Safari bug
                  // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
                  // most clients have been updated.
                  W[i] =
                      (buf.charCodeAt(offset) << 24) |
                          (buf.charCodeAt(offset + 1) << 16) |
                          (buf.charCodeAt(offset + 2) << 8) |
                          buf.charCodeAt(offset + 3);
                  offset += 4;
              }
          }
          else {
              for (let i = 0; i < 16; i++) {
                  W[i] =
                      (buf[offset] << 24) |
                          (buf[offset + 1] << 16) |
                          (buf[offset + 2] << 8) |
                          buf[offset + 3];
                  offset += 4;
              }
          }
          // expand to 80 words
          for (let i = 16; i < 80; i++) {
              const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
              W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;
          }
          let a = this.chain_[0];
          let b = this.chain_[1];
          let c = this.chain_[2];
          let d = this.chain_[3];
          let e = this.chain_[4];
          let f, k;
          // TODO(user): Try to unroll this loop to speed up the computation.
          for (let i = 0; i < 80; i++) {
              if (i < 40) {
                  if (i < 20) {
                      f = d ^ (b & (c ^ d));
                      k = 0x5a827999;
                  }
                  else {
                      f = b ^ c ^ d;
                      k = 0x6ed9eba1;
                  }
              }
              else {
                  if (i < 60) {
                      f = (b & c) | (d & (b | c));
                      k = 0x8f1bbcdc;
                  }
                  else {
                      f = b ^ c ^ d;
                      k = 0xca62c1d6;
                  }
              }
              const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;
              e = d;
              d = c;
              c = ((b << 30) | (b >>> 2)) & 0xffffffff;
              b = a;
              a = t;
          }
          this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;
          this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;
          this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;
          this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;
          this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;
      }
      update(bytes, length) {
          // TODO(johnlenz): tighten the function signature and remove this check
          if (bytes == null) {
              return;
          }
          if (length === undefined) {
              length = bytes.length;
          }
          const lengthMinusBlock = length - this.blockSize;
          let n = 0;
          // Using local instead of member variables gives ~5% speedup on Firefox 16.
          const buf = this.buf_;
          let inbuf = this.inbuf_;
          // The outer while loop should execute at most twice.
          while (n < length) {
              // When we have no data in the block to top up, we can directly process the
              // input buffer (assuming it contains sufficient data). This gives ~25%
              // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
              // the data is provided in large chunks (or in multiples of 64 bytes).
              if (inbuf === 0) {
                  while (n <= lengthMinusBlock) {
                      this.compress_(bytes, n);
                      n += this.blockSize;
                  }
              }
              if (typeof bytes === 'string') {
                  while (n < length) {
                      buf[inbuf] = bytes.charCodeAt(n);
                      ++inbuf;
                      ++n;
                      if (inbuf === this.blockSize) {
                          this.compress_(buf);
                          inbuf = 0;
                          // Jump to the outer loop so we use the full-block optimization.
                          break;
                      }
                  }
              }
              else {
                  while (n < length) {
                      buf[inbuf] = bytes[n];
                      ++inbuf;
                      ++n;
                      if (inbuf === this.blockSize) {
                          this.compress_(buf);
                          inbuf = 0;
                          // Jump to the outer loop so we use the full-block optimization.
                          break;
                      }
                  }
              }
          }
          this.inbuf_ = inbuf;
          this.total_ += length;
      }
      /** @override */
      digest() {
          const digest = [];
          let totalBits = this.total_ * 8;
          // Add pad 0x80 0x00*.
          if (this.inbuf_ < 56) {
              this.update(this.pad_, 56 - this.inbuf_);
          }
          else {
              this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
          }
          // Add # bits.
          for (let i = this.blockSize - 1; i >= 56; i--) {
              this.buf_[i] = totalBits & 255;
              totalBits /= 256; // Don't use bit-shifting here!
          }
          this.compress_(this.buf_);
          let n = 0;
          for (let i = 0; i < 5; i++) {
              for (let j = 24; j >= 0; j -= 8) {
                  digest[n] = (this.chain_[i] >> j) & 255;
                  ++n;
              }
          }
          return digest;
      }
  }

  /**
   * Helper to make a Subscribe function (just like Promise helps make a
   * Thenable).
   *
   * @param executor Function which can make calls to a single Observer
   *     as a proxy.
   * @param onNoObservers Callback when count of Observers goes to zero.
   */
  function createSubscribe(executor, onNoObservers) {
      const proxy = new ObserverProxy(executor, onNoObservers);
      return proxy.subscribe.bind(proxy);
  }
  /**
   * Implement fan-out for any number of Observers attached via a subscribe
   * function.
   */
  class ObserverProxy {
      /**
       * @param executor Function which can make calls to a single Observer
       *     as a proxy.
       * @param onNoObservers Callback when count of Observers goes to zero.
       */
      constructor(executor, onNoObservers) {
          this.observers = [];
          this.unsubscribes = [];
          this.observerCount = 0;
          // Micro-task scheduling by calling task.then().
          this.task = Promise.resolve();
          this.finalized = false;
          this.onNoObservers = onNoObservers;
          // Call the executor asynchronously so subscribers that are called
          // synchronously after the creation of the subscribe function
          // can still receive the very first value generated in the executor.
          this.task
              .then(() => {
              executor(this);
          })
              .catch(e => {
              this.error(e);
          });
      }
      next(value) {
          this.forEachObserver((observer) => {
              observer.next(value);
          });
      }
      error(error) {
          this.forEachObserver((observer) => {
              observer.error(error);
          });
          this.close(error);
      }
      complete() {
          this.forEachObserver((observer) => {
              observer.complete();
          });
          this.close();
      }
      /**
       * Subscribe function that can be used to add an Observer to the fan-out list.
       *
       * - We require that no event is sent to a subscriber synchronously to their
       *   call to subscribe().
       */
      subscribe(nextOrObserver, error, complete) {
          let observer;
          if (nextOrObserver === undefined &&
              error === undefined &&
              complete === undefined) {
              throw new Error('Missing Observer.');
          }
          // Assemble an Observer object when passed as callback functions.
          if (implementsAnyMethods(nextOrObserver, [
              'next',
              'error',
              'complete'
          ])) {
              observer = nextOrObserver;
          }
          else {
              observer = {
                  next: nextOrObserver,
                  error,
                  complete
              };
          }
          if (observer.next === undefined) {
              observer.next = noop;
          }
          if (observer.error === undefined) {
              observer.error = noop;
          }
          if (observer.complete === undefined) {
              observer.complete = noop;
          }
          const unsub = this.unsubscribeOne.bind(this, this.observers.length);
          // Attempt to subscribe to a terminated Observable - we
          // just respond to the Observer with the final error or complete
          // event.
          if (this.finalized) {
              // eslint-disable-next-line @typescript-eslint/no-floating-promises
              this.task.then(() => {
                  try {
                      if (this.finalError) {
                          observer.error(this.finalError);
                      }
                      else {
                          observer.complete();
                      }
                  }
                  catch (e) {
                      // nothing
                  }
                  return;
              });
          }
          this.observers.push(observer);
          return unsub;
      }
      // Unsubscribe is synchronous - we guarantee that no events are sent to
      // any unsubscribed Observer.
      unsubscribeOne(i) {
          if (this.observers === undefined || this.observers[i] === undefined) {
              return;
          }
          delete this.observers[i];
          this.observerCount -= 1;
          if (this.observerCount === 0 && this.onNoObservers !== undefined) {
              this.onNoObservers(this);
          }
      }
      forEachObserver(fn) {
          if (this.finalized) {
              // Already closed by previous event....just eat the additional values.
              return;
          }
          // Since sendOne calls asynchronously - there is no chance that
          // this.observers will become undefined.
          for (let i = 0; i < this.observers.length; i++) {
              this.sendOne(i, fn);
          }
      }
      // Call the Observer via one of it's callback function. We are careful to
      // confirm that the observe has not been unsubscribed since this asynchronous
      // function had been queued.
      sendOne(i, fn) {
          // Execute the callback asynchronously
          // eslint-disable-next-line @typescript-eslint/no-floating-promises
          this.task.then(() => {
              if (this.observers !== undefined && this.observers[i] !== undefined) {
                  try {
                      fn(this.observers[i]);
                  }
                  catch (e) {
                      // Ignore exceptions raised in Observers or missing methods of an
                      // Observer.
                      // Log error to console. b/31404806
                      if (typeof console !== 'undefined' && console.error) {
                          console.error(e);
                      }
                  }
              }
          });
      }
      close(err) {
          if (this.finalized) {
              return;
          }
          this.finalized = true;
          if (err !== undefined) {
              this.finalError = err;
          }
          // Proxy is no longer needed - garbage collect references
          // eslint-disable-next-line @typescript-eslint/no-floating-promises
          this.task.then(() => {
              this.observers = undefined;
              this.onNoObservers = undefined;
          });
      }
  }
  /**
   * Return true if the object passed in implements any of the named methods.
   */
  function implementsAnyMethods(obj, methods) {
      if (typeof obj !== 'object' || obj === null) {
          return false;
      }
      for (const method of methods) {
          if (method in obj && typeof obj[method] === 'function') {
              return true;
          }
      }
      return false;
  }
  function noop() {
      // do nothing
  }
  /**
   * Generates a string to prefix an error message about failed argument validation
   *
   * @param fnName The function name
   * @param argName The name of the argument
   * @return The prefix to add to the error thrown for validation.
   */
  function errorPrefix(fnName, argName) {
      return `${fnName} failed: ${argName} argument `;
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
  // automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
  // so it's been modified.
  // Note that not all Unicode characters appear as single characters in JavaScript strings.
  // fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
  // use 2 characters in JavaScript.  All 4-byte UTF-8 characters begin with a first
  // character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
  // pair).
  // See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
  /**
   * @param {string} str
   * @return {Array}
   */
  const stringToByteArray = function (str) {
      const out = [];
      let p = 0;
      for (let i = 0; i < str.length; i++) {
          let c = str.charCodeAt(i);
          // Is this the lead surrogate in a surrogate pair?
          if (c >= 0xd800 && c <= 0xdbff) {
              const high = c - 0xd800; // the high 10 bits.
              i++;
              assert$1(i < str.length, 'Surrogate pair missing trail surrogate.');
              const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.
              c = 0x10000 + (high << 10) + low;
          }
          if (c < 128) {
              out[p++] = c;
          }
          else if (c < 2048) {
              out[p++] = (c >> 6) | 192;
              out[p++] = (c & 63) | 128;
          }
          else if (c < 65536) {
              out[p++] = (c >> 12) | 224;
              out[p++] = ((c >> 6) & 63) | 128;
              out[p++] = (c & 63) | 128;
          }
          else {
              out[p++] = (c >> 18) | 240;
              out[p++] = ((c >> 12) & 63) | 128;
              out[p++] = ((c >> 6) & 63) | 128;
              out[p++] = (c & 63) | 128;
          }
      }
      return out;
  };
  /**
   * Calculate length without actually converting; useful for doing cheaper validation.
   * @param {string} str
   * @return {number}
   */
  const stringLength = function (str) {
      let p = 0;
      for (let i = 0; i < str.length; i++) {
          const c = str.charCodeAt(i);
          if (c < 128) {
              p++;
          }
          else if (c < 2048) {
              p += 2;
          }
          else if (c >= 0xd800 && c <= 0xdbff) {
              // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
              p += 4;
              i++; // skip trail surrogate.
          }
          else {
              p += 3;
          }
      }
      return p;
  };

  /**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function getModularInstance(service) {
      if (service && service._delegate) {
          return service._delegate;
      }
      else {
          return service;
      }
  }

  /**
   * Component for service name T, e.g. `auth`, `auth-internal`
   */
  class Component {
      /**
       *
       * @param name The public service name, e.g. app, auth, firestore, database
       * @param instanceFactory Service factory responsible for creating the public interface
       * @param type whether the service provided by the component is public or private
       */
      constructor(name, instanceFactory, type) {
          this.name = name;
          this.instanceFactory = instanceFactory;
          this.type = type;
          this.multipleInstances = false;
          /**
           * Properties to be added to the service namespace
           */
          this.serviceProps = {};
          this.instantiationMode = "LAZY" /* InstantiationMode.LAZY */;
          this.onInstanceCreated = null;
      }
      setInstantiationMode(mode) {
          this.instantiationMode = mode;
          return this;
      }
      setMultipleInstances(multipleInstances) {
          this.multipleInstances = multipleInstances;
          return this;
      }
      setServiceProps(props) {
          this.serviceProps = props;
          return this;
      }
      setInstanceCreatedCallback(callback) {
          this.onInstanceCreated = callback;
          return this;
      }
  }

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const DEFAULT_ENTRY_NAME$1 = '[DEFAULT]';

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
   * NameServiceMapping[T] is an alias for the type of the instance
   */
  class Provider {
      constructor(name, container) {
          this.name = name;
          this.container = container;
          this.component = null;
          this.instances = new Map();
          this.instancesDeferred = new Map();
          this.instancesOptions = new Map();
          this.onInitCallbacks = new Map();
      }
      /**
       * @param identifier A provider can provide multiple instances of a service
       * if this.component.multipleInstances is true.
       */
      get(identifier) {
          // if multipleInstances is not supported, use the default name
          const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
          if (!this.instancesDeferred.has(normalizedIdentifier)) {
              const deferred = new Deferred();
              this.instancesDeferred.set(normalizedIdentifier, deferred);
              if (this.isInitialized(normalizedIdentifier) ||
                  this.shouldAutoInitialize()) {
                  // initialize the service if it can be auto-initialized
                  try {
                      const instance = this.getOrInitializeService({
                          instanceIdentifier: normalizedIdentifier
                      });
                      if (instance) {
                          deferred.resolve(instance);
                      }
                  }
                  catch (e) {
                      // when the instance factory throws an exception during get(), it should not cause
                      // a fatal error. We just return the unresolved promise in this case.
                  }
              }
          }
          return this.instancesDeferred.get(normalizedIdentifier).promise;
      }
      getImmediate(options) {
          var _a;
          // if multipleInstances is not supported, use the default name
          const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === undefined ? undefined : options.identifier);
          const optional = (_a = options === null || options === undefined ? undefined : options.optional) !== null && _a !== undefined ? _a : false;
          if (this.isInitialized(normalizedIdentifier) ||
              this.shouldAutoInitialize()) {
              try {
                  return this.getOrInitializeService({
                      instanceIdentifier: normalizedIdentifier
                  });
              }
              catch (e) {
                  if (optional) {
                      return null;
                  }
                  else {
                      throw e;
                  }
              }
          }
          else {
              // In case a component is not initialized and should/cannot be auto-initialized at the moment, return null if the optional flag is set, or throw
              if (optional) {
                  return null;
              }
              else {
                  throw Error(`Service ${this.name} is not available`);
              }
          }
      }
      getComponent() {
          return this.component;
      }
      setComponent(component) {
          if (component.name !== this.name) {
              throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);
          }
          if (this.component) {
              throw Error(`Component for ${this.name} has already been provided`);
          }
          this.component = component;
          // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)
          if (!this.shouldAutoInitialize()) {
              return;
          }
          // if the service is eager, initialize the default instance
          if (isComponentEager(component)) {
              try {
                  this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME$1 });
              }
              catch (e) {
                  // when the instance factory for an eager Component throws an exception during the eager
                  // initialization, it should not cause a fatal error.
                  // TODO: Investigate if we need to make it configurable, because some component may want to cause
                  // a fatal error in this case?
              }
          }
          // Create service instances for the pending promises and resolve them
          // NOTE: if this.multipleInstances is false, only the default instance will be created
          // and all promises with resolve with it regardless of the identifier.
          for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
              const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
              try {
                  // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
                  const instance = this.getOrInitializeService({
                      instanceIdentifier: normalizedIdentifier
                  });
                  instanceDeferred.resolve(instance);
              }
              catch (e) {
                  // when the instance factory throws an exception, it should not cause
                  // a fatal error. We just leave the promise unresolved.
              }
          }
      }
      clearInstance(identifier = DEFAULT_ENTRY_NAME$1) {
          this.instancesDeferred.delete(identifier);
          this.instancesOptions.delete(identifier);
          this.instances.delete(identifier);
      }
      // app.delete() will call this method on every provider to delete the services
      // TODO: should we mark the provider as deleted?
      async delete() {
          const services = Array.from(this.instances.values());
          await Promise.all([
              ...services
                  .filter(service => 'INTERNAL' in service) // legacy services
                  // eslint-disable-next-line @typescript-eslint/no-explicit-any
                  .map(service => service.INTERNAL.delete()),
              ...services
                  .filter(service => '_delete' in service) // modularized services
                  // eslint-disable-next-line @typescript-eslint/no-explicit-any
                  .map(service => service._delete())
          ]);
      }
      isComponentSet() {
          return this.component != null;
      }
      isInitialized(identifier = DEFAULT_ENTRY_NAME$1) {
          return this.instances.has(identifier);
      }
      getOptions(identifier = DEFAULT_ENTRY_NAME$1) {
          return this.instancesOptions.get(identifier) || {};
      }
      initialize(opts = {}) {
          const { options = {} } = opts;
          const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
          if (this.isInitialized(normalizedIdentifier)) {
              throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);
          }
          if (!this.isComponentSet()) {
              throw Error(`Component ${this.name} has not been registered yet`);
          }
          const instance = this.getOrInitializeService({
              instanceIdentifier: normalizedIdentifier,
              options
          });
          // resolve any pending promise waiting for the service instance
          for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
              const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
              if (normalizedIdentifier === normalizedDeferredIdentifier) {
                  instanceDeferred.resolve(instance);
              }
          }
          return instance;
      }
      /**
       *
       * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
       * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
       *
       * @param identifier An optional instance identifier
       * @returns a function to unregister the callback
       */
      onInit(callback, identifier) {
          var _a;
          const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
          const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== undefined ? _a : new Set();
          existingCallbacks.add(callback);
          this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
          const existingInstance = this.instances.get(normalizedIdentifier);
          if (existingInstance) {
              callback(existingInstance, normalizedIdentifier);
          }
          return () => {
              existingCallbacks.delete(callback);
          };
      }
      /**
       * Invoke onInit callbacks synchronously
       * @param instance the service instance`
       */
      invokeOnInitCallbacks(instance, identifier) {
          const callbacks = this.onInitCallbacks.get(identifier);
          if (!callbacks) {
              return;
          }
          for (const callback of callbacks) {
              try {
                  callback(instance, identifier);
              }
              catch (_a) {
                  // ignore errors in the onInit callback
              }
          }
      }
      getOrInitializeService({ instanceIdentifier, options = {} }) {
          let instance = this.instances.get(instanceIdentifier);
          if (!instance && this.component) {
              instance = this.component.instanceFactory(this.container, {
                  instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
                  options
              });
              this.instances.set(instanceIdentifier, instance);
              this.instancesOptions.set(instanceIdentifier, options);
              /**
               * Invoke onInit listeners.
               * Note this.component.onInstanceCreated is different, which is used by the component creator,
               * while onInit listeners are registered by consumers of the provider.
               */
              this.invokeOnInitCallbacks(instance, instanceIdentifier);
              /**
               * Order is important
               * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which
               * makes `isInitialized()` return true.
               */
              if (this.component.onInstanceCreated) {
                  try {
                      this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
                  }
                  catch (_a) {
                      // ignore errors in the onInstanceCreatedCallback
                  }
              }
          }
          return instance || null;
      }
      normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME$1) {
          if (this.component) {
              return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME$1;
          }
          else {
              return identifier; // assume multiple instances are supported before the component is provided.
          }
      }
      shouldAutoInitialize() {
          return (!!this.component &&
              this.component.instantiationMode !== "EXPLICIT" /* InstantiationMode.EXPLICIT */);
      }
  }
  // undefined should be passed to the service factory for the default instance
  function normalizeIdentifierForFactory(identifier) {
      return identifier === DEFAULT_ENTRY_NAME$1 ? undefined : identifier;
  }
  function isComponentEager(component) {
      return component.instantiationMode === "EAGER" /* InstantiationMode.EAGER */;
  }

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
   */
  class ComponentContainer {
      constructor(name) {
          this.name = name;
          this.providers = new Map();
      }
      /**
       *
       * @param component Component being added
       * @param overwrite When a component with the same name has already been registered,
       * if overwrite is true: overwrite the existing component with the new component and create a new
       * provider with the new component. It can be useful in tests where you want to use different mocks
       * for different tests.
       * if overwrite is false: throw an exception
       */
      addComponent(component) {
          const provider = this.getProvider(component.name);
          if (provider.isComponentSet()) {
              throw new Error(`Component ${component.name} has already been registered with ${this.name}`);
          }
          provider.setComponent(component);
      }
      addOrOverwriteComponent(component) {
          const provider = this.getProvider(component.name);
          if (provider.isComponentSet()) {
              // delete the existing provider from the container, so we can register the new component
              this.providers.delete(component.name);
          }
          this.addComponent(component);
      }
      /**
       * getProvider provides a type safe interface where it can only be called with a field name
       * present in NameServiceMapping interface.
       *
       * Firebase SDKs providing services should extend NameServiceMapping interface to register
       * themselves.
       */
      getProvider(name) {
          if (this.providers.has(name)) {
              return this.providers.get(name);
          }
          // create a Provider for a service that hasn't registered with Firebase
          const provider = new Provider(name, this);
          this.providers.set(name, provider);
          return provider;
      }
      getProviders() {
          return Array.from(this.providers.values());
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A container for all of the Logger instances
   */
  /**
   * The JS SDK supports 5 log levels and also allows a user the ability to
   * silence the logs altogether.
   *
   * The order is a follows:
   * DEBUG < VERBOSE < INFO < WARN < ERROR
   *
   * All of the log types above the current log level will be captured (i.e. if
   * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
   * `VERBOSE` logs will not)
   */
  var LogLevel$2;
  (function (LogLevel) {
      LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
      LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
      LogLevel[LogLevel["INFO"] = 2] = "INFO";
      LogLevel[LogLevel["WARN"] = 3] = "WARN";
      LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
      LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
  })(LogLevel$2 || (LogLevel$2 = {}));
  const levelStringToEnum$2 = {
      'debug': LogLevel$2.DEBUG,
      'verbose': LogLevel$2.VERBOSE,
      'info': LogLevel$2.INFO,
      'warn': LogLevel$2.WARN,
      'error': LogLevel$2.ERROR,
      'silent': LogLevel$2.SILENT
  };
  /**
   * The default log level
   */
  const defaultLogLevel$2 = LogLevel$2.INFO;
  /**
   * By default, `console.debug` is not displayed in the developer console (in
   * chrome). To avoid forcing users to have to opt-in to these logs twice
   * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
   * logs to the `console.log` function.
   */
  const ConsoleMethod$2 = {
      [LogLevel$2.DEBUG]: 'log',
      [LogLevel$2.VERBOSE]: 'log',
      [LogLevel$2.INFO]: 'info',
      [LogLevel$2.WARN]: 'warn',
      [LogLevel$2.ERROR]: 'error'
  };
  /**
   * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
   * messages on to their corresponding console counterparts (if the log method
   * is supported by the current log level)
   */
  const defaultLogHandler$2 = (instance, logType, ...args) => {
      if (logType < instance.logLevel) {
          return;
      }
      const now = new Date().toISOString();
      const method = ConsoleMethod$2[logType];
      if (method) {
          console[method](`[${now}]  ${instance.name}:`, ...args);
      }
      else {
          throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);
      }
  };
  let Logger$2 = class Logger {
      /**
       * Gives you an instance of a Logger to capture messages according to
       * Firebase's logging scheme.
       *
       * @param name The name that the logs will be associated with
       */
      constructor(name) {
          this.name = name;
          /**
           * The log level of the given Logger instance.
           */
          this._logLevel = defaultLogLevel$2;
          /**
           * The main (internal) log handler for the Logger instance.
           * Can be set to a new function in internal package code but not by user.
           */
          this._logHandler = defaultLogHandler$2;
          /**
           * The optional, additional, user-defined log handler for the Logger instance.
           */
          this._userLogHandler = null;
      }
      get logLevel() {
          return this._logLevel;
      }
      set logLevel(val) {
          if (!(val in LogLevel$2)) {
              throw new TypeError(`Invalid value "${val}" assigned to \`logLevel\``);
          }
          this._logLevel = val;
      }
      // Workaround for setter/getter having to be the same type.
      setLogLevel(val) {
          this._logLevel = typeof val === 'string' ? levelStringToEnum$2[val] : val;
      }
      get logHandler() {
          return this._logHandler;
      }
      set logHandler(val) {
          if (typeof val !== 'function') {
              throw new TypeError('Value assigned to `logHandler` must be a function');
          }
          this._logHandler = val;
      }
      get userLogHandler() {
          return this._userLogHandler;
      }
      set userLogHandler(val) {
          this._userLogHandler = val;
      }
      /**
       * The functions below are all based on the `console` interface
       */
      debug(...args) {
          this._userLogHandler && this._userLogHandler(this, LogLevel$2.DEBUG, ...args);
          this._logHandler(this, LogLevel$2.DEBUG, ...args);
      }
      log(...args) {
          this._userLogHandler &&
              this._userLogHandler(this, LogLevel$2.VERBOSE, ...args);
          this._logHandler(this, LogLevel$2.VERBOSE, ...args);
      }
      info(...args) {
          this._userLogHandler && this._userLogHandler(this, LogLevel$2.INFO, ...args);
          this._logHandler(this, LogLevel$2.INFO, ...args);
      }
      warn(...args) {
          this._userLogHandler && this._userLogHandler(this, LogLevel$2.WARN, ...args);
          this._logHandler(this, LogLevel$2.WARN, ...args);
      }
      error(...args) {
          this._userLogHandler && this._userLogHandler(this, LogLevel$2.ERROR, ...args);
          this._logHandler(this, LogLevel$2.ERROR, ...args);
      }
  };

  const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);

  let idbProxyableTypes;
  let cursorAdvanceMethods;
  // This is a function to prevent it throwing up in node environments.
  function getIdbProxyableTypes() {
      return (idbProxyableTypes ||
          (idbProxyableTypes = [
              IDBDatabase,
              IDBObjectStore,
              IDBIndex,
              IDBCursor,
              IDBTransaction,
          ]));
  }
  // This is a function to prevent it throwing up in node environments.
  function getCursorAdvanceMethods() {
      return (cursorAdvanceMethods ||
          (cursorAdvanceMethods = [
              IDBCursor.prototype.advance,
              IDBCursor.prototype.continue,
              IDBCursor.prototype.continuePrimaryKey,
          ]));
  }
  const cursorRequestMap = new WeakMap();
  const transactionDoneMap = new WeakMap();
  const transactionStoreNamesMap = new WeakMap();
  const transformCache = new WeakMap();
  const reverseTransformCache = new WeakMap();
  function promisifyRequest(request) {
      const promise = new Promise((resolve, reject) => {
          const unlisten = () => {
              request.removeEventListener('success', success);
              request.removeEventListener('error', error);
          };
          const success = () => {
              resolve(wrap(request.result));
              unlisten();
          };
          const error = () => {
              reject(request.error);
              unlisten();
          };
          request.addEventListener('success', success);
          request.addEventListener('error', error);
      });
      promise
          .then((value) => {
          // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval
          // (see wrapFunction).
          if (value instanceof IDBCursor) {
              cursorRequestMap.set(value, request);
          }
          // Catching to avoid "Uncaught Promise exceptions"
      })
          .catch(() => { });
      // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This
      // is because we create many promises from a single IDBRequest.
      reverseTransformCache.set(promise, request);
      return promise;
  }
  function cacheDonePromiseForTransaction(tx) {
      // Early bail if we've already created a done promise for this transaction.
      if (transactionDoneMap.has(tx))
          return;
      const done = new Promise((resolve, reject) => {
          const unlisten = () => {
              tx.removeEventListener('complete', complete);
              tx.removeEventListener('error', error);
              tx.removeEventListener('abort', error);
          };
          const complete = () => {
              resolve();
              unlisten();
          };
          const error = () => {
              reject(tx.error || new DOMException('AbortError', 'AbortError'));
              unlisten();
          };
          tx.addEventListener('complete', complete);
          tx.addEventListener('error', error);
          tx.addEventListener('abort', error);
      });
      // Cache it for later retrieval.
      transactionDoneMap.set(tx, done);
  }
  let idbProxyTraps = {
      get(target, prop, receiver) {
          if (target instanceof IDBTransaction) {
              // Special handling for transaction.done.
              if (prop === 'done')
                  return transactionDoneMap.get(target);
              // Polyfill for objectStoreNames because of Edge.
              if (prop === 'objectStoreNames') {
                  return target.objectStoreNames || transactionStoreNamesMap.get(target);
              }
              // Make tx.store return the only store in the transaction, or undefined if there are many.
              if (prop === 'store') {
                  return receiver.objectStoreNames[1]
                      ? undefined
                      : receiver.objectStore(receiver.objectStoreNames[0]);
              }
          }
          // Else transform whatever we get back.
          return wrap(target[prop]);
      },
      set(target, prop, value) {
          target[prop] = value;
          return true;
      },
      has(target, prop) {
          if (target instanceof IDBTransaction &&
              (prop === 'done' || prop === 'store')) {
              return true;
          }
          return prop in target;
      },
  };
  function replaceTraps(callback) {
      idbProxyTraps = callback(idbProxyTraps);
  }
  function wrapFunction(func) {
      // Due to expected object equality (which is enforced by the caching in `wrap`), we
      // only create one new func per func.
      // Edge doesn't support objectStoreNames (booo), so we polyfill it here.
      if (func === IDBDatabase.prototype.transaction &&
          !('objectStoreNames' in IDBTransaction.prototype)) {
          return function (storeNames, ...args) {
              const tx = func.call(unwrap(this), storeNames, ...args);
              transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);
              return wrap(tx);
          };
      }
      // Cursor methods are special, as the behaviour is a little more different to standard IDB. In
      // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the
      // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense
      // with real promises, so each advance methods returns a new promise for the cursor object, or
      // undefined if the end of the cursor has been reached.
      if (getCursorAdvanceMethods().includes(func)) {
          return function (...args) {
              // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
              // the original object.
              func.apply(unwrap(this), args);
              return wrap(cursorRequestMap.get(this));
          };
      }
      return function (...args) {
          // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
          // the original object.
          return wrap(func.apply(unwrap(this), args));
      };
  }
  function transformCachableValue(value) {
      if (typeof value === 'function')
          return wrapFunction(value);
      // This doesn't return, it just creates a 'done' promise for the transaction,
      // which is later returned for transaction.done (see idbObjectHandler).
      if (value instanceof IDBTransaction)
          cacheDonePromiseForTransaction(value);
      if (instanceOfAny(value, getIdbProxyableTypes()))
          return new Proxy(value, idbProxyTraps);
      // Return the same value back if we're not going to transform it.
      return value;
  }
  function wrap(value) {
      // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because
      // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.
      if (value instanceof IDBRequest)
          return promisifyRequest(value);
      // If we've already transformed this value before, reuse the transformed value.
      // This is faster, but it also provides object equality.
      if (transformCache.has(value))
          return transformCache.get(value);
      const newValue = transformCachableValue(value);
      // Not all types are transformed.
      // These may be primitive types, so they can't be WeakMap keys.
      if (newValue !== value) {
          transformCache.set(value, newValue);
          reverseTransformCache.set(newValue, value);
      }
      return newValue;
  }
  const unwrap = (value) => reverseTransformCache.get(value);

  /**
   * Open a database.
   *
   * @param name Name of the database.
   * @param version Schema version.
   * @param callbacks Additional callbacks.
   */
  function openDB$1(name, version, { blocked, upgrade, blocking, terminated } = {}) {
      const request = indexedDB.open(name, version);
      const openPromise = wrap(request);
      if (upgrade) {
          request.addEventListener('upgradeneeded', (event) => {
              upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);
          });
      }
      if (blocked) {
          request.addEventListener('blocked', (event) => blocked(
          // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
          event.oldVersion, event.newVersion, event));
      }
      openPromise
          .then((db) => {
          if (terminated)
              db.addEventListener('close', () => terminated());
          if (blocking) {
              db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));
          }
      })
          .catch(() => { });
      return openPromise;
  }

  const readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];
  const writeMethods = ['put', 'add', 'delete', 'clear'];
  const cachedMethods = new Map();
  function getMethod(target, prop) {
      if (!(target instanceof IDBDatabase &&
          !(prop in target) &&
          typeof prop === 'string')) {
          return;
      }
      if (cachedMethods.get(prop))
          return cachedMethods.get(prop);
      const targetFuncName = prop.replace(/FromIndex$/, '');
      const useIndex = prop !== targetFuncName;
      const isWrite = writeMethods.includes(targetFuncName);
      if (
      // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
      !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||
          !(isWrite || readMethods.includes(targetFuncName))) {
          return;
      }
      const method = async function (storeName, ...args) {
          // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(
          const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');
          let target = tx.store;
          if (useIndex)
              target = target.index(args.shift());
          // Must reject if op rejects.
          // If it's a write operation, must reject if tx.done rejects.
          // Must reject with op rejection first.
          // Must resolve with op value.
          // Must handle both promises (no unhandled rejections)
          return (await Promise.all([
              target[targetFuncName](...args),
              isWrite && tx.done,
          ]))[0];
      };
      cachedMethods.set(prop, method);
      return method;
  }
  replaceTraps((oldTraps) => ({
      ...oldTraps,
      get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),
      has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),
  }));

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class PlatformLoggerServiceImpl {
      constructor(container) {
          this.container = container;
      }
      // In initial implementation, this will be called by installations on
      // auth token refresh, and installations will send this string.
      getPlatformInfoString() {
          const providers = this.container.getProviders();
          // Loop through providers and get library/version pairs from any that are
          // version components.
          return providers
              .map(provider => {
              if (isVersionServiceProvider(provider)) {
                  const service = provider.getImmediate();
                  return `${service.library}/${service.version}`;
              }
              else {
                  return null;
              }
          })
              .filter(logString => logString)
              .join(' ');
      }
  }
  /**
   *
   * @param provider check if this provider provides a VersionService
   *
   * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
   * provides VersionService. The provider is not necessarily a 'app-version'
   * provider.
   */
  function isVersionServiceProvider(provider) {
      const component = provider.getComponent();
      return (component === null || component === undefined ? undefined : component.type) === "VERSION" /* ComponentType.VERSION */;
  }

  const name$q = "@firebase/app";
  const version$1$1 = "0.10.18";

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const logger$1 = new Logger$2('@firebase/app');

  const name$p = "@firebase/app-compat";

  const name$o = "@firebase/analytics-compat";

  const name$n = "@firebase/analytics";

  const name$m = "@firebase/app-check-compat";

  const name$l = "@firebase/app-check";

  const name$k = "@firebase/auth";

  const name$j = "@firebase/auth-compat";

  const name$i = "@firebase/database";

  const name$h = "@firebase/data-connect";

  const name$g = "@firebase/database-compat";

  const name$f = "@firebase/functions";

  const name$e = "@firebase/functions-compat";

  const name$d = "@firebase/installations";

  const name$c = "@firebase/installations-compat";

  const name$b = "@firebase/messaging";

  const name$a = "@firebase/messaging-compat";

  const name$9 = "@firebase/performance";

  const name$8 = "@firebase/performance-compat";

  const name$7 = "@firebase/remote-config";

  const name$6 = "@firebase/remote-config-compat";

  const name$5 = "@firebase/storage";

  const name$4 = "@firebase/storage-compat";

  const name$3 = "@firebase/firestore";

  const name$2$1 = "@firebase/vertexai";

  const name$1$1 = "@firebase/firestore-compat";

  const name$r = "firebase";
  const version$4 = "11.2.0";

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * The default app name
   *
   * @internal
   */
  const DEFAULT_ENTRY_NAME = '[DEFAULT]';
  const PLATFORM_LOG_STRING = {
      [name$q]: 'fire-core',
      [name$p]: 'fire-core-compat',
      [name$n]: 'fire-analytics',
      [name$o]: 'fire-analytics-compat',
      [name$l]: 'fire-app-check',
      [name$m]: 'fire-app-check-compat',
      [name$k]: 'fire-auth',
      [name$j]: 'fire-auth-compat',
      [name$i]: 'fire-rtdb',
      [name$h]: 'fire-data-connect',
      [name$g]: 'fire-rtdb-compat',
      [name$f]: 'fire-fn',
      [name$e]: 'fire-fn-compat',
      [name$d]: 'fire-iid',
      [name$c]: 'fire-iid-compat',
      [name$b]: 'fire-fcm',
      [name$a]: 'fire-fcm-compat',
      [name$9]: 'fire-perf',
      [name$8]: 'fire-perf-compat',
      [name$7]: 'fire-rc',
      [name$6]: 'fire-rc-compat',
      [name$5]: 'fire-gcs',
      [name$4]: 'fire-gcs-compat',
      [name$3]: 'fire-fst',
      [name$1$1]: 'fire-fst-compat',
      [name$2$1]: 'fire-vertex',
      'fire-js': 'fire-js', // Platform identifier for JS SDK.
      [name$r]: 'fire-js-all'
  };

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @internal
   */
  const _apps = new Map();
  /**
   * @internal
   */
  const _serverApps = new Map();
  /**
   * Registered components.
   *
   * @internal
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const _components = new Map();
  /**
   * @param component - the component being added to this app's container
   *
   * @internal
   */
  function _addComponent(app, component) {
      try {
          app.container.addComponent(component);
      }
      catch (e) {
          logger$1.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);
      }
  }
  /**
   *
   * @param component - the component to register
   * @returns whether or not the component is registered successfully
   *
   * @internal
   */
  function _registerComponent(component) {
      const componentName = component.name;
      if (_components.has(componentName)) {
          logger$1.debug(`There were multiple attempts to register component ${componentName}.`);
          return false;
      }
      _components.set(componentName, component);
      // add the component to existing app instances
      for (const app of _apps.values()) {
          _addComponent(app, component);
      }
      for (const serverApp of _serverApps.values()) {
          _addComponent(serverApp, component);
      }
      return true;
  }
  /**
   *
   * @param app - FirebaseApp instance
   * @param name - service name
   *
   * @returns the provider for the service with the matching name
   *
   * @internal
   */
  function _getProvider(app, name) {
      const heartbeatController = app.container
          .getProvider('heartbeat')
          .getImmediate({ optional: true });
      if (heartbeatController) {
          void heartbeatController.triggerHeartbeat();
      }
      return app.container.getProvider(name);
  }
  /**
   *
   * @param obj - an object of type FirebaseApp.
   *
   * @returns true if the provided object is of type FirebaseServerAppImpl.
   *
   * @internal
   */
  function _isFirebaseServerApp(obj) {
      return obj.settings !== undefined;
  }

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const ERRORS = {
      ["no-app" /* AppError.NO_APP */]: "No Firebase App '{$appName}' has been created - " +
          'call initializeApp() first',
      ["bad-app-name" /* AppError.BAD_APP_NAME */]: "Illegal App name: '{$appName}'",
      ["duplicate-app" /* AppError.DUPLICATE_APP */]: "Firebase App named '{$appName}' already exists with different options or config",
      ["app-deleted" /* AppError.APP_DELETED */]: "Firebase App named '{$appName}' already deleted",
      ["server-app-deleted" /* AppError.SERVER_APP_DELETED */]: 'Firebase Server App has been deleted',
      ["no-options" /* AppError.NO_OPTIONS */]: 'Need to provide options, when not being deployed to hosting via source.',
      ["invalid-app-argument" /* AppError.INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +
          'Firebase App instance.',
      ["invalid-log-argument" /* AppError.INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',
      ["idb-open" /* AppError.IDB_OPEN */]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',
      ["idb-get" /* AppError.IDB_GET */]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',
      ["idb-set" /* AppError.IDB_WRITE */]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',
      ["idb-delete" /* AppError.IDB_DELETE */]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.',
      ["finalization-registry-not-supported" /* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */]: 'FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.',
      ["invalid-server-app-environment" /* AppError.INVALID_SERVER_APP_ENVIRONMENT */]: 'FirebaseServerApp is not for use in browser environments.'
  };
  const ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class FirebaseAppImpl {
      constructor(options, config, container) {
          this._isDeleted = false;
          this._options = Object.assign({}, options);
          this._config = Object.assign({}, config);
          this._name = config.name;
          this._automaticDataCollectionEnabled =
              config.automaticDataCollectionEnabled;
          this._container = container;
          this.container.addComponent(new Component('app', () => this, "PUBLIC" /* ComponentType.PUBLIC */));
      }
      get automaticDataCollectionEnabled() {
          this.checkDestroyed();
          return this._automaticDataCollectionEnabled;
      }
      set automaticDataCollectionEnabled(val) {
          this.checkDestroyed();
          this._automaticDataCollectionEnabled = val;
      }
      get name() {
          this.checkDestroyed();
          return this._name;
      }
      get options() {
          this.checkDestroyed();
          return this._options;
      }
      get config() {
          this.checkDestroyed();
          return this._config;
      }
      get container() {
          return this._container;
      }
      get isDeleted() {
          return this._isDeleted;
      }
      set isDeleted(val) {
          this._isDeleted = val;
      }
      /**
       * This function will throw an Error if the App has already been deleted -
       * use before performing API actions on the App.
       */
      checkDestroyed() {
          if (this.isDeleted) {
              throw ERROR_FACTORY.create("app-deleted" /* AppError.APP_DELETED */, { appName: this._name });
          }
      }
  }

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * The current SDK version.
   *
   * @public
   */
  const SDK_VERSION$1 = version$4;
  function initializeApp(_options, rawConfig = {}) {
      let options = _options;
      if (typeof rawConfig !== 'object') {
          const name = rawConfig;
          rawConfig = { name };
      }
      const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);
      const name = config.name;
      if (typeof name !== 'string' || !name) {
          throw ERROR_FACTORY.create("bad-app-name" /* AppError.BAD_APP_NAME */, {
              appName: String(name)
          });
      }
      options || (options = getDefaultAppConfig());
      if (!options) {
          throw ERROR_FACTORY.create("no-options" /* AppError.NO_OPTIONS */);
      }
      const existingApp = _apps.get(name);
      if (existingApp) {
          // return the existing app if options and config deep equal the ones in the existing app.
          if (deepEqual(options, existingApp.options) &&
              deepEqual(config, existingApp.config)) {
              return existingApp;
          }
          else {
              throw ERROR_FACTORY.create("duplicate-app" /* AppError.DUPLICATE_APP */, { appName: name });
          }
      }
      const container = new ComponentContainer(name);
      for (const component of _components.values()) {
          container.addComponent(component);
      }
      const newApp = new FirebaseAppImpl(options, config, container);
      _apps.set(name, newApp);
      return newApp;
  }
  /**
   * Retrieves a {@link @firebase/app#FirebaseApp} instance.
   *
   * When called with no arguments, the default app is returned. When an app name
   * is provided, the app corresponding to that name is returned.
   *
   * An exception is thrown if the app being retrieved has not yet been
   * initialized.
   *
   * @example
   * ```javascript
   * // Return the default app
   * const app = getApp();
   * ```
   *
   * @example
   * ```javascript
   * // Return a named app
   * const otherApp = getApp("otherApp");
   * ```
   *
   * @param name - Optional name of the app to return. If no name is
   *   provided, the default is `"[DEFAULT]"`.
   *
   * @returns The app corresponding to the provided app name.
   *   If no app name is provided, the default app is returned.
   *
   * @public
   */
  function getApp(name = DEFAULT_ENTRY_NAME) {
      const app = _apps.get(name);
      if (!app && name === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {
          return initializeApp();
      }
      if (!app) {
          throw ERROR_FACTORY.create("no-app" /* AppError.NO_APP */, { appName: name });
      }
      return app;
  }
  /**
   * Registers a library's name and version for platform logging purposes.
   * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)
   * @param version - Current version of that library.
   * @param variant - Bundle variant, e.g., node, rn, etc.
   *
   * @public
   */
  function registerVersion(libraryKeyOrName, version, variant) {
      var _a;
      // TODO: We can use this check to whitelist strings when/if we set up
      // a good whitelist system.
      let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== undefined ? _a : libraryKeyOrName;
      if (variant) {
          library += `-${variant}`;
      }
      const libraryMismatch = library.match(/\s|\//);
      const versionMismatch = version.match(/\s|\//);
      if (libraryMismatch || versionMismatch) {
          const warning = [
              `Unable to register library "${library}" with version "${version}":`
          ];
          if (libraryMismatch) {
              warning.push(`library name "${library}" contains illegal characters (whitespace or "/")`);
          }
          if (libraryMismatch && versionMismatch) {
              warning.push('and');
          }
          if (versionMismatch) {
              warning.push(`version name "${version}" contains illegal characters (whitespace or "/")`);
          }
          logger$1.warn(warning.join(' '));
          return;
      }
      _registerComponent(new Component(`${library}-version`, () => ({ library, version }), "VERSION" /* ComponentType.VERSION */));
  }

  /**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const DB_NAME$1 = 'firebase-heartbeat-database';
  const DB_VERSION$1 = 1;
  const STORE_NAME = 'firebase-heartbeat-store';
  let dbPromise = null;
  function getDbPromise() {
      if (!dbPromise) {
          dbPromise = openDB$1(DB_NAME$1, DB_VERSION$1, {
              upgrade: (db, oldVersion) => {
                  // We don't use 'break' in this switch statement, the fall-through
                  // behavior is what we want, because if there are multiple versions between
                  // the old version and the current version, we want ALL the migrations
                  // that correspond to those versions to run, not only the last one.
                  // eslint-disable-next-line default-case
                  switch (oldVersion) {
                      case 0:
                          try {
                              db.createObjectStore(STORE_NAME);
                          }
                          catch (e) {
                              // Safari/iOS browsers throw occasional exceptions on
                              // db.createObjectStore() that may be a bug. Avoid blocking
                              // the rest of the app functionality.
                              console.warn(e);
                          }
                  }
              }
          }).catch(e => {
              throw ERROR_FACTORY.create("idb-open" /* AppError.IDB_OPEN */, {
                  originalErrorMessage: e.message
              });
          });
      }
      return dbPromise;
  }
  async function readHeartbeatsFromIndexedDB(app) {
      try {
          const db = await getDbPromise();
          const tx = db.transaction(STORE_NAME);
          const result = await tx.objectStore(STORE_NAME).get(computeKey(app));
          // We already have the value but tx.done can throw,
          // so we need to await it here to catch errors
          await tx.done;
          return result;
      }
      catch (e) {
          if (e instanceof FirebaseError) {
              logger$1.warn(e.message);
          }
          else {
              const idbGetError = ERROR_FACTORY.create("idb-get" /* AppError.IDB_GET */, {
                  originalErrorMessage: e === null || e === undefined ? undefined : e.message
              });
              logger$1.warn(idbGetError.message);
          }
      }
  }
  async function writeHeartbeatsToIndexedDB(app, heartbeatObject) {
      try {
          const db = await getDbPromise();
          const tx = db.transaction(STORE_NAME, 'readwrite');
          const objectStore = tx.objectStore(STORE_NAME);
          await objectStore.put(heartbeatObject, computeKey(app));
          await tx.done;
      }
      catch (e) {
          if (e instanceof FirebaseError) {
              logger$1.warn(e.message);
          }
          else {
              const idbGetError = ERROR_FACTORY.create("idb-set" /* AppError.IDB_WRITE */, {
                  originalErrorMessage: e === null || e === undefined ? undefined : e.message
              });
              logger$1.warn(idbGetError.message);
          }
      }
  }
  function computeKey(app) {
      return `${app.name}!${app.options.appId}`;
  }

  /**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const MAX_HEADER_BYTES = 1024;
  // 30 days
  const STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;
  class HeartbeatServiceImpl {
      constructor(container) {
          this.container = container;
          /**
           * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate
           * the header string.
           * Stores one record per date. This will be consolidated into the standard
           * format of one record per user agent string before being sent as a header.
           * Populated from indexedDB when the controller is instantiated and should
           * be kept in sync with indexedDB.
           * Leave public for easier testing.
           */
          this._heartbeatsCache = null;
          const app = this.container.getProvider('app').getImmediate();
          this._storage = new HeartbeatStorageImpl(app);
          this._heartbeatsCachePromise = this._storage.read().then(result => {
              this._heartbeatsCache = result;
              return result;
          });
      }
      /**
       * Called to report a heartbeat. The function will generate
       * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it
       * to IndexedDB.
       * Note that we only store one heartbeat per day. So if a heartbeat for today is
       * already logged, subsequent calls to this function in the same day will be ignored.
       */
      async triggerHeartbeat() {
          var _a, _b;
          try {
              const platformLogger = this.container
                  .getProvider('platform-logger')
                  .getImmediate();
              // This is the "Firebase user agent" string from the platform logger
              // service, not the browser user agent.
              const agent = platformLogger.getPlatformInfoString();
              const date = getUTCDateString();
              if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null) {
                  this._heartbeatsCache = await this._heartbeatsCachePromise;
                  // If we failed to construct a heartbeats cache, then return immediately.
                  if (((_b = this._heartbeatsCache) === null || _b === void 0 ? void 0 : _b.heartbeats) == null) {
                      return;
                  }
              }
              // Do not store a heartbeat if one is already stored for this day
              // or if a header has already been sent today.
              if (this._heartbeatsCache.lastSentHeartbeatDate === date ||
                  this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {
                  return;
              }
              else {
                  // There is no entry for this date. Create one.
                  this._heartbeatsCache.heartbeats.push({ date, agent });
              }
              // Remove entries older than 30 days.
              this._heartbeatsCache.heartbeats =
                  this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {
                      const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();
                      const now = Date.now();
                      return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;
                  });
              return this._storage.overwrite(this._heartbeatsCache);
          }
          catch (e) {
              logger$1.warn(e);
          }
      }
      /**
       * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.
       * It also clears all heartbeats from memory as well as in IndexedDB.
       *
       * NOTE: Consuming product SDKs should not send the header if this method
       * returns an empty string.
       */
      async getHeartbeatsHeader() {
          var _a;
          try {
              if (this._heartbeatsCache === null) {
                  await this._heartbeatsCachePromise;
              }
              // If it's still null or the array is empty, there is no data to send.
              if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null ||
                  this._heartbeatsCache.heartbeats.length === 0) {
                  return '';
              }
              const date = getUTCDateString();
              // Extract as many heartbeats from the cache as will fit under the size limit.
              const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);
              const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));
              // Store last sent date to prevent another being logged/sent for the same day.
              this._heartbeatsCache.lastSentHeartbeatDate = date;
              if (unsentEntries.length > 0) {
                  // Store any unsent entries if they exist.
                  this._heartbeatsCache.heartbeats = unsentEntries;
                  // This seems more likely than emptying the array (below) to lead to some odd state
                  // since the cache isn't empty and this will be called again on the next request,
                  // and is probably safest if we await it.
                  await this._storage.overwrite(this._heartbeatsCache);
              }
              else {
                  this._heartbeatsCache.heartbeats = [];
                  // Do not wait for this, to reduce latency.
                  void this._storage.overwrite(this._heartbeatsCache);
              }
              return headerString;
          }
          catch (e) {
              logger$1.warn(e);
              return '';
          }
      }
  }
  function getUTCDateString() {
      const today = new Date();
      // Returns date format 'YYYY-MM-DD'
      return today.toISOString().substring(0, 10);
  }
  function extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {
      // Heartbeats grouped by user agent in the standard format to be sent in
      // the header.
      const heartbeatsToSend = [];
      // Single date format heartbeats that are not sent.
      let unsentEntries = heartbeatsCache.slice();
      for (const singleDateHeartbeat of heartbeatsCache) {
          // Look for an existing entry with the same user agent.
          const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);
          if (!heartbeatEntry) {
              // If no entry for this user agent exists, create one.
              heartbeatsToSend.push({
                  agent: singleDateHeartbeat.agent,
                  dates: [singleDateHeartbeat.date]
              });
              if (countBytes(heartbeatsToSend) > maxSize) {
                  // If the header would exceed max size, remove the added heartbeat
                  // entry and stop adding to the header.
                  heartbeatsToSend.pop();
                  break;
              }
          }
          else {
              heartbeatEntry.dates.push(singleDateHeartbeat.date);
              // If the header would exceed max size, remove the added date
              // and stop adding to the header.
              if (countBytes(heartbeatsToSend) > maxSize) {
                  heartbeatEntry.dates.pop();
                  break;
              }
          }
          // Pop unsent entry from queue. (Skipped if adding the entry exceeded
          // quota and the loop breaks early.)
          unsentEntries = unsentEntries.slice(1);
      }
      return {
          heartbeatsToSend,
          unsentEntries
      };
  }
  class HeartbeatStorageImpl {
      constructor(app) {
          this.app = app;
          this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();
      }
      async runIndexedDBEnvironmentCheck() {
          if (!isIndexedDBAvailable()) {
              return false;
          }
          else {
              return validateIndexedDBOpenable()
                  .then(() => true)
                  .catch(() => false);
          }
      }
      /**
       * Read all heartbeats.
       */
      async read() {
          const canUseIndexedDB = await this._canUseIndexedDBPromise;
          if (!canUseIndexedDB) {
              return { heartbeats: [] };
          }
          else {
              const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);
              if (idbHeartbeatObject === null || idbHeartbeatObject === undefined ? undefined : idbHeartbeatObject.heartbeats) {
                  return idbHeartbeatObject;
              }
              else {
                  return { heartbeats: [] };
              }
          }
      }
      // overwrite the storage with the provided heartbeats
      async overwrite(heartbeatsObject) {
          var _a;
          const canUseIndexedDB = await this._canUseIndexedDBPromise;
          if (!canUseIndexedDB) {
              return;
          }
          else {
              const existingHeartbeatsObject = await this.read();
              return writeHeartbeatsToIndexedDB(this.app, {
                  lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== undefined ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
                  heartbeats: heartbeatsObject.heartbeats
              });
          }
      }
      // add heartbeats
      async add(heartbeatsObject) {
          var _a;
          const canUseIndexedDB = await this._canUseIndexedDBPromise;
          if (!canUseIndexedDB) {
              return;
          }
          else {
              const existingHeartbeatsObject = await this.read();
              return writeHeartbeatsToIndexedDB(this.app, {
                  lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== undefined ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
                  heartbeats: [
                      ...existingHeartbeatsObject.heartbeats,
                      ...heartbeatsObject.heartbeats
                  ]
              });
          }
      }
  }
  /**
   * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped
   * in a platform logging header JSON object, stringified, and converted
   * to base 64.
   */
  function countBytes(heartbeatsCache) {
      // base64 has a restricted set of characters, all of which should be 1 byte.
      return base64urlEncodeWithoutPadding(
      // heartbeatsCache wrapper properties
      JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;
  }

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function registerCoreComponents(variant) {
      _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), "PRIVATE" /* ComponentType.PRIVATE */));
      _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), "PRIVATE" /* ComponentType.PRIVATE */));
      // Register `app` package.
      registerVersion(name$q, version$1$1, variant);
      // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation
      registerVersion(name$q, version$1$1, 'esm2017');
      // Register platform SDK identifier (no version).
      registerVersion('fire-js', '');
  }

  /**
   * Firebase App
   *
   * @remarks This package coordinates the communication between the different Firebase components
   * @packageDocumentation
   */
  registerCoreComponents('');

  var name$2 = "firebase";
  var version$3 = "11.2.0";

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  registerVersion(name$2, version$3, 'app');

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A container for all of the Logger instances
   */
  /**
   * The JS SDK supports 5 log levels and also allows a user the ability to
   * silence the logs altogether.
   *
   * The order is a follows:
   * DEBUG < VERBOSE < INFO < WARN < ERROR
   *
   * All of the log types above the current log level will be captured (i.e. if
   * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
   * `VERBOSE` logs will not)
   */
  var LogLevel$1;
  (function (LogLevel) {
      LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
      LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
      LogLevel[LogLevel["INFO"] = 2] = "INFO";
      LogLevel[LogLevel["WARN"] = 3] = "WARN";
      LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
      LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
  })(LogLevel$1 || (LogLevel$1 = {}));
  const levelStringToEnum$1 = {
      'debug': LogLevel$1.DEBUG,
      'verbose': LogLevel$1.VERBOSE,
      'info': LogLevel$1.INFO,
      'warn': LogLevel$1.WARN,
      'error': LogLevel$1.ERROR,
      'silent': LogLevel$1.SILENT
  };
  /**
   * The default log level
   */
  const defaultLogLevel$1 = LogLevel$1.INFO;
  /**
   * By default, `console.debug` is not displayed in the developer console (in
   * chrome). To avoid forcing users to have to opt-in to these logs twice
   * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
   * logs to the `console.log` function.
   */
  const ConsoleMethod$1 = {
      [LogLevel$1.DEBUG]: 'log',
      [LogLevel$1.VERBOSE]: 'log',
      [LogLevel$1.INFO]: 'info',
      [LogLevel$1.WARN]: 'warn',
      [LogLevel$1.ERROR]: 'error'
  };
  /**
   * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
   * messages on to their corresponding console counterparts (if the log method
   * is supported by the current log level)
   */
  const defaultLogHandler$1 = (instance, logType, ...args) => {
      if (logType < instance.logLevel) {
          return;
      }
      const now = new Date().toISOString();
      const method = ConsoleMethod$1[logType];
      if (method) {
          console[method](`[${now}]  ${instance.name}:`, ...args);
      }
      else {
          throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);
      }
  };
  let Logger$1 = class Logger {
      /**
       * Gives you an instance of a Logger to capture messages according to
       * Firebase's logging scheme.
       *
       * @param name The name that the logs will be associated with
       */
      constructor(name) {
          this.name = name;
          /**
           * The log level of the given Logger instance.
           */
          this._logLevel = defaultLogLevel$1;
          /**
           * The main (internal) log handler for the Logger instance.
           * Can be set to a new function in internal package code but not by user.
           */
          this._logHandler = defaultLogHandler$1;
          /**
           * The optional, additional, user-defined log handler for the Logger instance.
           */
          this._userLogHandler = null;
      }
      get logLevel() {
          return this._logLevel;
      }
      set logLevel(val) {
          if (!(val in LogLevel$1)) {
              throw new TypeError(`Invalid value "${val}" assigned to \`logLevel\``);
          }
          this._logLevel = val;
      }
      // Workaround for setter/getter having to be the same type.
      setLogLevel(val) {
          this._logLevel = typeof val === 'string' ? levelStringToEnum$1[val] : val;
      }
      get logHandler() {
          return this._logHandler;
      }
      set logHandler(val) {
          if (typeof val !== 'function') {
              throw new TypeError('Value assigned to `logHandler` must be a function');
          }
          this._logHandler = val;
      }
      get userLogHandler() {
          return this._userLogHandler;
      }
      set userLogHandler(val) {
          this._userLogHandler = val;
      }
      /**
       * The functions below are all based on the `console` interface
       */
      debug(...args) {
          this._userLogHandler && this._userLogHandler(this, LogLevel$1.DEBUG, ...args);
          this._logHandler(this, LogLevel$1.DEBUG, ...args);
      }
      log(...args) {
          this._userLogHandler &&
              this._userLogHandler(this, LogLevel$1.VERBOSE, ...args);
          this._logHandler(this, LogLevel$1.VERBOSE, ...args);
      }
      info(...args) {
          this._userLogHandler && this._userLogHandler(this, LogLevel$1.INFO, ...args);
          this._logHandler(this, LogLevel$1.INFO, ...args);
      }
      warn(...args) {
          this._userLogHandler && this._userLogHandler(this, LogLevel$1.WARN, ...args);
          this._logHandler(this, LogLevel$1.WARN, ...args);
      }
      error(...args) {
          this._userLogHandler && this._userLogHandler(this, LogLevel$1.ERROR, ...args);
          this._logHandler(this, LogLevel$1.ERROR, ...args);
      }
  };

  /******************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  /* global Reflect, Promise, SuppressedError, Symbol, Iterator */


  function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
  }

  typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
  };

  function _prodErrorMap() {
      // We will include this one message in the prod error map since by the very
      // nature of this error, developers will never be able to see the message
      // using the debugErrorMap (which is installed during auth initialization).
      return {
          ["dependent-sdk-initialized-before-auth" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +
              'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +
              'starting any other Firebase SDK.'
      };
  }
  /**
   * A minimal error map with all verbose error messages stripped.
   *
   * See discussion at {@link AuthErrorMap}
   *
   * @public
   */
  const prodErrorMap = _prodErrorMap;
  const _DEFAULT_AUTH_ERROR_FACTORY = new ErrorFactory('auth', 'Firebase', _prodErrorMap());

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const logClient$1 = new Logger$1('@firebase/auth');
  function _logWarn(msg, ...args) {
      if (logClient$1.logLevel <= LogLevel$1.WARN) {
          logClient$1.warn(`Auth (${SDK_VERSION$1}): ${msg}`, ...args);
      }
  }
  function _logError(msg, ...args) {
      if (logClient$1.logLevel <= LogLevel$1.ERROR) {
          logClient$1.error(`Auth (${SDK_VERSION$1}): ${msg}`, ...args);
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function _fail(authOrCode, ...rest) {
      throw createErrorInternal(authOrCode, ...rest);
  }
  function _createError(authOrCode, ...rest) {
      return createErrorInternal(authOrCode, ...rest);
  }
  function _errorWithCustomMessage(auth, code, message) {
      const errorMap = Object.assign(Object.assign({}, prodErrorMap()), { [code]: message });
      const factory = new ErrorFactory('auth', 'Firebase', errorMap);
      return factory.create(code, {
          appName: auth.name
      });
  }
  function _serverAppCurrentUserOperationNotSupportedError(auth) {
      return _errorWithCustomMessage(auth, "operation-not-supported-in-this-environment" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */, 'Operations that alter the current user are not supported in conjunction with FirebaseServerApp');
  }
  function createErrorInternal(authOrCode, ...rest) {
      if (typeof authOrCode !== 'string') {
          const code = rest[0];
          const fullParams = [...rest.slice(1)];
          if (fullParams[0]) {
              fullParams[0].appName = authOrCode.name;
          }
          return authOrCode._errorFactory.create(code, ...fullParams);
      }
      return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);
  }
  function _assert(assertion, authOrCode, ...rest) {
      if (!assertion) {
          throw createErrorInternal(authOrCode, ...rest);
      }
  }
  /**
   * Unconditionally fails, throwing an internal error with the given message.
   *
   * @param failure type of failure encountered
   * @throws Error
   */
  function debugFail(failure) {
      // Log the failure in addition to throw an exception, just in case the
      // exception is swallowed.
      const message = `INTERNAL ASSERTION FAILED: ` + failure;
      _logError(message);
      // NOTE: We don't use FirebaseError here because these are internal failures
      // that cannot be handled by the user. (Also it would create a circular
      // dependency between the error and assert modules which doesn't work.)
      throw new Error(message);
  }
  /**
   * Fails if the given assertion condition is false, throwing an Error with the
   * given message if it did.
   *
   * @param assertion
   * @param message
   */
  function debugAssert(assertion, message) {
      if (!assertion) {
          debugFail(message);
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function _getCurrentUrl() {
      var _a;
      return (typeof self !== 'undefined' && ((_a = self.location) === null || _a === undefined ? undefined : _a.href)) || '';
  }
  function _isHttpOrHttps() {
      return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';
  }
  function _getCurrentScheme() {
      var _a;
      return (typeof self !== 'undefined' && ((_a = self.location) === null || _a === undefined ? undefined : _a.protocol)) || null;
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Determine whether the browser is working online
   */
  function _isOnline() {
      if (typeof navigator !== 'undefined' &&
          navigator &&
          'onLine' in navigator &&
          typeof navigator.onLine === 'boolean' &&
          // Apply only for traditional web apps and Chrome extensions.
          // This is especially true for Cordova apps which have unreliable
          // navigator.onLine behavior unless cordova-plugin-network-information is
          // installed which overwrites the native navigator.onLine value and
          // defines navigator.connection.
          (_isHttpOrHttps() || isBrowserExtension() || 'connection' in navigator)) {
          return navigator.onLine;
      }
      // If we can't determine the state, assume it is online.
      return true;
  }
  function _getUserLanguage() {
      if (typeof navigator === 'undefined') {
          return null;
      }
      const navigatorLanguage = navigator;
      return (
      // Most reliable, but only supported in Chrome/Firefox.
      (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||
          // Supported in most browsers, but returns the language of the browser
          // UI, not the language set in browser settings.
          navigatorLanguage.language ||
          // Couldn't determine language.
          null);
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A structure to help pick between a range of long and short delay durations
   * depending on the current environment. In general, the long delay is used for
   * mobile environments whereas short delays are used for desktop environments.
   */
  class Delay {
      constructor(shortDelay, longDelay) {
          this.shortDelay = shortDelay;
          this.longDelay = longDelay;
          // Internal error when improperly initialized.
          debugAssert(longDelay > shortDelay, 'Short delay should be less than long delay!');
          this.isMobile = isMobileCordova() || isReactNative();
      }
      get() {
          if (!_isOnline()) {
              // Pick the shorter timeout.
              return Math.min(5000 /* DelayMin.OFFLINE */, this.shortDelay);
          }
          // If running in a mobile environment, return the long delay, otherwise
          // return the short delay.
          // This could be improved in the future to dynamically change based on other
          // variables instead of just reading the current environment.
          return this.isMobile ? this.longDelay : this.shortDelay;
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function _emulatorUrl(config, path) {
      debugAssert(config.emulator, 'Emulator should always be set here');
      const { url } = config.emulator;
      if (!path) {
          return url;
      }
      return `${url}${path.startsWith('/') ? path.slice(1) : path}`;
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class FetchProvider {
      static initialize(fetchImpl, headersImpl, responseImpl) {
          this.fetchImpl = fetchImpl;
          if (headersImpl) {
              this.headersImpl = headersImpl;
          }
          if (responseImpl) {
              this.responseImpl = responseImpl;
          }
      }
      static fetch() {
          if (this.fetchImpl) {
              return this.fetchImpl;
          }
          if (typeof self !== 'undefined' && 'fetch' in self) {
              return self.fetch;
          }
          if (typeof globalThis !== 'undefined' && globalThis.fetch) {
              return globalThis.fetch;
          }
          if (typeof fetch !== 'undefined') {
              return fetch;
          }
          debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
      }
      static headers() {
          if (this.headersImpl) {
              return this.headersImpl;
          }
          if (typeof self !== 'undefined' && 'Headers' in self) {
              return self.Headers;
          }
          if (typeof globalThis !== 'undefined' && globalThis.Headers) {
              return globalThis.Headers;
          }
          if (typeof Headers !== 'undefined') {
              return Headers;
          }
          debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
      }
      static response() {
          if (this.responseImpl) {
              return this.responseImpl;
          }
          if (typeof self !== 'undefined' && 'Response' in self) {
              return self.Response;
          }
          if (typeof globalThis !== 'undefined' && globalThis.Response) {
              return globalThis.Response;
          }
          if (typeof Response !== 'undefined') {
              return Response;
          }
          debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Map from errors returned by the server to errors to developer visible errors
   */
  const SERVER_ERROR_MAP = {
      // Custom token errors.
      ["CREDENTIAL_MISMATCH" /* ServerError.CREDENTIAL_MISMATCH */]: "custom-token-mismatch" /* AuthErrorCode.CREDENTIAL_MISMATCH */,
      // This can only happen if the SDK sends a bad request.
      ["MISSING_CUSTOM_TOKEN" /* ServerError.MISSING_CUSTOM_TOKEN */]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */,
      // Create Auth URI errors.
      ["INVALID_IDENTIFIER" /* ServerError.INVALID_IDENTIFIER */]: "invalid-email" /* AuthErrorCode.INVALID_EMAIL */,
      // This can only happen if the SDK sends a bad request.
      ["MISSING_CONTINUE_URI" /* ServerError.MISSING_CONTINUE_URI */]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */,
      // Sign in with email and password errors (some apply to sign up too).
      ["INVALID_PASSWORD" /* ServerError.INVALID_PASSWORD */]: "wrong-password" /* AuthErrorCode.INVALID_PASSWORD */,
      // This can only happen if the SDK sends a bad request.
      ["MISSING_PASSWORD" /* ServerError.MISSING_PASSWORD */]: "missing-password" /* AuthErrorCode.MISSING_PASSWORD */,
      // Thrown if Email Enumeration Protection is enabled in the project and the email or password is
      // invalid.
      ["INVALID_LOGIN_CREDENTIALS" /* ServerError.INVALID_LOGIN_CREDENTIALS */]: "invalid-credential" /* AuthErrorCode.INVALID_CREDENTIAL */,
      // Sign up with email and password errors.
      ["EMAIL_EXISTS" /* ServerError.EMAIL_EXISTS */]: "email-already-in-use" /* AuthErrorCode.EMAIL_EXISTS */,
      ["PASSWORD_LOGIN_DISABLED" /* ServerError.PASSWORD_LOGIN_DISABLED */]: "operation-not-allowed" /* AuthErrorCode.OPERATION_NOT_ALLOWED */,
      // Verify assertion for sign in with credential errors:
      ["INVALID_IDP_RESPONSE" /* ServerError.INVALID_IDP_RESPONSE */]: "invalid-credential" /* AuthErrorCode.INVALID_CREDENTIAL */,
      ["INVALID_PENDING_TOKEN" /* ServerError.INVALID_PENDING_TOKEN */]: "invalid-credential" /* AuthErrorCode.INVALID_CREDENTIAL */,
      ["FEDERATED_USER_ID_ALREADY_LINKED" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */]: "credential-already-in-use" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */,
      // This can only happen if the SDK sends a bad request.
      ["MISSING_REQ_TYPE" /* ServerError.MISSING_REQ_TYPE */]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */,
      // Send Password reset email errors:
      ["EMAIL_NOT_FOUND" /* ServerError.EMAIL_NOT_FOUND */]: "user-not-found" /* AuthErrorCode.USER_DELETED */,
      ["RESET_PASSWORD_EXCEED_LIMIT" /* ServerError.RESET_PASSWORD_EXCEED_LIMIT */]: "too-many-requests" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,
      ["EXPIRED_OOB_CODE" /* ServerError.EXPIRED_OOB_CODE */]: "expired-action-code" /* AuthErrorCode.EXPIRED_OOB_CODE */,
      ["INVALID_OOB_CODE" /* ServerError.INVALID_OOB_CODE */]: "invalid-action-code" /* AuthErrorCode.INVALID_OOB_CODE */,
      // This can only happen if the SDK sends a bad request.
      ["MISSING_OOB_CODE" /* ServerError.MISSING_OOB_CODE */]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */,
      // Operations that require ID token in request:
      ["CREDENTIAL_TOO_OLD_LOGIN_AGAIN" /* ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: "requires-recent-login" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */,
      ["INVALID_ID_TOKEN" /* ServerError.INVALID_ID_TOKEN */]: "invalid-user-token" /* AuthErrorCode.INVALID_AUTH */,
      ["TOKEN_EXPIRED" /* ServerError.TOKEN_EXPIRED */]: "user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */,
      ["USER_NOT_FOUND" /* ServerError.USER_NOT_FOUND */]: "user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */,
      // Other errors.
      ["TOO_MANY_ATTEMPTS_TRY_LATER" /* ServerError.TOO_MANY_ATTEMPTS_TRY_LATER */]: "too-many-requests" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */,
      ["PASSWORD_DOES_NOT_MEET_REQUIREMENTS" /* ServerError.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */]: "password-does-not-meet-requirements" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */,
      // Phone Auth related errors.
      ["INVALID_CODE" /* ServerError.INVALID_CODE */]: "invalid-verification-code" /* AuthErrorCode.INVALID_CODE */,
      ["INVALID_SESSION_INFO" /* ServerError.INVALID_SESSION_INFO */]: "invalid-verification-id" /* AuthErrorCode.INVALID_SESSION_INFO */,
      ["INVALID_TEMPORARY_PROOF" /* ServerError.INVALID_TEMPORARY_PROOF */]: "invalid-credential" /* AuthErrorCode.INVALID_CREDENTIAL */,
      ["MISSING_SESSION_INFO" /* ServerError.MISSING_SESSION_INFO */]: "missing-verification-id" /* AuthErrorCode.MISSING_SESSION_INFO */,
      ["SESSION_EXPIRED" /* ServerError.SESSION_EXPIRED */]: "code-expired" /* AuthErrorCode.CODE_EXPIRED */,
      // Other action code errors when additional settings passed.
      // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.
      // This is OK as this error will be caught by client side validation.
      ["MISSING_ANDROID_PACKAGE_NAME" /* ServerError.MISSING_ANDROID_PACKAGE_NAME */]: "missing-android-pkg-name" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */,
      ["UNAUTHORIZED_DOMAIN" /* ServerError.UNAUTHORIZED_DOMAIN */]: "unauthorized-continue-uri" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */,
      // getProjectConfig errors when clientId is passed.
      ["INVALID_OAUTH_CLIENT_ID" /* ServerError.INVALID_OAUTH_CLIENT_ID */]: "invalid-oauth-client-id" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */,
      // User actions (sign-up or deletion) disabled errors.
      ["ADMIN_ONLY_OPERATION" /* ServerError.ADMIN_ONLY_OPERATION */]: "admin-restricted-operation" /* AuthErrorCode.ADMIN_ONLY_OPERATION */,
      // Multi factor related errors.
      ["INVALID_MFA_PENDING_CREDENTIAL" /* ServerError.INVALID_MFA_PENDING_CREDENTIAL */]: "invalid-multi-factor-session" /* AuthErrorCode.INVALID_MFA_SESSION */,
      ["MFA_ENROLLMENT_NOT_FOUND" /* ServerError.MFA_ENROLLMENT_NOT_FOUND */]: "multi-factor-info-not-found" /* AuthErrorCode.MFA_INFO_NOT_FOUND */,
      ["MISSING_MFA_ENROLLMENT_ID" /* ServerError.MISSING_MFA_ENROLLMENT_ID */]: "missing-multi-factor-info" /* AuthErrorCode.MISSING_MFA_INFO */,
      ["MISSING_MFA_PENDING_CREDENTIAL" /* ServerError.MISSING_MFA_PENDING_CREDENTIAL */]: "missing-multi-factor-session" /* AuthErrorCode.MISSING_MFA_SESSION */,
      ["SECOND_FACTOR_EXISTS" /* ServerError.SECOND_FACTOR_EXISTS */]: "second-factor-already-in-use" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */,
      ["SECOND_FACTOR_LIMIT_EXCEEDED" /* ServerError.SECOND_FACTOR_LIMIT_EXCEEDED */]: "maximum-second-factor-count-exceeded" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */,
      // Blocking functions related errors.
      ["BLOCKING_FUNCTION_ERROR_RESPONSE" /* ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE */]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */,
      // Recaptcha related errors.
      ["RECAPTCHA_NOT_ENABLED" /* ServerError.RECAPTCHA_NOT_ENABLED */]: "recaptcha-not-enabled" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */,
      ["MISSING_RECAPTCHA_TOKEN" /* ServerError.MISSING_RECAPTCHA_TOKEN */]: "missing-recaptcha-token" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */,
      ["INVALID_RECAPTCHA_TOKEN" /* ServerError.INVALID_RECAPTCHA_TOKEN */]: "invalid-recaptcha-token" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */,
      ["INVALID_RECAPTCHA_ACTION" /* ServerError.INVALID_RECAPTCHA_ACTION */]: "invalid-recaptcha-action" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */,
      ["MISSING_CLIENT_TYPE" /* ServerError.MISSING_CLIENT_TYPE */]: "missing-client-type" /* AuthErrorCode.MISSING_CLIENT_TYPE */,
      ["MISSING_RECAPTCHA_VERSION" /* ServerError.MISSING_RECAPTCHA_VERSION */]: "missing-recaptcha-version" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */,
      ["INVALID_RECAPTCHA_VERSION" /* ServerError.INVALID_RECAPTCHA_VERSION */]: "invalid-recaptcha-version" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */,
      ["INVALID_REQ_TYPE" /* ServerError.INVALID_REQ_TYPE */]: "invalid-req-type" /* AuthErrorCode.INVALID_REQ_TYPE */
  };

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);
  function _addTidIfNecessary(auth, request) {
      if (auth.tenantId && !request.tenantId) {
          return Object.assign(Object.assign({}, request), { tenantId: auth.tenantId });
      }
      return request;
  }
  async function _performApiRequest(auth, method, path, request, customErrorMap = {}) {
      return _performFetchWithErrorHandling(auth, customErrorMap, async () => {
          let body = {};
          let params = {};
          if (request) {
              if (method === "GET" /* HttpMethod.GET */) {
                  params = request;
              }
              else {
                  body = {
                      body: JSON.stringify(request)
                  };
              }
          }
          const query = querystring(Object.assign({ key: auth.config.apiKey }, params)).slice(1);
          const headers = await auth._getAdditionalHeaders();
          headers["Content-Type" /* HttpHeader.CONTENT_TYPE */] = 'application/json';
          if (auth.languageCode) {
              headers["X-Firebase-Locale" /* HttpHeader.X_FIREBASE_LOCALE */] = auth.languageCode;
          }
          const fetchArgs = Object.assign({ method,
              headers }, body);
          /* Security-conscious server-side frameworks tend to have built in mitigations for referrer
             problems". See the Cloudflare GitHub issue #487: Error: The 'referrerPolicy' field on
             'RequestInitializerDict' is not implemented."
             https://github.com/cloudflare/next-on-pages/issues/487 */
          if (!isCloudflareWorker()) {
              fetchArgs.referrerPolicy = 'no-referrer';
          }
          return FetchProvider.fetch()(_getFinalTarget(auth, auth.config.apiHost, path, query), fetchArgs);
      });
  }
  async function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {
      auth._canInitEmulator = false;
      const errorMap = Object.assign(Object.assign({}, SERVER_ERROR_MAP), customErrorMap);
      try {
          const networkTimeout = new NetworkTimeout(auth);
          const response = await Promise.race([
              fetchFn(),
              networkTimeout.promise
          ]);
          // If we've reached this point, the fetch succeeded and the networkTimeout
          // didn't throw; clear the network timeout delay so that Node won't hang
          networkTimeout.clearNetworkTimeout();
          const json = await response.json();
          if ('needConfirmation' in json) {
              throw _makeTaggedError(auth, "account-exists-with-different-credential" /* AuthErrorCode.NEED_CONFIRMATION */, json);
          }
          if (response.ok && !('errorMessage' in json)) {
              return json;
          }
          else {
              const errorMessage = response.ok ? json.errorMessage : json.error.message;
              const [serverErrorCode, serverErrorMessage] = errorMessage.split(' : ');
              if (serverErrorCode === "FEDERATED_USER_ID_ALREADY_LINKED" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */) {
                  throw _makeTaggedError(auth, "credential-already-in-use" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */, json);
              }
              else if (serverErrorCode === "EMAIL_EXISTS" /* ServerError.EMAIL_EXISTS */) {
                  throw _makeTaggedError(auth, "email-already-in-use" /* AuthErrorCode.EMAIL_EXISTS */, json);
              }
              else if (serverErrorCode === "USER_DISABLED" /* ServerError.USER_DISABLED */) {
                  throw _makeTaggedError(auth, "user-disabled" /* AuthErrorCode.USER_DISABLED */, json);
              }
              const authError = errorMap[serverErrorCode] ||
                  serverErrorCode
                      .toLowerCase()
                      .replace(/[_\s]+/g, '-');
              if (serverErrorMessage) {
                  throw _errorWithCustomMessage(auth, authError, serverErrorMessage);
              }
              else {
                  _fail(auth, authError);
              }
          }
      }
      catch (e) {
          if (e instanceof FirebaseError) {
              throw e;
          }
          // Changing this to a different error code will log user out when there is a network error
          // because we treat any error other than NETWORK_REQUEST_FAILED as token is invalid.
          // https://github.com/firebase/firebase-js-sdk/blob/4fbc73610d70be4e0852e7de63a39cb7897e8546/packages/auth/src/core/auth/auth_impl.ts#L309-L316
          _fail(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */, { 'message': String(e) });
      }
  }
  async function _performSignInRequest(auth, method, path, request, customErrorMap = {}) {
      const serverResponse = await _performApiRequest(auth, method, path, request, customErrorMap);
      if ('mfaPendingCredential' in serverResponse) {
          _fail(auth, "multi-factor-auth-required" /* AuthErrorCode.MFA_REQUIRED */, {
              _serverResponse: serverResponse
          });
      }
      return serverResponse;
  }
  function _getFinalTarget(auth, host, path, query) {
      const base = `${host}${path}?${query}`;
      if (!auth.config.emulator) {
          return `${auth.config.apiScheme}://${base}`;
      }
      return _emulatorUrl(auth.config, base);
  }
  function _parseEnforcementState(enforcementStateStr) {
      switch (enforcementStateStr) {
          case 'ENFORCE':
              return "ENFORCE" /* EnforcementState.ENFORCE */;
          case 'AUDIT':
              return "AUDIT" /* EnforcementState.AUDIT */;
          case 'OFF':
              return "OFF" /* EnforcementState.OFF */;
          default:
              return "ENFORCEMENT_STATE_UNSPECIFIED" /* EnforcementState.ENFORCEMENT_STATE_UNSPECIFIED */;
      }
  }
  class NetworkTimeout {
      clearNetworkTimeout() {
          clearTimeout(this.timer);
      }
      constructor(auth) {
          this.auth = auth;
          // Node timers and browser timers are fundamentally incompatible, but we
          // don't care about the value here
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          this.timer = null;
          this.promise = new Promise((_, reject) => {
              this.timer = setTimeout(() => {
                  return reject(_createError(this.auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));
              }, DEFAULT_API_TIMEOUT_MS.get());
          });
      }
  }
  function _makeTaggedError(auth, code, response) {
      const errorParams = {
          appName: auth.name
      };
      if (response.email) {
          errorParams.email = response.email;
      }
      if (response.phoneNumber) {
          errorParams.phoneNumber = response.phoneNumber;
      }
      const error = _createError(auth, code, errorParams);
      // We know customData is defined on error because errorParams is defined
      error.customData._tokenResponse = response;
      return error;
  }
  function isEnterprise(grecaptcha) {
      return (grecaptcha !== undefined &&
          grecaptcha.enterprise !== undefined);
  }
  class RecaptchaConfig {
      constructor(response) {
          /**
           * The reCAPTCHA site key.
           */
          this.siteKey = '';
          /**
           * The list of providers and their enablement status for reCAPTCHA Enterprise.
           */
          this.recaptchaEnforcementState = [];
          if (response.recaptchaKey === undefined) {
              throw new Error('recaptchaKey undefined');
          }
          // Example response.recaptchaKey: "projects/proj123/keys/sitekey123"
          this.siteKey = response.recaptchaKey.split('/')[3];
          this.recaptchaEnforcementState = response.recaptchaEnforcementState;
      }
      /**
       * Returns the reCAPTCHA Enterprise enforcement state for the given provider.
       *
       * @param providerStr - The provider whose enforcement state is to be returned.
       * @returns The reCAPTCHA Enterprise enforcement state for the given provider.
       */
      getProviderEnforcementState(providerStr) {
          if (!this.recaptchaEnforcementState ||
              this.recaptchaEnforcementState.length === 0) {
              return null;
          }
          for (const recaptchaEnforcementState of this.recaptchaEnforcementState) {
              if (recaptchaEnforcementState.provider &&
                  recaptchaEnforcementState.provider === providerStr) {
                  return _parseEnforcementState(recaptchaEnforcementState.enforcementState);
              }
          }
          return null;
      }
      /**
       * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.
       *
       * @param providerStr - The provider whose enablement state is to be returned.
       * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.
       */
      isProviderEnabled(providerStr) {
          return (this.getProviderEnforcementState(providerStr) ===
              "ENFORCE" /* EnforcementState.ENFORCE */ ||
              this.getProviderEnforcementState(providerStr) === "AUDIT" /* EnforcementState.AUDIT */);
      }
      /**
       * Returns true if reCAPTCHA Enterprise protection is enabled in at least one provider, otherwise
       * returns false.
       *
       * @returns Whether or not reCAPTCHA Enterprise protection is enabled for at least one provider.
       */
      isAnyProviderEnabled() {
          return (this.isProviderEnabled("EMAIL_PASSWORD_PROVIDER" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */) ||
              this.isProviderEnabled("PHONE_PROVIDER" /* RecaptchaAuthProvider.PHONE_PROVIDER */));
      }
  }
  async function getRecaptchaConfig(auth, request) {
      return _performApiRequest(auth, "GET" /* HttpMethod.GET */, "/v2/recaptchaConfig" /* Endpoint.GET_RECAPTCHA_CONFIG */, _addTidIfNecessary(auth, request));
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  async function deleteAccount(auth, request) {
      return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:delete" /* Endpoint.DELETE_ACCOUNT */, request);
  }
  async function getAccountInfo(auth, request) {
      return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:lookup" /* Endpoint.GET_ACCOUNT_INFO */, request);
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function utcTimestampToDateString(utcTimestamp) {
      if (!utcTimestamp) {
          return undefined;
      }
      try {
          // Convert to date object.
          const date = new Date(Number(utcTimestamp));
          // Test date is valid.
          if (!isNaN(date.getTime())) {
              // Convert to UTC date string.
              return date.toUTCString();
          }
      }
      catch (e) {
          // Do nothing. undefined will be returned.
      }
      return undefined;
  }
  /**
   * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.
   *
   * @remarks
   * Returns the current token if it has not expired or if it will not expire in the next five
   * minutes. Otherwise, this will refresh the token and return a new one.
   *
   * @param user - The user.
   * @param forceRefresh - Force refresh regardless of token expiration.
   *
   * @public
   */
  async function getIdTokenResult(user, forceRefresh = false) {
      const userInternal = getModularInstance(user);
      const token = await userInternal.getIdToken(forceRefresh);
      const claims = _parseToken(token);
      _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
      const firebase = typeof claims.firebase === 'object' ? claims.firebase : undefined;
      const signInProvider = firebase === null || firebase === undefined ? undefined : firebase['sign_in_provider'];
      return {
          claims,
          token,
          authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),
          issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),
          expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),
          signInProvider: signInProvider || null,
          signInSecondFactor: (firebase === null || firebase === undefined ? undefined : firebase['sign_in_second_factor']) || null
      };
  }
  function secondsStringToMilliseconds(seconds) {
      return Number(seconds) * 1000;
  }
  function _parseToken(token) {
      const [algorithm, payload, signature] = token.split('.');
      if (algorithm === undefined ||
          payload === undefined ||
          signature === undefined) {
          _logError('JWT malformed, contained fewer than 3 sections');
          return null;
      }
      try {
          const decoded = base64Decode(payload);
          if (!decoded) {
              _logError('Failed to decode base64 JWT payload');
              return null;
          }
          return JSON.parse(decoded);
      }
      catch (e) {
          _logError('Caught error parsing JWT payload as JSON', e === null || e === undefined ? undefined : e.toString());
          return null;
      }
  }
  /**
   * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.
   */
  function _tokenExpiresIn(token) {
      const parsedToken = _parseToken(token);
      _assert(parsedToken, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
      _assert(typeof parsedToken.exp !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
      _assert(typeof parsedToken.iat !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
      return Number(parsedToken.exp) - Number(parsedToken.iat);
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  async function _logoutIfInvalidated(user, promise, bypassAuthState = false) {
      if (bypassAuthState) {
          return promise;
      }
      try {
          return await promise;
      }
      catch (e) {
          if (e instanceof FirebaseError && isUserInvalidated(e)) {
              if (user.auth.currentUser === user) {
                  await user.auth.signOut();
              }
          }
          throw e;
      }
  }
  function isUserInvalidated({ code }) {
      return (code === `auth/${"user-disabled" /* AuthErrorCode.USER_DISABLED */}` ||
          code === `auth/${"user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */}`);
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class ProactiveRefresh {
      constructor(user) {
          this.user = user;
          this.isRunning = false;
          // Node timers and browser timers return fundamentally different types.
          // We don't actually care what the value is but TS won't accept unknown and
          // we can't cast properly in both environments.
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          this.timerId = null;
          this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;
      }
      _start() {
          if (this.isRunning) {
              return;
          }
          this.isRunning = true;
          this.schedule();
      }
      _stop() {
          if (!this.isRunning) {
              return;
          }
          this.isRunning = false;
          if (this.timerId !== null) {
              clearTimeout(this.timerId);
          }
      }
      getInterval(wasError) {
          var _a;
          if (wasError) {
              const interval = this.errorBackoff;
              this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* Duration.RETRY_BACKOFF_MAX */);
              return interval;
          }
          else {
              // Reset the error backoff
              this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;
              const expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== undefined ? _a : 0;
              const interval = expTime - Date.now() - 300000 /* Duration.OFFSET */;
              return Math.max(0, interval);
          }
      }
      schedule(wasError = false) {
          if (!this.isRunning) {
              // Just in case...
              return;
          }
          const interval = this.getInterval(wasError);
          this.timerId = setTimeout(async () => {
              await this.iteration();
          }, interval);
      }
      async iteration() {
          try {
              await this.user.getIdToken(true);
          }
          catch (e) {
              // Only retry on network errors
              if ((e === null || e === undefined ? undefined : e.code) ===
                  `auth/${"network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {
                  this.schedule(/* wasError */ true);
              }
              return;
          }
          this.schedule();
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class UserMetadata {
      constructor(createdAt, lastLoginAt) {
          this.createdAt = createdAt;
          this.lastLoginAt = lastLoginAt;
          this._initializeTime();
      }
      _initializeTime() {
          this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);
          this.creationTime = utcTimestampToDateString(this.createdAt);
      }
      _copy(metadata) {
          this.createdAt = metadata.createdAt;
          this.lastLoginAt = metadata.lastLoginAt;
          this._initializeTime();
      }
      toJSON() {
          return {
              createdAt: this.createdAt,
              lastLoginAt: this.lastLoginAt
          };
      }
  }

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  async function _reloadWithoutSaving(user) {
      var _a;
      const auth = user.auth;
      const idToken = await user.getIdToken();
      const response = await _logoutIfInvalidated(user, getAccountInfo(auth, { idToken }));
      _assert(response === null || response === undefined ? undefined : response.users.length, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
      const coreAccount = response.users[0];
      user._notifyReloadListener(coreAccount);
      const newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === undefined ? undefined : _a.length)
          ? extractProviderData(coreAccount.providerUserInfo)
          : [];
      const providerData = mergeProviderData(user.providerData, newProviderData);
      // Preserves the non-nonymous status of the stored user, even if no more
      // credentials (federated or email/password) are linked to the user. If
      // the user was previously anonymous, then use provider data to update.
      // On the other hand, if it was not anonymous before, it should never be
      // considered anonymous now.
      const oldIsAnonymous = user.isAnonymous;
      const newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === undefined ? undefined : providerData.length);
      const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;
      const updates = {
          uid: coreAccount.localId,
          displayName: coreAccount.displayName || null,
          photoURL: coreAccount.photoUrl || null,
          email: coreAccount.email || null,
          emailVerified: coreAccount.emailVerified || false,
          phoneNumber: coreAccount.phoneNumber || null,
          tenantId: coreAccount.tenantId || null,
          providerData,
          metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
          isAnonymous
      };
      Object.assign(user, updates);
  }
  /**
   * Reloads user account data, if signed in.
   *
   * @param user - The user.
   *
   * @public
   */
  async function reload(user) {
      const userInternal = getModularInstance(user);
      await _reloadWithoutSaving(userInternal);
      // Even though the current user hasn't changed, update
      // current user will trigger a persistence update w/ the
      // new info.
      await userInternal.auth._persistUserIfCurrent(userInternal);
      userInternal.auth._notifyListenersIfCurrent(userInternal);
  }
  function mergeProviderData(original, newData) {
      const deduped = original.filter(o => !newData.some(n => n.providerId === o.providerId));
      return [...deduped, ...newData];
  }
  function extractProviderData(providers) {
      return providers.map((_a) => {
          var { providerId } = _a, provider = __rest(_a, ["providerId"]);
          return {
              providerId,
              uid: provider.rawId || '',
              displayName: provider.displayName || null,
              email: provider.email || null,
              phoneNumber: provider.phoneNumber || null,
              photoURL: provider.photoUrl || null
          };
      });
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  async function requestStsToken(auth, refreshToken) {
      const response = await _performFetchWithErrorHandling(auth, {}, async () => {
          const body = querystring({
              'grant_type': 'refresh_token',
              'refresh_token': refreshToken
          }).slice(1);
          const { tokenApiHost, apiKey } = auth.config;
          const url = _getFinalTarget(auth, tokenApiHost, "/v1/token" /* Endpoint.TOKEN */, `key=${apiKey}`);
          const headers = await auth._getAdditionalHeaders();
          headers["Content-Type" /* HttpHeader.CONTENT_TYPE */] = 'application/x-www-form-urlencoded';
          return FetchProvider.fetch()(url, {
              method: "POST" /* HttpMethod.POST */,
              headers,
              body
          });
      });
      // The response comes back in snake_case. Convert to camel:
      return {
          accessToken: response.access_token,
          expiresIn: response.expires_in,
          refreshToken: response.refresh_token
      };
  }
  async function revokeToken(auth, request) {
      return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v2/accounts:revokeToken" /* Endpoint.REVOKE_TOKEN */, _addTidIfNecessary(auth, request));
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * We need to mark this class as internal explicitly to exclude it in the public typings, because
   * it references AuthInternal which has a circular dependency with UserInternal.
   *
   * @internal
   */
  class StsTokenManager {
      constructor() {
          this.refreshToken = null;
          this.accessToken = null;
          this.expirationTime = null;
      }
      get isExpired() {
          return (!this.expirationTime ||
              Date.now() > this.expirationTime - 30000 /* Buffer.TOKEN_REFRESH */);
      }
      updateFromServerResponse(response) {
          _assert(response.idToken, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
          _assert(typeof response.idToken !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
          _assert(typeof response.refreshToken !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
          const expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined'
              ? Number(response.expiresIn)
              : _tokenExpiresIn(response.idToken);
          this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);
      }
      updateFromIdToken(idToken) {
          _assert(idToken.length !== 0, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
          const expiresIn = _tokenExpiresIn(idToken);
          this.updateTokensAndExpiration(idToken, null, expiresIn);
      }
      async getToken(auth, forceRefresh = false) {
          if (!forceRefresh && this.accessToken && !this.isExpired) {
              return this.accessToken;
          }
          _assert(this.refreshToken, auth, "user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */);
          if (this.refreshToken) {
              await this.refresh(auth, this.refreshToken);
              return this.accessToken;
          }
          return null;
      }
      clearRefreshToken() {
          this.refreshToken = null;
      }
      async refresh(auth, oldToken) {
          const { accessToken, refreshToken, expiresIn } = await requestStsToken(auth, oldToken);
          this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));
      }
      updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {
          this.refreshToken = refreshToken || null;
          this.accessToken = accessToken || null;
          this.expirationTime = Date.now() + expiresInSec * 1000;
      }
      static fromJSON(appName, object) {
          const { refreshToken, accessToken, expirationTime } = object;
          const manager = new StsTokenManager();
          if (refreshToken) {
              _assert(typeof refreshToken === 'string', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */, {
                  appName
              });
              manager.refreshToken = refreshToken;
          }
          if (accessToken) {
              _assert(typeof accessToken === 'string', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */, {
                  appName
              });
              manager.accessToken = accessToken;
          }
          if (expirationTime) {
              _assert(typeof expirationTime === 'number', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */, {
                  appName
              });
              manager.expirationTime = expirationTime;
          }
          return manager;
      }
      toJSON() {
          return {
              refreshToken: this.refreshToken,
              accessToken: this.accessToken,
              expirationTime: this.expirationTime
          };
      }
      _assign(stsTokenManager) {
          this.accessToken = stsTokenManager.accessToken;
          this.refreshToken = stsTokenManager.refreshToken;
          this.expirationTime = stsTokenManager.expirationTime;
      }
      _clone() {
          return Object.assign(new StsTokenManager(), this.toJSON());
      }
      _performRefresh() {
          return debugFail('not implemented');
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function assertStringOrUndefined(assertion, appName) {
      _assert(typeof assertion === 'string' || typeof assertion === 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */, { appName });
  }
  class UserImpl {
      constructor(_a) {
          var { uid, auth, stsTokenManager } = _a, opt = __rest(_a, ["uid", "auth", "stsTokenManager"]);
          // For the user object, provider is always Firebase.
          this.providerId = "firebase" /* ProviderId.FIREBASE */;
          this.proactiveRefresh = new ProactiveRefresh(this);
          this.reloadUserInfo = null;
          this.reloadListener = null;
          this.uid = uid;
          this.auth = auth;
          this.stsTokenManager = stsTokenManager;
          this.accessToken = stsTokenManager.accessToken;
          this.displayName = opt.displayName || null;
          this.email = opt.email || null;
          this.emailVerified = opt.emailVerified || false;
          this.phoneNumber = opt.phoneNumber || null;
          this.photoURL = opt.photoURL || null;
          this.isAnonymous = opt.isAnonymous || false;
          this.tenantId = opt.tenantId || null;
          this.providerData = opt.providerData ? [...opt.providerData] : [];
          this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);
      }
      async getIdToken(forceRefresh) {
          const accessToken = await _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));
          _assert(accessToken, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
          if (this.accessToken !== accessToken) {
              this.accessToken = accessToken;
              await this.auth._persistUserIfCurrent(this);
              this.auth._notifyListenersIfCurrent(this);
          }
          return accessToken;
      }
      getIdTokenResult(forceRefresh) {
          return getIdTokenResult(this, forceRefresh);
      }
      reload() {
          return reload(this);
      }
      _assign(user) {
          if (this === user) {
              return;
          }
          _assert(this.uid === user.uid, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
          this.displayName = user.displayName;
          this.photoURL = user.photoURL;
          this.email = user.email;
          this.emailVerified = user.emailVerified;
          this.phoneNumber = user.phoneNumber;
          this.isAnonymous = user.isAnonymous;
          this.tenantId = user.tenantId;
          this.providerData = user.providerData.map(userInfo => (Object.assign({}, userInfo)));
          this.metadata._copy(user.metadata);
          this.stsTokenManager._assign(user.stsTokenManager);
      }
      _clone(auth) {
          const newUser = new UserImpl(Object.assign(Object.assign({}, this), { auth, stsTokenManager: this.stsTokenManager._clone() }));
          newUser.metadata._copy(this.metadata);
          return newUser;
      }
      _onReload(callback) {
          // There should only ever be one listener, and that is a single instance of MultiFactorUser
          _assert(!this.reloadListener, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
          this.reloadListener = callback;
          if (this.reloadUserInfo) {
              this._notifyReloadListener(this.reloadUserInfo);
              this.reloadUserInfo = null;
          }
      }
      _notifyReloadListener(userInfo) {
          if (this.reloadListener) {
              this.reloadListener(userInfo);
          }
          else {
              // If no listener is subscribed yet, save the result so it's available when they do subscribe
              this.reloadUserInfo = userInfo;
          }
      }
      _startProactiveRefresh() {
          this.proactiveRefresh._start();
      }
      _stopProactiveRefresh() {
          this.proactiveRefresh._stop();
      }
      async _updateTokensIfNecessary(response, reload = false) {
          let tokensRefreshed = false;
          if (response.idToken &&
              response.idToken !== this.stsTokenManager.accessToken) {
              this.stsTokenManager.updateFromServerResponse(response);
              tokensRefreshed = true;
          }
          if (reload) {
              await _reloadWithoutSaving(this);
          }
          await this.auth._persistUserIfCurrent(this);
          if (tokensRefreshed) {
              this.auth._notifyListenersIfCurrent(this);
          }
      }
      async delete() {
          if (_isFirebaseServerApp(this.auth.app)) {
              return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this.auth));
          }
          const idToken = await this.getIdToken();
          await _logoutIfInvalidated(this, deleteAccount(this.auth, { idToken }));
          this.stsTokenManager.clearRefreshToken();
          // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()
          //       cancels pending actions...
          return this.auth.signOut();
      }
      toJSON() {
          return Object.assign(Object.assign({ uid: this.uid, email: this.email || undefined, emailVerified: this.emailVerified, displayName: this.displayName || undefined, isAnonymous: this.isAnonymous, photoURL: this.photoURL || undefined, phoneNumber: this.phoneNumber || undefined, tenantId: this.tenantId || undefined, providerData: this.providerData.map(userInfo => (Object.assign({}, userInfo))), stsTokenManager: this.stsTokenManager.toJSON(), 
              // Redirect event ID must be maintained in case there is a pending
              // redirect event.
              _redirectEventId: this._redirectEventId }, this.metadata.toJSON()), { 
              // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):
              apiKey: this.auth.config.apiKey, appName: this.auth.name });
      }
      get refreshToken() {
          return this.stsTokenManager.refreshToken || '';
      }
      static _fromJSON(auth, object) {
          var _a, _b, _c, _d, _e, _f, _g, _h;
          const displayName = (_a = object.displayName) !== null && _a !== undefined ? _a : undefined;
          const email = (_b = object.email) !== null && _b !== undefined ? _b : undefined;
          const phoneNumber = (_c = object.phoneNumber) !== null && _c !== undefined ? _c : undefined;
          const photoURL = (_d = object.photoURL) !== null && _d !== undefined ? _d : undefined;
          const tenantId = (_e = object.tenantId) !== null && _e !== undefined ? _e : undefined;
          const _redirectEventId = (_f = object._redirectEventId) !== null && _f !== undefined ? _f : undefined;
          const createdAt = (_g = object.createdAt) !== null && _g !== undefined ? _g : undefined;
          const lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== undefined ? _h : undefined;
          const { uid, emailVerified, isAnonymous, providerData, stsTokenManager: plainObjectTokenManager } = object;
          _assert(uid && plainObjectTokenManager, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
          const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);
          _assert(typeof uid === 'string', auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
          assertStringOrUndefined(displayName, auth.name);
          assertStringOrUndefined(email, auth.name);
          _assert(typeof emailVerified === 'boolean', auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
          _assert(typeof isAnonymous === 'boolean', auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
          assertStringOrUndefined(phoneNumber, auth.name);
          assertStringOrUndefined(photoURL, auth.name);
          assertStringOrUndefined(tenantId, auth.name);
          assertStringOrUndefined(_redirectEventId, auth.name);
          assertStringOrUndefined(createdAt, auth.name);
          assertStringOrUndefined(lastLoginAt, auth.name);
          const user = new UserImpl({
              uid,
              auth,
              email,
              emailVerified,
              displayName,
              isAnonymous,
              photoURL,
              phoneNumber,
              tenantId,
              stsTokenManager,
              createdAt,
              lastLoginAt
          });
          if (providerData && Array.isArray(providerData)) {
              user.providerData = providerData.map(userInfo => (Object.assign({}, userInfo)));
          }
          if (_redirectEventId) {
              user._redirectEventId = _redirectEventId;
          }
          return user;
      }
      /**
       * Initialize a User from an idToken server response
       * @param auth
       * @param idTokenResponse
       */
      static async _fromIdTokenResponse(auth, idTokenResponse, isAnonymous = false) {
          const stsTokenManager = new StsTokenManager();
          stsTokenManager.updateFromServerResponse(idTokenResponse);
          // Initialize the Firebase Auth user.
          const user = new UserImpl({
              uid: idTokenResponse.localId,
              auth,
              stsTokenManager,
              isAnonymous
          });
          // Updates the user info and data and resolves with a user instance.
          await _reloadWithoutSaving(user);
          return user;
      }
      /**
       * Initialize a User from an idToken server response
       * @param auth
       * @param idTokenResponse
       */
      static async _fromGetAccountInfoResponse(auth, response, idToken) {
          const coreAccount = response.users[0];
          _assert(coreAccount.localId !== undefined, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
          const providerData = coreAccount.providerUserInfo !== undefined
              ? extractProviderData(coreAccount.providerUserInfo)
              : [];
          const isAnonymous = !(coreAccount.email && coreAccount.passwordHash) && !(providerData === null || providerData === undefined ? undefined : providerData.length);
          const stsTokenManager = new StsTokenManager();
          stsTokenManager.updateFromIdToken(idToken);
          // Initialize the Firebase Auth user.
          const user = new UserImpl({
              uid: coreAccount.localId,
              auth,
              stsTokenManager,
              isAnonymous
          });
          // update the user with data from the GetAccountInfo response.
          const updates = {
              uid: coreAccount.localId,
              displayName: coreAccount.displayName || null,
              photoURL: coreAccount.photoUrl || null,
              email: coreAccount.email || null,
              emailVerified: coreAccount.emailVerified || false,
              phoneNumber: coreAccount.phoneNumber || null,
              tenantId: coreAccount.tenantId || null,
              providerData,
              metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
              isAnonymous: !(coreAccount.email && coreAccount.passwordHash) &&
                  !(providerData === null || providerData === undefined ? undefined : providerData.length)
          };
          Object.assign(user, updates);
          return user;
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const instanceCache = new Map();
  function _getInstance(cls) {
      debugAssert(cls instanceof Function, 'Expected a class definition');
      let instance = instanceCache.get(cls);
      if (instance) {
          debugAssert(instance instanceof cls, 'Instance stored in cache mismatched with class');
          return instance;
      }
      instance = new cls();
      instanceCache.set(cls, instance);
      return instance;
  }

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class InMemoryPersistence {
      constructor() {
          this.type = "NONE" /* PersistenceType.NONE */;
          this.storage = {};
      }
      async _isAvailable() {
          return true;
      }
      async _set(key, value) {
          this.storage[key] = value;
      }
      async _get(key) {
          const value = this.storage[key];
          return value === undefined ? null : value;
      }
      async _remove(key) {
          delete this.storage[key];
      }
      _addListener(_key, _listener) {
          // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers
          return;
      }
      _removeListener(_key, _listener) {
          // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers
          return;
      }
  }
  InMemoryPersistence.type = 'NONE';
  /**
   * An implementation of {@link Persistence} of type 'NONE'.
   *
   * @public
   */
  const inMemoryPersistence = InMemoryPersistence;

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function _persistenceKeyName(key, apiKey, appName) {
      return `${"firebase" /* Namespace.PERSISTENCE */}:${key}:${apiKey}:${appName}`;
  }
  class PersistenceUserManager {
      constructor(persistence, auth, userKey) {
          this.persistence = persistence;
          this.auth = auth;
          this.userKey = userKey;
          const { config, name } = this.auth;
          this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);
          this.fullPersistenceKey = _persistenceKeyName("persistence" /* KeyName.PERSISTENCE_USER */, config.apiKey, name);
          this.boundEventHandler = auth._onStorageEvent.bind(auth);
          this.persistence._addListener(this.fullUserKey, this.boundEventHandler);
      }
      setCurrentUser(user) {
          return this.persistence._set(this.fullUserKey, user.toJSON());
      }
      async getCurrentUser() {
          const blob = await this.persistence._get(this.fullUserKey);
          return blob ? UserImpl._fromJSON(this.auth, blob) : null;
      }
      removeCurrentUser() {
          return this.persistence._remove(this.fullUserKey);
      }
      savePersistenceForRedirect() {
          return this.persistence._set(this.fullPersistenceKey, this.persistence.type);
      }
      async setPersistence(newPersistence) {
          if (this.persistence === newPersistence) {
              return;
          }
          const currentUser = await this.getCurrentUser();
          await this.removeCurrentUser();
          this.persistence = newPersistence;
          if (currentUser) {
              return this.setCurrentUser(currentUser);
          }
      }
      delete() {
          this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);
      }
      static async create(auth, persistenceHierarchy, userKey = "authUser" /* KeyName.AUTH_USER */) {
          if (!persistenceHierarchy.length) {
              return new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey);
          }
          // Eliminate any persistences that are not available
          const availablePersistences = (await Promise.all(persistenceHierarchy.map(async (persistence) => {
              if (await persistence._isAvailable()) {
                  return persistence;
              }
              return undefined;
          }))).filter(persistence => persistence);
          // Fall back to the first persistence listed, or in memory if none available
          let selectedPersistence = availablePersistences[0] ||
              _getInstance(inMemoryPersistence);
          const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);
          // Pull out the existing user, setting the chosen persistence to that
          // persistence if the user exists.
          let userToMigrate = null;
          // Note, here we check for a user in _all_ persistences, not just the
          // ones deemed available. If we can migrate a user out of a broken
          // persistence, we will (but only if that persistence supports migration).
          for (const persistence of persistenceHierarchy) {
              try {
                  const blob = await persistence._get(key);
                  if (blob) {
                      const user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)
                      if (persistence !== selectedPersistence) {
                          userToMigrate = user;
                      }
                      selectedPersistence = persistence;
                      break;
                  }
              }
              catch (_a) { }
          }
          // If we find the user in a persistence that does support migration, use
          // that migration path (of only persistences that support migration)
          const migrationHierarchy = availablePersistences.filter(p => p._shouldAllowMigration);
          // If the persistence does _not_ allow migration, just finish off here
          if (!selectedPersistence._shouldAllowMigration ||
              !migrationHierarchy.length) {
              return new PersistenceUserManager(selectedPersistence, auth, userKey);
          }
          selectedPersistence = migrationHierarchy[0];
          if (userToMigrate) {
              // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does
              // we'll just let it bubble to surface the error.
              await selectedPersistence._set(key, userToMigrate.toJSON());
          }
          // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues
          // such as users getting stuck with a previous account after signing out and refreshing the tab.
          await Promise.all(persistenceHierarchy.map(async (persistence) => {
              if (persistence !== selectedPersistence) {
                  try {
                      await persistence._remove(key);
                  }
                  catch (_a) { }
              }
          }));
          return new PersistenceUserManager(selectedPersistence, auth, userKey);
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Determine the browser for the purposes of reporting usage to the API
   */
  function _getBrowserName(userAgent) {
      const ua = userAgent.toLowerCase();
      if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {
          return "Opera" /* BrowserName.OPERA */;
      }
      else if (_isIEMobile(ua)) {
          // Windows phone IEMobile browser.
          return "IEMobile" /* BrowserName.IEMOBILE */;
      }
      else if (ua.includes('msie') || ua.includes('trident/')) {
          return "IE" /* BrowserName.IE */;
      }
      else if (ua.includes('edge/')) {
          return "Edge" /* BrowserName.EDGE */;
      }
      else if (_isFirefox(ua)) {
          return "Firefox" /* BrowserName.FIREFOX */;
      }
      else if (ua.includes('silk/')) {
          return "Silk" /* BrowserName.SILK */;
      }
      else if (_isBlackBerry(ua)) {
          // Blackberry browser.
          return "Blackberry" /* BrowserName.BLACKBERRY */;
      }
      else if (_isWebOS(ua)) {
          // WebOS default browser.
          return "Webos" /* BrowserName.WEBOS */;
      }
      else if (_isSafari(ua)) {
          return "Safari" /* BrowserName.SAFARI */;
      }
      else if ((ua.includes('chrome/') || _isChromeIOS(ua)) &&
          !ua.includes('edge/')) {
          return "Chrome" /* BrowserName.CHROME */;
      }
      else if (_isAndroid(ua)) {
          // Android stock browser.
          return "Android" /* BrowserName.ANDROID */;
      }
      else {
          // Most modern browsers have name/version at end of user agent string.
          const re = /([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/;
          const matches = userAgent.match(re);
          if ((matches === null || matches === undefined ? undefined : matches.length) === 2) {
              return matches[1];
          }
      }
      return "Other" /* BrowserName.OTHER */;
  }
  function _isFirefox(ua = getUA()) {
      return /firefox\//i.test(ua);
  }
  function _isSafari(userAgent = getUA()) {
      const ua = userAgent.toLowerCase();
      return (ua.includes('safari/') &&
          !ua.includes('chrome/') &&
          !ua.includes('crios/') &&
          !ua.includes('android'));
  }
  function _isChromeIOS(ua = getUA()) {
      return /crios\//i.test(ua);
  }
  function _isIEMobile(ua = getUA()) {
      return /iemobile/i.test(ua);
  }
  function _isAndroid(ua = getUA()) {
      return /android/i.test(ua);
  }
  function _isBlackBerry(ua = getUA()) {
      return /blackberry/i.test(ua);
  }
  function _isWebOS(ua = getUA()) {
      return /webos/i.test(ua);
  }
  function _isIOS(ua = getUA()) {
      return (/iphone|ipad|ipod/i.test(ua) ||
          (/macintosh/i.test(ua) && /mobile/i.test(ua)));
  }
  function _isIOSStandalone(ua = getUA()) {
      var _a;
      return _isIOS(ua) && !!((_a = window.navigator) === null || _a === undefined ? undefined : _a.standalone);
  }
  function _isIE10() {
      return isIE() && document.documentMode === 10;
  }
  function _isMobileBrowser(ua = getUA()) {
      // TODO: implement getBrowserName equivalent for OS.
      return (_isIOS(ua) ||
          _isAndroid(ua) ||
          _isWebOS(ua) ||
          _isBlackBerry(ua) ||
          /windows phone/i.test(ua) ||
          _isIEMobile(ua));
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /*
   * Determine the SDK version string
   */
  function _getClientVersion(clientPlatform, frameworks = []) {
      let reportedPlatform;
      switch (clientPlatform) {
          case "Browser" /* ClientPlatform.BROWSER */:
              // In a browser environment, report the browser name.
              reportedPlatform = _getBrowserName(getUA());
              break;
          case "Worker" /* ClientPlatform.WORKER */:
              // Technically a worker runs from a browser but we need to differentiate a
              // worker from a browser.
              // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.
              reportedPlatform = `${_getBrowserName(getUA())}-${clientPlatform}`;
              break;
          default:
              reportedPlatform = clientPlatform;
      }
      const reportedFrameworks = frameworks.length
          ? frameworks.join(',')
          : 'FirebaseCore-web'; /* default value if no other framework is used */
      return `${reportedPlatform}/${"JsCore" /* ClientImplementation.CORE */}/${SDK_VERSION$1}/${reportedFrameworks}`;
  }

  /**
   * @license
   * Copyright 2022 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class AuthMiddlewareQueue {
      constructor(auth) {
          this.auth = auth;
          this.queue = [];
      }
      pushCallback(callback, onAbort) {
          // The callback could be sync or async. Wrap it into a
          // function that is always async.
          const wrappedCallback = (user) => new Promise((resolve, reject) => {
              try {
                  const result = callback(user);
                  // Either resolve with existing promise or wrap a non-promise
                  // return value into a promise.
                  resolve(result);
              }
              catch (e) {
                  // Sync callback throws.
                  reject(e);
              }
          });
          // Attach the onAbort if present
          wrappedCallback.onAbort = onAbort;
          this.queue.push(wrappedCallback);
          const index = this.queue.length - 1;
          return () => {
              // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb
              // indexing of other elements.
              this.queue[index] = () => Promise.resolve();
          };
      }
      async runMiddleware(nextUser) {
          if (this.auth.currentUser === nextUser) {
              return;
          }
          // While running the middleware, build a temporary stack of onAbort
          // callbacks to call if one middleware callback rejects.
          const onAbortStack = [];
          try {
              for (const beforeStateCallback of this.queue) {
                  await beforeStateCallback(nextUser);
                  // Only push the onAbort if the callback succeeds
                  if (beforeStateCallback.onAbort) {
                      onAbortStack.push(beforeStateCallback.onAbort);
                  }
              }
          }
          catch (e) {
              // Run all onAbort, with separate try/catch to ignore any errors and
              // continue
              onAbortStack.reverse();
              for (const onAbort of onAbortStack) {
                  try {
                      onAbort();
                  }
                  catch (_) {
                      /* swallow error */
                  }
              }
              throw this.auth._errorFactory.create("login-blocked" /* AuthErrorCode.LOGIN_BLOCKED */, {
                  originalMessage: e === null || e === undefined ? undefined : e.message
              });
          }
      }
  }

  /**
   * @license
   * Copyright 2023 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Fetches the password policy for the currently set tenant or the project if no tenant is set.
   *
   * @param auth Auth object.
   * @param request Password policy request.
   * @returns Password policy response.
   */
  async function _getPasswordPolicy(auth, request = {}) {
      return _performApiRequest(auth, "GET" /* HttpMethod.GET */, "/v2/passwordPolicy" /* Endpoint.GET_PASSWORD_POLICY */, _addTidIfNecessary(auth, request));
  }

  /**
   * @license
   * Copyright 2023 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // Minimum min password length enforced by the backend, even if no minimum length is set.
  const MINIMUM_MIN_PASSWORD_LENGTH = 6;
  /**
   * Stores password policy requirements and provides password validation against the policy.
   *
   * @internal
   */
  class PasswordPolicyImpl {
      constructor(response) {
          var _a, _b, _c, _d;
          // Only include custom strength options defined in the response.
          const responseOptions = response.customStrengthOptions;
          this.customStrengthOptions = {};
          // TODO: Remove once the backend is updated to include the minimum min password length instead of undefined when there is no minimum length set.
          this.customStrengthOptions.minPasswordLength =
              (_a = responseOptions.minPasswordLength) !== null && _a !== undefined ? _a : MINIMUM_MIN_PASSWORD_LENGTH;
          if (responseOptions.maxPasswordLength) {
              this.customStrengthOptions.maxPasswordLength =
                  responseOptions.maxPasswordLength;
          }
          if (responseOptions.containsLowercaseCharacter !== undefined) {
              this.customStrengthOptions.containsLowercaseLetter =
                  responseOptions.containsLowercaseCharacter;
          }
          if (responseOptions.containsUppercaseCharacter !== undefined) {
              this.customStrengthOptions.containsUppercaseLetter =
                  responseOptions.containsUppercaseCharacter;
          }
          if (responseOptions.containsNumericCharacter !== undefined) {
              this.customStrengthOptions.containsNumericCharacter =
                  responseOptions.containsNumericCharacter;
          }
          if (responseOptions.containsNonAlphanumericCharacter !== undefined) {
              this.customStrengthOptions.containsNonAlphanumericCharacter =
                  responseOptions.containsNonAlphanumericCharacter;
          }
          this.enforcementState = response.enforcementState;
          if (this.enforcementState === 'ENFORCEMENT_STATE_UNSPECIFIED') {
              this.enforcementState = 'OFF';
          }
          // Use an empty string if no non-alphanumeric characters are specified in the response.
          this.allowedNonAlphanumericCharacters =
              (_c = (_b = response.allowedNonAlphanumericCharacters) === null || _b === undefined ? undefined : _b.join('')) !== null && _c !== undefined ? _c : '';
          this.forceUpgradeOnSignin = (_d = response.forceUpgradeOnSignin) !== null && _d !== undefined ? _d : false;
          this.schemaVersion = response.schemaVersion;
      }
      validatePassword(password) {
          var _a, _b, _c, _d, _e, _f;
          const status = {
              isValid: true,
              passwordPolicy: this
          };
          // Check the password length and character options.
          this.validatePasswordLengthOptions(password, status);
          this.validatePasswordCharacterOptions(password, status);
          // Combine the status into single isValid property.
          status.isValid && (status.isValid = (_a = status.meetsMinPasswordLength) !== null && _a !== undefined ? _a : true);
          status.isValid && (status.isValid = (_b = status.meetsMaxPasswordLength) !== null && _b !== undefined ? _b : true);
          status.isValid && (status.isValid = (_c = status.containsLowercaseLetter) !== null && _c !== undefined ? _c : true);
          status.isValid && (status.isValid = (_d = status.containsUppercaseLetter) !== null && _d !== undefined ? _d : true);
          status.isValid && (status.isValid = (_e = status.containsNumericCharacter) !== null && _e !== undefined ? _e : true);
          status.isValid && (status.isValid = (_f = status.containsNonAlphanumericCharacter) !== null && _f !== undefined ? _f : true);
          return status;
      }
      /**
       * Validates that the password meets the length options for the policy.
       *
       * @param password Password to validate.
       * @param status Validation status.
       */
      validatePasswordLengthOptions(password, status) {
          const minPasswordLength = this.customStrengthOptions.minPasswordLength;
          const maxPasswordLength = this.customStrengthOptions.maxPasswordLength;
          if (minPasswordLength) {
              status.meetsMinPasswordLength = password.length >= minPasswordLength;
          }
          if (maxPasswordLength) {
              status.meetsMaxPasswordLength = password.length <= maxPasswordLength;
          }
      }
      /**
       * Validates that the password meets the character options for the policy.
       *
       * @param password Password to validate.
       * @param status Validation status.
       */
      validatePasswordCharacterOptions(password, status) {
          // Assign statuses for requirements even if the password is an empty string.
          this.updatePasswordCharacterOptionsStatuses(status, 
          /* containsLowercaseCharacter= */ false, 
          /* containsUppercaseCharacter= */ false, 
          /* containsNumericCharacter= */ false, 
          /* containsNonAlphanumericCharacter= */ false);
          let passwordChar;
          for (let i = 0; i < password.length; i++) {
              passwordChar = password.charAt(i);
              this.updatePasswordCharacterOptionsStatuses(status, 
              /* containsLowercaseCharacter= */ passwordChar >= 'a' &&
                  passwordChar <= 'z', 
              /* containsUppercaseCharacter= */ passwordChar >= 'A' &&
                  passwordChar <= 'Z', 
              /* containsNumericCharacter= */ passwordChar >= '0' &&
                  passwordChar <= '9', 
              /* containsNonAlphanumericCharacter= */ this.allowedNonAlphanumericCharacters.includes(passwordChar));
          }
      }
      /**
       * Updates the running validation status with the statuses for the character options.
       * Expected to be called each time a character is processed to update each option status
       * based on the current character.
       *
       * @param status Validation status.
       * @param containsLowercaseCharacter Whether the character is a lowercase letter.
       * @param containsUppercaseCharacter Whether the character is an uppercase letter.
       * @param containsNumericCharacter Whether the character is a numeric character.
       * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.
       */
      updatePasswordCharacterOptionsStatuses(status, containsLowercaseCharacter, containsUppercaseCharacter, containsNumericCharacter, containsNonAlphanumericCharacter) {
          if (this.customStrengthOptions.containsLowercaseLetter) {
              status.containsLowercaseLetter || (status.containsLowercaseLetter = containsLowercaseCharacter);
          }
          if (this.customStrengthOptions.containsUppercaseLetter) {
              status.containsUppercaseLetter || (status.containsUppercaseLetter = containsUppercaseCharacter);
          }
          if (this.customStrengthOptions.containsNumericCharacter) {
              status.containsNumericCharacter || (status.containsNumericCharacter = containsNumericCharacter);
          }
          if (this.customStrengthOptions.containsNonAlphanumericCharacter) {
              status.containsNonAlphanumericCharacter || (status.containsNonAlphanumericCharacter = containsNonAlphanumericCharacter);
          }
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class AuthImpl {
      constructor(app, heartbeatServiceProvider, appCheckServiceProvider, config) {
          this.app = app;
          this.heartbeatServiceProvider = heartbeatServiceProvider;
          this.appCheckServiceProvider = appCheckServiceProvider;
          this.config = config;
          this.currentUser = null;
          this.emulatorConfig = null;
          this.operations = Promise.resolve();
          this.authStateSubscription = new Subscription(this);
          this.idTokenSubscription = new Subscription(this);
          this.beforeStateQueue = new AuthMiddlewareQueue(this);
          this.redirectUser = null;
          this.isProactiveRefreshEnabled = false;
          this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION = 1;
          // Any network calls will set this to true and prevent subsequent emulator
          // initialization
          this._canInitEmulator = true;
          this._isInitialized = false;
          this._deleted = false;
          this._initializationPromise = null;
          this._popupRedirectResolver = null;
          this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;
          this._agentRecaptchaConfig = null;
          this._tenantRecaptchaConfigs = {};
          this._projectPasswordPolicy = null;
          this._tenantPasswordPolicies = {};
          // Tracks the last notified UID for state change listeners to prevent
          // repeated calls to the callbacks. Undefined means it's never been
          // called, whereas null means it's been called with a signed out user
          this.lastNotifiedUid = undefined;
          this.languageCode = null;
          this.tenantId = null;
          this.settings = { appVerificationDisabledForTesting: false };
          this.frameworks = [];
          this.name = app.name;
          this.clientVersion = config.sdkClientVersion;
      }
      _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {
          if (popupRedirectResolver) {
              this._popupRedirectResolver = _getInstance(popupRedirectResolver);
          }
          // Have to check for app deletion throughout initialization (after each
          // promise resolution)
          this._initializationPromise = this.queue(async () => {
              var _a, _b;
              if (this._deleted) {
                  return;
              }
              this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);
              if (this._deleted) {
                  return;
              }
              // Initialize the resolver early if necessary (only applicable to web:
              // this will cause the iframe to load immediately in certain cases)
              if ((_a = this._popupRedirectResolver) === null || _a === undefined ? undefined : _a._shouldInitProactively) {
                  // If this fails, don't halt auth loading
                  try {
                      await this._popupRedirectResolver._initialize(this);
                  }
                  catch (e) {
                      /* Ignore the error */
                  }
              }
              await this.initializeCurrentUser(popupRedirectResolver);
              this.lastNotifiedUid = ((_b = this.currentUser) === null || _b === undefined ? undefined : _b.uid) || null;
              if (this._deleted) {
                  return;
              }
              this._isInitialized = true;
          });
          return this._initializationPromise;
      }
      /**
       * If the persistence is changed in another window, the user manager will let us know
       */
      async _onStorageEvent() {
          if (this._deleted) {
              return;
          }
          const user = await this.assertedPersistence.getCurrentUser();
          if (!this.currentUser && !user) {
              // No change, do nothing (was signed out and remained signed out).
              return;
          }
          // If the same user is to be synchronized.
          if (this.currentUser && user && this.currentUser.uid === user.uid) {
              // Data update, simply copy data changes.
              this._currentUser._assign(user);
              // If tokens changed from previous user tokens, this will trigger
              // notifyAuthListeners_.
              await this.currentUser.getIdToken();
              return;
          }
          // Update current Auth state. Either a new login or logout.
          // Skip blocking callbacks, they should not apply to a change in another tab.
          await this._updateCurrentUser(user, /* skipBeforeStateCallbacks */ true);
      }
      async initializeCurrentUserFromIdToken(idToken) {
          try {
              const response = await getAccountInfo(this, { idToken });
              const user = await UserImpl._fromGetAccountInfoResponse(this, response, idToken);
              await this.directlySetCurrentUser(user);
          }
          catch (err) {
              console.warn('FirebaseServerApp could not login user with provided authIdToken: ', err);
              await this.directlySetCurrentUser(null);
          }
      }
      async initializeCurrentUser(popupRedirectResolver) {
          var _a;
          if (_isFirebaseServerApp(this.app)) {
              const idToken = this.app.settings.authIdToken;
              if (idToken) {
                  // Start the auth operation in the next tick to allow a moment for the customer's app to
                  // attach an emulator, if desired.
                  return new Promise(resolve => {
                      setTimeout(() => this.initializeCurrentUserFromIdToken(idToken).then(resolve, resolve));
                  });
              }
              else {
                  return this.directlySetCurrentUser(null);
              }
          }
          // First check to see if we have a pending redirect event.
          const previouslyStoredUser = (await this.assertedPersistence.getCurrentUser());
          let futureCurrentUser = previouslyStoredUser;
          let needsTocheckMiddleware = false;
          if (popupRedirectResolver && this.config.authDomain) {
              await this.getOrInitRedirectPersistenceManager();
              const redirectUserEventId = (_a = this.redirectUser) === null || _a === undefined ? undefined : _a._redirectEventId;
              const storedUserEventId = futureCurrentUser === null || futureCurrentUser === undefined ? undefined : futureCurrentUser._redirectEventId;
              const result = await this.tryRedirectSignIn(popupRedirectResolver);
              // If the stored user (i.e. the old "currentUser") has a redirectId that
              // matches the redirect user, then we want to initially sign in with the
              // new user object from result.
              // TODO(samgho): More thoroughly test all of this
              if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) &&
                  (result === null || result === undefined ? undefined : result.user)) {
                  futureCurrentUser = result.user;
                  needsTocheckMiddleware = true;
              }
          }
          // If no user in persistence, there is no current user. Set to null.
          if (!futureCurrentUser) {
              return this.directlySetCurrentUser(null);
          }
          if (!futureCurrentUser._redirectEventId) {
              // This isn't a redirect link operation, we can reload and bail.
              // First though, ensure that we check the middleware is happy.
              if (needsTocheckMiddleware) {
                  try {
                      await this.beforeStateQueue.runMiddleware(futureCurrentUser);
                  }
                  catch (e) {
                      futureCurrentUser = previouslyStoredUser;
                      // We know this is available since the bit is only set when the
                      // resolver is available
                      this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(e));
                  }
              }
              if (futureCurrentUser) {
                  return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);
              }
              else {
                  return this.directlySetCurrentUser(null);
              }
          }
          _assert(this._popupRedirectResolver, this, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
          await this.getOrInitRedirectPersistenceManager();
          // If the redirect user's event ID matches the current user's event ID,
          // DO NOT reload the current user, otherwise they'll be cleared from storage.
          // This is important for the reauthenticateWithRedirect() flow.
          if (this.redirectUser &&
              this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) {
              return this.directlySetCurrentUser(futureCurrentUser);
          }
          return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);
      }
      async tryRedirectSignIn(redirectResolver) {
          // The redirect user needs to be checked (and signed in if available)
          // during auth initialization. All of the normal sign in and link/reauth
          // flows call back into auth and push things onto the promise queue. We
          // need to await the result of the redirect sign in *inside the promise
          // queue*. This presents a problem: we run into deadlock. See:
          //    ┌> [Initialization] ─────┐
          //    ┌> [<other queue tasks>] │
          //    └─ [getRedirectResult] <─┘
          //    where [] are tasks on the queue and arrows denote awaits
          // Initialization will never complete because it's waiting on something
          // that's waiting for initialization to complete!
          //
          // Instead, this method calls getRedirectResult() (stored in
          // _completeRedirectFn) with an optional parameter that instructs all of
          // the underlying auth operations to skip anything that mutates auth state.
          let result = null;
          try {
              // We know this._popupRedirectResolver is set since redirectResolver
              // is passed in. The _completeRedirectFn expects the unwrapped extern.
              result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);
          }
          catch (e) {
              // Swallow any errors here; the code can retrieve them in
              // getRedirectResult().
              await this._setRedirectUser(null);
          }
          return result;
      }
      async reloadAndSetCurrentUserOrClear(user) {
          try {
              await _reloadWithoutSaving(user);
          }
          catch (e) {
              if ((e === null || e === undefined ? undefined : e.code) !==
                  `auth/${"network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */}`) {
                  // Something's wrong with the user's token. Log them out and remove
                  // them from storage
                  return this.directlySetCurrentUser(null);
              }
          }
          return this.directlySetCurrentUser(user);
      }
      useDeviceLanguage() {
          this.languageCode = _getUserLanguage();
      }
      async _delete() {
          this._deleted = true;
      }
      async updateCurrentUser(userExtern) {
          if (_isFirebaseServerApp(this.app)) {
              return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));
          }
          // The public updateCurrentUser method needs to make a copy of the user,
          // and also check that the project matches
          const user = userExtern
              ? getModularInstance(userExtern)
              : null;
          if (user) {
              _assert(user.auth.config.apiKey === this.config.apiKey, this, "invalid-user-token" /* AuthErrorCode.INVALID_AUTH */);
          }
          return this._updateCurrentUser(user && user._clone(this));
      }
      async _updateCurrentUser(user, skipBeforeStateCallbacks = false) {
          if (this._deleted) {
              return;
          }
          if (user) {
              _assert(this.tenantId === user.tenantId, this, "tenant-id-mismatch" /* AuthErrorCode.TENANT_ID_MISMATCH */);
          }
          if (!skipBeforeStateCallbacks) {
              await this.beforeStateQueue.runMiddleware(user);
          }
          return this.queue(async () => {
              await this.directlySetCurrentUser(user);
              this.notifyAuthListeners();
          });
      }
      async signOut() {
          if (_isFirebaseServerApp(this.app)) {
              return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));
          }
          // Run first, to block _setRedirectUser() if any callbacks fail.
          await this.beforeStateQueue.runMiddleware(null);
          // Clear the redirect user when signOut is called
          if (this.redirectPersistenceManager || this._popupRedirectResolver) {
              await this._setRedirectUser(null);
          }
          // Prevent callbacks from being called again in _updateCurrentUser, as
          // they were already called in the first line.
          return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */ true);
      }
      setPersistence(persistence) {
          if (_isFirebaseServerApp(this.app)) {
              return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));
          }
          return this.queue(async () => {
              await this.assertedPersistence.setPersistence(_getInstance(persistence));
          });
      }
      _getRecaptchaConfig() {
          if (this.tenantId == null) {
              return this._agentRecaptchaConfig;
          }
          else {
              return this._tenantRecaptchaConfigs[this.tenantId];
          }
      }
      async validatePassword(password) {
          if (!this._getPasswordPolicyInternal()) {
              await this._updatePasswordPolicy();
          }
          // Password policy will be defined after fetching.
          const passwordPolicy = this._getPasswordPolicyInternal();
          // Check that the policy schema version is supported by the SDK.
          // TODO: Update this logic to use a max supported policy schema version once we have multiple schema versions.
          if (passwordPolicy.schemaVersion !==
              this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION) {
              return Promise.reject(this._errorFactory.create("unsupported-password-policy-schema-version" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */, {}));
          }
          return passwordPolicy.validatePassword(password);
      }
      _getPasswordPolicyInternal() {
          if (this.tenantId === null) {
              return this._projectPasswordPolicy;
          }
          else {
              return this._tenantPasswordPolicies[this.tenantId];
          }
      }
      async _updatePasswordPolicy() {
          const response = await _getPasswordPolicy(this);
          const passwordPolicy = new PasswordPolicyImpl(response);
          if (this.tenantId === null) {
              this._projectPasswordPolicy = passwordPolicy;
          }
          else {
              this._tenantPasswordPolicies[this.tenantId] = passwordPolicy;
          }
      }
      _getPersistence() {
          return this.assertedPersistence.persistence.type;
      }
      _updateErrorMap(errorMap) {
          this._errorFactory = new ErrorFactory('auth', 'Firebase', errorMap());
      }
      onAuthStateChanged(nextOrObserver, error, completed) {
          return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);
      }
      beforeAuthStateChanged(callback, onAbort) {
          return this.beforeStateQueue.pushCallback(callback, onAbort);
      }
      onIdTokenChanged(nextOrObserver, error, completed) {
          return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);
      }
      authStateReady() {
          return new Promise((resolve, reject) => {
              if (this.currentUser) {
                  resolve();
              }
              else {
                  const unsubscribe = this.onAuthStateChanged(() => {
                      unsubscribe();
                      resolve();
                  }, reject);
              }
          });
      }
      /**
       * Revokes the given access token. Currently only supports Apple OAuth access tokens.
       */
      async revokeAccessToken(token) {
          if (this.currentUser) {
              const idToken = await this.currentUser.getIdToken();
              // Generalize this to accept other providers once supported.
              const request = {
                  providerId: 'apple.com',
                  tokenType: "ACCESS_TOKEN" /* TokenType.ACCESS_TOKEN */,
                  token,
                  idToken
              };
              if (this.tenantId != null) {
                  request.tenantId = this.tenantId;
              }
              await revokeToken(this, request);
          }
      }
      toJSON() {
          var _a;
          return {
              apiKey: this.config.apiKey,
              authDomain: this.config.authDomain,
              appName: this.name,
              currentUser: (_a = this._currentUser) === null || _a === undefined ? undefined : _a.toJSON()
          };
      }
      async _setRedirectUser(user, popupRedirectResolver) {
          const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);
          return user === null
              ? redirectManager.removeCurrentUser()
              : redirectManager.setCurrentUser(user);
      }
      async getOrInitRedirectPersistenceManager(popupRedirectResolver) {
          if (!this.redirectPersistenceManager) {
              const resolver = (popupRedirectResolver && _getInstance(popupRedirectResolver)) ||
                  this._popupRedirectResolver;
              _assert(resolver, this, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
              this.redirectPersistenceManager = await PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], "redirectUser" /* KeyName.REDIRECT_USER */);
              this.redirectUser =
                  await this.redirectPersistenceManager.getCurrentUser();
          }
          return this.redirectPersistenceManager;
      }
      async _redirectUserForId(id) {
          var _a, _b;
          // Make sure we've cleared any pending persistence actions if we're not in
          // the initializer
          if (this._isInitialized) {
              await this.queue(async () => { });
          }
          if (((_a = this._currentUser) === null || _a === undefined ? undefined : _a._redirectEventId) === id) {
              return this._currentUser;
          }
          if (((_b = this.redirectUser) === null || _b === undefined ? undefined : _b._redirectEventId) === id) {
              return this.redirectUser;
          }
          return null;
      }
      async _persistUserIfCurrent(user) {
          if (user === this.currentUser) {
              return this.queue(async () => this.directlySetCurrentUser(user));
          }
      }
      /** Notifies listeners only if the user is current */
      _notifyListenersIfCurrent(user) {
          if (user === this.currentUser) {
              this.notifyAuthListeners();
          }
      }
      _key() {
          return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;
      }
      _startProactiveRefresh() {
          this.isProactiveRefreshEnabled = true;
          if (this.currentUser) {
              this._currentUser._startProactiveRefresh();
          }
      }
      _stopProactiveRefresh() {
          this.isProactiveRefreshEnabled = false;
          if (this.currentUser) {
              this._currentUser._stopProactiveRefresh();
          }
      }
      /** Returns the current user cast as the internal type */
      get _currentUser() {
          return this.currentUser;
      }
      notifyAuthListeners() {
          var _a, _b;
          if (!this._isInitialized) {
              return;
          }
          this.idTokenSubscription.next(this.currentUser);
          const currentUid = (_b = (_a = this.currentUser) === null || _a === undefined ? undefined : _a.uid) !== null && _b !== undefined ? _b : null;
          if (this.lastNotifiedUid !== currentUid) {
              this.lastNotifiedUid = currentUid;
              this.authStateSubscription.next(this.currentUser);
          }
      }
      registerStateListener(subscription, nextOrObserver, error, completed) {
          if (this._deleted) {
              return () => { };
          }
          const cb = typeof nextOrObserver === 'function'
              ? nextOrObserver
              : nextOrObserver.next.bind(nextOrObserver);
          let isUnsubscribed = false;
          const promise = this._isInitialized
              ? Promise.resolve()
              : this._initializationPromise;
          _assert(promise, this, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
          // The callback needs to be called asynchronously per the spec.
          // eslint-disable-next-line @typescript-eslint/no-floating-promises
          promise.then(() => {
              if (isUnsubscribed) {
                  return;
              }
              cb(this.currentUser);
          });
          if (typeof nextOrObserver === 'function') {
              const unsubscribe = subscription.addObserver(nextOrObserver, error, completed);
              return () => {
                  isUnsubscribed = true;
                  unsubscribe();
              };
          }
          else {
              const unsubscribe = subscription.addObserver(nextOrObserver);
              return () => {
                  isUnsubscribed = true;
                  unsubscribe();
              };
          }
      }
      /**
       * Unprotected (from race conditions) method to set the current user. This
       * should only be called from within a queued callback. This is necessary
       * because the queue shouldn't rely on another queued callback.
       */
      async directlySetCurrentUser(user) {
          if (this.currentUser && this.currentUser !== user) {
              this._currentUser._stopProactiveRefresh();
          }
          if (user && this.isProactiveRefreshEnabled) {
              user._startProactiveRefresh();
          }
          this.currentUser = user;
          if (user) {
              await this.assertedPersistence.setCurrentUser(user);
          }
          else {
              await this.assertedPersistence.removeCurrentUser();
          }
      }
      queue(action) {
          // In case something errors, the callback still should be called in order
          // to keep the promise chain alive
          this.operations = this.operations.then(action, action);
          return this.operations;
      }
      get assertedPersistence() {
          _assert(this.persistenceManager, this, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
          return this.persistenceManager;
      }
      _logFramework(framework) {
          if (!framework || this.frameworks.includes(framework)) {
              return;
          }
          this.frameworks.push(framework);
          // Sort alphabetically so that "FirebaseCore-web,FirebaseUI-web" and
          // "FirebaseUI-web,FirebaseCore-web" aren't viewed as different.
          this.frameworks.sort();
          this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());
      }
      _getFrameworks() {
          return this.frameworks;
      }
      async _getAdditionalHeaders() {
          var _a;
          // Additional headers on every request
          const headers = {
              ["X-Client-Version" /* HttpHeader.X_CLIENT_VERSION */]: this.clientVersion
          };
          if (this.app.options.appId) {
              headers["X-Firebase-gmpid" /* HttpHeader.X_FIREBASE_GMPID */] = this.app.options.appId;
          }
          // If the heartbeat service exists, add the heartbeat string
          const heartbeatsHeader = await ((_a = this.heartbeatServiceProvider
              .getImmediate({
              optional: true
          })) === null || _a === undefined ? undefined : _a.getHeartbeatsHeader());
          if (heartbeatsHeader) {
              headers["X-Firebase-Client" /* HttpHeader.X_FIREBASE_CLIENT */] = heartbeatsHeader;
          }
          // If the App Check service exists, add the App Check token in the headers
          const appCheckToken = await this._getAppCheckToken();
          if (appCheckToken) {
              headers["X-Firebase-AppCheck" /* HttpHeader.X_FIREBASE_APP_CHECK */] = appCheckToken;
          }
          return headers;
      }
      async _getAppCheckToken() {
          var _a;
          const appCheckTokenResult = await ((_a = this.appCheckServiceProvider
              .getImmediate({ optional: true })) === null || _a === undefined ? undefined : _a.getToken());
          if (appCheckTokenResult === null || appCheckTokenResult === undefined ? undefined : appCheckTokenResult.error) {
              // Context: appCheck.getToken() will never throw even if an error happened.
              // In the error case, a dummy token will be returned along with an error field describing
              // the error. In general, we shouldn't care about the error condition and just use
              // the token (actual or dummy) to send requests.
              _logWarn(`Error while retrieving App Check token: ${appCheckTokenResult.error}`);
          }
          return appCheckTokenResult === null || appCheckTokenResult === undefined ? undefined : appCheckTokenResult.token;
      }
  }
  /**
   * Method to be used to cast down to our private implementation of Auth.
   * It will also handle unwrapping from the compat type if necessary
   *
   * @param auth Auth object passed in from developer
   */
  function _castAuth(auth) {
      return getModularInstance(auth);
  }
  /** Helper class to wrap subscriber logic */
  class Subscription {
      constructor(auth) {
          this.auth = auth;
          this.observer = null;
          this.addObserver = createSubscribe(observer => (this.observer = observer));
      }
      get next() {
          _assert(this.observer, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
          return this.observer.next.bind(this.observer);
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  let externalJSProvider = {
      async loadJS() {
          throw new Error('Unable to load external scripts');
      },
      recaptchaV2Script: '',
      recaptchaEnterpriseScript: '',
      gapiScript: ''
  };
  function _setExternalJSProvider(p) {
      externalJSProvider = p;
  }
  function _loadJS(url) {
      return externalJSProvider.loadJS(url);
  }
  function _recaptchaEnterpriseScriptUrl() {
      return externalJSProvider.recaptchaEnterpriseScript;
  }
  function _gapiScriptUrl() {
      return externalJSProvider.gapiScript;
  }
  function _generateCallbackName(prefix) {
      return `__${prefix}${Math.floor(Math.random() * 1000000)}`;
  }
  class MockGreCAPTCHATopLevel {
      constructor() {
          this.enterprise = new MockGreCAPTCHA();
      }
      ready(callback) {
          callback();
      }
      execute(
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      _siteKey, _options) {
          return Promise.resolve('token');
      }
      render(
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      _container, _parameters) {
          return '';
      }
  }
  class MockGreCAPTCHA {
      ready(callback) {
          callback();
      }
      execute(
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      _siteKey, _options) {
          return Promise.resolve('token');
      }
      render(
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      _container, _parameters) {
          return '';
      }
  }

  /* eslint-disable @typescript-eslint/no-require-imports */
  const RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = 'recaptcha-enterprise';
  const FAKE_TOKEN = 'NO_RECAPTCHA';
  class RecaptchaEnterpriseVerifier {
      /**
       *
       * @param authExtern - The corresponding Firebase {@link Auth} instance.
       *
       */
      constructor(authExtern) {
          /**
           * Identifies the type of application verifier (e.g. "recaptcha-enterprise").
           */
          this.type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;
          this.auth = _castAuth(authExtern);
      }
      /**
       * Executes the verification process.
       *
       * @returns A Promise for a token that can be used to assert the validity of a request.
       */
      async verify(action = 'verify', forceRefresh = false) {
          async function retrieveSiteKey(auth) {
              if (!forceRefresh) {
                  if (auth.tenantId == null && auth._agentRecaptchaConfig != null) {
                      return auth._agentRecaptchaConfig.siteKey;
                  }
                  if (auth.tenantId != null &&
                      auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined) {
                      return auth._tenantRecaptchaConfigs[auth.tenantId].siteKey;
                  }
              }
              return new Promise(async (resolve, reject) => {
                  getRecaptchaConfig(auth, {
                      clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */,
                      version: "RECAPTCHA_ENTERPRISE" /* RecaptchaVersion.ENTERPRISE */
                  })
                      .then(response => {
                      if (response.recaptchaKey === undefined) {
                          reject(new Error('recaptcha Enterprise site key undefined'));
                      }
                      else {
                          const config = new RecaptchaConfig(response);
                          if (auth.tenantId == null) {
                              auth._agentRecaptchaConfig = config;
                          }
                          else {
                              auth._tenantRecaptchaConfigs[auth.tenantId] = config;
                          }
                          return resolve(config.siteKey);
                      }
                  })
                      .catch(error => {
                      reject(error);
                  });
              });
          }
          function retrieveRecaptchaToken(siteKey, resolve, reject) {
              const grecaptcha = window.grecaptcha;
              if (isEnterprise(grecaptcha)) {
                  grecaptcha.enterprise.ready(() => {
                      grecaptcha.enterprise
                          .execute(siteKey, { action })
                          .then(token => {
                          resolve(token);
                      })
                          .catch(() => {
                          resolve(FAKE_TOKEN);
                      });
                  });
              }
              else {
                  reject(Error('No reCAPTCHA enterprise script loaded.'));
              }
          }
          // Returns Promise for a mock token when appVerificationDisabledForTesting is true.
          if (this.auth.settings.appVerificationDisabledForTesting) {
              const mockRecaptcha = new MockGreCAPTCHATopLevel();
              return mockRecaptcha.execute('siteKey', { action: 'verify' });
          }
          return new Promise((resolve, reject) => {
              retrieveSiteKey(this.auth)
                  .then(siteKey => {
                  if (!forceRefresh && isEnterprise(window.grecaptcha)) {
                      retrieveRecaptchaToken(siteKey, resolve, reject);
                  }
                  else {
                      if (typeof window === 'undefined') {
                          reject(new Error('RecaptchaVerifier is only supported in browser'));
                          return;
                      }
                      let url = _recaptchaEnterpriseScriptUrl();
                      if (url.length !== 0) {
                          url += siteKey;
                      }
                      _loadJS(url)
                          .then(() => {
                          retrieveRecaptchaToken(siteKey, resolve, reject);
                      })
                          .catch(error => {
                          reject(error);
                      });
                  }
              })
                  .catch(error => {
                  reject(error);
              });
          });
      }
  }
  async function injectRecaptchaFields(auth, request, action, isCaptchaResp = false, isFakeToken = false) {
      const verifier = new RecaptchaEnterpriseVerifier(auth);
      let captchaResponse;
      if (isFakeToken) {
          captchaResponse = FAKE_TOKEN;
      }
      else {
          try {
              captchaResponse = await verifier.verify(action);
          }
          catch (error) {
              captchaResponse = await verifier.verify(action, true);
          }
      }
      const newRequest = Object.assign({}, request);
      if (action === "mfaSmsEnrollment" /* RecaptchaActionName.MFA_SMS_ENROLLMENT */ ||
          action === "mfaSmsSignIn" /* RecaptchaActionName.MFA_SMS_SIGNIN */) {
          if ('phoneEnrollmentInfo' in newRequest) {
              const phoneNumber = newRequest.phoneEnrollmentInfo.phoneNumber;
              const recaptchaToken = newRequest.phoneEnrollmentInfo.recaptchaToken;
              Object.assign(newRequest, {
                  'phoneEnrollmentInfo': {
                      phoneNumber,
                      recaptchaToken,
                      captchaResponse,
                      'clientType': "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */,
                      'recaptchaVersion': "RECAPTCHA_ENTERPRISE" /* RecaptchaVersion.ENTERPRISE */
                  }
              });
          }
          else if ('phoneSignInInfo' in newRequest) {
              const recaptchaToken = newRequest.phoneSignInInfo.recaptchaToken;
              Object.assign(newRequest, {
                  'phoneSignInInfo': {
                      recaptchaToken,
                      captchaResponse,
                      'clientType': "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */,
                      'recaptchaVersion': "RECAPTCHA_ENTERPRISE" /* RecaptchaVersion.ENTERPRISE */
                  }
              });
          }
          return newRequest;
      }
      if (!isCaptchaResp) {
          Object.assign(newRequest, { captchaResponse });
      }
      else {
          Object.assign(newRequest, { 'captchaResp': captchaResponse });
      }
      Object.assign(newRequest, { 'clientType': "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ });
      Object.assign(newRequest, {
          'recaptchaVersion': "RECAPTCHA_ENTERPRISE" /* RecaptchaVersion.ENTERPRISE */
      });
      return newRequest;
  }
  async function handleRecaptchaFlow(authInstance, request, actionName, actionMethod, recaptchaAuthProvider) {
      var _a;
      {
          if ((_a = authInstance
              ._getRecaptchaConfig()) === null || _a === undefined ? undefined : _a.isProviderEnabled("EMAIL_PASSWORD_PROVIDER" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */)) {
              const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName, actionName === "getOobCode" /* RecaptchaActionName.GET_OOB_CODE */);
              return actionMethod(authInstance, requestWithRecaptcha);
          }
          else {
              return actionMethod(authInstance, request).catch(async (error) => {
                  if (error.code === `auth/${"missing-recaptcha-token" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */}`) {
                      console.log(`${actionName} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`);
                      const requestWithRecaptcha = await injectRecaptchaFields(authInstance, request, actionName, actionName === "getOobCode" /* RecaptchaActionName.GET_OOB_CODE */);
                      return actionMethod(authInstance, requestWithRecaptcha);
                  }
                  else {
                      return Promise.reject(error);
                  }
              });
          }
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Initializes an {@link Auth} instance with fine-grained control over
   * {@link Dependencies}.
   *
   * @remarks
   *
   * This function allows more control over the {@link Auth} instance than
   * {@link getAuth}. `getAuth` uses platform-specific defaults to supply
   * the {@link Dependencies}. In general, `getAuth` is the easiest way to
   * initialize Auth and works for most use cases. Use `initializeAuth` if you
   * need control over which persistence layer is used, or to minimize bundle
   * size if you're not using either `signInWithPopup` or `signInWithRedirect`.
   *
   * For example, if your app only uses anonymous accounts and you only want
   * accounts saved for the current session, initialize `Auth` with:
   *
   * ```js
   * const auth = initializeAuth(app, {
   *   persistence: browserSessionPersistence,
   *   popupRedirectResolver: undefined,
   * });
   * ```
   *
   * @public
   */
  function initializeAuth(app, deps) {
      const provider = _getProvider(app, 'auth');
      if (provider.isInitialized()) {
          const auth = provider.getImmediate();
          const initialOptions = provider.getOptions();
          if (deepEqual(initialOptions, deps !== null && deps !== undefined ? deps : {})) {
              return auth;
          }
          else {
              _fail(auth, "already-initialized" /* AuthErrorCode.ALREADY_INITIALIZED */);
          }
      }
      const auth = provider.initialize({ options: deps });
      return auth;
  }
  function _initializeAuthInstance(auth, deps) {
      const persistence = (deps === null || deps === undefined ? undefined : deps.persistence) || [];
      const hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);
      if (deps === null || deps === undefined ? undefined : deps.errorMap) {
          auth._updateErrorMap(deps.errorMap);
      }
      // This promise is intended to float; auth initialization happens in the
      // background, meanwhile the auth object may be used by the app.
      // eslint-disable-next-line @typescript-eslint/no-floating-promises
      auth._initializeWithPersistence(hierarchy, deps === null || deps === undefined ? undefined : deps.popupRedirectResolver);
  }

  /**
   * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production
   * Firebase Auth services.
   *
   * @remarks
   * This must be called synchronously immediately following the first call to
   * {@link initializeAuth}.  Do not use with production credentials as emulator
   * traffic is not encrypted.
   *
   *
   * @example
   * ```javascript
   * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });
   * ```
   *
   * @param auth - The {@link Auth} instance.
   * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').
   * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to
   * `true` to disable the warning banner attached to the DOM.
   *
   * @public
   */
  function connectAuthEmulator(auth, url, options) {
      const authInternal = _castAuth(auth);
      _assert(authInternal._canInitEmulator, authInternal, "emulator-config-failed" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */);
      _assert(/^https?:\/\//.test(url), authInternal, "invalid-emulator-scheme" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */);
      const disableWarnings = false;
      const protocol = extractProtocol(url);
      const { host, port } = extractHostAndPort(url);
      const portStr = port === null ? '' : `:${port}`;
      // Always replace path with "/" (even if input url had no path at all, or had a different one).
      authInternal.config.emulator = { url: `${protocol}//${host}${portStr}/` };
      authInternal.settings.appVerificationDisabledForTesting = true;
      authInternal.emulatorConfig = Object.freeze({
          host,
          port,
          protocol: protocol.replace(':', ''),
          options: Object.freeze({ disableWarnings })
      });
      {
          emitEmulatorWarning();
      }
  }
  function extractProtocol(url) {
      const protocolEnd = url.indexOf(':');
      return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);
  }
  function extractHostAndPort(url) {
      const protocol = extractProtocol(url);
      const authority = /(\/\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.
      if (!authority) {
          return { host: '', port: null };
      }
      const hostAndPort = authority[2].split('@').pop() || ''; // Strip out "username:password@".
      const bracketedIPv6 = /^(\[[^\]]+\])(:|$)/.exec(hostAndPort);
      if (bracketedIPv6) {
          const host = bracketedIPv6[1];
          return { host, port: parsePort(hostAndPort.substr(host.length + 1)) };
      }
      else {
          const [host, port] = hostAndPort.split(':');
          return { host, port: parsePort(port) };
      }
  }
  function parsePort(portStr) {
      if (!portStr) {
          return null;
      }
      const port = Number(portStr);
      if (isNaN(port)) {
          return null;
      }
      return port;
  }
  function emitEmulatorWarning() {
      function attachBanner() {
          const el = document.createElement('p');
          const sty = el.style;
          el.innerText =
              'Running in emulator mode. Do not use with production credentials.';
          sty.position = 'fixed';
          sty.width = '100%';
          sty.backgroundColor = '#ffffff';
          sty.border = '.1em solid #000000';
          sty.color = '#b50000';
          sty.bottom = '0px';
          sty.left = '0px';
          sty.margin = '0px';
          sty.zIndex = '10000';
          sty.textAlign = 'center';
          el.classList.add('firebase-emulator-warning');
          document.body.appendChild(el);
      }
      if (typeof console !== 'undefined' && typeof console.info === 'function') {
          console.info('WARNING: You are using the Auth Emulator,' +
              ' which is intended for local testing only.  Do not use with' +
              ' production credentials.');
      }
      if (typeof window !== 'undefined' && typeof document !== 'undefined') {
          if (document.readyState === 'loading') {
              window.addEventListener('DOMContentLoaded', attachBanner);
          }
          else {
              attachBanner();
          }
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Interface that represents the credentials returned by an {@link AuthProvider}.
   *
   * @remarks
   * Implementations specify the details about each auth provider's credential requirements.
   *
   * @public
   */
  class AuthCredential {
      /** @internal */
      constructor(
      /**
       * The authentication provider ID for the credential.
       *
       * @remarks
       * For example, 'facebook.com', or 'google.com'.
       */
      providerId, 
      /**
       * The authentication sign in method for the credential.
       *
       * @remarks
       * For example, {@link SignInMethod}.EMAIL_PASSWORD, or
       * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method
       * identifier as returned in {@link fetchSignInMethodsForEmail}.
       */
      signInMethod) {
          this.providerId = providerId;
          this.signInMethod = signInMethod;
      }
      /**
       * Returns a JSON-serializable representation of this object.
       *
       * @returns a JSON-serializable representation of this object.
       */
      toJSON() {
          return debugFail('not implemented');
      }
      /** @internal */
      _getIdTokenResponse(_auth) {
          return debugFail('not implemented');
      }
      /** @internal */
      _linkToIdToken(_auth, _idToken) {
          return debugFail('not implemented');
      }
      /** @internal */
      _getReauthenticationResolver(_auth) {
          return debugFail('not implemented');
      }
  }
  // Used for linking an email/password account to an existing idToken. Uses the same request/response
  // format as updateEmailPassword.
  async function linkEmailPassword(auth, request) {
      return _performApiRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:signUp" /* Endpoint.SIGN_UP */, request);
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  async function signInWithPassword(auth, request) {
      return _performSignInRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:signInWithPassword" /* Endpoint.SIGN_IN_WITH_PASSWORD */, _addTidIfNecessary(auth, request));
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  async function signInWithEmailLink$1(auth, request) {
      return _performSignInRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:signInWithEmailLink" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));
  }
  async function signInWithEmailLinkForLinking(auth, request) {
      return _performSignInRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:signInWithEmailLink" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Interface that represents the credentials returned by {@link EmailAuthProvider} for
   * {@link ProviderId}.PASSWORD
   *
   * @remarks
   * Covers both {@link SignInMethod}.EMAIL_PASSWORD and
   * {@link SignInMethod}.EMAIL_LINK.
   *
   * @public
   */
  class EmailAuthCredential extends AuthCredential {
      /** @internal */
      constructor(
      /** @internal */
      _email, 
      /** @internal */
      _password, signInMethod, 
      /** @internal */
      _tenantId = null) {
          super("password" /* ProviderId.PASSWORD */, signInMethod);
          this._email = _email;
          this._password = _password;
          this._tenantId = _tenantId;
      }
      /** @internal */
      static _fromEmailAndPassword(email, password) {
          return new EmailAuthCredential(email, password, "password" /* SignInMethod.EMAIL_PASSWORD */);
      }
      /** @internal */
      static _fromEmailAndCode(email, oobCode, tenantId = null) {
          return new EmailAuthCredential(email, oobCode, "emailLink" /* SignInMethod.EMAIL_LINK */, tenantId);
      }
      /** {@inheritdoc AuthCredential.toJSON} */
      toJSON() {
          return {
              email: this._email,
              password: this._password,
              signInMethod: this.signInMethod,
              tenantId: this._tenantId
          };
      }
      /**
       * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.
       *
       * @param json - Either `object` or the stringified representation of the object. When string is
       * provided, `JSON.parse` would be called first.
       *
       * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.
       */
      static fromJSON(json) {
          const obj = typeof json === 'string' ? JSON.parse(json) : json;
          if ((obj === null || obj === undefined ? undefined : obj.email) && (obj === null || obj === undefined ? undefined : obj.password)) {
              if (obj.signInMethod === "password" /* SignInMethod.EMAIL_PASSWORD */) {
                  return this._fromEmailAndPassword(obj.email, obj.password);
              }
              else if (obj.signInMethod === "emailLink" /* SignInMethod.EMAIL_LINK */) {
                  return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);
              }
          }
          return null;
      }
      /** @internal */
      async _getIdTokenResponse(auth) {
          switch (this.signInMethod) {
              case "password" /* SignInMethod.EMAIL_PASSWORD */:
                  const request = {
                      returnSecureToken: true,
                      email: this._email,
                      password: this._password,
                      clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */
                  };
                  return handleRecaptchaFlow(auth, request, "signInWithPassword" /* RecaptchaActionName.SIGN_IN_WITH_PASSWORD */, signInWithPassword);
              case "emailLink" /* SignInMethod.EMAIL_LINK */:
                  return signInWithEmailLink$1(auth, {
                      email: this._email,
                      oobCode: this._password
                  });
              default:
                  _fail(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
          }
      }
      /** @internal */
      async _linkToIdToken(auth, idToken) {
          switch (this.signInMethod) {
              case "password" /* SignInMethod.EMAIL_PASSWORD */:
                  const request = {
                      idToken,
                      returnSecureToken: true,
                      email: this._email,
                      password: this._password,
                      clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */
                  };
                  return handleRecaptchaFlow(auth, request, "signUpPassword" /* RecaptchaActionName.SIGN_UP_PASSWORD */, linkEmailPassword);
              case "emailLink" /* SignInMethod.EMAIL_LINK */:
                  return signInWithEmailLinkForLinking(auth, {
                      idToken,
                      email: this._email,
                      oobCode: this._password
                  });
              default:
                  _fail(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
          }
      }
      /** @internal */
      _getReauthenticationResolver(auth) {
          return this._getIdTokenResponse(auth);
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  async function signInWithIdp(auth, request) {
      return _performSignInRequest(auth, "POST" /* HttpMethod.POST */, "/v1/accounts:signInWithIdp" /* Endpoint.SIGN_IN_WITH_IDP */, _addTidIfNecessary(auth, request));
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const IDP_REQUEST_URI$1 = 'http://localhost';
  /**
   * Represents the OAuth credentials returned by an {@link OAuthProvider}.
   *
   * @remarks
   * Implementations specify the details about each auth provider's credential requirements.
   *
   * @public
   */
  class OAuthCredential extends AuthCredential {
      constructor() {
          super(...arguments);
          this.pendingToken = null;
      }
      /** @internal */
      static _fromParams(params) {
          const cred = new OAuthCredential(params.providerId, params.signInMethod);
          if (params.idToken || params.accessToken) {
              // OAuth 2 and either ID token or access token.
              if (params.idToken) {
                  cred.idToken = params.idToken;
              }
              if (params.accessToken) {
                  cred.accessToken = params.accessToken;
              }
              // Add nonce if available and no pendingToken is present.
              if (params.nonce && !params.pendingToken) {
                  cred.nonce = params.nonce;
              }
              if (params.pendingToken) {
                  cred.pendingToken = params.pendingToken;
              }
          }
          else if (params.oauthToken && params.oauthTokenSecret) {
              // OAuth 1 and OAuth token with token secret
              cred.accessToken = params.oauthToken;
              cred.secret = params.oauthTokenSecret;
          }
          else {
              _fail("argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
          }
          return cred;
      }
      /** {@inheritdoc AuthCredential.toJSON}  */
      toJSON() {
          return {
              idToken: this.idToken,
              accessToken: this.accessToken,
              secret: this.secret,
              nonce: this.nonce,
              pendingToken: this.pendingToken,
              providerId: this.providerId,
              signInMethod: this.signInMethod
          };
      }
      /**
       * Static method to deserialize a JSON representation of an object into an
       * {@link  AuthCredential}.
       *
       * @param json - Input can be either Object or the stringified representation of the object.
       * When string is provided, JSON.parse would be called first.
       *
       * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.
       */
      static fromJSON(json) {
          const obj = typeof json === 'string' ? JSON.parse(json) : json;
          const { providerId, signInMethod } = obj, rest = __rest(obj, ["providerId", "signInMethod"]);
          if (!providerId || !signInMethod) {
              return null;
          }
          const cred = new OAuthCredential(providerId, signInMethod);
          cred.idToken = rest.idToken || undefined;
          cred.accessToken = rest.accessToken || undefined;
          cred.secret = rest.secret;
          cred.nonce = rest.nonce;
          cred.pendingToken = rest.pendingToken || null;
          return cred;
      }
      /** @internal */
      _getIdTokenResponse(auth) {
          const request = this.buildRequest();
          return signInWithIdp(auth, request);
      }
      /** @internal */
      _linkToIdToken(auth, idToken) {
          const request = this.buildRequest();
          request.idToken = idToken;
          return signInWithIdp(auth, request);
      }
      /** @internal */
      _getReauthenticationResolver(auth) {
          const request = this.buildRequest();
          request.autoCreate = false;
          return signInWithIdp(auth, request);
      }
      buildRequest() {
          const request = {
              requestUri: IDP_REQUEST_URI$1,
              returnSecureToken: true
          };
          if (this.pendingToken) {
              request.pendingToken = this.pendingToken;
          }
          else {
              const postBody = {};
              if (this.idToken) {
                  postBody['id_token'] = this.idToken;
              }
              if (this.accessToken) {
                  postBody['access_token'] = this.accessToken;
              }
              if (this.secret) {
                  postBody['oauth_token_secret'] = this.secret;
              }
              postBody['providerId'] = this.providerId;
              if (this.nonce && !this.pendingToken) {
                  postBody['nonce'] = this.nonce;
              }
              request.postBody = querystring(postBody);
          }
          return request;
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Maps the mode string in action code URL to Action Code Info operation.
   *
   * @param mode
   */
  function parseMode(mode) {
      switch (mode) {
          case 'recoverEmail':
              return "RECOVER_EMAIL" /* ActionCodeOperation.RECOVER_EMAIL */;
          case 'resetPassword':
              return "PASSWORD_RESET" /* ActionCodeOperation.PASSWORD_RESET */;
          case 'signIn':
              return "EMAIL_SIGNIN" /* ActionCodeOperation.EMAIL_SIGNIN */;
          case 'verifyEmail':
              return "VERIFY_EMAIL" /* ActionCodeOperation.VERIFY_EMAIL */;
          case 'verifyAndChangeEmail':
              return "VERIFY_AND_CHANGE_EMAIL" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */;
          case 'revertSecondFactorAddition':
              return "REVERT_SECOND_FACTOR_ADDITION" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */;
          default:
              return null;
      }
  }
  /**
   * Helper to parse FDL links
   *
   * @param url
   */
  function parseDeepLink(url) {
      const link = querystringDecode(extractQuerystring(url))['link'];
      // Double link case (automatic redirect).
      const doubleDeepLink = link
          ? querystringDecode(extractQuerystring(link))['deep_link_id']
          : null;
      // iOS custom scheme links.
      const iOSDeepLink = querystringDecode(extractQuerystring(url))['deep_link_id'];
      const iOSDoubleDeepLink = iOSDeepLink
          ? querystringDecode(extractQuerystring(iOSDeepLink))['link']
          : null;
      return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;
  }
  /**
   * A utility class to parse email action URLs such as password reset, email verification,
   * email link sign in, etc.
   *
   * @public
   */
  class ActionCodeURL {
      /**
       * @param actionLink - The link from which to extract the URL.
       * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
       *
       * @internal
       */
      constructor(actionLink) {
          var _a, _b, _c, _d, _e, _f;
          const searchParams = querystringDecode(extractQuerystring(actionLink));
          const apiKey = (_a = searchParams["apiKey" /* QueryField.API_KEY */]) !== null && _a !== undefined ? _a : null;
          const code = (_b = searchParams["oobCode" /* QueryField.CODE */]) !== null && _b !== undefined ? _b : null;
          const operation = parseMode((_c = searchParams["mode" /* QueryField.MODE */]) !== null && _c !== undefined ? _c : null);
          // Validate API key, code and mode.
          _assert(apiKey && code && operation, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
          this.apiKey = apiKey;
          this.operation = operation;
          this.code = code;
          this.continueUrl = (_d = searchParams["continueUrl" /* QueryField.CONTINUE_URL */]) !== null && _d !== undefined ? _d : null;
          this.languageCode = (_e = searchParams["languageCode" /* QueryField.LANGUAGE_CODE */]) !== null && _e !== undefined ? _e : null;
          this.tenantId = (_f = searchParams["tenantId" /* QueryField.TENANT_ID */]) !== null && _f !== undefined ? _f : null;
      }
      /**
       * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,
       * otherwise returns null.
       *
       * @param link  - The email action link string.
       * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
       *
       * @public
       */
      static parseLink(link) {
          const actionLink = parseDeepLink(link);
          try {
              return new ActionCodeURL(actionLink);
          }
          catch (_a) {
              return null;
          }
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Provider for generating {@link EmailAuthCredential}.
   *
   * @public
   */
  class EmailAuthProvider {
      constructor() {
          /**
           * Always set to {@link ProviderId}.PASSWORD, even for email link.
           */
          this.providerId = EmailAuthProvider.PROVIDER_ID;
      }
      /**
       * Initialize an {@link AuthCredential} using an email and password.
       *
       * @example
       * ```javascript
       * const authCredential = EmailAuthProvider.credential(email, password);
       * const userCredential = await signInWithCredential(auth, authCredential);
       * ```
       *
       * @example
       * ```javascript
       * const userCredential = await signInWithEmailAndPassword(auth, email, password);
       * ```
       *
       * @param email - Email address.
       * @param password - User account password.
       * @returns The auth provider credential.
       */
      static credential(email, password) {
          return EmailAuthCredential._fromEmailAndPassword(email, password);
      }
      /**
       * Initialize an {@link AuthCredential} using an email and an email link after a sign in with
       * email link operation.
       *
       * @example
       * ```javascript
       * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);
       * const userCredential = await signInWithCredential(auth, authCredential);
       * ```
       *
       * @example
       * ```javascript
       * await sendSignInLinkToEmail(auth, email);
       * // Obtain emailLink from user.
       * const userCredential = await signInWithEmailLink(auth, email, emailLink);
       * ```
       *
       * @param auth - The {@link Auth} instance used to verify the link.
       * @param email - Email address.
       * @param emailLink - Sign-in email link.
       * @returns - The auth provider credential.
       */
      static credentialWithLink(email, emailLink) {
          const actionCodeUrl = ActionCodeURL.parseLink(emailLink);
          _assert(actionCodeUrl, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
          return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);
      }
  }
  /**
   * Always set to {@link ProviderId}.PASSWORD, even for email link.
   */
  EmailAuthProvider.PROVIDER_ID = "password" /* ProviderId.PASSWORD */;
  /**
   * Always set to {@link SignInMethod}.EMAIL_PASSWORD.
   */
  EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = "password" /* SignInMethod.EMAIL_PASSWORD */;
  /**
   * Always set to {@link SignInMethod}.EMAIL_LINK.
   */
  EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = "emailLink" /* SignInMethod.EMAIL_LINK */;

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * The base class for all Federated providers (OAuth (including OIDC), SAML).
   *
   * This class is not meant to be instantiated directly.
   *
   * @public
   */
  class FederatedAuthProvider {
      /**
       * Constructor for generic OAuth providers.
       *
       * @param providerId - Provider for which credentials should be generated.
       */
      constructor(providerId) {
          this.providerId = providerId;
          /** @internal */
          this.defaultLanguageCode = null;
          /** @internal */
          this.customParameters = {};
      }
      /**
       * Set the language gode.
       *
       * @param languageCode - language code
       */
      setDefaultLanguage(languageCode) {
          this.defaultLanguageCode = languageCode;
      }
      /**
       * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in
       * operations.
       *
       * @remarks
       * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,
       * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.
       *
       * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.
       */
      setCustomParameters(customOAuthParameters) {
          this.customParameters = customOAuthParameters;
          return this;
      }
      /**
       * Retrieve the current list of {@link CustomParameters}.
       */
      getCustomParameters() {
          return this.customParameters;
      }
  }

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Common code to all OAuth providers. This is separate from the
   * {@link OAuthProvider} so that child providers (like
   * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.
   * Instead, they rely on a static `credential` method.
   */
  class BaseOAuthProvider extends FederatedAuthProvider {
      constructor() {
          super(...arguments);
          /** @internal */
          this.scopes = [];
      }
      /**
       * Add an OAuth scope to the credential.
       *
       * @param scope - Provider OAuth scope to add.
       */
      addScope(scope) {
          // If not already added, add scope to list.
          if (!this.scopes.includes(scope)) {
              this.scopes.push(scope);
          }
          return this;
      }
      /**
       * Retrieve the current list of OAuth scopes.
       */
      getScopes() {
          return [...this.scopes];
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.
   *
   * @example
   * ```javascript
   * // Sign in using a redirect.
   * const provider = new FacebookAuthProvider();
   * // Start a sign in process for an unauthenticated user.
   * provider.addScope('user_birthday');
   * await signInWithRedirect(auth, provider);
   * // This will trigger a full page redirect away from your app
   *
   * // After returning from the redirect when your app initializes you can obtain the result
   * const result = await getRedirectResult(auth);
   * if (result) {
   *   // This is the signed-in user
   *   const user = result.user;
   *   // This gives you a Facebook Access Token.
   *   const credential = FacebookAuthProvider.credentialFromResult(result);
   *   const token = credential.accessToken;
   * }
   * ```
   *
   * @example
   * ```javascript
   * // Sign in using a popup.
   * const provider = new FacebookAuthProvider();
   * provider.addScope('user_birthday');
   * const result = await signInWithPopup(auth, provider);
   *
   * // The signed-in user info.
   * const user = result.user;
   * // This gives you a Facebook Access Token.
   * const credential = FacebookAuthProvider.credentialFromResult(result);
   * const token = credential.accessToken;
   * ```
   *
   * @public
   */
  class FacebookAuthProvider extends BaseOAuthProvider {
      constructor() {
          super("facebook.com" /* ProviderId.FACEBOOK */);
      }
      /**
       * Creates a credential for Facebook.
       *
       * @example
       * ```javascript
       * // `event` from the Facebook auth.authResponseChange callback.
       * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);
       * const result = await signInWithCredential(credential);
       * ```
       *
       * @param accessToken - Facebook access token.
       */
      static credential(accessToken) {
          return OAuthCredential._fromParams({
              providerId: FacebookAuthProvider.PROVIDER_ID,
              signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,
              accessToken
          });
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromResult(userCredential) {
          return FacebookAuthProvider.credentialFromTaggedObject(userCredential);
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
       * thrown during a sign-in, link, or reauthenticate operation.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromError(error) {
          return FacebookAuthProvider.credentialFromTaggedObject((error.customData || {}));
      }
      static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
          if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {
              return null;
          }
          if (!tokenResponse.oauthAccessToken) {
              return null;
          }
          try {
              return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);
          }
          catch (_a) {
              return null;
          }
      }
  }
  /** Always set to {@link SignInMethod}.FACEBOOK. */
  FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = "facebook.com" /* SignInMethod.FACEBOOK */;
  /** Always set to {@link ProviderId}.FACEBOOK. */
  FacebookAuthProvider.PROVIDER_ID = "facebook.com" /* ProviderId.FACEBOOK */;

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.
   *
   * @example
   * ```javascript
   * // Sign in using a redirect.
   * const provider = new GoogleAuthProvider();
   * // Start a sign in process for an unauthenticated user.
   * provider.addScope('profile');
   * provider.addScope('email');
   * await signInWithRedirect(auth, provider);
   * // This will trigger a full page redirect away from your app
   *
   * // After returning from the redirect when your app initializes you can obtain the result
   * const result = await getRedirectResult(auth);
   * if (result) {
   *   // This is the signed-in user
   *   const user = result.user;
   *   // This gives you a Google Access Token.
   *   const credential = GoogleAuthProvider.credentialFromResult(result);
   *   const token = credential.accessToken;
   * }
   * ```
   *
   * @example
   * ```javascript
   * // Sign in using a popup.
   * const provider = new GoogleAuthProvider();
   * provider.addScope('profile');
   * provider.addScope('email');
   * const result = await signInWithPopup(auth, provider);
   *
   * // The signed-in user info.
   * const user = result.user;
   * // This gives you a Google Access Token.
   * const credential = GoogleAuthProvider.credentialFromResult(result);
   * const token = credential.accessToken;
   * ```
   *
   * @public
   */
  class GoogleAuthProvider extends BaseOAuthProvider {
      constructor() {
          super("google.com" /* ProviderId.GOOGLE */);
          this.addScope('profile');
      }
      /**
       * Creates a credential for Google. At least one of ID token and access token is required.
       *
       * @example
       * ```javascript
       * // \`googleUser\` from the onsuccess Google Sign In callback.
       * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);
       * const result = await signInWithCredential(credential);
       * ```
       *
       * @param idToken - Google ID token.
       * @param accessToken - Google access token.
       */
      static credential(idToken, accessToken) {
          return OAuthCredential._fromParams({
              providerId: GoogleAuthProvider.PROVIDER_ID,
              signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,
              idToken,
              accessToken
          });
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromResult(userCredential) {
          return GoogleAuthProvider.credentialFromTaggedObject(userCredential);
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
       * thrown during a sign-in, link, or reauthenticate operation.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromError(error) {
          return GoogleAuthProvider.credentialFromTaggedObject((error.customData || {}));
      }
      static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
          if (!tokenResponse) {
              return null;
          }
          const { oauthIdToken, oauthAccessToken } = tokenResponse;
          if (!oauthIdToken && !oauthAccessToken) {
              // This could be an oauth 1 credential or a phone credential
              return null;
          }
          try {
              return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);
          }
          catch (_a) {
              return null;
          }
      }
  }
  /** Always set to {@link SignInMethod}.GOOGLE. */
  GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = "google.com" /* SignInMethod.GOOGLE */;
  /** Always set to {@link ProviderId}.GOOGLE. */
  GoogleAuthProvider.PROVIDER_ID = "google.com" /* ProviderId.GOOGLE */;

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.
   *
   * @remarks
   * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use
   * the {@link signInWithPopup} handler:
   *
   * @example
   * ```javascript
   * // Sign in using a redirect.
   * const provider = new GithubAuthProvider();
   * // Start a sign in process for an unauthenticated user.
   * provider.addScope('repo');
   * await signInWithRedirect(auth, provider);
   * // This will trigger a full page redirect away from your app
   *
   * // After returning from the redirect when your app initializes you can obtain the result
   * const result = await getRedirectResult(auth);
   * if (result) {
   *   // This is the signed-in user
   *   const user = result.user;
   *   // This gives you a GitHub Access Token.
   *   const credential = GithubAuthProvider.credentialFromResult(result);
   *   const token = credential.accessToken;
   * }
   * ```
   *
   * @example
   * ```javascript
   * // Sign in using a popup.
   * const provider = new GithubAuthProvider();
   * provider.addScope('repo');
   * const result = await signInWithPopup(auth, provider);
   *
   * // The signed-in user info.
   * const user = result.user;
   * // This gives you a GitHub Access Token.
   * const credential = GithubAuthProvider.credentialFromResult(result);
   * const token = credential.accessToken;
   * ```
   * @public
   */
  class GithubAuthProvider extends BaseOAuthProvider {
      constructor() {
          super("github.com" /* ProviderId.GITHUB */);
      }
      /**
       * Creates a credential for GitHub.
       *
       * @param accessToken - GitHub access token.
       */
      static credential(accessToken) {
          return OAuthCredential._fromParams({
              providerId: GithubAuthProvider.PROVIDER_ID,
              signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,
              accessToken
          });
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromResult(userCredential) {
          return GithubAuthProvider.credentialFromTaggedObject(userCredential);
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
       * thrown during a sign-in, link, or reauthenticate operation.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromError(error) {
          return GithubAuthProvider.credentialFromTaggedObject((error.customData || {}));
      }
      static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
          if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {
              return null;
          }
          if (!tokenResponse.oauthAccessToken) {
              return null;
          }
          try {
              return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);
          }
          catch (_a) {
              return null;
          }
      }
  }
  /** Always set to {@link SignInMethod}.GITHUB. */
  GithubAuthProvider.GITHUB_SIGN_IN_METHOD = "github.com" /* SignInMethod.GITHUB */;
  /** Always set to {@link ProviderId}.GITHUB. */
  GithubAuthProvider.PROVIDER_ID = "github.com" /* ProviderId.GITHUB */;

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.
   *
   * @example
   * ```javascript
   * // Sign in using a redirect.
   * const provider = new TwitterAuthProvider();
   * // Start a sign in process for an unauthenticated user.
   * await signInWithRedirect(auth, provider);
   * // This will trigger a full page redirect away from your app
   *
   * // After returning from the redirect when your app initializes you can obtain the result
   * const result = await getRedirectResult(auth);
   * if (result) {
   *   // This is the signed-in user
   *   const user = result.user;
   *   // This gives you a Twitter Access Token and Secret.
   *   const credential = TwitterAuthProvider.credentialFromResult(result);
   *   const token = credential.accessToken;
   *   const secret = credential.secret;
   * }
   * ```
   *
   * @example
   * ```javascript
   * // Sign in using a popup.
   * const provider = new TwitterAuthProvider();
   * const result = await signInWithPopup(auth, provider);
   *
   * // The signed-in user info.
   * const user = result.user;
   * // This gives you a Twitter Access Token and Secret.
   * const credential = TwitterAuthProvider.credentialFromResult(result);
   * const token = credential.accessToken;
   * const secret = credential.secret;
   * ```
   *
   * @public
   */
  class TwitterAuthProvider extends BaseOAuthProvider {
      constructor() {
          super("twitter.com" /* ProviderId.TWITTER */);
      }
      /**
       * Creates a credential for Twitter.
       *
       * @param token - Twitter access token.
       * @param secret - Twitter secret.
       */
      static credential(token, secret) {
          return OAuthCredential._fromParams({
              providerId: TwitterAuthProvider.PROVIDER_ID,
              signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,
              oauthToken: token,
              oauthTokenSecret: secret
          });
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromResult(userCredential) {
          return TwitterAuthProvider.credentialFromTaggedObject(userCredential);
      }
      /**
       * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
       * thrown during a sign-in, link, or reauthenticate operation.
       *
       * @param userCredential - The user credential.
       */
      static credentialFromError(error) {
          return TwitterAuthProvider.credentialFromTaggedObject((error.customData || {}));
      }
      static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
          if (!tokenResponse) {
              return null;
          }
          const { oauthAccessToken, oauthTokenSecret } = tokenResponse;
          if (!oauthAccessToken || !oauthTokenSecret) {
              return null;
          }
          try {
              return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);
          }
          catch (_a) {
              return null;
          }
      }
  }
  /** Always set to {@link SignInMethod}.TWITTER. */
  TwitterAuthProvider.TWITTER_SIGN_IN_METHOD = "twitter.com" /* SignInMethod.TWITTER */;
  /** Always set to {@link ProviderId}.TWITTER. */
  TwitterAuthProvider.PROVIDER_ID = "twitter.com" /* ProviderId.TWITTER */;

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class UserCredentialImpl {
      constructor(params) {
          this.user = params.user;
          this.providerId = params.providerId;
          this._tokenResponse = params._tokenResponse;
          this.operationType = params.operationType;
      }
      static async _fromIdTokenResponse(auth, operationType, idTokenResponse, isAnonymous = false) {
          const user = await UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);
          const providerId = providerIdForResponse(idTokenResponse);
          const userCred = new UserCredentialImpl({
              user,
              providerId,
              _tokenResponse: idTokenResponse,
              operationType
          });
          return userCred;
      }
      static async _forOperation(user, operationType, response) {
          await user._updateTokensIfNecessary(response, /* reload */ true);
          const providerId = providerIdForResponse(response);
          return new UserCredentialImpl({
              user,
              providerId,
              _tokenResponse: response,
              operationType
          });
      }
  }
  function providerIdForResponse(response) {
      if (response.providerId) {
          return response.providerId;
      }
      if ('phoneNumber' in response) {
          return "phone" /* ProviderId.PHONE */;
      }
      return null;
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class MultiFactorError extends FirebaseError {
      constructor(auth, error, operationType, user) {
          var _a;
          super(error.code, error.message);
          this.operationType = operationType;
          this.user = user;
          // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
          Object.setPrototypeOf(this, MultiFactorError.prototype);
          this.customData = {
              appName: auth.name,
              tenantId: (_a = auth.tenantId) !== null && _a !== undefined ? _a : undefined,
              _serverResponse: error.customData._serverResponse,
              operationType
          };
      }
      static _fromErrorAndOperation(auth, error, operationType, user) {
          return new MultiFactorError(auth, error, operationType, user);
      }
  }
  function _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {
      const idTokenProvider = operationType === "reauthenticate" /* OperationType.REAUTHENTICATE */
          ? credential._getReauthenticationResolver(auth)
          : credential._getIdTokenResponse(auth);
      return idTokenProvider.catch(error => {
          if (error.code === `auth/${"multi-factor-auth-required" /* AuthErrorCode.MFA_REQUIRED */}`) {
              throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);
          }
          throw error;
      });
  }
  async function _link$1(user, credential, bypassAuthState = false) {
      const response = await _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, await user.getIdToken()), bypassAuthState);
      return UserCredentialImpl._forOperation(user, "link" /* OperationType.LINK */, response);
  }

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  async function _reauthenticate(user, credential, bypassAuthState = false) {
      const { auth } = user;
      if (_isFirebaseServerApp(auth.app)) {
          return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));
      }
      const operationType = "reauthenticate" /* OperationType.REAUTHENTICATE */;
      try {
          const response = await _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);
          _assert(response.idToken, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
          const parsed = _parseToken(response.idToken);
          _assert(parsed, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
          const { sub: localId } = parsed;
          _assert(user.uid === localId, auth, "user-mismatch" /* AuthErrorCode.USER_MISMATCH */);
          return UserCredentialImpl._forOperation(user, operationType, response);
      }
      catch (e) {
          // Convert user deleted error into user mismatch
          if ((e === null || e === undefined ? undefined : e.code) === `auth/${"user-not-found" /* AuthErrorCode.USER_DELETED */}`) {
              _fail(auth, "user-mismatch" /* AuthErrorCode.USER_MISMATCH */);
          }
          throw e;
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  async function _signInWithCredential(auth, credential, bypassAuthState = false) {
      if (_isFirebaseServerApp(auth.app)) {
          return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));
      }
      const operationType = "signIn" /* OperationType.SIGN_IN */;
      const response = await _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);
      const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);
      if (!bypassAuthState) {
          await auth._updateCurrentUser(userCredential.user);
      }
      return userCredential;
  }
  /**
   * Asynchronously signs in with the given credentials.
   *
   * @remarks
   * An {@link AuthProvider} can be used to generate the credential.
   *
   * This method is not supported by {@link Auth} instances created with a
   * {@link @firebase/app#FirebaseServerApp}.
   *
   * @param auth - The {@link Auth} instance.
   * @param credential - The auth credential.
   *
   * @public
   */
  async function signInWithCredential(auth, credential) {
      return _signInWithCredential(_castAuth(auth), credential);
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Updates the password policy cached in the {@link Auth} instance if a policy is already
   * cached for the project or tenant.
   *
   * @remarks
   * We only fetch the password policy if the password did not meet policy requirements and
   * there is an existing policy cached. A developer must call validatePassword at least
   * once for the cache to be automatically updated.
   *
   * @param auth - The {@link Auth} instance.
   *
   * @private
   */
  async function recachePasswordPolicy(auth) {
      const authInternal = _castAuth(auth);
      if (authInternal._getPasswordPolicyInternal()) {
          await authInternal._updatePasswordPolicy();
      }
  }
  /**
   * Asynchronously signs in using an email and password.
   *
   * @remarks
   * Fails with an error if the email address and password do not match. When
   * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}
   * is enabled, this method fails with "auth/invalid-credential" in case of an invalid
   * email/password.
   *
   * This method is not supported on {@link Auth} instances created with a
   * {@link @firebase/app#FirebaseServerApp}.
   *
   * Note: The user's password is NOT the password used to access the user's email account. The
   * email address serves as a unique identifier for the user, and the password is used to access
   * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.
   *
   *
   * @param auth - The {@link Auth} instance.
   * @param email - The users email address.
   * @param password - The users password.
   *
   * @public
   */
  function signInWithEmailAndPassword(auth, email, password) {
      if (_isFirebaseServerApp(auth.app)) {
          return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));
      }
      return signInWithCredential(getModularInstance(auth), EmailAuthProvider.credential(email, password)).catch(async (error) => {
          if (error.code === `auth/${"password-does-not-meet-requirements" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */}`) {
              void recachePasswordPolicy(auth);
          }
          throw error;
      });
  }
  /**
   * Adds an observer for changes to the signed-in user's ID token.
   *
   * @remarks
   * This includes sign-in, sign-out, and token refresh events.
   * This will not be triggered automatically upon ID token expiration. Use {@link User.getIdToken} to refresh the ID token.
   *
   * @param auth - The {@link Auth} instance.
   * @param nextOrObserver - callback triggered on change.
   * @param error - Deprecated. This callback is never triggered. Errors
   * on signing in/out can be caught in promises returned from
   * sign-in/sign-out functions.
   * @param completed - Deprecated. This callback is never triggered.
   *
   * @public
   */
  function onIdTokenChanged(auth, nextOrObserver, error, completed) {
      return getModularInstance(auth).onIdTokenChanged(nextOrObserver, error, completed);
  }
  /**
   * Adds a blocking callback that runs before an auth state change
   * sets a new user.
   *
   * @param auth - The {@link Auth} instance.
   * @param callback - callback triggered before new user value is set.
   *   If this throws, it blocks the user from being set.
   * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`
   *   callback throws, allowing you to undo any side effects.
   */
  function beforeAuthStateChanged(auth, callback, onAbort) {
      return getModularInstance(auth).beforeAuthStateChanged(callback, onAbort);
  }
  /**
   * Adds an observer for changes to the user's sign-in state.
   *
   * @remarks
   * To keep the old behavior, see {@link onIdTokenChanged}.
   *
   * @param auth - The {@link Auth} instance.
   * @param nextOrObserver - callback triggered on change.
   * @param error - Deprecated. This callback is never triggered. Errors
   * on signing in/out can be caught in promises returned from
   * sign-in/sign-out functions.
   * @param completed - Deprecated. This callback is never triggered.
   *
   * @public
   */
  function onAuthStateChanged(auth, nextOrObserver, error, completed) {
      return getModularInstance(auth).onAuthStateChanged(nextOrObserver, error, completed);
  }
  /**
   * Signs out the current user.
   *
   * @remarks
   * This method is not supported by {@link Auth} instances created with a
   * {@link @firebase/app#FirebaseServerApp}.
   *
   * @param auth - The {@link Auth} instance.
   *
   * @public
   */
  function signOut(auth) {
      return getModularInstance(auth).signOut();
  }

  const STORAGE_AVAILABLE_KEY = '__sak';

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // There are two different browser persistence types: local and session.
  // Both have the same implementation but use a different underlying storage
  // object.
  class BrowserPersistenceClass {
      constructor(storageRetriever, type) {
          this.storageRetriever = storageRetriever;
          this.type = type;
      }
      _isAvailable() {
          try {
              if (!this.storage) {
                  return Promise.resolve(false);
              }
              this.storage.setItem(STORAGE_AVAILABLE_KEY, '1');
              this.storage.removeItem(STORAGE_AVAILABLE_KEY);
              return Promise.resolve(true);
          }
          catch (_a) {
              return Promise.resolve(false);
          }
      }
      _set(key, value) {
          this.storage.setItem(key, JSON.stringify(value));
          return Promise.resolve();
      }
      _get(key) {
          const json = this.storage.getItem(key);
          return Promise.resolve(json ? JSON.parse(json) : null);
      }
      _remove(key) {
          this.storage.removeItem(key);
          return Promise.resolve();
      }
      get storage() {
          return this.storageRetriever();
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // The polling period in case events are not supported
  const _POLLING_INTERVAL_MS$1 = 1000;
  // The IE 10 localStorage cross tab synchronization delay in milliseconds
  const IE10_LOCAL_STORAGE_SYNC_DELAY = 10;
  class BrowserLocalPersistence extends BrowserPersistenceClass {
      constructor() {
          super(() => window.localStorage, "LOCAL" /* PersistenceType.LOCAL */);
          this.boundEventHandler = (event, poll) => this.onStorageEvent(event, poll);
          this.listeners = {};
          this.localCache = {};
          // setTimeout return value is platform specific
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          this.pollTimer = null;
          // Whether to use polling instead of depending on window events
          this.fallbackToPolling = _isMobileBrowser();
          this._shouldAllowMigration = true;
      }
      forAllChangedKeys(cb) {
          // Check all keys with listeners on them.
          for (const key of Object.keys(this.listeners)) {
              // Get value from localStorage.
              const newValue = this.storage.getItem(key);
              const oldValue = this.localCache[key];
              // If local map value does not match, trigger listener with storage event.
              // Differentiate this simulated event from the real storage event.
              if (newValue !== oldValue) {
                  cb(key, oldValue, newValue);
              }
          }
      }
      onStorageEvent(event, poll = false) {
          // Key would be null in some situations, like when localStorage is cleared
          if (!event.key) {
              this.forAllChangedKeys((key, _oldValue, newValue) => {
                  this.notifyListeners(key, newValue);
              });
              return;
          }
          const key = event.key;
          // Check the mechanism how this event was detected.
          // The first event will dictate the mechanism to be used.
          if (poll) {
              // Environment detects storage changes via polling.
              // Remove storage event listener to prevent possible event duplication.
              this.detachListener();
          }
          else {
              // Environment detects storage changes via storage event listener.
              // Remove polling listener to prevent possible event duplication.
              this.stopPolling();
          }
          const triggerListeners = () => {
              // Keep local map up to date in case storage event is triggered before
              // poll.
              const storedValue = this.storage.getItem(key);
              if (!poll && this.localCache[key] === storedValue) {
                  // Real storage event which has already been detected, do nothing.
                  // This seems to trigger in some IE browsers for some reason.
                  return;
              }
              this.notifyListeners(key, storedValue);
          };
          const storedValue = this.storage.getItem(key);
          if (_isIE10() &&
              storedValue !== event.newValue &&
              event.newValue !== event.oldValue) {
              // IE 10 has this weird bug where a storage event would trigger with the
              // correct key, oldValue and newValue but localStorage.getItem(key) does
              // not yield the updated value until a few milliseconds. This ensures
              // this recovers from that situation.
              setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);
          }
          else {
              triggerListeners();
          }
      }
      notifyListeners(key, value) {
          this.localCache[key] = value;
          const listeners = this.listeners[key];
          if (listeners) {
              for (const listener of Array.from(listeners)) {
                  listener(value ? JSON.parse(value) : value);
              }
          }
      }
      startPolling() {
          this.stopPolling();
          this.pollTimer = setInterval(() => {
              this.forAllChangedKeys((key, oldValue, newValue) => {
                  this.onStorageEvent(new StorageEvent('storage', {
                      key,
                      oldValue,
                      newValue
                  }), 
                  /* poll */ true);
              });
          }, _POLLING_INTERVAL_MS$1);
      }
      stopPolling() {
          if (this.pollTimer) {
              clearInterval(this.pollTimer);
              this.pollTimer = null;
          }
      }
      attachListener() {
          window.addEventListener('storage', this.boundEventHandler);
      }
      detachListener() {
          window.removeEventListener('storage', this.boundEventHandler);
      }
      _addListener(key, listener) {
          if (Object.keys(this.listeners).length === 0) {
              // Whether browser can detect storage event when it had already been pushed to the background.
              // This may happen in some mobile browsers. A localStorage change in the foreground window
              // will not be detected in the background window via the storage event.
              // This was detected in iOS 7.x mobile browsers
              if (this.fallbackToPolling) {
                  this.startPolling();
              }
              else {
                  this.attachListener();
              }
          }
          if (!this.listeners[key]) {
              this.listeners[key] = new Set();
              // Populate the cache to avoid spuriously triggering on first poll.
              this.localCache[key] = this.storage.getItem(key);
          }
          this.listeners[key].add(listener);
      }
      _removeListener(key, listener) {
          if (this.listeners[key]) {
              this.listeners[key].delete(listener);
              if (this.listeners[key].size === 0) {
                  delete this.listeners[key];
              }
          }
          if (Object.keys(this.listeners).length === 0) {
              this.detachListener();
              this.stopPolling();
          }
      }
      // Update local cache on base operations:
      async _set(key, value) {
          await super._set(key, value);
          this.localCache[key] = JSON.stringify(value);
      }
      async _get(key) {
          const value = await super._get(key);
          this.localCache[key] = JSON.stringify(value);
          return value;
      }
      async _remove(key) {
          await super._remove(key);
          delete this.localCache[key];
      }
  }
  BrowserLocalPersistence.type = 'LOCAL';
  /**
   * An implementation of {@link Persistence} of type `LOCAL` using `localStorage`
   * for the underlying storage.
   *
   * @public
   */
  const browserLocalPersistence = BrowserLocalPersistence;

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class BrowserSessionPersistence extends BrowserPersistenceClass {
      constructor() {
          super(() => window.sessionStorage, "SESSION" /* PersistenceType.SESSION */);
      }
      _addListener(_key, _listener) {
          // Listeners are not supported for session storage since it cannot be shared across windows
          return;
      }
      _removeListener(_key, _listener) {
          // Listeners are not supported for session storage since it cannot be shared across windows
          return;
      }
  }
  BrowserSessionPersistence.type = 'SESSION';
  /**
   * An implementation of {@link Persistence} of `SESSION` using `sessionStorage`
   * for the underlying storage.
   *
   * @public
   */
  const browserSessionPersistence = BrowserSessionPersistence;

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Shim for Promise.allSettled, note the slightly different format of `fulfilled` vs `status`.
   *
   * @param promises - Array of promises to wait on.
   */
  function _allSettled(promises) {
      return Promise.all(promises.map(async (promise) => {
          try {
              const value = await promise;
              return {
                  fulfilled: true,
                  value
              };
          }
          catch (reason) {
              return {
                  fulfilled: false,
                  reason
              };
          }
      }));
  }

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Interface class for receiving messages.
   *
   */
  class Receiver {
      constructor(eventTarget) {
          this.eventTarget = eventTarget;
          this.handlersMap = {};
          this.boundEventHandler = this.handleEvent.bind(this);
      }
      /**
       * Obtain an instance of a Receiver for a given event target, if none exists it will be created.
       *
       * @param eventTarget - An event target (such as window or self) through which the underlying
       * messages will be received.
       */
      static _getInstance(eventTarget) {
          // The results are stored in an array since objects can't be keys for other
          // objects. In addition, setting a unique property on an event target as a
          // hash map key may not be allowed due to CORS restrictions.
          const existingInstance = this.receivers.find(receiver => receiver.isListeningto(eventTarget));
          if (existingInstance) {
              return existingInstance;
          }
          const newInstance = new Receiver(eventTarget);
          this.receivers.push(newInstance);
          return newInstance;
      }
      isListeningto(eventTarget) {
          return this.eventTarget === eventTarget;
      }
      /**
       * Fans out a MessageEvent to the appropriate listeners.
       *
       * @remarks
       * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have
       * finished processing.
       *
       * @param event - The MessageEvent.
       *
       */
      async handleEvent(event) {
          const messageEvent = event;
          const { eventId, eventType, data } = messageEvent.data;
          const handlers = this.handlersMap[eventType];
          if (!(handlers === null || handlers === undefined ? undefined : handlers.size)) {
              return;
          }
          messageEvent.ports[0].postMessage({
              status: "ack" /* _Status.ACK */,
              eventId,
              eventType
          });
          const promises = Array.from(handlers).map(async (handler) => handler(messageEvent.origin, data));
          const response = await _allSettled(promises);
          messageEvent.ports[0].postMessage({
              status: "done" /* _Status.DONE */,
              eventId,
              eventType,
              response
          });
      }
      /**
       * Subscribe an event handler for a particular event.
       *
       * @param eventType - Event name to subscribe to.
       * @param eventHandler - The event handler which should receive the events.
       *
       */
      _subscribe(eventType, eventHandler) {
          if (Object.keys(this.handlersMap).length === 0) {
              this.eventTarget.addEventListener('message', this.boundEventHandler);
          }
          if (!this.handlersMap[eventType]) {
              this.handlersMap[eventType] = new Set();
          }
          this.handlersMap[eventType].add(eventHandler);
      }
      /**
       * Unsubscribe an event handler from a particular event.
       *
       * @param eventType - Event name to unsubscribe from.
       * @param eventHandler - Optional event handler, if none provided, unsubscribe all handlers on this event.
       *
       */
      _unsubscribe(eventType, eventHandler) {
          if (this.handlersMap[eventType] && eventHandler) {
              this.handlersMap[eventType].delete(eventHandler);
          }
          if (!eventHandler || this.handlersMap[eventType].size === 0) {
              delete this.handlersMap[eventType];
          }
          if (Object.keys(this.handlersMap).length === 0) {
              this.eventTarget.removeEventListener('message', this.boundEventHandler);
          }
      }
  }
  Receiver.receivers = [];

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function _generateEventId(prefix = '', digits = 10) {
      let random = '';
      for (let i = 0; i < digits; i++) {
          random += Math.floor(Math.random() * 10);
      }
      return prefix + random;
  }

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Interface for sending messages and waiting for a completion response.
   *
   */
  class Sender {
      constructor(target) {
          this.target = target;
          this.handlers = new Set();
      }
      /**
       * Unsubscribe the handler and remove it from our tracking Set.
       *
       * @param handler - The handler to unsubscribe.
       */
      removeMessageHandler(handler) {
          if (handler.messageChannel) {
              handler.messageChannel.port1.removeEventListener('message', handler.onMessage);
              handler.messageChannel.port1.close();
          }
          this.handlers.delete(handler);
      }
      /**
       * Send a message to the Receiver located at {@link target}.
       *
       * @remarks
       * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the
       * receiver has had a chance to fully process the event.
       *
       * @param eventType - Type of event to send.
       * @param data - The payload of the event.
       * @param timeout - Timeout for waiting on an ACK from the receiver.
       *
       * @returns An array of settled promises from all the handlers that were listening on the receiver.
       */
      async _send(eventType, data, timeout = 50 /* _TimeoutDuration.ACK */) {
          const messageChannel = typeof MessageChannel !== 'undefined' ? new MessageChannel() : null;
          if (!messageChannel) {
              throw new Error("connection_unavailable" /* _MessageError.CONNECTION_UNAVAILABLE */);
          }
          // Node timers and browser timers return fundamentally different types.
          // We don't actually care what the value is but TS won't accept unknown and
          // we can't cast properly in both environments.
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          let completionTimer;
          let handler;
          return new Promise((resolve, reject) => {
              const eventId = _generateEventId('', 20);
              messageChannel.port1.start();
              const ackTimer = setTimeout(() => {
                  reject(new Error("unsupported_event" /* _MessageError.UNSUPPORTED_EVENT */));
              }, timeout);
              handler = {
                  messageChannel,
                  onMessage(event) {
                      const messageEvent = event;
                      if (messageEvent.data.eventId !== eventId) {
                          return;
                      }
                      switch (messageEvent.data.status) {
                          case "ack" /* _Status.ACK */:
                              // The receiver should ACK first.
                              clearTimeout(ackTimer);
                              completionTimer = setTimeout(() => {
                                  reject(new Error("timeout" /* _MessageError.TIMEOUT */));
                              }, 3000 /* _TimeoutDuration.COMPLETION */);
                              break;
                          case "done" /* _Status.DONE */:
                              // Once the receiver's handlers are finished we will get the results.
                              clearTimeout(completionTimer);
                              resolve(messageEvent.data.response);
                              break;
                          default:
                              clearTimeout(ackTimer);
                              clearTimeout(completionTimer);
                              reject(new Error("invalid_response" /* _MessageError.INVALID_RESPONSE */));
                              break;
                      }
                  }
              };
              this.handlers.add(handler);
              messageChannel.port1.addEventListener('message', handler.onMessage);
              this.target.postMessage({
                  eventType,
                  eventId,
                  data
              }, [messageChannel.port2]);
          }).finally(() => {
              if (handler) {
                  this.removeMessageHandler(handler);
              }
          });
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Lazy accessor for window, since the compat layer won't tree shake this out,
   * we need to make sure not to mess with window unless we have to
   */
  function _window() {
      return window;
  }
  function _setWindowLocation(url) {
      _window().location.href = url;
  }

  /**
   * @license
   * Copyright 2020 Google LLC.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function _isWorker() {
      return (typeof _window()['WorkerGlobalScope'] !== 'undefined' &&
          typeof _window()['importScripts'] === 'function');
  }
  async function _getActiveServiceWorker() {
      if (!(navigator === null || navigator === undefined ? undefined : navigator.serviceWorker)) {
          return null;
      }
      try {
          const registration = await navigator.serviceWorker.ready;
          return registration.active;
      }
      catch (_a) {
          return null;
      }
  }
  function _getServiceWorkerController() {
      var _a;
      return ((_a = navigator === null || navigator === undefined ? undefined : navigator.serviceWorker) === null || _a === undefined ? undefined : _a.controller) || null;
  }
  function _getWorkerGlobalScope() {
      return _isWorker() ? self : null;
  }

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const DB_NAME = 'firebaseLocalStorageDb';
  const DB_VERSION = 1;
  const DB_OBJECTSTORE_NAME = 'firebaseLocalStorage';
  const DB_DATA_KEYPATH = 'fbase_key';
  /**
   * Promise wrapper for IDBRequest
   *
   * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6
   *
   */
  class DBPromise {
      constructor(request) {
          this.request = request;
      }
      toPromise() {
          return new Promise((resolve, reject) => {
              this.request.addEventListener('success', () => {
                  resolve(this.request.result);
              });
              this.request.addEventListener('error', () => {
                  reject(this.request.error);
              });
          });
      }
  }
  function getObjectStore(db, isReadWrite) {
      return db
          .transaction([DB_OBJECTSTORE_NAME], isReadWrite ? 'readwrite' : 'readonly')
          .objectStore(DB_OBJECTSTORE_NAME);
  }
  function _deleteDatabase() {
      const request = indexedDB.deleteDatabase(DB_NAME);
      return new DBPromise(request).toPromise();
  }
  function _openDatabase() {
      const request = indexedDB.open(DB_NAME, DB_VERSION);
      return new Promise((resolve, reject) => {
          request.addEventListener('error', () => {
              reject(request.error);
          });
          request.addEventListener('upgradeneeded', () => {
              const db = request.result;
              try {
                  db.createObjectStore(DB_OBJECTSTORE_NAME, { keyPath: DB_DATA_KEYPATH });
              }
              catch (e) {
                  reject(e);
              }
          });
          request.addEventListener('success', async () => {
              const db = request.result;
              // Strange bug that occurs in Firefox when multiple tabs are opened at the
              // same time. The only way to recover seems to be deleting the database
              // and re-initializing it.
              // https://github.com/firebase/firebase-js-sdk/issues/634
              if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {
                  // Need to close the database or else you get a `blocked` event
                  db.close();
                  await _deleteDatabase();
                  resolve(await _openDatabase());
              }
              else {
                  resolve(db);
              }
          });
      });
  }
  async function _putObject(db, key, value) {
      const request = getObjectStore(db, true).put({
          [DB_DATA_KEYPATH]: key,
          value
      });
      return new DBPromise(request).toPromise();
  }
  async function getObject(db, key) {
      const request = getObjectStore(db, false).get(key);
      const data = await new DBPromise(request).toPromise();
      return data === undefined ? null : data.value;
  }
  function _deleteObject(db, key) {
      const request = getObjectStore(db, true).delete(key);
      return new DBPromise(request).toPromise();
  }
  const _POLLING_INTERVAL_MS = 800;
  const _TRANSACTION_RETRY_COUNT = 3;
  class IndexedDBLocalPersistence {
      constructor() {
          this.type = "LOCAL" /* PersistenceType.LOCAL */;
          this._shouldAllowMigration = true;
          this.listeners = {};
          this.localCache = {};
          // setTimeout return value is platform specific
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          this.pollTimer = null;
          this.pendingWrites = 0;
          this.receiver = null;
          this.sender = null;
          this.serviceWorkerReceiverAvailable = false;
          this.activeServiceWorker = null;
          // Fire & forget the service worker registration as it may never resolve
          this._workerInitializationPromise =
              this.initializeServiceWorkerMessaging().then(() => { }, () => { });
      }
      async _openDb() {
          if (this.db) {
              return this.db;
          }
          this.db = await _openDatabase();
          return this.db;
      }
      async _withRetries(op) {
          let numAttempts = 0;
          while (true) {
              try {
                  const db = await this._openDb();
                  return await op(db);
              }
              catch (e) {
                  if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {
                      throw e;
                  }
                  if (this.db) {
                      this.db.close();
                      this.db = undefined;
                  }
                  // TODO: consider adding exponential backoff
              }
          }
      }
      /**
       * IndexedDB events do not propagate from the main window to the worker context.  We rely on a
       * postMessage interface to send these events to the worker ourselves.
       */
      async initializeServiceWorkerMessaging() {
          return _isWorker() ? this.initializeReceiver() : this.initializeSender();
      }
      /**
       * As the worker we should listen to events from the main window.
       */
      async initializeReceiver() {
          this.receiver = Receiver._getInstance(_getWorkerGlobalScope());
          // Refresh from persistence if we receive a KeyChanged message.
          this.receiver._subscribe("keyChanged" /* _EventType.KEY_CHANGED */, async (_origin, data) => {
              const keys = await this._poll();
              return {
                  keyProcessed: keys.includes(data.key)
              };
          });
          // Let the sender know that we are listening so they give us more timeout.
          this.receiver._subscribe("ping" /* _EventType.PING */, async (_origin, _data) => {
              return ["keyChanged" /* _EventType.KEY_CHANGED */];
          });
      }
      /**
       * As the main window, we should let the worker know when keys change (set and remove).
       *
       * @remarks
       * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}
       * may not resolve.
       */
      async initializeSender() {
          var _a, _b;
          // Check to see if there's an active service worker.
          this.activeServiceWorker = await _getActiveServiceWorker();
          if (!this.activeServiceWorker) {
              return;
          }
          this.sender = new Sender(this.activeServiceWorker);
          // Ping the service worker to check what events they can handle.
          const results = await this.sender._send("ping" /* _EventType.PING */, {}, 800 /* _TimeoutDuration.LONG_ACK */);
          if (!results) {
              return;
          }
          if (((_a = results[0]) === null || _a === undefined ? undefined : _a.fulfilled) &&
              ((_b = results[0]) === null || _b === undefined ? undefined : _b.value.includes("keyChanged" /* _EventType.KEY_CHANGED */))) {
              this.serviceWorkerReceiverAvailable = true;
          }
      }
      /**
       * Let the worker know about a changed key, the exact key doesn't technically matter since the
       * worker will just trigger a full sync anyway.
       *
       * @remarks
       * For now, we only support one service worker per page.
       *
       * @param key - Storage key which changed.
       */
      async notifyServiceWorker(key) {
          if (!this.sender ||
              !this.activeServiceWorker ||
              _getServiceWorkerController() !== this.activeServiceWorker) {
              return;
          }
          try {
              await this.sender._send("keyChanged" /* _EventType.KEY_CHANGED */, { key }, 
              // Use long timeout if receiver has previously responded to a ping from us.
              this.serviceWorkerReceiverAvailable
                  ? 800 /* _TimeoutDuration.LONG_ACK */
                  : 50 /* _TimeoutDuration.ACK */);
          }
          catch (_a) {
              // This is a best effort approach. Ignore errors.
          }
      }
      async _isAvailable() {
          try {
              if (!indexedDB) {
                  return false;
              }
              const db = await _openDatabase();
              await _putObject(db, STORAGE_AVAILABLE_KEY, '1');
              await _deleteObject(db, STORAGE_AVAILABLE_KEY);
              return true;
          }
          catch (_a) { }
          return false;
      }
      async _withPendingWrite(write) {
          this.pendingWrites++;
          try {
              await write();
          }
          finally {
              this.pendingWrites--;
          }
      }
      async _set(key, value) {
          return this._withPendingWrite(async () => {
              await this._withRetries((db) => _putObject(db, key, value));
              this.localCache[key] = value;
              return this.notifyServiceWorker(key);
          });
      }
      async _get(key) {
          const obj = (await this._withRetries((db) => getObject(db, key)));
          this.localCache[key] = obj;
          return obj;
      }
      async _remove(key) {
          return this._withPendingWrite(async () => {
              await this._withRetries((db) => _deleteObject(db, key));
              delete this.localCache[key];
              return this.notifyServiceWorker(key);
          });
      }
      async _poll() {
          // TODO: check if we need to fallback if getAll is not supported
          const result = await this._withRetries((db) => {
              const getAllRequest = getObjectStore(db, false).getAll();
              return new DBPromise(getAllRequest).toPromise();
          });
          if (!result) {
              return [];
          }
          // If we have pending writes in progress abort, we'll get picked up on the next poll
          if (this.pendingWrites !== 0) {
              return [];
          }
          const keys = [];
          const keysInResult = new Set();
          if (result.length !== 0) {
              for (const { fbase_key: key, value } of result) {
                  keysInResult.add(key);
                  if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {
                      this.notifyListeners(key, value);
                      keys.push(key);
                  }
              }
          }
          for (const localKey of Object.keys(this.localCache)) {
              if (this.localCache[localKey] && !keysInResult.has(localKey)) {
                  // Deleted
                  this.notifyListeners(localKey, null);
                  keys.push(localKey);
              }
          }
          return keys;
      }
      notifyListeners(key, newValue) {
          this.localCache[key] = newValue;
          const listeners = this.listeners[key];
          if (listeners) {
              for (const listener of Array.from(listeners)) {
                  listener(newValue);
              }
          }
      }
      startPolling() {
          this.stopPolling();
          this.pollTimer = setInterval(async () => this._poll(), _POLLING_INTERVAL_MS);
      }
      stopPolling() {
          if (this.pollTimer) {
              clearInterval(this.pollTimer);
              this.pollTimer = null;
          }
      }
      _addListener(key, listener) {
          if (Object.keys(this.listeners).length === 0) {
              this.startPolling();
          }
          if (!this.listeners[key]) {
              this.listeners[key] = new Set();
              // Populate the cache to avoid spuriously triggering on first poll.
              void this._get(key); // This can happen in the background async and we can return immediately.
          }
          this.listeners[key].add(listener);
      }
      _removeListener(key, listener) {
          if (this.listeners[key]) {
              this.listeners[key].delete(listener);
              if (this.listeners[key].size === 0) {
                  delete this.listeners[key];
              }
          }
          if (Object.keys(this.listeners).length === 0) {
              this.stopPolling();
          }
      }
  }
  IndexedDBLocalPersistence.type = 'LOCAL';
  /**
   * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`
   * for the underlying storage.
   *
   * @public
   */
  const indexedDBLocalPersistence = IndexedDBLocalPersistence;
  new Delay(30000, 60000);

  /**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Chooses a popup/redirect resolver to use. This prefers the override (which
   * is directly passed in), and falls back to the property set on the auth
   * object. If neither are available, this function errors w/ an argument error.
   */
  function _withDefaultResolver(auth, resolverOverride) {
      if (resolverOverride) {
          return _getInstance(resolverOverride);
      }
      _assert(auth._popupRedirectResolver, auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */);
      return auth._popupRedirectResolver;
  }

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class IdpCredential extends AuthCredential {
      constructor(params) {
          super("custom" /* ProviderId.CUSTOM */, "custom" /* ProviderId.CUSTOM */);
          this.params = params;
      }
      _getIdTokenResponse(auth) {
          return signInWithIdp(auth, this._buildIdpRequest());
      }
      _linkToIdToken(auth, idToken) {
          return signInWithIdp(auth, this._buildIdpRequest(idToken));
      }
      _getReauthenticationResolver(auth) {
          return signInWithIdp(auth, this._buildIdpRequest());
      }
      _buildIdpRequest(idToken) {
          const request = {
              requestUri: this.params.requestUri,
              sessionId: this.params.sessionId,
              postBody: this.params.postBody,
              tenantId: this.params.tenantId,
              pendingToken: this.params.pendingToken,
              returnSecureToken: true,
              returnIdpCredential: true
          };
          if (idToken) {
              request.idToken = idToken;
          }
          return request;
      }
  }
  function _signIn(params) {
      return _signInWithCredential(params.auth, new IdpCredential(params), params.bypassAuthState);
  }
  function _reauth(params) {
      const { auth, user } = params;
      _assert(user, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
      return _reauthenticate(user, new IdpCredential(params), params.bypassAuthState);
  }
  async function _link(params) {
      const { auth, user } = params;
      _assert(user, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
      return _link$1(user, new IdpCredential(params), params.bypassAuthState);
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Popup event manager. Handles the popup's entire lifecycle; listens to auth
   * events
   */
  class AbstractPopupRedirectOperation {
      constructor(auth, filter, resolver, user, bypassAuthState = false) {
          this.auth = auth;
          this.resolver = resolver;
          this.user = user;
          this.bypassAuthState = bypassAuthState;
          this.pendingPromise = null;
          this.eventManager = null;
          this.filter = Array.isArray(filter) ? filter : [filter];
      }
      execute() {
          return new Promise(async (resolve, reject) => {
              this.pendingPromise = { resolve, reject };
              try {
                  this.eventManager = await this.resolver._initialize(this.auth);
                  await this.onExecution();
                  this.eventManager.registerConsumer(this);
              }
              catch (e) {
                  this.reject(e);
              }
          });
      }
      async onAuthEvent(event) {
          const { urlResponse, sessionId, postBody, tenantId, error, type } = event;
          if (error) {
              this.reject(error);
              return;
          }
          const params = {
              auth: this.auth,
              requestUri: urlResponse,
              sessionId: sessionId,
              tenantId: tenantId || undefined,
              postBody: postBody || undefined,
              user: this.user,
              bypassAuthState: this.bypassAuthState
          };
          try {
              this.resolve(await this.getIdpTask(type)(params));
          }
          catch (e) {
              this.reject(e);
          }
      }
      onError(error) {
          this.reject(error);
      }
      getIdpTask(type) {
          switch (type) {
              case "signInViaPopup" /* AuthEventType.SIGN_IN_VIA_POPUP */:
              case "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */:
                  return _signIn;
              case "linkViaPopup" /* AuthEventType.LINK_VIA_POPUP */:
              case "linkViaRedirect" /* AuthEventType.LINK_VIA_REDIRECT */:
                  return _link;
              case "reauthViaPopup" /* AuthEventType.REAUTH_VIA_POPUP */:
              case "reauthViaRedirect" /* AuthEventType.REAUTH_VIA_REDIRECT */:
                  return _reauth;
              default:
                  _fail(this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
          }
      }
      resolve(cred) {
          debugAssert(this.pendingPromise, 'Pending promise was never set');
          this.pendingPromise.resolve(cred);
          this.unregisterAndCleanUp();
      }
      reject(error) {
          debugAssert(this.pendingPromise, 'Pending promise was never set');
          this.pendingPromise.reject(error);
          this.unregisterAndCleanUp();
      }
      unregisterAndCleanUp() {
          if (this.eventManager) {
              this.eventManager.unregisterConsumer(this);
          }
          this.pendingPromise = null;
          this.cleanUp();
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2000, 10000);
  /**
   * Popup event manager. Handles the popup's entire lifecycle; listens to auth
   * events
   *
   */
  class PopupOperation extends AbstractPopupRedirectOperation {
      constructor(auth, filter, provider, resolver, user) {
          super(auth, filter, resolver, user);
          this.provider = provider;
          this.authWindow = null;
          this.pollId = null;
          if (PopupOperation.currentPopupAction) {
              PopupOperation.currentPopupAction.cancel();
          }
          PopupOperation.currentPopupAction = this;
      }
      async executeNotNull() {
          const result = await this.execute();
          _assert(result, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
          return result;
      }
      async onExecution() {
          debugAssert(this.filter.length === 1, 'Popup operations only handle one event');
          const eventId = _generateEventId();
          this.authWindow = await this.resolver._openPopup(this.auth, this.provider, this.filter[0], // There's always one, see constructor
          eventId);
          this.authWindow.associatedEvent = eventId;
          // Check for web storage support and origin validation _after_ the popup is
          // loaded. These operations are slow (~1 second or so) Rather than
          // waiting on them before opening the window, optimistically open the popup
          // and check for storage support at the same time. If storage support is
          // not available, this will cause the whole thing to reject properly. It
          // will also close the popup, but since the promise has already rejected,
          // the popup closed by user poll will reject into the void.
          this.resolver._originValidation(this.auth).catch(e => {
              this.reject(e);
          });
          this.resolver._isIframeWebStorageSupported(this.auth, isSupported => {
              if (!isSupported) {
                  this.reject(_createError(this.auth, "web-storage-unsupported" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */));
              }
          });
          // Handle user closure. Notice this does *not* use await
          this.pollUserCancellation();
      }
      get eventId() {
          var _a;
          return ((_a = this.authWindow) === null || _a === undefined ? undefined : _a.associatedEvent) || null;
      }
      cancel() {
          this.reject(_createError(this.auth, "cancelled-popup-request" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */));
      }
      cleanUp() {
          if (this.authWindow) {
              this.authWindow.close();
          }
          if (this.pollId) {
              window.clearTimeout(this.pollId);
          }
          this.authWindow = null;
          this.pollId = null;
          PopupOperation.currentPopupAction = null;
      }
      pollUserCancellation() {
          const poll = () => {
              var _a, _b;
              if ((_b = (_a = this.authWindow) === null || _a === undefined ? undefined : _a.window) === null || _b === undefined ? undefined : _b.closed) {
                  // Make sure that there is sufficient time for whatever action to
                  // complete. The window could have closed but the sign in network
                  // call could still be in flight. This is specifically true for
                  // Firefox or if the opener is in an iframe, in which case the oauth
                  // helper closes the popup.
                  this.pollId = window.setTimeout(() => {
                      this.pollId = null;
                      this.reject(_createError(this.auth, "popup-closed-by-user" /* AuthErrorCode.POPUP_CLOSED_BY_USER */));
                  }, 8000 /* _Timeout.AUTH_EVENT */);
                  return;
              }
              this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());
          };
          poll();
      }
  }
  // Only one popup is ever shown at once. The lifecycle of the current popup
  // can be managed / cancelled by the constructor.
  PopupOperation.currentPopupAction = null;

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const PENDING_REDIRECT_KEY = 'pendingRedirect';
  // We only get one redirect outcome for any one auth, so just store it
  // in here.
  const redirectOutcomeMap = new Map();
  class RedirectAction extends AbstractPopupRedirectOperation {
      constructor(auth, resolver, bypassAuthState = false) {
          super(auth, [
              "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */,
              "linkViaRedirect" /* AuthEventType.LINK_VIA_REDIRECT */,
              "reauthViaRedirect" /* AuthEventType.REAUTH_VIA_REDIRECT */,
              "unknown" /* AuthEventType.UNKNOWN */
          ], resolver, undefined, bypassAuthState);
          this.eventId = null;
      }
      /**
       * Override the execute function; if we already have a redirect result, then
       * just return it.
       */
      async execute() {
          let readyOutcome = redirectOutcomeMap.get(this.auth._key());
          if (!readyOutcome) {
              try {
                  const hasPendingRedirect = await _getAndClearPendingRedirectStatus(this.resolver, this.auth);
                  const result = hasPendingRedirect ? await super.execute() : null;
                  readyOutcome = () => Promise.resolve(result);
              }
              catch (e) {
                  readyOutcome = () => Promise.reject(e);
              }
              redirectOutcomeMap.set(this.auth._key(), readyOutcome);
          }
          // If we're not bypassing auth state, the ready outcome should be set to
          // null.
          if (!this.bypassAuthState) {
              redirectOutcomeMap.set(this.auth._key(), () => Promise.resolve(null));
          }
          return readyOutcome();
      }
      async onAuthEvent(event) {
          if (event.type === "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */) {
              return super.onAuthEvent(event);
          }
          else if (event.type === "unknown" /* AuthEventType.UNKNOWN */) {
              // This is a sentinel value indicating there's no pending redirect
              this.resolve(null);
              return;
          }
          if (event.eventId) {
              const user = await this.auth._redirectUserForId(event.eventId);
              if (user) {
                  this.user = user;
                  return super.onAuthEvent(event);
              }
              else {
                  this.resolve(null);
              }
          }
      }
      async onExecution() { }
      cleanUp() { }
  }
  async function _getAndClearPendingRedirectStatus(resolver, auth) {
      const key = pendingRedirectKey(auth);
      const persistence = resolverPersistence(resolver);
      if (!(await persistence._isAvailable())) {
          return false;
      }
      const hasPendingRedirect = (await persistence._get(key)) === 'true';
      await persistence._remove(key);
      return hasPendingRedirect;
  }
  function _overrideRedirectResult(auth, result) {
      redirectOutcomeMap.set(auth._key(), result);
  }
  function resolverPersistence(resolver) {
      return _getInstance(resolver._redirectPersistence);
  }
  function pendingRedirectKey(auth) {
      return _persistenceKeyName(PENDING_REDIRECT_KEY, auth.config.apiKey, auth.name);
  }
  async function _getRedirectResult(auth, resolverExtern, bypassAuthState = false) {
      if (_isFirebaseServerApp(auth.app)) {
          return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));
      }
      const authInternal = _castAuth(auth);
      const resolver = _withDefaultResolver(authInternal, resolverExtern);
      const action = new RedirectAction(authInternal, resolver, bypassAuthState);
      const result = await action.execute();
      if (result && !bypassAuthState) {
          delete result.user._redirectEventId;
          await authInternal._persistUserIfCurrent(result.user);
          await authInternal._setRedirectUser(null, resolverExtern);
      }
      return result;
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // The amount of time to store the UIDs of seen events; this is
  // set to 10 min by default
  const EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1000;
  class AuthEventManager {
      constructor(auth) {
          this.auth = auth;
          this.cachedEventUids = new Set();
          this.consumers = new Set();
          this.queuedRedirectEvent = null;
          this.hasHandledPotentialRedirect = false;
          this.lastProcessedEventTime = Date.now();
      }
      registerConsumer(authEventConsumer) {
          this.consumers.add(authEventConsumer);
          if (this.queuedRedirectEvent &&
              this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {
              this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);
              this.saveEventToCache(this.queuedRedirectEvent);
              this.queuedRedirectEvent = null;
          }
      }
      unregisterConsumer(authEventConsumer) {
          this.consumers.delete(authEventConsumer);
      }
      onEvent(event) {
          // Check if the event has already been handled
          if (this.hasEventBeenHandled(event)) {
              return false;
          }
          let handled = false;
          this.consumers.forEach(consumer => {
              if (this.isEventForConsumer(event, consumer)) {
                  handled = true;
                  this.sendToConsumer(event, consumer);
                  this.saveEventToCache(event);
              }
          });
          if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {
              // If we've already seen a redirect before, or this is a popup event,
              // bail now
              return handled;
          }
          this.hasHandledPotentialRedirect = true;
          // If the redirect wasn't handled, hang on to it
          if (!handled) {
              this.queuedRedirectEvent = event;
              handled = true;
          }
          return handled;
      }
      sendToConsumer(event, consumer) {
          var _a;
          if (event.error && !isNullRedirectEvent(event)) {
              const code = ((_a = event.error.code) === null || _a === undefined ? undefined : _a.split('auth/')[1]) ||
                  "internal-error" /* AuthErrorCode.INTERNAL_ERROR */;
              consumer.onError(_createError(this.auth, code));
          }
          else {
              consumer.onAuthEvent(event);
          }
      }
      isEventForConsumer(event, consumer) {
          const eventIdMatches = consumer.eventId === null ||
              (!!event.eventId && event.eventId === consumer.eventId);
          return consumer.filter.includes(event.type) && eventIdMatches;
      }
      hasEventBeenHandled(event) {
          if (Date.now() - this.lastProcessedEventTime >=
              EVENT_DUPLICATION_CACHE_DURATION_MS) {
              this.cachedEventUids.clear();
          }
          return this.cachedEventUids.has(eventUid(event));
      }
      saveEventToCache(event) {
          this.cachedEventUids.add(eventUid(event));
          this.lastProcessedEventTime = Date.now();
      }
  }
  function eventUid(e) {
      return [e.type, e.eventId, e.sessionId, e.tenantId].filter(v => v).join('-');
  }
  function isNullRedirectEvent({ type, error }) {
      return (type === "unknown" /* AuthEventType.UNKNOWN */ &&
          (error === null || error === undefined ? undefined : error.code) === `auth/${"no-auth-event" /* AuthErrorCode.NO_AUTH_EVENT */}`);
  }
  function isRedirectEvent(event) {
      switch (event.type) {
          case "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */:
          case "linkViaRedirect" /* AuthEventType.LINK_VIA_REDIRECT */:
          case "reauthViaRedirect" /* AuthEventType.REAUTH_VIA_REDIRECT */:
              return true;
          case "unknown" /* AuthEventType.UNKNOWN */:
              return isNullRedirectEvent(event);
          default:
              return false;
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  async function _getProjectConfig(auth, request = {}) {
      return _performApiRequest(auth, "GET" /* HttpMethod.GET */, "/v1/projects" /* Endpoint.GET_PROJECT_CONFIG */, request);
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const IP_ADDRESS_REGEX = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
  const HTTP_REGEX = /^https?/;
  async function _validateOrigin(auth) {
      // Skip origin validation if we are in an emulated environment
      if (auth.config.emulator) {
          return;
      }
      const { authorizedDomains } = await _getProjectConfig(auth);
      for (const domain of authorizedDomains) {
          try {
              if (matchDomain(domain)) {
                  return;
              }
          }
          catch (_a) {
              // Do nothing if there's a URL error; just continue searching
          }
      }
      // In the old SDK, this error also provides helpful messages.
      _fail(auth, "unauthorized-domain" /* AuthErrorCode.INVALID_ORIGIN */);
  }
  function matchDomain(expected) {
      const currentUrl = _getCurrentUrl();
      const { protocol, hostname } = new URL(currentUrl);
      if (expected.startsWith('chrome-extension://')) {
          const ceUrl = new URL(expected);
          if (ceUrl.hostname === '' && hostname === '') {
              // For some reason we're not parsing chrome URLs properly
              return (protocol === 'chrome-extension:' &&
                  expected.replace('chrome-extension://', '') ===
                      currentUrl.replace('chrome-extension://', ''));
          }
          return protocol === 'chrome-extension:' && ceUrl.hostname === hostname;
      }
      if (!HTTP_REGEX.test(protocol)) {
          return false;
      }
      if (IP_ADDRESS_REGEX.test(expected)) {
          // The domain has to be exactly equal to the pattern, as an IP domain will
          // only contain the IP, no extra character.
          return hostname === expected;
      }
      // Dots in pattern should be escaped.
      const escapedDomainPattern = expected.replace(/\./g, '\\.');
      // Non ip address domains.
      // domain.com = *.domain.com OR domain.com
      const re = new RegExp('^(.+\\.' + escapedDomainPattern + '|' + escapedDomainPattern + ')$', 'i');
      return re.test(hostname);
  }

  /**
   * @license
   * Copyright 2020 Google LLC.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const NETWORK_TIMEOUT = new Delay(30000, 60000);
  /**
   * Reset unloaded GApi modules. If gapi.load fails due to a network error,
   * it will stop working after a retrial. This is a hack to fix this issue.
   */
  function resetUnloadedGapiModules() {
      // Clear last failed gapi.load state to force next gapi.load to first
      // load the failed gapi.iframes module.
      // Get gapix.beacon context.
      const beacon = _window().___jsl;
      // Get current hint.
      if (beacon === null || beacon === undefined ? undefined : beacon.H) {
          // Get gapi hint.
          for (const hint of Object.keys(beacon.H)) {
              // Requested modules.
              beacon.H[hint].r = beacon.H[hint].r || [];
              // Loaded modules.
              beacon.H[hint].L = beacon.H[hint].L || [];
              // Set requested modules to a copy of the loaded modules.
              beacon.H[hint].r = [...beacon.H[hint].L];
              // Clear pending callbacks.
              if (beacon.CP) {
                  for (let i = 0; i < beacon.CP.length; i++) {
                      // Remove all failed pending callbacks.
                      beacon.CP[i] = null;
                  }
              }
          }
      }
  }
  function loadGapi(auth) {
      return new Promise((resolve, reject) => {
          var _a, _b, _c;
          // Function to run when gapi.load is ready.
          function loadGapiIframe() {
              // The developer may have tried to previously run gapi.load and failed.
              // Run this to fix that.
              resetUnloadedGapiModules();
              gapi.load('gapi.iframes', {
                  callback: () => {
                      resolve(gapi.iframes.getContext());
                  },
                  ontimeout: () => {
                      // The above reset may be sufficient, but having this reset after
                      // failure ensures that if the developer calls gapi.load after the
                      // connection is re-established and before another attempt to embed
                      // the iframe, it would work and would not be broken because of our
                      // failed attempt.
                      // Timeout when gapi.iframes.Iframe not loaded.
                      resetUnloadedGapiModules();
                      reject(_createError(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));
                  },
                  timeout: NETWORK_TIMEOUT.get()
              });
          }
          if ((_b = (_a = _window().gapi) === null || _a === undefined ? undefined : _a.iframes) === null || _b === undefined ? undefined : _b.Iframe) {
              // If gapi.iframes.Iframe available, resolve.
              resolve(gapi.iframes.getContext());
          }
          else if (!!((_c = _window().gapi) === null || _c === undefined ? undefined : _c.load)) {
              // Gapi loader ready, load gapi.iframes.
              loadGapiIframe();
          }
          else {
              // Create a new iframe callback when this is called so as not to overwrite
              // any previous defined callback. This happens if this method is called
              // multiple times in parallel and could result in the later callback
              // overwriting the previous one. This would end up with a iframe
              // timeout.
              const cbName = _generateCallbackName('iframefcb');
              // GApi loader not available, dynamically load platform.js.
              _window()[cbName] = () => {
                  // GApi loader should be ready.
                  if (!!gapi.load) {
                      loadGapiIframe();
                  }
                  else {
                      // Gapi loader failed, throw error.
                      reject(_createError(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));
                  }
              };
              // Load GApi loader.
              return _loadJS(`${_gapiScriptUrl()}?onload=${cbName}`)
                  .catch(e => reject(e));
          }
      }).catch(error => {
          // Reset cached promise to allow for retrial.
          cachedGApiLoader = null;
          throw error;
      });
  }
  let cachedGApiLoader = null;
  function _loadGapi(auth) {
      cachedGApiLoader = cachedGApiLoader || loadGapi(auth);
      return cachedGApiLoader;
  }

  /**
   * @license
   * Copyright 2020 Google LLC.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const PING_TIMEOUT = new Delay(5000, 15000);
  const IFRAME_PATH = '__/auth/iframe';
  const EMULATED_IFRAME_PATH = 'emulator/auth/iframe';
  const IFRAME_ATTRIBUTES = {
      style: {
          position: 'absolute',
          top: '-100px',
          width: '1px',
          height: '1px'
      },
      'aria-hidden': 'true',
      tabindex: '-1'
  };
  // Map from apiHost to endpoint ID for passing into iframe. In current SDK, apiHost can be set to
  // anything (not from a list of endpoints with IDs as in legacy), so this is the closest we can get.
  const EID_FROM_APIHOST = new Map([
      ["identitytoolkit.googleapis.com" /* DefaultConfig.API_HOST */, 'p'], // production
      ['staging-identitytoolkit.sandbox.googleapis.com', 's'], // staging
      ['test-identitytoolkit.sandbox.googleapis.com', 't'] // test
  ]);
  function getIframeUrl(auth) {
      const config = auth.config;
      _assert(config.authDomain, auth, "auth-domain-config-required" /* AuthErrorCode.MISSING_AUTH_DOMAIN */);
      const url = config.emulator
          ? _emulatorUrl(config, EMULATED_IFRAME_PATH)
          : `https://${auth.config.authDomain}/${IFRAME_PATH}`;
      const params = {
          apiKey: config.apiKey,
          appName: auth.name,
          v: SDK_VERSION$1
      };
      const eid = EID_FROM_APIHOST.get(auth.config.apiHost);
      if (eid) {
          params.eid = eid;
      }
      const frameworks = auth._getFrameworks();
      if (frameworks.length) {
          params.fw = frameworks.join(',');
      }
      return `${url}?${querystring(params).slice(1)}`;
  }
  async function _openIframe(auth) {
      const context = await _loadGapi(auth);
      const gapi = _window().gapi;
      _assert(gapi, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
      return context.open({
          where: document.body,
          url: getIframeUrl(auth),
          messageHandlersFilter: gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER,
          attributes: IFRAME_ATTRIBUTES,
          dontclear: true
      }, (iframe) => new Promise(async (resolve, reject) => {
          await iframe.restyle({
              // Prevent iframe from closing on mouse out.
              setHideOnLeave: false
          });
          const networkError = _createError(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */);
          // Confirm iframe is correctly loaded.
          // To fallback on failure, set a timeout.
          const networkErrorTimer = _window().setTimeout(() => {
              reject(networkError);
          }, PING_TIMEOUT.get());
          // Clear timer and resolve pending iframe ready promise.
          function clearTimerAndResolve() {
              _window().clearTimeout(networkErrorTimer);
              resolve(iframe);
          }
          // This returns an IThenable. However the reject part does not call
          // when the iframe is not loaded.
          iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, () => {
              reject(networkError);
          });
      }));
  }

  /**
   * @license
   * Copyright 2020 Google LLC.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const BASE_POPUP_OPTIONS = {
      location: 'yes',
      resizable: 'yes',
      statusbar: 'yes',
      toolbar: 'no'
  };
  const DEFAULT_WIDTH = 500;
  const DEFAULT_HEIGHT = 600;
  const TARGET_BLANK = '_blank';
  const FIREFOX_EMPTY_URL = 'http://localhost';
  class AuthPopup {
      constructor(window) {
          this.window = window;
          this.associatedEvent = null;
      }
      close() {
          if (this.window) {
              try {
                  this.window.close();
              }
              catch (e) { }
          }
      }
  }
  function _open(auth, url, name, width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {
      const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();
      const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();
      let target = '';
      const options = Object.assign(Object.assign({}, BASE_POPUP_OPTIONS), { width: width.toString(), height: height.toString(), top,
          left });
      // Chrome iOS 7 and 8 is returning an undefined popup win when target is
      // specified, even though the popup is not necessarily blocked.
      const ua = getUA().toLowerCase();
      if (name) {
          target = _isChromeIOS(ua) ? TARGET_BLANK : name;
      }
      if (_isFirefox(ua)) {
          // Firefox complains when invalid URLs are popped out. Hacky way to bypass.
          url = url || FIREFOX_EMPTY_URL;
          // Firefox disables by default scrolling on popup windows, which can create
          // issues when the user has many Google accounts, for instance.
          options.scrollbars = 'yes';
      }
      const optionsString = Object.entries(options).reduce((accum, [key, value]) => `${accum}${key}=${value},`, '');
      if (_isIOSStandalone(ua) && target !== '_self') {
          openAsNewWindowIOS(url || '', target);
          return new AuthPopup(null);
      }
      // about:blank getting sanitized causing browsers like IE/Edge to display
      // brief error message before redirecting to handler.
      const newWin = window.open(url || '', target, optionsString);
      _assert(newWin, auth, "popup-blocked" /* AuthErrorCode.POPUP_BLOCKED */);
      // Flaky on IE edge, encapsulate with a try and catch.
      try {
          newWin.focus();
      }
      catch (e) { }
      return new AuthPopup(newWin);
  }
  function openAsNewWindowIOS(url, target) {
      const el = document.createElement('a');
      el.href = url;
      el.target = target;
      const click = document.createEvent('MouseEvent');
      click.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);
      el.dispatchEvent(click);
  }

  /**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * URL for Authentication widget which will initiate the OAuth handshake
   *
   * @internal
   */
  const WIDGET_PATH = '__/auth/handler';
  /**
   * URL for emulated environment
   *
   * @internal
   */
  const EMULATOR_WIDGET_PATH = 'emulator/auth/handler';
  /**
   * Fragment name for the App Check token that gets passed to the widget
   *
   * @internal
   */
  const FIREBASE_APP_CHECK_FRAGMENT_ID = encodeURIComponent('fac');
  async function _getRedirectUrl(auth, provider, authType, redirectUrl, eventId, additionalParams) {
      _assert(auth.config.authDomain, auth, "auth-domain-config-required" /* AuthErrorCode.MISSING_AUTH_DOMAIN */);
      _assert(auth.config.apiKey, auth, "invalid-api-key" /* AuthErrorCode.INVALID_API_KEY */);
      const params = {
          apiKey: auth.config.apiKey,
          appName: auth.name,
          authType,
          redirectUrl,
          v: SDK_VERSION$1,
          eventId
      };
      if (provider instanceof FederatedAuthProvider) {
          provider.setDefaultLanguage(auth.languageCode);
          params.providerId = provider.providerId || '';
          if (!isEmpty(provider.getCustomParameters())) {
              params.customParameters = JSON.stringify(provider.getCustomParameters());
          }
          // TODO set additionalParams from the provider as well?
          for (const [key, value] of Object.entries({})) {
              params[key] = value;
          }
      }
      if (provider instanceof BaseOAuthProvider) {
          const scopes = provider.getScopes().filter(scope => scope !== '');
          if (scopes.length > 0) {
              params.scopes = scopes.join(',');
          }
      }
      if (auth.tenantId) {
          params.tid = auth.tenantId;
      }
      // TODO: maybe set eid as endpointId
      // TODO: maybe set fw as Frameworks.join(",")
      const paramsDict = params;
      for (const key of Object.keys(paramsDict)) {
          if (paramsDict[key] === undefined) {
              delete paramsDict[key];
          }
      }
      // Sets the App Check token to pass to the widget
      const appCheckToken = await auth._getAppCheckToken();
      const appCheckTokenFragment = appCheckToken
          ? `#${FIREBASE_APP_CHECK_FRAGMENT_ID}=${encodeURIComponent(appCheckToken)}`
          : '';
      // Start at index 1 to skip the leading '&' in the query string
      return `${getHandlerBase(auth)}?${querystring(paramsDict).slice(1)}${appCheckTokenFragment}`;
  }
  function getHandlerBase({ config }) {
      if (!config.emulator) {
          return `https://${config.authDomain}/${WIDGET_PATH}`;
      }
      return _emulatorUrl(config, EMULATOR_WIDGET_PATH);
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * The special web storage event
   *
   */
  const WEB_STORAGE_SUPPORT_KEY = 'webStorageSupport';
  class BrowserPopupRedirectResolver {
      constructor() {
          this.eventManagers = {};
          this.iframes = {};
          this.originValidationPromises = {};
          this._redirectPersistence = browserSessionPersistence;
          this._completeRedirectFn = _getRedirectResult;
          this._overrideRedirectResult = _overrideRedirectResult;
      }
      // Wrapping in async even though we don't await anywhere in order
      // to make sure errors are raised as promise rejections
      async _openPopup(auth, provider, authType, eventId) {
          var _a;
          debugAssert((_a = this.eventManagers[auth._key()]) === null || _a === undefined ? undefined : _a.manager, '_initialize() not called before _openPopup()');
          const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);
          return _open(auth, url, _generateEventId());
      }
      async _openRedirect(auth, provider, authType, eventId) {
          await this._originValidation(auth);
          const url = await _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);
          _setWindowLocation(url);
          return new Promise(() => { });
      }
      _initialize(auth) {
          const key = auth._key();
          if (this.eventManagers[key]) {
              const { manager, promise } = this.eventManagers[key];
              if (manager) {
                  return Promise.resolve(manager);
              }
              else {
                  debugAssert(promise, 'If manager is not set, promise should be');
                  return promise;
              }
          }
          const promise = this.initAndGetManager(auth);
          this.eventManagers[key] = { promise };
          // If the promise is rejected, the key should be removed so that the
          // operation can be retried later.
          promise.catch(() => {
              delete this.eventManagers[key];
          });
          return promise;
      }
      async initAndGetManager(auth) {
          const iframe = await _openIframe(auth);
          const manager = new AuthEventManager(auth);
          iframe.register('authEvent', (iframeEvent) => {
              _assert(iframeEvent === null || iframeEvent === undefined ? undefined : iframeEvent.authEvent, auth, "invalid-auth-event" /* AuthErrorCode.INVALID_AUTH_EVENT */);
              // TODO: Consider splitting redirect and popup events earlier on
              const handled = manager.onEvent(iframeEvent.authEvent);
              return { status: handled ? "ACK" /* GapiOutcome.ACK */ : "ERROR" /* GapiOutcome.ERROR */ };
          }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
          this.eventManagers[auth._key()] = { manager };
          this.iframes[auth._key()] = iframe;
          return manager;
      }
      _isIframeWebStorageSupported(auth, cb) {
          const iframe = this.iframes[auth._key()];
          iframe.send(WEB_STORAGE_SUPPORT_KEY, { type: WEB_STORAGE_SUPPORT_KEY }, result => {
              var _a;
              const isSupported = (_a = result === null || result === undefined ? undefined : result[0]) === null || _a === undefined ? undefined : _a[WEB_STORAGE_SUPPORT_KEY];
              if (isSupported !== undefined) {
                  cb(!!isSupported);
              }
              _fail(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
          }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
      }
      _originValidation(auth) {
          const key = auth._key();
          if (!this.originValidationPromises[key]) {
              this.originValidationPromises[key] = _validateOrigin(auth);
          }
          return this.originValidationPromises[key];
      }
      get _shouldInitProactively() {
          // Mobile browsers and Safari need to optimistically initialize
          return _isMobileBrowser() || _isSafari() || _isIOS();
      }
  }
  /**
   * An implementation of {@link PopupRedirectResolver} suitable for browser
   * based applications.
   *
   * @remarks
   * This method does not work in a Node.js environment.
   *
   * @public
   */
  const browserPopupRedirectResolver = BrowserPopupRedirectResolver;

  var name$1 = "@firebase/auth";
  var version$2 = "1.8.2";

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class AuthInterop {
      constructor(auth) {
          this.auth = auth;
          this.internalListeners = new Map();
      }
      getUid() {
          var _a;
          this.assertAuthConfigured();
          return ((_a = this.auth.currentUser) === null || _a === undefined ? undefined : _a.uid) || null;
      }
      async getToken(forceRefresh) {
          this.assertAuthConfigured();
          await this.auth._initializationPromise;
          if (!this.auth.currentUser) {
              return null;
          }
          const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);
          return { accessToken };
      }
      addAuthTokenListener(listener) {
          this.assertAuthConfigured();
          if (this.internalListeners.has(listener)) {
              return;
          }
          const unsubscribe = this.auth.onIdTokenChanged(user => {
              listener((user === null || user === undefined ? undefined : user.stsTokenManager.accessToken) || null);
          });
          this.internalListeners.set(listener, unsubscribe);
          this.updateProactiveRefresh();
      }
      removeAuthTokenListener(listener) {
          this.assertAuthConfigured();
          const unsubscribe = this.internalListeners.get(listener);
          if (!unsubscribe) {
              return;
          }
          this.internalListeners.delete(listener);
          unsubscribe();
          this.updateProactiveRefresh();
      }
      assertAuthConfigured() {
          _assert(this.auth._initializationPromise, "dependent-sdk-initialized-before-auth" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */);
      }
      updateProactiveRefresh() {
          if (this.internalListeners.size > 0) {
              this.auth._startProactiveRefresh();
          }
          else {
              this.auth._stopProactiveRefresh();
          }
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function getVersionForPlatform(clientPlatform) {
      switch (clientPlatform) {
          case "Node" /* ClientPlatform.NODE */:
              return 'node';
          case "ReactNative" /* ClientPlatform.REACT_NATIVE */:
              return 'rn';
          case "Worker" /* ClientPlatform.WORKER */:
              return 'webworker';
          case "Cordova" /* ClientPlatform.CORDOVA */:
              return 'cordova';
          case "WebExtension" /* ClientPlatform.WEB_EXTENSION */:
              return 'web-extension';
          default:
              return undefined;
      }
  }
  /** @internal */
  function registerAuth(clientPlatform) {
      _registerComponent(new Component("auth" /* _ComponentName.AUTH */, (container, { options: deps }) => {
          const app = container.getProvider('app').getImmediate();
          const heartbeatServiceProvider = container.getProvider('heartbeat');
          const appCheckServiceProvider = container.getProvider('app-check-internal');
          const { apiKey, authDomain } = app.options;
          _assert(apiKey && !apiKey.includes(':'), "invalid-api-key" /* AuthErrorCode.INVALID_API_KEY */, { appName: app.name });
          const config = {
              apiKey,
              authDomain,
              clientPlatform,
              apiHost: "identitytoolkit.googleapis.com" /* DefaultConfig.API_HOST */,
              tokenApiHost: "securetoken.googleapis.com" /* DefaultConfig.TOKEN_API_HOST */,
              apiScheme: "https" /* DefaultConfig.API_SCHEME */,
              sdkClientVersion: _getClientVersion(clientPlatform)
          };
          const authInstance = new AuthImpl(app, heartbeatServiceProvider, appCheckServiceProvider, config);
          _initializeAuthInstance(authInstance, deps);
          return authInstance;
      }, "PUBLIC" /* ComponentType.PUBLIC */)
          /**
           * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()
           * For why we do this, See go/firebase-next-auth-init
           */
          .setInstantiationMode("EXPLICIT" /* InstantiationMode.EXPLICIT */)
          /**
           * Because all firebase products that depend on auth depend on auth-internal directly,
           * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.
           */
          .setInstanceCreatedCallback((container, _instanceIdentifier, _instance) => {
          const authInternalProvider = container.getProvider("auth-internal" /* _ComponentName.AUTH_INTERNAL */);
          authInternalProvider.initialize();
      }));
      _registerComponent(new Component("auth-internal" /* _ComponentName.AUTH_INTERNAL */, container => {
          const auth = _castAuth(container.getProvider("auth" /* _ComponentName.AUTH */).getImmediate());
          return (auth => new AuthInterop(auth))(auth);
      }, "PRIVATE" /* ComponentType.PRIVATE */).setInstantiationMode("EXPLICIT" /* InstantiationMode.EXPLICIT */));
      registerVersion(name$1, version$2, getVersionForPlatform(clientPlatform));
      // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation
      registerVersion(name$1, version$2, 'esm2017');
  }

  /**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const DEFAULT_ID_TOKEN_MAX_AGE = 5 * 60;
  const authIdTokenMaxAge = getExperimentalSetting('authIdTokenMaxAge') || DEFAULT_ID_TOKEN_MAX_AGE;
  let lastPostedIdToken = null;
  const mintCookieFactory = (url) => async (user) => {
      const idTokenResult = user && (await user.getIdTokenResult());
      const idTokenAge = idTokenResult &&
          (new Date().getTime() - Date.parse(idTokenResult.issuedAtTime)) / 1000;
      if (idTokenAge && idTokenAge > authIdTokenMaxAge) {
          return;
      }
      // Specifically trip null => undefined when logged out, to delete any existing cookie
      const idToken = idTokenResult === null || idTokenResult === undefined ? undefined : idTokenResult.token;
      if (lastPostedIdToken === idToken) {
          return;
      }
      lastPostedIdToken = idToken;
      await fetch(url, {
          method: idToken ? 'POST' : 'DELETE',
          headers: idToken
              ? {
                  'Authorization': `Bearer ${idToken}`
              }
              : {}
      });
  };
  /**
   * Returns the Auth instance associated with the provided {@link @firebase/app#FirebaseApp}.
   * If no instance exists, initializes an Auth instance with platform-specific default dependencies.
   *
   * @param app - The Firebase App.
   *
   * @public
   */
  function getAuth(app = getApp()) {
      const provider = _getProvider(app, 'auth');
      if (provider.isInitialized()) {
          return provider.getImmediate();
      }
      const auth = initializeAuth(app, {
          popupRedirectResolver: browserPopupRedirectResolver,
          persistence: [
              indexedDBLocalPersistence,
              browserLocalPersistence,
              browserSessionPersistence
          ]
      });
      const authTokenSyncPath = getExperimentalSetting('authTokenSyncURL');
      // Only do the Cookie exchange in a secure context
      if (authTokenSyncPath &&
          typeof isSecureContext === 'boolean' &&
          isSecureContext) {
          // Don't allow urls (XSS possibility), only paths on the same domain
          const authTokenSyncUrl = new URL(authTokenSyncPath, location.origin);
          if (location.origin === authTokenSyncUrl.origin) {
              const mintCookie = mintCookieFactory(authTokenSyncUrl.toString());
              beforeAuthStateChanged(auth, mintCookie, () => mintCookie(auth.currentUser));
              onIdTokenChanged(auth, user => mintCookie(user));
          }
      }
      const authEmulatorHost = getDefaultEmulatorHost('auth');
      if (authEmulatorHost) {
          connectAuthEmulator(auth, `http://${authEmulatorHost}`);
      }
      return auth;
  }
  function getScriptParentElement() {
      var _a, _b;
      return (_b = (_a = document.getElementsByTagName('head')) === null || _a === undefined ? undefined : _a[0]) !== null && _b !== undefined ? _b : document;
  }
  _setExternalJSProvider({
      loadJS(url) {
          // TODO: consider adding timeout support & cancellation
          return new Promise((resolve, reject) => {
              const el = document.createElement('script');
              el.setAttribute('src', url);
              el.onload = resolve;
              el.onerror = e => {
                  const error = _createError("internal-error" /* AuthErrorCode.INTERNAL_ERROR */);
                  error.customData = e;
                  reject(error);
              };
              el.type = 'text/javascript';
              el.charset = 'UTF-8';
              getScriptParentElement().appendChild(el);
          });
      },
      gapiScript: 'https://apis.google.com/js/api.js',
      recaptchaV2Script: 'https://www.google.com/recaptcha/api.js',
      recaptchaEnterpriseScript: 'https://www.google.com/recaptcha/enterprise.js?render='
  });
  registerAuth("Browser" /* ClientPlatform.BROWSER */);

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A container for all of the Logger instances
   */
  /**
   * The JS SDK supports 5 log levels and also allows a user the ability to
   * silence the logs altogether.
   *
   * The order is a follows:
   * DEBUG < VERBOSE < INFO < WARN < ERROR
   *
   * All of the log types above the current log level will be captured (i.e. if
   * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
   * `VERBOSE` logs will not)
   */
  var LogLevel;
  (function (LogLevel) {
      LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
      LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
      LogLevel[LogLevel["INFO"] = 2] = "INFO";
      LogLevel[LogLevel["WARN"] = 3] = "WARN";
      LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
      LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
  })(LogLevel || (LogLevel = {}));
  const levelStringToEnum = {
      'debug': LogLevel.DEBUG,
      'verbose': LogLevel.VERBOSE,
      'info': LogLevel.INFO,
      'warn': LogLevel.WARN,
      'error': LogLevel.ERROR,
      'silent': LogLevel.SILENT
  };
  /**
   * The default log level
   */
  const defaultLogLevel = LogLevel.INFO;
  /**
   * By default, `console.debug` is not displayed in the developer console (in
   * chrome). To avoid forcing users to have to opt-in to these logs twice
   * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
   * logs to the `console.log` function.
   */
  const ConsoleMethod = {
      [LogLevel.DEBUG]: 'log',
      [LogLevel.VERBOSE]: 'log',
      [LogLevel.INFO]: 'info',
      [LogLevel.WARN]: 'warn',
      [LogLevel.ERROR]: 'error'
  };
  /**
   * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
   * messages on to their corresponding console counterparts (if the log method
   * is supported by the current log level)
   */
  const defaultLogHandler = (instance, logType, ...args) => {
      if (logType < instance.logLevel) {
          return;
      }
      const now = new Date().toISOString();
      const method = ConsoleMethod[logType];
      if (method) {
          console[method](`[${now}]  ${instance.name}:`, ...args);
      }
      else {
          throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);
      }
  };
  class Logger {
      /**
       * Gives you an instance of a Logger to capture messages according to
       * Firebase's logging scheme.
       *
       * @param name The name that the logs will be associated with
       */
      constructor(name) {
          this.name = name;
          /**
           * The log level of the given Logger instance.
           */
          this._logLevel = defaultLogLevel;
          /**
           * The main (internal) log handler for the Logger instance.
           * Can be set to a new function in internal package code but not by user.
           */
          this._logHandler = defaultLogHandler;
          /**
           * The optional, additional, user-defined log handler for the Logger instance.
           */
          this._userLogHandler = null;
      }
      get logLevel() {
          return this._logLevel;
      }
      set logLevel(val) {
          if (!(val in LogLevel)) {
              throw new TypeError(`Invalid value "${val}" assigned to \`logLevel\``);
          }
          this._logLevel = val;
      }
      // Workaround for setter/getter having to be the same type.
      setLogLevel(val) {
          this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
      }
      get logHandler() {
          return this._logHandler;
      }
      set logHandler(val) {
          if (typeof val !== 'function') {
              throw new TypeError('Value assigned to `logHandler` must be a function');
          }
          this._logHandler = val;
      }
      get userLogHandler() {
          return this._userLogHandler;
      }
      set userLogHandler(val) {
          this._userLogHandler = val;
      }
      /**
       * The functions below are all based on the `console` interface
       */
      debug(...args) {
          this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);
          this._logHandler(this, LogLevel.DEBUG, ...args);
      }
      log(...args) {
          this._userLogHandler &&
              this._userLogHandler(this, LogLevel.VERBOSE, ...args);
          this._logHandler(this, LogLevel.VERBOSE, ...args);
      }
      info(...args) {
          this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);
          this._logHandler(this, LogLevel.INFO, ...args);
      }
      warn(...args) {
          this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);
          this._logHandler(this, LogLevel.WARN, ...args);
      }
      error(...args) {
          this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);
          this._logHandler(this, LogLevel.ERROR, ...args);
      }
  }

  const name = "@firebase/database";
  const version$1 = "1.0.11";

  /**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /** The semver (www.semver.org) version of the SDK. */
  let SDK_VERSION = '';
  /**
   * SDK_VERSION should be set before any database instance is created
   * @internal
   */
  function setSDKVersion(version) {
      SDK_VERSION = version;
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Wraps a DOM Storage object and:
   * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.
   * - prefixes names with "firebase:" to avoid collisions with app data.
   *
   * We automatically (see storage.js) create two such wrappers, one for sessionStorage,
   * and one for localStorage.
   *
   */
  class DOMStorageWrapper {
      /**
       * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)
       */
      constructor(domStorage_) {
          this.domStorage_ = domStorage_;
          // Use a prefix to avoid collisions with other stuff saved by the app.
          this.prefix_ = 'firebase:';
      }
      /**
       * @param key - The key to save the value under
       * @param value - The value being stored, or null to remove the key.
       */
      set(key, value) {
          if (value == null) {
              this.domStorage_.removeItem(this.prefixedName_(key));
          }
          else {
              this.domStorage_.setItem(this.prefixedName_(key), stringify(value));
          }
      }
      /**
       * @returns The value that was stored under this key, or null
       */
      get(key) {
          const storedVal = this.domStorage_.getItem(this.prefixedName_(key));
          if (storedVal == null) {
              return null;
          }
          else {
              return jsonEval(storedVal);
          }
      }
      remove(key) {
          this.domStorage_.removeItem(this.prefixedName_(key));
      }
      prefixedName_(name) {
          return this.prefix_ + name;
      }
      toString() {
          return this.domStorage_.toString();
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * An in-memory storage implementation that matches the API of DOMStorageWrapper
   * (TODO: create interface for both to implement).
   */
  class MemoryStorage {
      constructor() {
          this.cache_ = {};
          this.isInMemoryStorage = true;
      }
      set(key, value) {
          if (value == null) {
              delete this.cache_[key];
          }
          else {
              this.cache_[key] = value;
          }
      }
      get(key) {
          if (contains$1(this.cache_, key)) {
              return this.cache_[key];
          }
          return null;
      }
      remove(key) {
          delete this.cache_[key];
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.
   * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change
   * to reflect this type
   *
   * @param domStorageName - Name of the underlying storage object
   *   (e.g. 'localStorage' or 'sessionStorage').
   * @returns Turning off type information until a common interface is defined.
   */
  const createStoragefor = function (domStorageName) {
      try {
          // NOTE: just accessing "localStorage" or "window['localStorage']" may throw a security exception,
          // so it must be inside the try/catch.
          if (typeof window !== 'undefined' &&
              typeof window[domStorageName] !== 'undefined') {
              // Need to test cache. Just because it's here doesn't mean it works
              const domStorage = window[domStorageName];
              domStorage.setItem('firebase:sentinel', 'cache');
              domStorage.removeItem('firebase:sentinel');
              return new DOMStorageWrapper(domStorage);
          }
      }
      catch (e) { }
      // Failed to create wrapper.  Just return in-memory storage.
      // TODO: log?
      return new MemoryStorage();
  };
  /** A storage object that lasts across sessions */
  const PersistentStorage = createStoragefor('localStorage');
  /** A storage object that only lasts one session */
  const SessionStorage = createStoragefor('sessionStorage');

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const logClient = new Logger('@firebase/database');
  /**
   * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).
   */
  const LUIDGenerator = (function () {
      let id = 1;
      return function () {
          return id++;
      };
  })();
  /**
   * Sha1 hash of the input string
   * @param str - The string to hash
   * @returns {!string} The resulting hash
   */
  const sha1 = function (str) {
      const utf8Bytes = stringToByteArray(str);
      const sha1 = new Sha1();
      sha1.update(utf8Bytes);
      const sha1Bytes = sha1.digest();
      return base64.encodeByteArray(sha1Bytes);
  };
  const buildLogMessage_ = function (...varArgs) {
      let message = '';
      for (let i = 0; i < varArgs.length; i++) {
          const arg = varArgs[i];
          if (Array.isArray(arg) ||
              (arg &&
                  typeof arg === 'object' &&
                  // eslint-disable-next-line @typescript-eslint/no-explicit-any
                  typeof arg.length === 'number')) {
              message += buildLogMessage_.apply(null, arg);
          }
          else if (typeof arg === 'object') {
              message += stringify(arg);
          }
          else {
              message += arg;
          }
          message += ' ';
      }
      return message;
  };
  /**
   * Use this for all debug messages in Firebase.
   */
  let logger = null;
  /**
   * Flag to check for log availability on first log message
   */
  let firstLog_ = true;
  /**
   * The implementation of Firebase.enableLogging (defined here to break dependencies)
   * @param logger_ - A flag to turn on logging, or a custom logger
   * @param persistent - Whether or not to persist logging settings across refreshes
   */
  const enableLogging$1 = function (logger_, persistent) {
      assert$1(true, "Can't turn on custom loggers persistently.");
      {
          logClient.logLevel = LogLevel.VERBOSE;
          logger = logClient.log.bind(logClient);
      }
  };
  const log = function (...varArgs) {
      if (firstLog_ === true) {
          firstLog_ = false;
          if (logger === null && SessionStorage.get('logging_enabled') === true) {
              enableLogging$1();
          }
      }
      if (logger) {
          const message = buildLogMessage_.apply(null, varArgs);
          logger(message);
      }
  };
  const logWrapper = function (prefix) {
      return function (...varArgs) {
          log(prefix, ...varArgs);
      };
  };
  const error = function (...varArgs) {
      const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);
      logClient.error(message);
  };
  const fatal = function (...varArgs) {
      const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;
      logClient.error(message);
      throw new Error(message);
  };
  const warn = function (...varArgs) {
      const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);
      logClient.warn(message);
  };
  /**
   * Logs a warning if the containing page uses https. Called when a call to new Firebase
   * does not use https.
   */
  const warnIfPageIsSecure = function () {
      // Be very careful accessing browser globals. Who knows what may or may not exist.
      if (typeof window !== 'undefined' &&
          window.location &&
          window.location.protocol &&
          window.location.protocol.indexOf('https:') !== -1) {
          warn('Insecure Firebase access from a secure page. ' +
              'Please use https in calls to new Firebase().');
      }
  };
  /**
   * Returns true if data is NaN, or +/- Infinity.
   */
  const isInvalidJSONNumber = function (data) {
      return (typeof data === 'number' &&
          (data !== data || // NaN
              data === Number.POSITIVE_INFINITY ||
              data === Number.NEGATIVE_INFINITY));
  };
  const executeWhenDOMReady = function (fn) {
      if (document.readyState === 'complete') {
          fn();
      }
      else {
          // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which
          // fire before onload), but fall back to onload.
          let called = false;
          const wrappedFn = function () {
              if (!document.body) {
                  setTimeout(wrappedFn, Math.floor(10));
                  return;
              }
              if (!called) {
                  called = true;
                  fn();
              }
          };
          if (document.addEventListener) {
              document.addEventListener('DOMContentLoaded', wrappedFn, false);
              // fallback to onload.
              window.addEventListener('load', wrappedFn, false);
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
          }
          else if (document.attachEvent) {
              // IE.
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              document.attachEvent('onreadystatechange', () => {
                  if (document.readyState === 'complete') {
                      wrappedFn();
                  }
              });
              // fallback to onload.
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              window.attachEvent('onload', wrappedFn);
              // jQuery has an extra hack for IE that we could employ (based on
              // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.
              // I'm hoping we don't need it.
          }
      }
  };
  /**
   * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names
   */
  const MIN_NAME = '[MIN_NAME]';
  /**
   * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names
   */
  const MAX_NAME = '[MAX_NAME]';
  /**
   * Compares valid Firebase key names, plus min and max name
   */
  const nameCompare = function (a, b) {
      if (a === b) {
          return 0;
      }
      else if (a === MIN_NAME || b === MAX_NAME) {
          return -1;
      }
      else if (b === MIN_NAME || a === MAX_NAME) {
          return 1;
      }
      else {
          const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);
          if (aAsInt !== null) {
              if (bAsInt !== null) {
                  return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;
              }
              else {
                  return -1;
              }
          }
          else if (bAsInt !== null) {
              return 1;
          }
          else {
              return a < b ? -1 : 1;
          }
      }
  };
  /**
   * @returns {!number} comparison result.
   */
  const stringCompare = function (a, b) {
      if (a === b) {
          return 0;
      }
      else if (a < b) {
          return -1;
      }
      else {
          return 1;
      }
  };
  const requireKey = function (key, obj) {
      if (obj && key in obj) {
          return obj[key];
      }
      else {
          throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));
      }
  };
  const ObjectToUniqueKey = function (obj) {
      if (typeof obj !== 'object' || obj === null) {
          return stringify(obj);
      }
      const keys = [];
      // eslint-disable-next-line guard-for-in
      for (const k in obj) {
          keys.push(k);
      }
      // Export as json, but with the keys sorted.
      keys.sort();
      let key = '{';
      for (let i = 0; i < keys.length; i++) {
          if (i !== 0) {
              key += ',';
          }
          key += stringify(keys[i]);
          key += ':';
          key += ObjectToUniqueKey(obj[keys[i]]);
      }
      key += '}';
      return key;
  };
  /**
   * Splits a string into a number of smaller segments of maximum size
   * @param str - The string
   * @param segsize - The maximum number of chars in the string.
   * @returns The string, split into appropriately-sized chunks
   */
  const splitStringBySize = function (str, segsize) {
      const len = str.length;
      if (len <= segsize) {
          return [str];
      }
      const dataSegs = [];
      for (let c = 0; c < len; c += segsize) {
          if (c + segsize > len) {
              dataSegs.push(str.substring(c, len));
          }
          else {
              dataSegs.push(str.substring(c, c + segsize));
          }
      }
      return dataSegs;
  };
  /**
   * Apply a function to each (key, value) pair in an object or
   * apply a function to each (index, value) pair in an array
   * @param obj - The object or array to iterate over
   * @param fn - The function to apply
   */
  function each(obj, fn) {
      for (const key in obj) {
          if (obj.hasOwnProperty(key)) {
              fn(key, obj[key]);
          }
      }
  }
  /**
   * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)
   * I made one modification at the end and removed the NaN / Infinity
   * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.
   * @param v - A double
   *
   */
  const doubleToIEEE754String = function (v) {
      assert$1(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL
      const ebits = 11, fbits = 52;
      const bias = (1 << (ebits - 1)) - 1;
      let s, e, f, ln, i;
      // Compute sign, exponent, fraction
      // Skip NaN / Infinity handling --MJL.
      if (v === 0) {
          e = 0;
          f = 0;
          s = 1 / v === -Infinity ? 1 : 0;
      }
      else {
          s = v < 0;
          v = Math.abs(v);
          if (v >= Math.pow(2, 1 - bias)) {
              // Normalized
              ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);
              e = ln + bias;
              f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));
          }
          else {
              // Denormalized
              e = 0;
              f = Math.round(v / Math.pow(2, 1 - bias - fbits));
          }
      }
      // Pack sign, exponent, fraction
      const bits = [];
      for (i = fbits; i; i -= 1) {
          bits.push(f % 2 ? 1 : 0);
          f = Math.floor(f / 2);
      }
      for (i = ebits; i; i -= 1) {
          bits.push(e % 2 ? 1 : 0);
          e = Math.floor(e / 2);
      }
      bits.push(s ? 1 : 0);
      bits.reverse();
      const str = bits.join('');
      // Return the data as a hex string. --MJL
      let hexByteString = '';
      for (i = 0; i < 64; i += 8) {
          let hexByte = parseInt(str.substr(i, 8), 2).toString(16);
          if (hexByte.length === 1) {
              hexByte = '0' + hexByte;
          }
          hexByteString = hexByteString + hexByte;
      }
      return hexByteString.toLowerCase();
  };
  /**
   * Used to detect if we're in a Chrome content script (which executes in an
   * isolated environment where long-polling doesn't work).
   */
  const isChromeExtensionContentScript = function () {
      return !!(typeof window === 'object' &&
          window['chrome'] &&
          window['chrome']['extension'] &&
          !/^chrome/.test(window.location.href));
  };
  /**
   * Used to detect if we're in a Windows 8 Store app.
   */
  const isWindowsStoreApp = function () {
      // Check for the presence of a couple WinRT globals
      return typeof Windows === 'object' && typeof Windows.UI === 'object';
  };
  /**
   * Converts a server error code to a JavaScript Error
   */
  function errorForServerCode(code, query) {
      let reason = 'Unknown Error';
      if (code === 'too_big') {
          reason =
              'The data requested exceeds the maximum size ' +
                  'that can be accessed with a single request.';
      }
      else if (code === 'permission_denied') {
          reason = "Client doesn't have permission to access the desired data.";
      }
      else if (code === 'unavailable') {
          reason = 'The service is unavailable';
      }
      const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      error.code = code.toUpperCase();
      return error;
  }
  /**
   * Used to test for integer-looking strings
   */
  const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\d{1,10}$');
  /**
   * For use in keys, the minimum possible 32-bit integer.
   */
  const INTEGER_32_MIN = -2147483648;
  /**
   * For use in keys, the maximum possible 32-bit integer.
   */
  const INTEGER_32_MAX = 2147483647;
  /**
   * If the string contains a 32-bit integer, return it.  Else return null.
   */
  const tryParseInt = function (str) {
      if (INTEGER_REGEXP_.test(str)) {
          const intVal = Number(str);
          if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {
              return intVal;
          }
      }
      return null;
  };
  /**
   * Helper to run some code but catch any exceptions and re-throw them later.
   * Useful for preventing user callbacks from breaking internal code.
   *
   * Re-throwing the exception from a setTimeout is a little evil, but it's very
   * convenient (we don't have to try to figure out when is a safe point to
   * re-throw it), and the behavior seems reasonable:
   *
   * * If you aren't pausing on exceptions, you get an error in the console with
   *   the correct stack trace.
   * * If you're pausing on all exceptions, the debugger will pause on your
   *   exception and then again when we rethrow it.
   * * If you're only pausing on uncaught exceptions, the debugger will only pause
   *   on us re-throwing it.
   *
   * @param fn - The code to guard.
   */
  const exceptionGuard = function (fn) {
      try {
          fn();
      }
      catch (e) {
          // Re-throw exception when it's safe.
          setTimeout(() => {
              // It used to be that "throw e" would result in a good console error with
              // relevant context, but as of Chrome 39, you just get the firebase.js
              // file/line number where we re-throw it, which is useless. So we log
              // e.stack explicitly.
              const stack = e.stack || '';
              warn('Exception was thrown by user callback.', stack);
              throw e;
          }, Math.floor(0));
      }
  };
  /**
   * @returns {boolean} true if we think we're currently being crawled.
   */
  const beingCrawled = function () {
      const userAgent = (typeof window === 'object' &&
          window['navigator'] &&
          window['navigator']['userAgent']) ||
          '';
      // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we
      // believe to support JavaScript/AJAX rendering.
      // NOTE: Google Webmaster Tools doesn't really belong, but their "This is how a visitor to your website
      // would have seen the page" is flaky if we don't treat it as a crawler.
      return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);
  };
  /**
   * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.
   *
   * It is removed with clearTimeout() as normal.
   *
   * @param fn - Function to run.
   * @param time - Milliseconds to wait before running.
   * @returns The setTimeout() return value.
   */
  const setTimeoutNonBlocking = function (fn, time) {
      const timeout = setTimeout(fn, time);
      // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.
      if (typeof timeout === 'number' &&
          // @ts-ignore Is only defined in Deno environments.
          typeof Deno !== 'undefined' &&
          // @ts-ignore Deno and unrefTimer are only defined in Deno environments.
          Deno['unrefTimer']) {
          // @ts-ignore Deno and unrefTimer are only defined in Deno environments.
          Deno.unrefTimer(timeout);
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
      }
      else if (typeof timeout === 'object' && timeout['unref']) {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          timeout['unref']();
      }
      return timeout;
  };

  /**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Abstraction around AppCheck's token fetching capabilities.
   */
  class AppCheckTokenProvider {
      constructor(appName_, appCheckProvider) {
          this.appName_ = appName_;
          this.appCheckProvider = appCheckProvider;
          this.appCheck = appCheckProvider === null || appCheckProvider === undefined ? undefined : appCheckProvider.getImmediate({ optional: true });
          if (!this.appCheck) {
              appCheckProvider === null || appCheckProvider === undefined ? undefined : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));
          }
      }
      getToken(forceRefresh) {
          if (!this.appCheck) {
              return new Promise((resolve, reject) => {
                  // Support delayed initialization of FirebaseAppCheck. This allows our
                  // customers to initialize the RTDB SDK before initializing Firebase
                  // AppCheck and ensures that all requests are authenticated if a token
                  // becomes available before the timeout below expires.
                  setTimeout(() => {
                      if (this.appCheck) {
                          this.getToken(forceRefresh).then(resolve, reject);
                      }
                      else {
                          resolve(null);
                      }
                  }, 0);
              });
          }
          return this.appCheck.getToken(forceRefresh);
      }
      addTokenChangeListener(listener) {
          var _a;
          (_a = this.appCheckProvider) === null || _a === undefined ? undefined : _a.get().then(appCheck => appCheck.addTokenListener(listener));
      }
      notifyForInvalidToken() {
          warn(`Provided AppCheck credentials for the app named "${this.appName_}" ` +
              'are invalid. This usually indicates your app was not initialized correctly.');
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Abstraction around FirebaseApp's token fetching capabilities.
   */
  class FirebaseAuthTokenProvider {
      constructor(appName_, firebaseOptions_, authProvider_) {
          this.appName_ = appName_;
          this.firebaseOptions_ = firebaseOptions_;
          this.authProvider_ = authProvider_;
          this.auth_ = null;
          this.auth_ = authProvider_.getImmediate({ optional: true });
          if (!this.auth_) {
              authProvider_.onInit(auth => (this.auth_ = auth));
          }
      }
      getToken(forceRefresh) {
          if (!this.auth_) {
              return new Promise((resolve, reject) => {
                  // Support delayed initialization of FirebaseAuth. This allows our
                  // customers to initialize the RTDB SDK before initializing Firebase
                  // Auth and ensures that all requests are authenticated if a token
                  // becomes available before the timeout below expires.
                  setTimeout(() => {
                      if (this.auth_) {
                          this.getToken(forceRefresh).then(resolve, reject);
                      }
                      else {
                          resolve(null);
                      }
                  }, 0);
              });
          }
          return this.auth_.getToken(forceRefresh).catch(error => {
              // TODO: Need to figure out all the cases this is raised and whether
              // this makes sense.
              if (error && error.code === 'auth/token-not-initialized') {
                  log('Got auth/token-not-initialized error.  Treating as null token.');
                  return null;
              }
              else {
                  return Promise.reject(error);
              }
          });
      }
      addTokenChangeListener(listener) {
          // TODO: We might want to wrap the listener and call it with no args to
          // avoid a leaky abstraction, but that makes removing the listener harder.
          if (this.auth_) {
              this.auth_.addAuthTokenListener(listener);
          }
          else {
              this.authProvider_
                  .get()
                  .then(auth => auth.addAuthTokenListener(listener));
          }
      }
      removeTokenChangeListener(listener) {
          this.authProvider_
              .get()
              .then(auth => auth.removeAuthTokenListener(listener));
      }
      notifyForInvalidToken() {
          let errorMessage = 'Provided authentication credentials for the app named "' +
              this.appName_ +
              '" are invalid. This usually indicates your app was not ' +
              'initialized correctly. ';
          if ('credential' in this.firebaseOptions_) {
              errorMessage +=
                  'Make sure the "credential" property provided to initializeApp() ' +
                      'is authorized to access the specified "databaseURL" and is from the correct ' +
                      'project.';
          }
          else if ('serviceAccount' in this.firebaseOptions_) {
              errorMessage +=
                  'Make sure the "serviceAccount" property provided to initializeApp() ' +
                      'is authorized to access the specified "databaseURL" and is from the correct ' +
                      'project.';
          }
          else {
              errorMessage +=
                  'Make sure the "apiKey" and "databaseURL" properties provided to ' +
                      'initializeApp() match the values provided for your app at ' +
                      'https://console.firebase.google.com/.';
          }
          warn(errorMessage);
      }
  }
  /* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */
  class EmulatorTokenProvider {
      constructor(accessToken) {
          this.accessToken = accessToken;
      }
      getToken(forceRefresh) {
          return Promise.resolve({
              accessToken: this.accessToken
          });
      }
      addTokenChangeListener(listener) {
          // Invoke the listener immediately to match the behavior in Firebase Auth
          // (see packages/auth/src/auth.js#L1807)
          listener(this.accessToken);
      }
      removeTokenChangeListener(listener) { }
      notifyForInvalidToken() { }
  }
  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */
  EmulatorTokenProvider.OWNER = 'owner';

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const PROTOCOL_VERSION = '5';
  const VERSION_PARAM = 'v';
  const TRANSPORT_SESSION_PARAM = 's';
  const REFERER_PARAM = 'r';
  const FORGE_REF = 'f';
  // Matches console.firebase.google.com, firebase-console-*.corp.google.com and
  // firebase.corp.google.com
  const FORGE_DOMAIN_RE = /(console\.firebase|firebase-console-\w+\.corp|firebase\.corp)\.google\.com/;
  const LAST_SESSION_PARAM = 'ls';
  const APPLICATION_ID_PARAM = 'p';
  const APP_CHECK_TOKEN_PARAM = 'ac';
  const WEBSOCKET = 'websocket';
  const LONG_POLLING = 'long_polling';

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A class that holds metadata about a Repo object
   */
  class RepoInfo {
      /**
       * @param host - Hostname portion of the url for the repo
       * @param secure - Whether or not this repo is accessed over ssl
       * @param namespace - The namespace represented by the repo
       * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).
       * @param nodeAdmin - Whether this instance uses Admin SDK credentials
       * @param persistenceKey - Override the default session persistence storage key
       */
      constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false, isUsingEmulator = false) {
          this.secure = secure;
          this.namespace = namespace;
          this.webSocketOnly = webSocketOnly;
          this.nodeAdmin = nodeAdmin;
          this.persistenceKey = persistenceKey;
          this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;
          this.isUsingEmulator = isUsingEmulator;
          this._host = host.toLowerCase();
          this._domain = this._host.substr(this._host.indexOf('.') + 1);
          this.internalHost =
              PersistentStorage.get('host:' + host) || this._host;
      }
      isCacheableHost() {
          return this.internalHost.substr(0, 2) === 's-';
      }
      isCustomHost() {
          return (this._domain !== 'firebaseio.com' &&
              this._domain !== 'firebaseio-demo.com');
      }
      get host() {
          return this._host;
      }
      set host(newHost) {
          if (newHost !== this.internalHost) {
              this.internalHost = newHost;
              if (this.isCacheableHost()) {
                  PersistentStorage.set('host:' + this._host, this.internalHost);
              }
          }
      }
      toString() {
          let str = this.toURLString();
          if (this.persistenceKey) {
              str += '<' + this.persistenceKey + '>';
          }
          return str;
      }
      toURLString() {
          const protocol = this.secure ? 'https://' : 'http://';
          const query = this.includeNamespaceInQueryParams
              ? `?ns=${this.namespace}`
              : '';
          return `${protocol}${this.host}/${query}`;
      }
  }
  function repoInfoNeedsQueryParam(repoInfo) {
      return (repoInfo.host !== repoInfo.internalHost ||
          repoInfo.isCustomHost() ||
          repoInfo.includeNamespaceInQueryParams);
  }
  /**
   * Returns the websocket URL for this repo
   * @param repoInfo - RepoInfo object
   * @param type - of connection
   * @param params - list
   * @returns The URL for this repo
   */
  function repoInfoConnectionURL(repoInfo, type, params) {
      assert$1(typeof type === 'string', 'typeof type must == string');
      assert$1(typeof params === 'object', 'typeof params must == object');
      let connURL;
      if (type === WEBSOCKET) {
          connURL =
              (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';
      }
      else if (type === LONG_POLLING) {
          connURL =
              (repoInfo.secure ? 'https://' : 'http://') +
                  repoInfo.internalHost +
                  '/.lp?';
      }
      else {
          throw new Error('Unknown connection type: ' + type);
      }
      if (repoInfoNeedsQueryParam(repoInfo)) {
          params['ns'] = repoInfo.namespace;
      }
      const pairs = [];
      each(params, (key, value) => {
          pairs.push(key + '=' + value);
      });
      return connURL + pairs.join('&');
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Tracks a collection of stats.
   */
  class StatsCollection {
      constructor() {
          this.counters_ = {};
      }
      incrementCounter(name, amount = 1) {
          if (!contains$1(this.counters_, name)) {
              this.counters_[name] = 0;
          }
          this.counters_[name] += amount;
      }
      get() {
          return deepCopy(this.counters_);
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const collections = {};
  const reporters = {};
  function statsManagerGetCollection(repoInfo) {
      const hashString = repoInfo.toString();
      if (!collections[hashString]) {
          collections[hashString] = new StatsCollection();
      }
      return collections[hashString];
  }
  function statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {
      const hashString = repoInfo.toString();
      if (!reporters[hashString]) {
          reporters[hashString] = creatorFunction();
      }
      return reporters[hashString];
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * This class ensures the packets from the server arrive in order
   * This class takes data from the server and ensures it gets passed into the callbacks in order.
   */
  class PacketReceiver {
      /**
       * @param onMessage_
       */
      constructor(onMessage_) {
          this.onMessage_ = onMessage_;
          this.pendingResponses = [];
          this.currentResponseNum = 0;
          this.closeAfterResponse = -1;
          this.onClose = null;
      }
      closeAfter(responseNum, callback) {
          this.closeAfterResponse = responseNum;
          this.onClose = callback;
          if (this.closeAfterResponse < this.currentResponseNum) {
              this.onClose();
              this.onClose = null;
          }
      }
      /**
       * Each message from the server comes with a response number, and an array of data. The responseNumber
       * allows us to ensure that we process them in the right order, since we can't be guaranteed that all
       * browsers will respond in the same order as the requests we sent
       */
      handleResponse(requestNum, data) {
          this.pendingResponses[requestNum] = data;
          while (this.pendingResponses[this.currentResponseNum]) {
              const toProcess = this.pendingResponses[this.currentResponseNum];
              delete this.pendingResponses[this.currentResponseNum];
              for (let i = 0; i < toProcess.length; ++i) {
                  if (toProcess[i]) {
                      exceptionGuard(() => {
                          this.onMessage_(toProcess[i]);
                      });
                  }
              }
              if (this.currentResponseNum === this.closeAfterResponse) {
                  if (this.onClose) {
                      this.onClose();
                      this.onClose = null;
                  }
                  break;
              }
              this.currentResponseNum++;
          }
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // URL query parameters associated with longpolling
  const FIREBASE_LONGPOLL_START_PARAM = 'start';
  const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';
  const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';
  const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';
  const FIREBASE_LONGPOLL_ID_PARAM = 'id';
  const FIREBASE_LONGPOLL_PW_PARAM = 'pw';
  const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';
  const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';
  const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';
  const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';
  const FIREBASE_LONGPOLL_DATA_PARAM = 'd';
  const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';
  //Data size constants.
  //TODO: Perf: the maximum length actually differs from browser to browser.
  // We should check what browser we're on and set accordingly.
  const MAX_URL_DATA_SIZE = 1870;
  const SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=
  const MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;
  /**
   * Keepalive period
   * send a fresh request at minimum every 25 seconds. Opera has a maximum request
   * length of 30 seconds that we can't exceed.
   */
  const KEEPALIVE_REQUEST_INTERVAL = 25000;
  /**
   * How long to wait before aborting a long-polling connection attempt.
   */
  const LP_CONNECT_TIMEOUT = 30000;
  /**
   * This class manages a single long-polling connection.
   */
  class BrowserPollConnection {
      /**
       * @param connId An identifier for this connection, used for logging
       * @param repoInfo The info for the endpoint to send data to.
       * @param applicationId The Firebase App ID for this project.
       * @param appCheckToken The AppCheck token for this client.
       * @param authToken The AuthToken to use for this connection.
       * @param transportSessionId Optional transportSessionid if we are
       * reconnecting for an existing transport session
       * @param lastSessionId Optional lastSessionId if the PersistentConnection has
       * already created a connection previously
       */
      constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {
          this.connId = connId;
          this.repoInfo = repoInfo;
          this.applicationId = applicationId;
          this.appCheckToken = appCheckToken;
          this.authToken = authToken;
          this.transportSessionId = transportSessionId;
          this.lastSessionId = lastSessionId;
          this.bytesSent = 0;
          this.bytesReceived = 0;
          this.everConnected_ = false;
          this.log_ = logWrapper(connId);
          this.stats_ = statsManagerGetCollection(repoInfo);
          this.urlFn = (params) => {
              // Always add the token if we have one.
              if (this.appCheckToken) {
                  params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;
              }
              return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);
          };
      }
      /**
       * @param onMessage - Callback when messages arrive
       * @param onDisconnect - Callback with connection lost.
       */
      open(onMessage, onDisconnect) {
          this.curSegmentNum = 0;
          this.onDisconnect_ = onDisconnect;
          this.myPacketOrderer = new PacketReceiver(onMessage);
          this.isClosed_ = false;
          this.connectTimeoutTimer_ = setTimeout(() => {
              this.log_('Timed out trying to connect.');
              // Make sure we clear the host cache
              this.onClosed_();
              this.connectTimeoutTimer_ = null;
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
          }, Math.floor(LP_CONNECT_TIMEOUT));
          // Ensure we delay the creation of the iframe until the DOM is loaded.
          executeWhenDOMReady(() => {
              if (this.isClosed_) {
                  return;
              }
              //Set up a callback that gets triggered once a connection is set up.
              this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {
                  const [command, arg1, arg2, arg3, arg4] = args;
                  this.incrementIncomingBytes_(args);
                  if (!this.scriptTagHolder) {
                      return; // we closed the connection.
                  }
                  if (this.connectTimeoutTimer_) {
                      clearTimeout(this.connectTimeoutTimer_);
                      this.connectTimeoutTimer_ = null;
                  }
                  this.everConnected_ = true;
                  if (command === FIREBASE_LONGPOLL_START_PARAM) {
                      this.id = arg1;
                      this.password = arg2;
                  }
                  else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {
                      // Don't clear the host cache. We got a response from the server, so we know it's reachable
                      if (arg1) {
                          // We aren't expecting any more data (other than what the server's already in the process of sending us
                          // through our already open polls), so don't send any more.
                          this.scriptTagHolder.sendNewPolls = false;
                          // arg1 in this case is the last response number sent by the server. We should try to receive
                          // all of the responses up to this one before closing
                          this.myPacketOrderer.closeAfter(arg1, () => {
                              this.onClosed_();
                          });
                      }
                      else {
                          this.onClosed_();
                      }
                  }
                  else {
                      throw new Error('Unrecognized command received: ' + command);
                  }
              }, (...args) => {
                  const [pN, data] = args;
                  this.incrementIncomingBytes_(args);
                  this.myPacketOrderer.handleResponse(pN, data);
              }, () => {
                  this.onClosed_();
              }, this.urlFn);
              //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results
              //from cache.
              const urlParams = {};
              urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';
              urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);
              if (this.scriptTagHolder.uniqueCallbackIdentifier) {
                  urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =
                      this.scriptTagHolder.uniqueCallbackIdentifier;
              }
              urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
              if (this.transportSessionId) {
                  urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;
              }
              if (this.lastSessionId) {
                  urlParams[LAST_SESSION_PARAM] = this.lastSessionId;
              }
              if (this.applicationId) {
                  urlParams[APPLICATION_ID_PARAM] = this.applicationId;
              }
              if (this.appCheckToken) {
                  urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;
              }
              if (typeof location !== 'undefined' &&
                  location.hostname &&
                  FORGE_DOMAIN_RE.test(location.hostname)) {
                  urlParams[REFERER_PARAM] = FORGE_REF;
              }
              const connectURL = this.urlFn(urlParams);
              this.log_('Connecting via long-poll to ' + connectURL);
              this.scriptTagHolder.addTag(connectURL, () => {
                  /* do nothing */
              });
          });
      }
      /**
       * Call this when a handshake has completed successfully and we want to consider the connection established
       */
      start() {
          this.scriptTagHolder.startLongPoll(this.id, this.password);
          this.addDisconnectPingFrame(this.id, this.password);
      }
      /**
       * Forces long polling to be considered as a potential transport
       */
      static forceAllow() {
          BrowserPollConnection.forceAllow_ = true;
      }
      /**
       * Forces longpolling to not be considered as a potential transport
       */
      static forceDisallow() {
          BrowserPollConnection.forceDisallow_ = true;
      }
      // Static method, use string literal so it can be accessed in a generic way
      static isAvailable() {
          if (BrowserPollConnection.forceAllow_) {
              return true;
          }
          else {
              // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in
              // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).
              return (!BrowserPollConnection.forceDisallow_ &&
                  typeof document !== 'undefined' &&
                  document.createElement != null &&
                  !isChromeExtensionContentScript() &&
                  !isWindowsStoreApp());
          }
      }
      /**
       * No-op for polling
       */
      markConnectionHealthy() { }
      /**
       * Stops polling and cleans up the iframe
       */
      shutdown_() {
          this.isClosed_ = true;
          if (this.scriptTagHolder) {
              this.scriptTagHolder.close();
              this.scriptTagHolder = null;
          }
          //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.
          if (this.myDisconnFrame) {
              document.body.removeChild(this.myDisconnFrame);
              this.myDisconnFrame = null;
          }
          if (this.connectTimeoutTimer_) {
              clearTimeout(this.connectTimeoutTimer_);
              this.connectTimeoutTimer_ = null;
          }
      }
      /**
       * Triggered when this transport is closed
       */
      onClosed_() {
          if (!this.isClosed_) {
              this.log_('Longpoll is closing itself');
              this.shutdown_();
              if (this.onDisconnect_) {
                  this.onDisconnect_(this.everConnected_);
                  this.onDisconnect_ = null;
              }
          }
      }
      /**
       * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server
       * that we've left.
       */
      close() {
          if (!this.isClosed_) {
              this.log_('Longpoll is being closed.');
              this.shutdown_();
          }
      }
      /**
       * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then
       * broken into chunks (since URLs have a small maximum length).
       * @param data - The JSON data to transmit.
       */
      send(data) {
          const dataStr = stringify(data);
          this.bytesSent += dataStr.length;
          this.stats_.incrementCounter('bytes_sent', dataStr.length);
          //first, lets get the base64-encoded data
          const base64data = base64Encode(dataStr);
          //We can only fit a certain amount in each URL, so we need to split this request
          //up into multiple pieces if it doesn't fit in one request.
          const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);
          //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number
          //of segments so that we can reassemble the packet on the server.
          for (let i = 0; i < dataSegs.length; i++) {
              this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);
              this.curSegmentNum++;
          }
      }
      /**
       * This is how we notify the server that we're leaving.
       * We aren't able to send requests with DHTML on a window close event, but we can
       * trigger XHR requests in some browsers (everything but Opera basically).
       */
      addDisconnectPingFrame(id, pw) {
          this.myDisconnFrame = document.createElement('iframe');
          const urlParams = {};
          urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';
          urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;
          urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;
          this.myDisconnFrame.src = this.urlFn(urlParams);
          this.myDisconnFrame.style.display = 'none';
          document.body.appendChild(this.myDisconnFrame);
      }
      /**
       * Used to track the bytes received by this client
       */
      incrementIncomingBytes_(args) {
          // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.
          const bytesReceived = stringify(args).length;
          this.bytesReceived += bytesReceived;
          this.stats_.incrementCounter('bytes_received', bytesReceived);
      }
  }
  /*********************************************************************************************
   * A wrapper around an iframe that is used as a long-polling script holder.
   *********************************************************************************************/
  class FirebaseIFrameScriptHolder {
      /**
       * @param commandCB - The callback to be called when control commands are received from the server.
       * @param onMessageCB - The callback to be triggered when responses arrive from the server.
       * @param onDisconnect - The callback to be triggered when this tag holder is closed
       * @param urlFn - A function that provides the URL of the endpoint to send data to.
       */
      constructor(commandCB, onMessageCB, onDisconnect, urlFn) {
          this.onDisconnect = onDisconnect;
          this.urlFn = urlFn;
          //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause
          //problems in some browsers.
          this.outstandingRequests = new Set();
          //A queue of the pending segments waiting for transmission to the server.
          this.pendingSegs = [];
          //A serial number. We use this for two things:
          // 1) A way to ensure the browser doesn't cache responses to polls
          // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The
          //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute
          //    JSONP code in the order it was added to the iframe.
          this.currentSerial = Math.floor(Math.random() * 100000000);
          // This gets set to false when we're "closing down" the connection (e.g. we're switching transports but there's still
          // incoming data from the server that we're waiting for).
          this.sendNewPolls = true;
          {
              //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the
              //iframes where we put the long-polling script tags. We have two callbacks:
              //   1) Command Callback - Triggered for control issues, like starting a connection.
              //   2) Message Callback - Triggered when new data arrives.
              this.uniqueCallbackIdentifier = LUIDGenerator();
              window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;
              window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =
                  onMessageCB;
              //Create an iframe for us to add script tags to.
              this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();
              // Set the iframe's contents.
              let script = '';
              // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient
              // for ie9, but ie8 needs to do it again in the document itself.
              if (this.myIFrame.src &&
                  this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {
                  const currentDomain = document.domain;
                  script = '<script>document.domain="' + currentDomain + '";</script>';
              }
              const iframeContents = '<html><body>' + script + '</body></html>';
              try {
                  this.myIFrame.doc.open();
                  this.myIFrame.doc.write(iframeContents);
                  this.myIFrame.doc.close();
              }
              catch (e) {
                  log('frame writing exception');
                  if (e.stack) {
                      log(e.stack);
                  }
                  log(e);
              }
          }
      }
      /**
       * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can
       * actually use.
       */
      static createIFrame_() {
          const iframe = document.createElement('iframe');
          iframe.style.display = 'none';
          // This is necessary in order to initialize the document inside the iframe
          if (document.body) {
              document.body.appendChild(iframe);
              try {
                  // If document.domain has been modified in IE, this will throw an error, and we need to set the
                  // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute
                  // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.
                  const a = iframe.contentWindow.document;
                  if (!a) {
                      // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.
                      log('No IE domain setting required');
                  }
              }
              catch (e) {
                  const domain = document.domain;
                  iframe.src =
                      "javascript:void((function(){document.open();document.domain='" +
                          domain +
                          "';document.close();})())";
              }
          }
          else {
              // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this
              // never gets hit.
              throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';
          }
          // Get the document of the iframe in a browser-specific way.
          if (iframe.contentDocument) {
              iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari
          }
          else if (iframe.contentWindow) {
              iframe.doc = iframe.contentWindow.document; // Internet Explorer
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
          }
          else if (iframe.document) {
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              iframe.doc = iframe.document; //others?
          }
          return iframe;
      }
      /**
       * Cancel all outstanding queries and remove the frame.
       */
      close() {
          //Mark this iframe as dead, so no new requests are sent.
          this.alive = false;
          if (this.myIFrame) {
              //We have to actually remove all of the html inside this iframe before removing it from the
              //window, or IE will continue loading and executing the script tags we've already added, which
              //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.
              this.myIFrame.doc.body.textContent = '';
              setTimeout(() => {
                  if (this.myIFrame !== null) {
                      document.body.removeChild(this.myIFrame);
                      this.myIFrame = null;
                  }
              }, Math.floor(0));
          }
          // Protect from being called recursively.
          const onDisconnect = this.onDisconnect;
          if (onDisconnect) {
              this.onDisconnect = null;
              onDisconnect();
          }
      }
      /**
       * Actually start the long-polling session by adding the first script tag(s) to the iframe.
       * @param id - The ID of this connection
       * @param pw - The password for this connection
       */
      startLongPoll(id, pw) {
          this.myID = id;
          this.myPW = pw;
          this.alive = true;
          //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.
          while (this.newRequest_()) { }
      }
      /**
       * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't
       * too many outstanding requests and we are still alive.
       *
       * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if
       * needed.
       */
      newRequest_() {
          // We keep one outstanding request open all the time to receive data, but if we need to send data
          // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically
          // close the old request.
          if (this.alive &&
              this.sendNewPolls &&
              this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {
              //construct our url
              this.currentSerial++;
              const urlParams = {};
              urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;
              urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;
              urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;
              let theURL = this.urlFn(urlParams);
              //Now add as much data as we can.
              let curDataString = '';
              let i = 0;
              while (this.pendingSegs.length > 0) {
                  //first, lets see if the next segment will fit.
                  const nextSeg = this.pendingSegs[0];
                  if (nextSeg.d.length +
                      SEG_HEADER_SIZE +
                      curDataString.length <=
                      MAX_URL_DATA_SIZE) {
                      //great, the segment will fit. Lets append it.
                      const theSeg = this.pendingSegs.shift();
                      curDataString =
                          curDataString +
                              '&' +
                              FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +
                              i +
                              '=' +
                              theSeg.seg +
                              '&' +
                              FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +
                              i +
                              '=' +
                              theSeg.ts +
                              '&' +
                              FIREBASE_LONGPOLL_DATA_PARAM +
                              i +
                              '=' +
                              theSeg.d;
                      i++;
                  }
                  else {
                      break;
                  }
              }
              theURL = theURL + curDataString;
              this.addLongPollTag_(theURL, this.currentSerial);
              return true;
          }
          else {
              return false;
          }
      }
      /**
       * Queue a packet for transmission to the server.
       * @param segnum - A sequential id for this packet segment used for reassembly
       * @param totalsegs - The total number of segments in this packet
       * @param data - The data for this segment.
       */
      enqueueSegment(segnum, totalsegs, data) {
          //add this to the queue of segments to send.
          this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });
          //send the data immediately if there isn't already data being transmitted, unless
          //startLongPoll hasn't been called yet.
          if (this.alive) {
              this.newRequest_();
          }
      }
      /**
       * Add a script tag for a regular long-poll request.
       * @param url - The URL of the script tag.
       * @param serial - The serial number of the request.
       */
      addLongPollTag_(url, serial) {
          //remember that we sent this request.
          this.outstandingRequests.add(serial);
          const doNewRequest = () => {
              this.outstandingRequests.delete(serial);
              this.newRequest_();
          };
          // If this request doesn't return on its own accord (by the server sending us some data), we'll
          // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.
          const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));
          const readyStateCB = () => {
              // Request completed.  Cancel the keepalive.
              clearTimeout(keepaliveTimeout);
              // Trigger a new request so we can continue receiving data.
              doNewRequest();
          };
          this.addTag(url, readyStateCB);
      }
      /**
       * Add an arbitrary script tag to the iframe.
       * @param url - The URL for the script tag source.
       * @param loadCB - A callback to be triggered once the script has loaded.
       */
      addTag(url, loadCB) {
          {
              setTimeout(() => {
                  try {
                      // if we're already closed, don't add this poll
                      if (!this.sendNewPolls) {
                          return;
                      }
                      const newScript = this.myIFrame.doc.createElement('script');
                      newScript.type = 'text/javascript';
                      newScript.async = true;
                      newScript.src = url;
                      // eslint-disable-next-line @typescript-eslint/no-explicit-any
                      newScript.onload = newScript.onreadystatechange =
                          function () {
                              // eslint-disable-next-line @typescript-eslint/no-explicit-any
                              const rstate = newScript.readyState;
                              if (!rstate || rstate === 'loaded' || rstate === 'complete') {
                                  // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                  newScript.onload = newScript.onreadystatechange = null;
                                  if (newScript.parentNode) {
                                      newScript.parentNode.removeChild(newScript);
                                  }
                                  loadCB();
                              }
                          };
                      newScript.onerror = () => {
                          log('Long-poll script failed to load: ' + url);
                          this.sendNewPolls = false;
                          this.close();
                      };
                      this.myIFrame.doc.body.appendChild(newScript);
                  }
                  catch (e) {
                      // TODO: we should make this error visible somehow
                  }
              }, Math.floor(1));
          }
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const WEBSOCKET_MAX_FRAME_SIZE = 16384;
  const WEBSOCKET_KEEPALIVE_INTERVAL = 45000;
  let WebSocketImpl = null;
  if (typeof MozWebSocket !== 'undefined') {
      WebSocketImpl = MozWebSocket;
  }
  else if (typeof WebSocket !== 'undefined') {
      WebSocketImpl = WebSocket;
  }
  /**
   * Create a new websocket connection with the given callbacks.
   */
  class WebSocketConnection {
      /**
       * @param connId identifier for this transport
       * @param repoInfo The info for the websocket endpoint.
       * @param applicationId The Firebase App ID for this project.
       * @param appCheckToken The App Check Token for this client.
       * @param authToken The Auth Token for this client.
       * @param transportSessionId Optional transportSessionId if this is connecting
       * to an existing transport session
       * @param lastSessionId Optional lastSessionId if there was a previous
       * connection
       */
      constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {
          this.connId = connId;
          this.applicationId = applicationId;
          this.appCheckToken = appCheckToken;
          this.authToken = authToken;
          this.keepaliveTimer = null;
          this.frames = null;
          this.totalFrames = 0;
          this.bytesSent = 0;
          this.bytesReceived = 0;
          this.log_ = logWrapper(this.connId);
          this.stats_ = statsManagerGetCollection(repoInfo);
          this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);
          this.nodeAdmin = repoInfo.nodeAdmin;
      }
      /**
       * @param repoInfo - The info for the websocket endpoint.
       * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport
       *                                         session
       * @param lastSessionId - Optional lastSessionId if there was a previous connection
       * @returns connection url
       */
      static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {
          const urlParams = {};
          urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
          if (typeof location !== 'undefined' &&
              location.hostname &&
              FORGE_DOMAIN_RE.test(location.hostname)) {
              urlParams[REFERER_PARAM] = FORGE_REF;
          }
          if (transportSessionId) {
              urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;
          }
          if (lastSessionId) {
              urlParams[LAST_SESSION_PARAM] = lastSessionId;
          }
          if (appCheckToken) {
              urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;
          }
          if (applicationId) {
              urlParams[APPLICATION_ID_PARAM] = applicationId;
          }
          return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);
      }
      /**
       * @param onMessage - Callback when messages arrive
       * @param onDisconnect - Callback with connection lost.
       */
      open(onMessage, onDisconnect) {
          this.onDisconnect = onDisconnect;
          this.onMessage = onMessage;
          this.log_('Websocket connecting to ' + this.connURL);
          this.everConnected_ = false;
          // Assume failure until proven otherwise.
          PersistentStorage.set('previous_websocket_failure', true);
          try {
              let options;
              if (isNodeSdk()) ;
              this.mySock = new WebSocketImpl(this.connURL, [], options);
          }
          catch (e) {
              this.log_('Error instantiating WebSocket.');
              const error = e.message || e.data;
              if (error) {
                  this.log_(error);
              }
              this.onClosed_();
              return;
          }
          this.mySock.onopen = () => {
              this.log_('Websocket connected.');
              this.everConnected_ = true;
          };
          this.mySock.onclose = () => {
              this.log_('Websocket connection was disconnected.');
              this.mySock = null;
              this.onClosed_();
          };
          this.mySock.onmessage = m => {
              this.handleIncomingFrame(m);
          };
          this.mySock.onerror = e => {
              this.log_('WebSocket error.  Closing connection.');
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              const error = e.message || e.data;
              if (error) {
                  this.log_(error);
              }
              this.onClosed_();
          };
      }
      /**
       * No-op for websockets, we don't need to do anything once the connection is confirmed as open
       */
      start() { }
      static forceDisallow() {
          WebSocketConnection.forceDisallow_ = true;
      }
      static isAvailable() {
          let isOldAndroid = false;
          if (typeof navigator !== 'undefined' && navigator.userAgent) {
              const oldAndroidRegex = /Android ([0-9]{0,}\.[0-9]{0,})/;
              const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);
              if (oldAndroidMatch && oldAndroidMatch.length > 1) {
                  if (parseFloat(oldAndroidMatch[1]) < 4.4) {
                      isOldAndroid = true;
                  }
              }
          }
          return (!isOldAndroid &&
              WebSocketImpl !== null &&
              !WebSocketConnection.forceDisallow_);
      }
      /**
       * Returns true if we previously failed to connect with this transport.
       */
      static previouslyFailed() {
          // If our persistent storage is actually only in-memory storage,
          // we default to assuming that it previously failed to be safe.
          return (PersistentStorage.isInMemoryStorage ||
              PersistentStorage.get('previous_websocket_failure') === true);
      }
      markConnectionHealthy() {
          PersistentStorage.remove('previous_websocket_failure');
      }
      appendFrame_(data) {
          this.frames.push(data);
          if (this.frames.length === this.totalFrames) {
              const fullMess = this.frames.join('');
              this.frames = null;
              const jsonMess = jsonEval(fullMess);
              //handle the message
              this.onMessage(jsonMess);
          }
      }
      /**
       * @param frameCount - The number of frames we are expecting from the server
       */
      handleNewFrameCount_(frameCount) {
          this.totalFrames = frameCount;
          this.frames = [];
      }
      /**
       * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1
       * @returns Any remaining data to be process, or null if there is none
       */
      extractFrameCount_(data) {
          assert$1(this.frames === null, 'We already have a frame buffer');
          // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced
          // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508
          if (data.length <= 6) {
              const frameCount = Number(data);
              if (!isNaN(frameCount)) {
                  this.handleNewFrameCount_(frameCount);
                  return null;
              }
          }
          this.handleNewFrameCount_(1);
          return data;
      }
      /**
       * Process a websocket frame that has arrived from the server.
       * @param mess - The frame data
       */
      handleIncomingFrame(mess) {
          if (this.mySock === null) {
              return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.
          }
          const data = mess['data'];
          this.bytesReceived += data.length;
          this.stats_.incrementCounter('bytes_received', data.length);
          this.resetKeepAlive();
          if (this.frames !== null) {
              // we're buffering
              this.appendFrame_(data);
          }
          else {
              // try to parse out a frame count, otherwise, assume 1 and process it
              const remainingData = this.extractFrameCount_(data);
              if (remainingData !== null) {
                  this.appendFrame_(remainingData);
              }
          }
      }
      /**
       * Send a message to the server
       * @param data - The JSON object to transmit
       */
      send(data) {
          this.resetKeepAlive();
          const dataStr = stringify(data);
          this.bytesSent += dataStr.length;
          this.stats_.incrementCounter('bytes_sent', dataStr.length);
          //We can only fit a certain amount in each websocket frame, so we need to split this request
          //up into multiple pieces if it doesn't fit in one request.
          const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);
          //Send the length header
          if (dataSegs.length > 1) {
              this.sendString_(String(dataSegs.length));
          }
          //Send the actual data in segments.
          for (let i = 0; i < dataSegs.length; i++) {
              this.sendString_(dataSegs[i]);
          }
      }
      shutdown_() {
          this.isClosed_ = true;
          if (this.keepaliveTimer) {
              clearInterval(this.keepaliveTimer);
              this.keepaliveTimer = null;
          }
          if (this.mySock) {
              this.mySock.close();
              this.mySock = null;
          }
      }
      onClosed_() {
          if (!this.isClosed_) {
              this.log_('WebSocket is closing itself');
              this.shutdown_();
              // since this is an internal close, trigger the close listener
              if (this.onDisconnect) {
                  this.onDisconnect(this.everConnected_);
                  this.onDisconnect = null;
              }
          }
      }
      /**
       * External-facing close handler.
       * Close the websocket and kill the connection.
       */
      close() {
          if (!this.isClosed_) {
              this.log_('WebSocket is being closed');
              this.shutdown_();
          }
      }
      /**
       * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after
       * the last activity.
       */
      resetKeepAlive() {
          clearInterval(this.keepaliveTimer);
          this.keepaliveTimer = setInterval(() => {
              //If there has been no websocket activity for a while, send a no-op
              if (this.mySock) {
                  this.sendString_('0');
              }
              this.resetKeepAlive();
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
          }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));
      }
      /**
       * Send a string over the websocket.
       *
       * @param str - String to send.
       */
      sendString_(str) {
          // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()
          // calls for some unknown reason.  We treat these as an error and disconnect.
          // See https://app.asana.com/0/58926111402292/68021340250410
          try {
              this.mySock.send(str);
          }
          catch (e) {
              this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');
              setTimeout(this.onClosed_.bind(this), 0);
          }
      }
  }
  /**
   * Number of response before we consider the connection "healthy."
   */
  WebSocketConnection.responsesRequiredToBeHealthy = 2;
  /**
   * Time to wait for the connection te become healthy before giving up.
   */
  WebSocketConnection.healthyTimeout = 30000;

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Currently simplistic, this class manages what transport a Connection should use at various stages of its
   * lifecycle.
   *
   * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if
   * they are available.
   */
  class TransportManager {
      static get ALL_TRANSPORTS() {
          return [BrowserPollConnection, WebSocketConnection];
      }
      /**
       * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after
       * TransportManager has already set up transports_
       */
      static get IS_TRANSPORT_INITIALIZED() {
          return this.globalTransportInitialized_;
      }
      /**
       * @param repoInfo - Metadata around the namespace we're connecting to
       */
      constructor(repoInfo) {
          this.initTransports_(repoInfo);
      }
      initTransports_(repoInfo) {
          const isWebSocketsAvailable = WebSocketConnection['isAvailable']();
          let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();
          if (repoInfo.webSocketOnly) {
              if (!isWebSocketsAvailable) {
                  warn("wss:// URL used, but browser isn't known to support websockets.  Trying anyway.");
              }
              isSkipPollConnection = true;
          }
          if (isSkipPollConnection) {
              this.transports_ = [WebSocketConnection];
          }
          else {
              const transports = (this.transports_ = []);
              for (const transport of TransportManager.ALL_TRANSPORTS) {
                  if (transport && transport['isAvailable']()) {
                      transports.push(transport);
                  }
              }
              TransportManager.globalTransportInitialized_ = true;
          }
      }
      /**
       * @returns The constructor for the initial transport to use
       */
      initialTransport() {
          if (this.transports_.length > 0) {
              return this.transports_[0];
          }
          else {
              throw new Error('No transports available');
          }
      }
      /**
       * @returns The constructor for the next transport, or null
       */
      upgradeTransport() {
          if (this.transports_.length > 1) {
              return this.transports_[1];
          }
          else {
              return null;
          }
      }
  }
  // Keeps track of whether the TransportManager has already chosen a transport to use
  TransportManager.globalTransportInitialized_ = false;

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // Abort upgrade attempt if it takes longer than 60s.
  const UPGRADE_TIMEOUT = 60000;
  // For some transports (WebSockets), we need to "validate" the transport by exchanging a few requests and responses.
  // If we haven't sent enough requests within 5s, we'll start sending noop ping requests.
  const DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;
  // If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)
  // then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout
  // but we've sent/received enough bytes, we don't cancel the connection.
  const BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;
  const BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;
  const MESSAGE_TYPE = 't';
  const MESSAGE_DATA = 'd';
  const CONTROL_SHUTDOWN = 's';
  const CONTROL_RESET = 'r';
  const CONTROL_ERROR = 'e';
  const CONTROL_PONG = 'o';
  const SWITCH_ACK = 'a';
  const END_TRANSMISSION = 'n';
  const PING = 'p';
  const SERVER_HELLO = 'h';
  /**
   * Creates a new real-time connection to the server using whichever method works
   * best in the current browser.
   */
  class Connection {
      /**
       * @param id - an id for this connection
       * @param repoInfo_ - the info for the endpoint to connect to
       * @param applicationId_ - the Firebase App ID for this project
       * @param appCheckToken_ - The App Check Token for this device.
       * @param authToken_ - The auth token for this session.
       * @param onMessage_ - the callback to be triggered when a server-push message arrives
       * @param onReady_ - the callback to be triggered when this connection is ready to send messages.
       * @param onDisconnect_ - the callback to be triggered when a connection was lost
       * @param onKill_ - the callback to be triggered when this connection has permanently shut down.
       * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server
       */
      constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {
          this.id = id;
          this.repoInfo_ = repoInfo_;
          this.applicationId_ = applicationId_;
          this.appCheckToken_ = appCheckToken_;
          this.authToken_ = authToken_;
          this.onMessage_ = onMessage_;
          this.onReady_ = onReady_;
          this.onDisconnect_ = onDisconnect_;
          this.onKill_ = onKill_;
          this.lastSessionId = lastSessionId;
          this.connectionCount = 0;
          this.pendingDataMessages = [];
          this.state_ = 0 /* RealtimeState.CONNECTING */;
          this.log_ = logWrapper('c:' + this.id + ':');
          this.transportManager_ = new TransportManager(repoInfo_);
          this.log_('Connection created');
          this.start_();
      }
      /**
       * Starts a connection attempt
       */
      start_() {
          const conn = this.transportManager_.initialTransport();
          this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);
          // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
          // can consider the transport healthy.
          this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;
          const onMessageReceived = this.connReceiver_(this.conn_);
          const onConnectionLost = this.disconnReceiver_(this.conn_);
          this.tx_ = this.conn_;
          this.rx_ = this.conn_;
          this.secondaryConn_ = null;
          this.isHealthy_ = false;
          /*
           * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.
           * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.
           * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should
           * still have the context of your originating frame.
           */
          setTimeout(() => {
              // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it
              this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);
          }, Math.floor(0));
          const healthyTimeoutMS = conn['healthyTimeout'] || 0;
          if (healthyTimeoutMS > 0) {
              this.healthyTimeout_ = setTimeoutNonBlocking(() => {
                  this.healthyTimeout_ = null;
                  if (!this.isHealthy_) {
                      if (this.conn_ &&
                          this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {
                          this.log_('Connection exceeded healthy timeout but has received ' +
                              this.conn_.bytesReceived +
                              ' bytes.  Marking connection healthy.');
                          this.isHealthy_ = true;
                          this.conn_.markConnectionHealthy();
                      }
                      else if (this.conn_ &&
                          this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {
                          this.log_('Connection exceeded healthy timeout but has sent ' +
                              this.conn_.bytesSent +
                              ' bytes.  Leaving connection alive.');
                          // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to
                          // the server.
                      }
                      else {
                          this.log_('Closing unhealthy connection after timeout.');
                          this.close();
                      }
                  }
                  // eslint-disable-next-line @typescript-eslint/no-explicit-any
              }, Math.floor(healthyTimeoutMS));
          }
      }
      nextTransportId_() {
          return 'c:' + this.id + ':' + this.connectionCount++;
      }
      disconnReceiver_(conn) {
          return everConnected => {
              if (conn === this.conn_) {
                  this.onConnectionLost_(everConnected);
              }
              else if (conn === this.secondaryConn_) {
                  this.log_('Secondary connection lost.');
                  this.onSecondaryConnectionLost_();
              }
              else {
                  this.log_('closing an old connection');
              }
          };
      }
      connReceiver_(conn) {
          return (message) => {
              if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {
                  if (conn === this.rx_) {
                      this.onPrimaryMessageReceived_(message);
                  }
                  else if (conn === this.secondaryConn_) {
                      this.onSecondaryMessageReceived_(message);
                  }
                  else {
                      this.log_('message on old connection');
                  }
              }
          };
      }
      /**
       * @param dataMsg - An arbitrary data message to be sent to the server
       */
      sendRequest(dataMsg) {
          // wrap in a data message envelope and send it on
          const msg = { t: 'd', d: dataMsg };
          this.sendData_(msg);
      }
      tryCleanupConnection() {
          if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {
              this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);
              this.conn_ = this.secondaryConn_;
              this.secondaryConn_ = null;
              // the server will shutdown the old connection
          }
      }
      onSecondaryControl_(controlData) {
          if (MESSAGE_TYPE in controlData) {
              const cmd = controlData[MESSAGE_TYPE];
              if (cmd === SWITCH_ACK) {
                  this.upgradeIfSecondaryHealthy_();
              }
              else if (cmd === CONTROL_RESET) {
                  // Most likely the session wasn't valid. Abandon the switch attempt
                  this.log_('Got a reset on secondary, closing it');
                  this.secondaryConn_.close();
                  // If we were already using this connection for something, than we need to fully close
                  if (this.tx_ === this.secondaryConn_ ||
                      this.rx_ === this.secondaryConn_) {
                      this.close();
                  }
              }
              else if (cmd === CONTROL_PONG) {
                  this.log_('got pong on secondary.');
                  this.secondaryResponsesRequired_--;
                  this.upgradeIfSecondaryHealthy_();
              }
          }
      }
      onSecondaryMessageReceived_(parsedData) {
          const layer = requireKey('t', parsedData);
          const data = requireKey('d', parsedData);
          if (layer === 'c') {
              this.onSecondaryControl_(data);
          }
          else if (layer === 'd') {
              // got a data message, but we're still second connection. Need to buffer it up
              this.pendingDataMessages.push(data);
          }
          else {
              throw new Error('Unknown protocol layer: ' + layer);
          }
      }
      upgradeIfSecondaryHealthy_() {
          if (this.secondaryResponsesRequired_ <= 0) {
              this.log_('Secondary connection is healthy.');
              this.isHealthy_ = true;
              this.secondaryConn_.markConnectionHealthy();
              this.proceedWithUpgrade_();
          }
          else {
              // Send a ping to make sure the connection is healthy.
              this.log_('sending ping on secondary.');
              this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });
          }
      }
      proceedWithUpgrade_() {
          // tell this connection to consider itself open
          this.secondaryConn_.start();
          // send ack
          this.log_('sending client ack on secondary');
          this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });
          // send end packet on primary transport, switch to sending on this one
          // can receive on this one, buffer responses until end received on primary transport
          this.log_('Ending transmission on primary');
          this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });
          this.tx_ = this.secondaryConn_;
          this.tryCleanupConnection();
      }
      onPrimaryMessageReceived_(parsedData) {
          // Must refer to parsedData properties in quotes, so closure doesn't touch them.
          const layer = requireKey('t', parsedData);
          const data = requireKey('d', parsedData);
          if (layer === 'c') {
              this.onControl_(data);
          }
          else if (layer === 'd') {
              this.onDataMessage_(data);
          }
      }
      onDataMessage_(message) {
          this.onPrimaryResponse_();
          // We don't do anything with data messages, just kick them up a level
          this.onMessage_(message);
      }
      onPrimaryResponse_() {
          if (!this.isHealthy_) {
              this.primaryResponsesRequired_--;
              if (this.primaryResponsesRequired_ <= 0) {
                  this.log_('Primary connection is healthy.');
                  this.isHealthy_ = true;
                  this.conn_.markConnectionHealthy();
              }
          }
      }
      onControl_(controlData) {
          const cmd = requireKey(MESSAGE_TYPE, controlData);
          if (MESSAGE_DATA in controlData) {
              const payload = controlData[MESSAGE_DATA];
              if (cmd === SERVER_HELLO) {
                  const handshakePayload = Object.assign({}, payload);
                  if (this.repoInfo_.isUsingEmulator) {
                      // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.
                      handshakePayload.h = this.repoInfo_.host;
                  }
                  this.onHandshake_(handshakePayload);
              }
              else if (cmd === END_TRANSMISSION) {
                  this.log_('recvd end transmission on primary');
                  this.rx_ = this.secondaryConn_;
                  for (let i = 0; i < this.pendingDataMessages.length; ++i) {
                      this.onDataMessage_(this.pendingDataMessages[i]);
                  }
                  this.pendingDataMessages = [];
                  this.tryCleanupConnection();
              }
              else if (cmd === CONTROL_SHUTDOWN) {
                  // This was previously the 'onKill' callback passed to the lower-level connection
                  // payload in this case is the reason for the shutdown. Generally a human-readable error
                  this.onConnectionShutdown_(payload);
              }
              else if (cmd === CONTROL_RESET) {
                  // payload in this case is the host we should contact
                  this.onReset_(payload);
              }
              else if (cmd === CONTROL_ERROR) {
                  error('Server Error: ' + payload);
              }
              else if (cmd === CONTROL_PONG) {
                  this.log_('got pong on primary.');
                  this.onPrimaryResponse_();
                  this.sendPingOnPrimaryIfNecessary_();
              }
              else {
                  error('Unknown control packet command: ' + cmd);
              }
          }
      }
      /**
       * @param handshake - The handshake data returned from the server
       */
      onHandshake_(handshake) {
          const timestamp = handshake.ts;
          const version = handshake.v;
          const host = handshake.h;
          this.sessionId = handshake.s;
          this.repoInfo_.host = host;
          // if we've already closed the connection, then don't bother trying to progress further
          if (this.state_ === 0 /* RealtimeState.CONNECTING */) {
              this.conn_.start();
              this.onConnectionEstablished_(this.conn_, timestamp);
              if (PROTOCOL_VERSION !== version) {
                  warn('Protocol version mismatch detected');
              }
              // TODO: do we want to upgrade? when? maybe a delay?
              this.tryStartUpgrade_();
          }
      }
      tryStartUpgrade_() {
          const conn = this.transportManager_.upgradeTransport();
          if (conn) {
              this.startUpgrade_(conn);
          }
      }
      startUpgrade_(conn) {
          this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);
          // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
          // can consider the transport healthy.
          this.secondaryResponsesRequired_ =
              conn['responsesRequiredToBeHealthy'] || 0;
          const onMessage = this.connReceiver_(this.secondaryConn_);
          const onDisconnect = this.disconnReceiver_(this.secondaryConn_);
          this.secondaryConn_.open(onMessage, onDisconnect);
          // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.
          setTimeoutNonBlocking(() => {
              if (this.secondaryConn_) {
                  this.log_('Timed out trying to upgrade.');
                  this.secondaryConn_.close();
              }
          }, Math.floor(UPGRADE_TIMEOUT));
      }
      onReset_(host) {
          this.log_('Reset packet received.  New host: ' + host);
          this.repoInfo_.host = host;
          // TODO: if we're already "connected", we need to trigger a disconnect at the next layer up.
          // We don't currently support resets after the connection has already been established
          if (this.state_ === 1 /* RealtimeState.CONNECTED */) {
              this.close();
          }
          else {
              // Close whatever connections we have open and start again.
              this.closeConnections_();
              this.start_();
          }
      }
      onConnectionEstablished_(conn, timestamp) {
          this.log_('Realtime connection established.');
          this.conn_ = conn;
          this.state_ = 1 /* RealtimeState.CONNECTED */;
          if (this.onReady_) {
              this.onReady_(timestamp, this.sessionId);
              this.onReady_ = null;
          }
          // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,
          // send some pings.
          if (this.primaryResponsesRequired_ === 0) {
              this.log_('Primary connection is healthy.');
              this.isHealthy_ = true;
          }
          else {
              setTimeoutNonBlocking(() => {
                  this.sendPingOnPrimaryIfNecessary_();
              }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));
          }
      }
      sendPingOnPrimaryIfNecessary_() {
          // If the connection isn't considered healthy yet, we'll send a noop ping packet request.
          if (!this.isHealthy_ && this.state_ === 1 /* RealtimeState.CONNECTED */) {
              this.log_('sending ping on primary.');
              this.sendData_({ t: 'c', d: { t: PING, d: {} } });
          }
      }
      onSecondaryConnectionLost_() {
          const conn = this.secondaryConn_;
          this.secondaryConn_ = null;
          if (this.tx_ === conn || this.rx_ === conn) {
              // we are relying on this connection already in some capacity. Therefore, a failure is real
              this.close();
          }
      }
      /**
       * @param everConnected - Whether or not the connection ever reached a server. Used to determine if
       * we should flush the host cache
       */
      onConnectionLost_(everConnected) {
          this.conn_ = null;
          // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting
          // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.
          if (!everConnected && this.state_ === 0 /* RealtimeState.CONNECTING */) {
              this.log_('Realtime connection failed.');
              // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away
              if (this.repoInfo_.isCacheableHost()) {
                  PersistentStorage.remove('host:' + this.repoInfo_.host);
                  // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com
                  this.repoInfo_.internalHost = this.repoInfo_.host;
              }
          }
          else if (this.state_ === 1 /* RealtimeState.CONNECTED */) {
              this.log_('Realtime connection lost.');
          }
          this.close();
      }
      onConnectionShutdown_(reason) {
          this.log_('Connection shutdown command received. Shutting down...');
          if (this.onKill_) {
              this.onKill_(reason);
              this.onKill_ = null;
          }
          // We intentionally don't want to fire onDisconnect (kill is a different case),
          // so clear the callback.
          this.onDisconnect_ = null;
          this.close();
      }
      sendData_(data) {
          if (this.state_ !== 1 /* RealtimeState.CONNECTED */) {
              throw 'Connection is not connected';
          }
          else {
              this.tx_.send(data);
          }
      }
      /**
       * Cleans up this connection, calling the appropriate callbacks
       */
      close() {
          if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {
              this.log_('Closing realtime connection.');
              this.state_ = 2 /* RealtimeState.DISCONNECTED */;
              this.closeConnections_();
              if (this.onDisconnect_) {
                  this.onDisconnect_();
                  this.onDisconnect_ = null;
              }
          }
      }
      closeConnections_() {
          this.log_('Shutting down all connections');
          if (this.conn_) {
              this.conn_.close();
              this.conn_ = null;
          }
          if (this.secondaryConn_) {
              this.secondaryConn_.close();
              this.secondaryConn_ = null;
          }
          if (this.healthyTimeout_) {
              clearTimeout(this.healthyTimeout_);
              this.healthyTimeout_ = null;
          }
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Interface defining the set of actions that can be performed against the Firebase server
   * (basically corresponds to our wire protocol).
   *
   * @interface
   */
  class ServerActions {
      put(pathString, data, onComplete, hash) { }
      merge(pathString, data, onComplete, hash) { }
      /**
       * Refreshes the auth token for the current connection.
       * @param token - The authentication token
       */
      refreshAuthToken(token) { }
      /**
       * Refreshes the app check token for the current connection.
       * @param token The app check token
       */
      refreshAppCheckToken(token) { }
      onDisconnectPut(pathString, data, onComplete) { }
      onDisconnectMerge(pathString, data, onComplete) { }
      onDisconnectCancel(pathString, onComplete) { }
      reportStats(stats) { }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Base class to be used if you want to emit events. Call the constructor with
   * the set of allowed event names.
   */
  class EventEmitter {
      constructor(allowedEvents_) {
          this.allowedEvents_ = allowedEvents_;
          this.listeners_ = {};
          assert$1(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');
      }
      /**
       * To be called by derived classes to trigger events.
       */
      trigger(eventType, ...varArgs) {
          if (Array.isArray(this.listeners_[eventType])) {
              // Clone the list, since callbacks could add/remove listeners.
              const listeners = [...this.listeners_[eventType]];
              for (let i = 0; i < listeners.length; i++) {
                  listeners[i].callback.apply(listeners[i].context, varArgs);
              }
          }
      }
      on(eventType, callback, context) {
          this.validateEventType_(eventType);
          this.listeners_[eventType] = this.listeners_[eventType] || [];
          this.listeners_[eventType].push({ callback, context });
          const eventData = this.getInitialEvent(eventType);
          if (eventData) {
              callback.apply(context, eventData);
          }
      }
      off(eventType, callback, context) {
          this.validateEventType_(eventType);
          const listeners = this.listeners_[eventType] || [];
          for (let i = 0; i < listeners.length; i++) {
              if (listeners[i].callback === callback &&
                  (!context || context === listeners[i].context)) {
                  listeners.splice(i, 1);
                  return;
              }
          }
      }
      validateEventType_(eventType) {
          assert$1(this.allowedEvents_.find(et => {
              return et === eventType;
          }), 'Unknown event: ' + eventType);
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Monitors online state (as reported by window.online/offline events).
   *
   * The expectation is that this could have many false positives (thinks we are online
   * when we're not), but no false negatives.  So we can safely use it to determine when
   * we definitely cannot reach the internet.
   */
  class OnlineMonitor extends EventEmitter {
      static getInstance() {
          return new OnlineMonitor();
      }
      constructor() {
          super(['online']);
          this.online_ = true;
          // We've had repeated complaints that Cordova apps can get stuck "offline", e.g.
          // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810
          // It would seem that the 'online' event does not always fire consistently. So we disable it
          // for Cordova.
          if (typeof window !== 'undefined' &&
              typeof window.addEventListener !== 'undefined' &&
              !isMobileCordova()) {
              window.addEventListener('online', () => {
                  if (!this.online_) {
                      this.online_ = true;
                      this.trigger('online', true);
                  }
              }, false);
              window.addEventListener('offline', () => {
                  if (this.online_) {
                      this.online_ = false;
                      this.trigger('online', false);
                  }
              }, false);
          }
      }
      getInitialEvent(eventType) {
          assert$1(eventType === 'online', 'Unknown event type: ' + eventType);
          return [this.online_];
      }
      currentlyOnline() {
          return this.online_;
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /** Maximum key depth. */
  const MAX_PATH_DEPTH = 32;
  /** Maximum number of (UTF8) bytes in a Firebase path. */
  const MAX_PATH_LENGTH_BYTES = 768;
  /**
   * An immutable object representing a parsed path.  It's immutable so that you
   * can pass them around to other functions without worrying about them changing
   * it.
   */
  class Path {
      /**
       * @param pathOrString - Path string to parse, or another path, or the raw
       * tokens array
       */
      constructor(pathOrString, pieceNum) {
          if (pieceNum === undefined) {
              this.pieces_ = pathOrString.split('/');
              // Remove empty pieces.
              let copyTo = 0;
              for (let i = 0; i < this.pieces_.length; i++) {
                  if (this.pieces_[i].length > 0) {
                      this.pieces_[copyTo] = this.pieces_[i];
                      copyTo++;
                  }
              }
              this.pieces_.length = copyTo;
              this.pieceNum_ = 0;
          }
          else {
              this.pieces_ = pathOrString;
              this.pieceNum_ = pieceNum;
          }
      }
      toString() {
          let pathString = '';
          for (let i = this.pieceNum_; i < this.pieces_.length; i++) {
              if (this.pieces_[i] !== '') {
                  pathString += '/' + this.pieces_[i];
              }
          }
          return pathString || '/';
      }
  }
  function newEmptyPath() {
      return new Path('');
  }
  function pathGetFront(path) {
      if (path.pieceNum_ >= path.pieces_.length) {
          return null;
      }
      return path.pieces_[path.pieceNum_];
  }
  /**
   * @returns The number of segments in this path
   */
  function pathGetLength(path) {
      return path.pieces_.length - path.pieceNum_;
  }
  function pathPopFront(path) {
      let pieceNum = path.pieceNum_;
      if (pieceNum < path.pieces_.length) {
          pieceNum++;
      }
      return new Path(path.pieces_, pieceNum);
  }
  function pathGetBack(path) {
      if (path.pieceNum_ < path.pieces_.length) {
          return path.pieces_[path.pieces_.length - 1];
      }
      return null;
  }
  function pathToUrlEncodedString(path) {
      let pathString = '';
      for (let i = path.pieceNum_; i < path.pieces_.length; i++) {
          if (path.pieces_[i] !== '') {
              pathString += '/' + encodeURIComponent(String(path.pieces_[i]));
          }
      }
      return pathString || '/';
  }
  /**
   * Shallow copy of the parts of the path.
   *
   */
  function pathSlice(path, begin = 0) {
      return path.pieces_.slice(path.pieceNum_ + begin);
  }
  function pathParent(path) {
      if (path.pieceNum_ >= path.pieces_.length) {
          return null;
      }
      const pieces = [];
      for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {
          pieces.push(path.pieces_[i]);
      }
      return new Path(pieces, 0);
  }
  function pathChild(path, childPathObj) {
      const pieces = [];
      for (let i = path.pieceNum_; i < path.pieces_.length; i++) {
          pieces.push(path.pieces_[i]);
      }
      if (childPathObj instanceof Path) {
          for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {
              pieces.push(childPathObj.pieces_[i]);
          }
      }
      else {
          const childPieces = childPathObj.split('/');
          for (let i = 0; i < childPieces.length; i++) {
              if (childPieces[i].length > 0) {
                  pieces.push(childPieces[i]);
              }
          }
      }
      return new Path(pieces, 0);
  }
  /**
   * @returns True if there are no segments in this path
   */
  function pathIsEmpty(path) {
      return path.pieceNum_ >= path.pieces_.length;
  }
  /**
   * @returns The path from outerPath to innerPath
   */
  function newRelativePath(outerPath, innerPath) {
      const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);
      if (outer === null) {
          return innerPath;
      }
      else if (outer === inner) {
          return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));
      }
      else {
          throw new Error('INTERNAL ERROR: innerPath (' +
              innerPath +
              ') is not within ' +
              'outerPath (' +
              outerPath +
              ')');
      }
  }
  /**
   * @returns -1, 0, 1 if left is less, equal, or greater than the right.
   */
  function pathCompare(left, right) {
      const leftKeys = pathSlice(left, 0);
      const rightKeys = pathSlice(right, 0);
      for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {
          const cmp = nameCompare(leftKeys[i], rightKeys[i]);
          if (cmp !== 0) {
              return cmp;
          }
      }
      if (leftKeys.length === rightKeys.length) {
          return 0;
      }
      return leftKeys.length < rightKeys.length ? -1 : 1;
  }
  /**
   * @returns true if paths are the same.
   */
  function pathEquals(path, other) {
      if (pathGetLength(path) !== pathGetLength(other)) {
          return false;
      }
      for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {
          if (path.pieces_[i] !== other.pieces_[j]) {
              return false;
          }
      }
      return true;
  }
  /**
   * @returns True if this path is a parent of (or the same as) other
   */
  function pathContains(path, other) {
      let i = path.pieceNum_;
      let j = other.pieceNum_;
      if (pathGetLength(path) > pathGetLength(other)) {
          return false;
      }
      while (i < path.pieces_.length) {
          if (path.pieces_[i] !== other.pieces_[j]) {
              return false;
          }
          ++i;
          ++j;
      }
      return true;
  }
  /**
   * Dynamic (mutable) path used to count path lengths.
   *
   * This class is used to efficiently check paths for valid
   * length (in UTF8 bytes) and depth (used in path validation).
   *
   * Throws Error exception if path is ever invalid.
   *
   * The definition of a path always begins with '/'.
   */
  class ValidationPath {
      /**
       * @param path - Initial Path.
       * @param errorPrefix_ - Prefix for any error messages.
       */
      constructor(path, errorPrefix_) {
          this.errorPrefix_ = errorPrefix_;
          this.parts_ = pathSlice(path, 0);
          /** Initialize to number of '/' chars needed in path. */
          this.byteLength_ = Math.max(1, this.parts_.length);
          for (let i = 0; i < this.parts_.length; i++) {
              this.byteLength_ += stringLength(this.parts_[i]);
          }
          validationPathCheckValid(this);
      }
  }
  function validationPathPush(validationPath, child) {
      // Count the needed '/'
      if (validationPath.parts_.length > 0) {
          validationPath.byteLength_ += 1;
      }
      validationPath.parts_.push(child);
      validationPath.byteLength_ += stringLength(child);
      validationPathCheckValid(validationPath);
  }
  function validationPathPop(validationPath) {
      const last = validationPath.parts_.pop();
      validationPath.byteLength_ -= stringLength(last);
      // Un-count the previous '/'
      if (validationPath.parts_.length > 0) {
          validationPath.byteLength_ -= 1;
      }
  }
  function validationPathCheckValid(validationPath) {
      if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {
          throw new Error(validationPath.errorPrefix_ +
              'has a key path longer than ' +
              MAX_PATH_LENGTH_BYTES +
              ' bytes (' +
              validationPath.byteLength_ +
              ').');
      }
      if (validationPath.parts_.length > MAX_PATH_DEPTH) {
          throw new Error(validationPath.errorPrefix_ +
              'path specified exceeds the maximum depth that can be written (' +
              MAX_PATH_DEPTH +
              ') or object contains a cycle ' +
              validationPathToErrorString(validationPath));
      }
  }
  /**
   * String for use in error messages - uses '.' notation for path.
   */
  function validationPathToErrorString(validationPath) {
      if (validationPath.parts_.length === 0) {
          return '';
      }
      return "in property '" + validationPath.parts_.join('.') + "'";
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class VisibilityMonitor extends EventEmitter {
      static getInstance() {
          return new VisibilityMonitor();
      }
      constructor() {
          super(['visible']);
          let hidden;
          let visibilityChange;
          if (typeof document !== 'undefined' &&
              typeof document.addEventListener !== 'undefined') {
              if (typeof document['hidden'] !== 'undefined') {
                  // Opera 12.10 and Firefox 18 and later support
                  visibilityChange = 'visibilitychange';
                  hidden = 'hidden';
              }
              else if (typeof document['mozHidden'] !== 'undefined') {
                  visibilityChange = 'mozvisibilitychange';
                  hidden = 'mozHidden';
              }
              else if (typeof document['msHidden'] !== 'undefined') {
                  visibilityChange = 'msvisibilitychange';
                  hidden = 'msHidden';
              }
              else if (typeof document['webkitHidden'] !== 'undefined') {
                  visibilityChange = 'webkitvisibilitychange';
                  hidden = 'webkitHidden';
              }
          }
          // Initially, we always assume we are visible. This ensures that in browsers
          // without page visibility support or in cases where we are never visible
          // (e.g. chrome extension), we act as if we are visible, i.e. don't delay
          // reconnects
          this.visible_ = true;
          if (visibilityChange) {
              document.addEventListener(visibilityChange, () => {
                  const visible = !document[hidden];
                  if (visible !== this.visible_) {
                      this.visible_ = visible;
                      this.trigger('visible', visible);
                  }
              }, false);
          }
      }
      getInitialEvent(eventType) {
          assert$1(eventType === 'visible', 'Unknown event type: ' + eventType);
          return [this.visible_];
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const RECONNECT_MIN_DELAY = 1000;
  const RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)
  const RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)
  const RECONNECT_DELAY_MULTIPLIER = 1.3;
  const RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.
  const SERVER_KILL_INTERRUPT_REASON = 'server_kill';
  // If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.
  const INVALID_TOKEN_THRESHOLD = 3;
  /**
   * Firebase connection.  Abstracts wire protocol and handles reconnecting.
   *
   * NOTE: All JSON objects sent to the realtime connection must have property names enclosed
   * in quotes to make sure the closure compiler does not minify them.
   */
  class PersistentConnection extends ServerActions {
      /**
       * @param repoInfo_ - Data about the namespace we are connecting to
       * @param applicationId_ - The Firebase App ID for this project
       * @param onDataUpdate_ - A callback for new data from the server
       */
      constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {
          super();
          this.repoInfo_ = repoInfo_;
          this.applicationId_ = applicationId_;
          this.onDataUpdate_ = onDataUpdate_;
          this.onConnectStatus_ = onConnectStatus_;
          this.onServerInfoUpdate_ = onServerInfoUpdate_;
          this.authTokenProvider_ = authTokenProvider_;
          this.appCheckTokenProvider_ = appCheckTokenProvider_;
          this.authOverride_ = authOverride_;
          // Used for diagnostic logging.
          this.id = PersistentConnection.nextPersistentConnectionId_++;
          this.log_ = logWrapper('p:' + this.id + ':');
          this.interruptReasons_ = {};
          this.listens = new Map();
          this.outstandingPuts_ = [];
          this.outstandingGets_ = [];
          this.outstandingPutCount_ = 0;
          this.outstandingGetCount_ = 0;
          this.onDisconnectRequestQueue_ = [];
          this.connected_ = false;
          this.reconnectDelay_ = RECONNECT_MIN_DELAY;
          this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;
          this.securityDebugCallback_ = null;
          this.lastSessionId = null;
          this.establishConnectionTimer_ = null;
          this.visible_ = false;
          // Before we get connected, we keep a queue of pending messages to send.
          this.requestCBHash_ = {};
          this.requestNumber_ = 0;
          this.realtime_ = null;
          this.authToken_ = null;
          this.appCheckToken_ = null;
          this.forceTokenRefresh_ = false;
          this.invalidAuthTokenCount_ = 0;
          this.invalidAppCheckTokenCount_ = 0;
          this.firstConnection_ = true;
          this.lastConnectionAttemptTime_ = null;
          this.lastConnectionEstablishedTime_ = null;
          if (authOverride_ && true) {
              throw new Error('Auth override specified in options, but not supported on non Node.js platforms');
          }
          VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);
          if (repoInfo_.host.indexOf('fblocal') === -1) {
              OnlineMonitor.getInstance().on('online', this.onOnline_, this);
          }
      }
      sendRequest(action, body, onResponse) {
          const curReqNum = ++this.requestNumber_;
          const msg = { r: curReqNum, a: action, b: body };
          this.log_(stringify(msg));
          assert$1(this.connected_, "sendRequest call when we're not connected not allowed.");
          this.realtime_.sendRequest(msg);
          if (onResponse) {
              this.requestCBHash_[curReqNum] = onResponse;
          }
      }
      get(query) {
          this.initConnection_();
          const deferred = new Deferred();
          const request = {
              p: query._path.toString(),
              q: query._queryObject
          };
          const outstandingGet = {
              action: 'g',
              request,
              onComplete: (message) => {
                  const payload = message['d'];
                  if (message['s'] === 'ok') {
                      deferred.resolve(payload);
                  }
                  else {
                      deferred.reject(payload);
                  }
              }
          };
          this.outstandingGets_.push(outstandingGet);
          this.outstandingGetCount_++;
          const index = this.outstandingGets_.length - 1;
          if (this.connected_) {
              this.sendGet_(index);
          }
          return deferred.promise;
      }
      listen(query, currentHashFn, tag, onComplete) {
          this.initConnection_();
          const queryId = query._queryIdentifier;
          const pathString = query._path.toString();
          this.log_('Listen called for ' + pathString + ' ' + queryId);
          if (!this.listens.has(pathString)) {
              this.listens.set(pathString, new Map());
          }
          assert$1(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');
          assert$1(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);
          const listenSpec = {
              onComplete,
              hashFn: currentHashFn,
              query,
              tag
          };
          this.listens.get(pathString).set(queryId, listenSpec);
          if (this.connected_) {
              this.sendListen_(listenSpec);
          }
      }
      sendGet_(index) {
          const get = this.outstandingGets_[index];
          this.sendRequest('g', get.request, (message) => {
              delete this.outstandingGets_[index];
              this.outstandingGetCount_--;
              if (this.outstandingGetCount_ === 0) {
                  this.outstandingGets_ = [];
              }
              if (get.onComplete) {
                  get.onComplete(message);
              }
          });
      }
      sendListen_(listenSpec) {
          const query = listenSpec.query;
          const pathString = query._path.toString();
          const queryId = query._queryIdentifier;
          this.log_('Listen on ' + pathString + ' for ' + queryId);
          const req = { /*path*/ p: pathString };
          const action = 'q';
          // Only bother to send query if it's non-default.
          if (listenSpec.tag) {
              req['q'] = query._queryObject;
              req['t'] = listenSpec.tag;
          }
          req[ /*hash*/'h'] = listenSpec.hashFn();
          this.sendRequest(action, req, (message) => {
              const payload = message[ /*data*/'d'];
              const status = message[ /*status*/'s'];
              // print warnings in any case...
              PersistentConnection.warnOnListenWarnings_(payload, query);
              const currentListenSpec = this.listens.get(pathString) &&
                  this.listens.get(pathString).get(queryId);
              // only trigger actions if the listen hasn't been removed and readded
              if (currentListenSpec === listenSpec) {
                  this.log_('listen response', message);
                  if (status !== 'ok') {
                      this.removeListen_(pathString, queryId);
                  }
                  if (listenSpec.onComplete) {
                      listenSpec.onComplete(status, payload);
                  }
              }
          });
      }
      static warnOnListenWarnings_(payload, query) {
          if (payload && typeof payload === 'object' && contains$1(payload, 'w')) {
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              const warnings = safeGet(payload, 'w');
              if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {
                  const indexSpec = '".indexOn": "' + query._queryParams.getIndex().toString() + '"';
                  const indexPath = query._path.toString();
                  warn(`Using an unspecified index. Your data will be downloaded and ` +
                      `filtered on the client. Consider adding ${indexSpec} at ` +
                      `${indexPath} to your security rules for better performance.`);
              }
          }
      }
      refreshAuthToken(token) {
          this.authToken_ = token;
          this.log_('Auth token refreshed');
          if (this.authToken_) {
              this.tryAuth();
          }
          else {
              //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete
              //the credential so we dont become authenticated next time we connect.
              if (this.connected_) {
                  this.sendRequest('unauth', {}, () => { });
              }
          }
          this.reduceReconnectDelayIfAdminCredential_(token);
      }
      reduceReconnectDelayIfAdminCredential_(credential) {
          // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).
          // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.
          const isFirebaseSecret = credential && credential.length === 40;
          if (isFirebaseSecret || isAdmin(credential)) {
              this.log_('Admin auth credential detected.  Reducing max reconnect time.');
              this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
          }
      }
      refreshAppCheckToken(token) {
          this.appCheckToken_ = token;
          this.log_('App check token refreshed');
          if (this.appCheckToken_) {
              this.tryAppCheck();
          }
          else {
              //If we're connected we want to let the server know to unauthenticate us.
              //If we're not connected, simply delete the credential so we dont become
              // authenticated next time we connect.
              if (this.connected_) {
                  this.sendRequest('unappeck', {}, () => { });
              }
          }
      }
      /**
       * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like
       * a auth revoked (the connection is closed).
       */
      tryAuth() {
          if (this.connected_ && this.authToken_) {
              const token = this.authToken_;
              const authMethod = isValidFormat(token) ? 'auth' : 'gauth';
              const requestData = { cred: token };
              if (this.authOverride_ === null) {
                  requestData['noauth'] = true;
              }
              else if (typeof this.authOverride_ === 'object') {
                  requestData['authvar'] = this.authOverride_;
              }
              this.sendRequest(authMethod, requestData, (res) => {
                  const status = res[ /*status*/'s'];
                  const data = res[ /*data*/'d'] || 'error';
                  if (this.authToken_ === token) {
                      if (status === 'ok') {
                          this.invalidAuthTokenCount_ = 0;
                      }
                      else {
                          // Triggers reconnect and force refresh for auth token
                          this.onAuthRevoked_(status, data);
                      }
                  }
              });
          }
      }
      /**
       * Attempts to authenticate with the given token. If the authentication
       * attempt fails, it's triggered like the token was revoked (the connection is
       * closed).
       */
      tryAppCheck() {
          if (this.connected_ && this.appCheckToken_) {
              this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {
                  const status = res[ /*status*/'s'];
                  const data = res[ /*data*/'d'] || 'error';
                  if (status === 'ok') {
                      this.invalidAppCheckTokenCount_ = 0;
                  }
                  else {
                      this.onAppCheckRevoked_(status, data);
                  }
              });
          }
      }
      /**
       * @inheritDoc
       */
      unlisten(query, tag) {
          const pathString = query._path.toString();
          const queryId = query._queryIdentifier;
          this.log_('Unlisten called for ' + pathString + ' ' + queryId);
          assert$1(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');
          const listen = this.removeListen_(pathString, queryId);
          if (listen && this.connected_) {
              this.sendUnlisten_(pathString, queryId, query._queryObject, tag);
          }
      }
      sendUnlisten_(pathString, queryId, queryObj, tag) {
          this.log_('Unlisten on ' + pathString + ' for ' + queryId);
          const req = { /*path*/ p: pathString };
          const action = 'n';
          // Only bother sending queryId if it's non-default.
          if (tag) {
              req['q'] = queryObj;
              req['t'] = tag;
          }
          this.sendRequest(action, req);
      }
      onDisconnectPut(pathString, data, onComplete) {
          this.initConnection_();
          if (this.connected_) {
              this.sendOnDisconnect_('o', pathString, data, onComplete);
          }
          else {
              this.onDisconnectRequestQueue_.push({
                  pathString,
                  action: 'o',
                  data,
                  onComplete
              });
          }
      }
      onDisconnectMerge(pathString, data, onComplete) {
          this.initConnection_();
          if (this.connected_) {
              this.sendOnDisconnect_('om', pathString, data, onComplete);
          }
          else {
              this.onDisconnectRequestQueue_.push({
                  pathString,
                  action: 'om',
                  data,
                  onComplete
              });
          }
      }
      onDisconnectCancel(pathString, onComplete) {
          this.initConnection_();
          if (this.connected_) {
              this.sendOnDisconnect_('oc', pathString, null, onComplete);
          }
          else {
              this.onDisconnectRequestQueue_.push({
                  pathString,
                  action: 'oc',
                  data: null,
                  onComplete
              });
          }
      }
      sendOnDisconnect_(action, pathString, data, onComplete) {
          const request = { /*path*/ p: pathString, /*data*/ d: data };
          this.log_('onDisconnect ' + action, request);
          this.sendRequest(action, request, (response) => {
              if (onComplete) {
                  setTimeout(() => {
                      onComplete(response[ /*status*/'s'], response[ /* data */'d']);
                  }, Math.floor(0));
              }
          });
      }
      put(pathString, data, onComplete, hash) {
          this.putInternal('p', pathString, data, onComplete, hash);
      }
      merge(pathString, data, onComplete, hash) {
          this.putInternal('m', pathString, data, onComplete, hash);
      }
      putInternal(action, pathString, data, onComplete, hash) {
          this.initConnection_();
          const request = {
              /*path*/ p: pathString,
              /*data*/ d: data
          };
          if (hash !== undefined) {
              request[ /*hash*/'h'] = hash;
          }
          // TODO: Only keep track of the most recent put for a given path?
          this.outstandingPuts_.push({
              action,
              request,
              onComplete
          });
          this.outstandingPutCount_++;
          const index = this.outstandingPuts_.length - 1;
          if (this.connected_) {
              this.sendPut_(index);
          }
          else {
              this.log_('Buffering put: ' + pathString);
          }
      }
      sendPut_(index) {
          const action = this.outstandingPuts_[index].action;
          const request = this.outstandingPuts_[index].request;
          const onComplete = this.outstandingPuts_[index].onComplete;
          this.outstandingPuts_[index].queued = this.connected_;
          this.sendRequest(action, request, (message) => {
              this.log_(action + ' response', message);
              delete this.outstandingPuts_[index];
              this.outstandingPutCount_--;
              // Clean up array occasionally.
              if (this.outstandingPutCount_ === 0) {
                  this.outstandingPuts_ = [];
              }
              if (onComplete) {
                  onComplete(message[ /*status*/'s'], message[ /* data */'d']);
              }
          });
      }
      reportStats(stats) {
          // If we're not connected, we just drop the stats.
          if (this.connected_) {
              const request = { /*counters*/ c: stats };
              this.log_('reportStats', request);
              this.sendRequest(/*stats*/ 's', request, result => {
                  const status = result[ /*status*/'s'];
                  if (status !== 'ok') {
                      const errorReason = result[ /* data */'d'];
                      this.log_('reportStats', 'Error sending stats: ' + errorReason);
                  }
              });
          }
      }
      onDataMessage_(message) {
          if ('r' in message) {
              // this is a response
              this.log_('from server: ' + stringify(message));
              const reqNum = message['r'];
              const onResponse = this.requestCBHash_[reqNum];
              if (onResponse) {
                  delete this.requestCBHash_[reqNum];
                  onResponse(message[ /*body*/'b']);
              }
          }
          else if ('error' in message) {
              throw 'A server-side error has occurred: ' + message['error'];
          }
          else if ('a' in message) {
              // a and b are action and body, respectively
              this.onDataPush_(message['a'], message['b']);
          }
      }
      onDataPush_(action, body) {
          this.log_('handleServerMessage', action, body);
          if (action === 'd') {
              this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], 
              /*isMerge*/ false, body['t']);
          }
          else if (action === 'm') {
              this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], 
              /*isMerge=*/ true, body['t']);
          }
          else if (action === 'c') {
              this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);
          }
          else if (action === 'ac') {
              this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);
          }
          else if (action === 'apc') {
              this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);
          }
          else if (action === 'sd') {
              this.onSecurityDebugPacket_(body);
          }
          else {
              error('Unrecognized action received from server: ' +
                  stringify(action) +
                  '\nAre you using the latest client?');
          }
      }
      onReady_(timestamp, sessionId) {
          this.log_('connection ready');
          this.connected_ = true;
          this.lastConnectionEstablishedTime_ = new Date().getTime();
          this.handleTimestamp_(timestamp);
          this.lastSessionId = sessionId;
          if (this.firstConnection_) {
              this.sendConnectStats_();
          }
          this.restoreState_();
          this.firstConnection_ = false;
          this.onConnectStatus_(true);
      }
      scheduleConnect_(timeout) {
          assert$1(!this.realtime_, "Scheduling a connect when we're already connected/ing?");
          if (this.establishConnectionTimer_) {
              clearTimeout(this.establishConnectionTimer_);
          }
          // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating "Security Error" in
          // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).
          this.establishConnectionTimer_ = setTimeout(() => {
              this.establishConnectionTimer_ = null;
              this.establishConnection_();
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
          }, Math.floor(timeout));
      }
      initConnection_() {
          if (!this.realtime_ && this.firstConnection_) {
              this.scheduleConnect_(0);
          }
      }
      onVisible_(visible) {
          // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.
          if (visible &&
              !this.visible_ &&
              this.reconnectDelay_ === this.maxReconnectDelay_) {
              this.log_('Window became visible.  Reducing delay.');
              this.reconnectDelay_ = RECONNECT_MIN_DELAY;
              if (!this.realtime_) {
                  this.scheduleConnect_(0);
              }
          }
          this.visible_ = visible;
      }
      onOnline_(online) {
          if (online) {
              this.log_('Browser went online.');
              this.reconnectDelay_ = RECONNECT_MIN_DELAY;
              if (!this.realtime_) {
                  this.scheduleConnect_(0);
              }
          }
          else {
              this.log_('Browser went offline.  Killing connection.');
              if (this.realtime_) {
                  this.realtime_.close();
              }
          }
      }
      onRealtimeDisconnect_() {
          this.log_('data client disconnected');
          this.connected_ = false;
          this.realtime_ = null;
          // Since we don't know if our sent transactions succeeded or not, we need to cancel them.
          this.cancelSentTransactions_();
          // Clear out the pending requests.
          this.requestCBHash_ = {};
          if (this.shouldReconnect_()) {
              if (!this.visible_) {
                  this.log_("Window isn't visible.  Delaying reconnect.");
                  this.reconnectDelay_ = this.maxReconnectDelay_;
                  this.lastConnectionAttemptTime_ = new Date().getTime();
              }
              else if (this.lastConnectionEstablishedTime_) {
                  // If we've been connected long enough, reset reconnect delay to minimum.
                  const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;
                  if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {
                      this.reconnectDelay_ = RECONNECT_MIN_DELAY;
                  }
                  this.lastConnectionEstablishedTime_ = null;
              }
              const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;
              let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);
              reconnectDelay = Math.random() * reconnectDelay;
              this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');
              this.scheduleConnect_(reconnectDelay);
              // Adjust reconnect delay for next time.
              this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);
          }
          this.onConnectStatus_(false);
      }
      async establishConnection_() {
          if (this.shouldReconnect_()) {
              this.log_('Making a connection attempt');
              this.lastConnectionAttemptTime_ = new Date().getTime();
              this.lastConnectionEstablishedTime_ = null;
              const onDataMessage = this.onDataMessage_.bind(this);
              const onReady = this.onReady_.bind(this);
              const onDisconnect = this.onRealtimeDisconnect_.bind(this);
              const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;
              const lastSessionId = this.lastSessionId;
              let canceled = false;
              let connection = null;
              const closeFn = function () {
                  if (connection) {
                      connection.close();
                  }
                  else {
                      canceled = true;
                      onDisconnect();
                  }
              };
              const sendRequestFn = function (msg) {
                  assert$1(connection, "sendRequest call when we're not connected not allowed.");
                  connection.sendRequest(msg);
              };
              this.realtime_ = {
                  close: closeFn,
                  sendRequest: sendRequestFn
              };
              const forceRefresh = this.forceTokenRefresh_;
              this.forceTokenRefresh_ = false;
              try {
                  // First fetch auth and app check token, and establish connection after
                  // fetching the token was successful
                  const [authToken, appCheckToken] = await Promise.all([
                      this.authTokenProvider_.getToken(forceRefresh),
                      this.appCheckTokenProvider_.getToken(forceRefresh)
                  ]);
                  if (!canceled) {
                      log('getToken() completed. Creating connection.');
                      this.authToken_ = authToken && authToken.accessToken;
                      this.appCheckToken_ = appCheckToken && appCheckToken.token;
                      connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, 
                      /* onKill= */ reason => {
                          warn(reason + ' (' + this.repoInfo_.toString() + ')');
                          this.interrupt(SERVER_KILL_INTERRUPT_REASON);
                      }, lastSessionId);
                  }
                  else {
                      log('getToken() completed but was canceled');
                  }
              }
              catch (error) {
                  this.log_('Failed to get token: ' + error);
                  if (!canceled) {
                      if (this.repoInfo_.nodeAdmin) {
                          // This may be a critical error for the Admin Node.js SDK, so log a warning.
                          // But getToken() may also just have temporarily failed, so we still want to
                          // continue retrying.
                          warn(error);
                      }
                      closeFn();
                  }
              }
          }
      }
      interrupt(reason) {
          log('Interrupting connection for reason: ' + reason);
          this.interruptReasons_[reason] = true;
          if (this.realtime_) {
              this.realtime_.close();
          }
          else {
              if (this.establishConnectionTimer_) {
                  clearTimeout(this.establishConnectionTimer_);
                  this.establishConnectionTimer_ = null;
              }
              if (this.connected_) {
                  this.onRealtimeDisconnect_();
              }
          }
      }
      resume(reason) {
          log('Resuming connection for reason: ' + reason);
          delete this.interruptReasons_[reason];
          if (isEmpty(this.interruptReasons_)) {
              this.reconnectDelay_ = RECONNECT_MIN_DELAY;
              if (!this.realtime_) {
                  this.scheduleConnect_(0);
              }
          }
      }
      handleTimestamp_(timestamp) {
          const delta = timestamp - new Date().getTime();
          this.onServerInfoUpdate_({ serverTimeOffset: delta });
      }
      cancelSentTransactions_() {
          for (let i = 0; i < this.outstandingPuts_.length; i++) {
              const put = this.outstandingPuts_[i];
              if (put && /*hash*/ 'h' in put.request && put.queued) {
                  if (put.onComplete) {
                      put.onComplete('disconnect');
                  }
                  delete this.outstandingPuts_[i];
                  this.outstandingPutCount_--;
              }
          }
          // Clean up array occasionally.
          if (this.outstandingPutCount_ === 0) {
              this.outstandingPuts_ = [];
          }
      }
      onListenRevoked_(pathString, query) {
          // Remove the listen and manufacture a "permission_denied" error for the failed listen.
          let queryId;
          if (!query) {
              queryId = 'default';
          }
          else {
              queryId = query.map(q => ObjectToUniqueKey(q)).join('$');
          }
          const listen = this.removeListen_(pathString, queryId);
          if (listen && listen.onComplete) {
              listen.onComplete('permission_denied');
          }
      }
      removeListen_(pathString, queryId) {
          const normalizedPathString = new Path(pathString).toString(); // normalize path.
          let listen;
          if (this.listens.has(normalizedPathString)) {
              const map = this.listens.get(normalizedPathString);
              listen = map.get(queryId);
              map.delete(queryId);
              if (map.size === 0) {
                  this.listens.delete(normalizedPathString);
              }
          }
          else {
              // all listens for this path has already been removed
              listen = undefined;
          }
          return listen;
      }
      onAuthRevoked_(statusCode, explanation) {
          log('Auth token revoked: ' + statusCode + '/' + explanation);
          this.authToken_ = null;
          this.forceTokenRefresh_ = true;
          this.realtime_.close();
          if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {
              // We'll wait a couple times before logging the warning / increasing the
              // retry period since oauth tokens will report as "invalid" if they're
              // just expired. Plus there may be transient issues that resolve themselves.
              this.invalidAuthTokenCount_++;
              if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {
                  // Set a long reconnect delay because recovery is unlikely
                  this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
                  // Notify the auth token provider that the token is invalid, which will log
                  // a warning
                  this.authTokenProvider_.notifyForInvalidToken();
              }
          }
      }
      onAppCheckRevoked_(statusCode, explanation) {
          log('App check token revoked: ' + statusCode + '/' + explanation);
          this.appCheckToken_ = null;
          this.forceTokenRefresh_ = true;
          // Note: We don't close the connection as the developer may not have
          // enforcement enabled. The backend closes connections with enforcements.
          if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {
              // We'll wait a couple times before logging the warning / increasing the
              // retry period since oauth tokens will report as "invalid" if they're
              // just expired. Plus there may be transient issues that resolve themselves.
              this.invalidAppCheckTokenCount_++;
              if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {
                  this.appCheckTokenProvider_.notifyForInvalidToken();
              }
          }
      }
      onSecurityDebugPacket_(body) {
          if (this.securityDebugCallback_) {
              this.securityDebugCallback_(body);
          }
          else {
              if ('msg' in body) {
                  console.log('FIREBASE: ' + body['msg'].replace('\n', '\nFIREBASE: '));
              }
          }
      }
      restoreState_() {
          //Re-authenticate ourselves if we have a credential stored.
          this.tryAuth();
          this.tryAppCheck();
          // Puts depend on having received the corresponding data update from the server before they complete, so we must
          // make sure to send listens before puts.
          for (const queries of this.listens.values()) {
              for (const listenSpec of queries.values()) {
                  this.sendListen_(listenSpec);
              }
          }
          for (let i = 0; i < this.outstandingPuts_.length; i++) {
              if (this.outstandingPuts_[i]) {
                  this.sendPut_(i);
              }
          }
          while (this.onDisconnectRequestQueue_.length) {
              const request = this.onDisconnectRequestQueue_.shift();
              this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);
          }
          for (let i = 0; i < this.outstandingGets_.length; i++) {
              if (this.outstandingGets_[i]) {
                  this.sendGet_(i);
              }
          }
      }
      /**
       * Sends client stats for first connection
       */
      sendConnectStats_() {
          const stats = {};
          let clientName = 'js';
          stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\./g, '-')] = 1;
          if (isMobileCordova()) {
              stats['framework.cordova'] = 1;
          }
          else if (isReactNative()) {
              stats['framework.reactnative'] = 1;
          }
          this.reportStats(stats);
      }
      shouldReconnect_() {
          const online = OnlineMonitor.getInstance().currentlyOnline();
          return isEmpty(this.interruptReasons_) && online;
      }
  }
  PersistentConnection.nextPersistentConnectionId_ = 0;
  /**
   * Counter for number of connections created. Mainly used for tagging in the logs
   */
  PersistentConnection.nextConnectionId_ = 0;

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class NamedNode {
      constructor(name, node) {
          this.name = name;
          this.node = node;
      }
      static Wrap(name, node) {
          return new NamedNode(name, node);
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class Index {
      /**
       * @returns A standalone comparison function for
       * this index
       */
      getCompare() {
          return this.compare.bind(this);
      }
      /**
       * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,
       * it's possible that the changes are isolated to parts of the snapshot that are not indexed.
       *
       *
       * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode
       */
      indexedValueChanged(oldNode, newNode) {
          const oldWrapped = new NamedNode(MIN_NAME, oldNode);
          const newWrapped = new NamedNode(MIN_NAME, newNode);
          return this.compare(oldWrapped, newWrapped) !== 0;
      }
      /**
       * @returns a node wrapper that will sort equal to or less than
       * any other node wrapper, using this index
       */
      minPost() {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          return NamedNode.MIN;
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  let __EMPTY_NODE;
  class KeyIndex extends Index {
      static get __EMPTY_NODE() {
          return __EMPTY_NODE;
      }
      static set __EMPTY_NODE(val) {
          __EMPTY_NODE = val;
      }
      compare(a, b) {
          return nameCompare(a.name, b.name);
      }
      isDefinedOn(node) {
          // We could probably return true here (since every node has a key), but it's never called
          // so just leaving unimplemented for now.
          throw assertionError('KeyIndex.isDefinedOn not expected to be called.');
      }
      indexedValueChanged(oldNode, newNode) {
          return false; // The key for a node never changes.
      }
      minPost() {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          return NamedNode.MIN;
      }
      maxPost() {
          // TODO: This should really be created once and cached in a static property, but
          // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.
          return new NamedNode(MAX_NAME, __EMPTY_NODE);
      }
      makePost(indexValue, name) {
          assert$1(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');
          // We just use empty node, but it'll never be compared, since our comparator only looks at name.
          return new NamedNode(indexValue, __EMPTY_NODE);
      }
      /**
       * @returns String representation for inclusion in a query spec
       */
      toString() {
          return '.key';
      }
  }
  const KEY_INDEX = new KeyIndex();

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * An iterator over an LLRBNode.
   */
  class SortedMapIterator {
      /**
       * @param node - Node to iterate.
       * @param isReverse_ - Whether or not to iterate in reverse
       */
      constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {
          this.isReverse_ = isReverse_;
          this.resultGenerator_ = resultGenerator_;
          this.nodeStack_ = [];
          let cmp = 1;
          while (!node.isEmpty()) {
              node = node;
              cmp = startKey ? comparator(node.key, startKey) : 1;
              // flip the comparison if we're going in reverse
              if (isReverse_) {
                  cmp *= -1;
              }
              if (cmp < 0) {
                  // This node is less than our start key. ignore it
                  if (this.isReverse_) {
                      node = node.left;
                  }
                  else {
                      node = node.right;
                  }
              }
              else if (cmp === 0) {
                  // This node is exactly equal to our start key. Push it on the stack, but stop iterating;
                  this.nodeStack_.push(node);
                  break;
              }
              else {
                  // This node is greater than our start key, add it to the stack and move to the next one
                  this.nodeStack_.push(node);
                  if (this.isReverse_) {
                      node = node.right;
                  }
                  else {
                      node = node.left;
                  }
              }
          }
      }
      getNext() {
          if (this.nodeStack_.length === 0) {
              return null;
          }
          let node = this.nodeStack_.pop();
          let result;
          if (this.resultGenerator_) {
              result = this.resultGenerator_(node.key, node.value);
          }
          else {
              result = { key: node.key, value: node.value };
          }
          if (this.isReverse_) {
              node = node.left;
              while (!node.isEmpty()) {
                  this.nodeStack_.push(node);
                  node = node.right;
              }
          }
          else {
              node = node.right;
              while (!node.isEmpty()) {
                  this.nodeStack_.push(node);
                  node = node.left;
              }
          }
          return result;
      }
      hasNext() {
          return this.nodeStack_.length > 0;
      }
      peek() {
          if (this.nodeStack_.length === 0) {
              return null;
          }
          const node = this.nodeStack_[this.nodeStack_.length - 1];
          if (this.resultGenerator_) {
              return this.resultGenerator_(node.key, node.value);
          }
          else {
              return { key: node.key, value: node.value };
          }
      }
  }
  /**
   * Represents a node in a Left-leaning Red-Black tree.
   */
  class LLRBNode {
      /**
       * @param key - Key associated with this node.
       * @param value - Value associated with this node.
       * @param color - Whether this node is red.
       * @param left - Left child.
       * @param right - Right child.
       */
      constructor(key, value, color, left, right) {
          this.key = key;
          this.value = value;
          this.color = color != null ? color : LLRBNode.RED;
          this.left =
              left != null ? left : SortedMap.EMPTY_NODE;
          this.right =
              right != null ? right : SortedMap.EMPTY_NODE;
      }
      /**
       * Returns a copy of the current node, optionally replacing pieces of it.
       *
       * @param key - New key for the node, or null.
       * @param value - New value for the node, or null.
       * @param color - New color for the node, or null.
       * @param left - New left child for the node, or null.
       * @param right - New right child for the node, or null.
       * @returns The node copy.
       */
      copy(key, value, color, left, right) {
          return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
      }
      /**
       * @returns The total number of nodes in the tree.
       */
      count() {
          return this.left.count() + 1 + this.right.count();
      }
      /**
       * @returns True if the tree is empty.
       */
      isEmpty() {
          return false;
      }
      /**
       * Traverses the tree in key order and calls the specified action function
       * for each node.
       *
       * @param action - Callback function to be called for each
       *   node.  If it returns true, traversal is aborted.
       * @returns The first truthy value returned by action, or the last falsey
       *   value returned by action
       */
      inorderTraversal(action) {
          return (this.left.inorderTraversal(action) ||
              !!action(this.key, this.value) ||
              this.right.inorderTraversal(action));
      }
      /**
       * Traverses the tree in reverse key order and calls the specified action function
       * for each node.
       *
       * @param action - Callback function to be called for each
       * node.  If it returns true, traversal is aborted.
       * @returns True if traversal was aborted.
       */
      reverseTraversal(action) {
          return (this.right.reverseTraversal(action) ||
              action(this.key, this.value) ||
              this.left.reverseTraversal(action));
      }
      /**
       * @returns The minimum node in the tree.
       */
      min_() {
          if (this.left.isEmpty()) {
              return this;
          }
          else {
              return this.left.min_();
          }
      }
      /**
       * @returns The maximum key in the tree.
       */
      minKey() {
          return this.min_().key;
      }
      /**
       * @returns The maximum key in the tree.
       */
      maxKey() {
          if (this.right.isEmpty()) {
              return this.key;
          }
          else {
              return this.right.maxKey();
          }
      }
      /**
       * @param key - Key to insert.
       * @param value - Value to insert.
       * @param comparator - Comparator.
       * @returns New tree, with the key/value added.
       */
      insert(key, value, comparator) {
          let n = this;
          const cmp = comparator(key, n.key);
          if (cmp < 0) {
              n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);
          }
          else if (cmp === 0) {
              n = n.copy(null, value, null, null, null);
          }
          else {
              n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));
          }
          return n.fixUp_();
      }
      /**
       * @returns New tree, with the minimum key removed.
       */
      removeMin_() {
          if (this.left.isEmpty()) {
              return SortedMap.EMPTY_NODE;
          }
          let n = this;
          if (!n.left.isRed_() && !n.left.left.isRed_()) {
              n = n.moveRedLeft_();
          }
          n = n.copy(null, null, null, n.left.removeMin_(), null);
          return n.fixUp_();
      }
      /**
       * @param key - The key of the item to remove.
       * @param comparator - Comparator.
       * @returns New tree, with the specified item removed.
       */
      remove(key, comparator) {
          let n, smallest;
          n = this;
          if (comparator(key, n.key) < 0) {
              if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {
                  n = n.moveRedLeft_();
              }
              n = n.copy(null, null, null, n.left.remove(key, comparator), null);
          }
          else {
              if (n.left.isRed_()) {
                  n = n.rotateRight_();
              }
              if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {
                  n = n.moveRedRight_();
              }
              if (comparator(key, n.key) === 0) {
                  if (n.right.isEmpty()) {
                      return SortedMap.EMPTY_NODE;
                  }
                  else {
                      smallest = n.right.min_();
                      n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());
                  }
              }
              n = n.copy(null, null, null, null, n.right.remove(key, comparator));
          }
          return n.fixUp_();
      }
      /**
       * @returns Whether this is a RED node.
       */
      isRed_() {
          return this.color;
      }
      /**
       * @returns New tree after performing any needed rotations.
       */
      fixUp_() {
          let n = this;
          if (n.right.isRed_() && !n.left.isRed_()) {
              n = n.rotateLeft_();
          }
          if (n.left.isRed_() && n.left.left.isRed_()) {
              n = n.rotateRight_();
          }
          if (n.left.isRed_() && n.right.isRed_()) {
              n = n.colorFlip_();
          }
          return n;
      }
      /**
       * @returns New tree, after moveRedLeft.
       */
      moveRedLeft_() {
          let n = this.colorFlip_();
          if (n.right.left.isRed_()) {
              n = n.copy(null, null, null, null, n.right.rotateRight_());
              n = n.rotateLeft_();
              n = n.colorFlip_();
          }
          return n;
      }
      /**
       * @returns New tree, after moveRedRight.
       */
      moveRedRight_() {
          let n = this.colorFlip_();
          if (n.left.left.isRed_()) {
              n = n.rotateRight_();
              n = n.colorFlip_();
          }
          return n;
      }
      /**
       * @returns New tree, after rotateLeft.
       */
      rotateLeft_() {
          const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);
          return this.right.copy(null, null, this.color, nl, null);
      }
      /**
       * @returns New tree, after rotateRight.
       */
      rotateRight_() {
          const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);
          return this.left.copy(null, null, this.color, null, nr);
      }
      /**
       * @returns Newt ree, after colorFlip.
       */
      colorFlip_() {
          const left = this.left.copy(null, null, !this.left.color, null, null);
          const right = this.right.copy(null, null, !this.right.color, null, null);
          return this.copy(null, null, !this.color, left, right);
      }
      /**
       * For testing.
       *
       * @returns True if all is well.
       */
      checkMaxDepth_() {
          const blackDepth = this.check_();
          return Math.pow(2.0, blackDepth) <= this.count() + 1;
      }
      check_() {
          if (this.isRed_() && this.left.isRed_()) {
              throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');
          }
          if (this.right.isRed_()) {
              throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');
          }
          const blackDepth = this.left.check_();
          if (blackDepth !== this.right.check_()) {
              throw new Error('Black depths differ');
          }
          else {
              return blackDepth + (this.isRed_() ? 0 : 1);
          }
      }
  }
  LLRBNode.RED = true;
  LLRBNode.BLACK = false;
  /**
   * Represents an empty node (a leaf node in the Red-Black Tree).
   */
  class LLRBEmptyNode {
      /**
       * Returns a copy of the current node.
       *
       * @returns The node copy.
       */
      copy(key, value, color, left, right) {
          return this;
      }
      /**
       * Returns a copy of the tree, with the specified key/value added.
       *
       * @param key - Key to be added.
       * @param value - Value to be added.
       * @param comparator - Comparator.
       * @returns New tree, with item added.
       */
      insert(key, value, comparator) {
          return new LLRBNode(key, value, null);
      }
      /**
       * Returns a copy of the tree, with the specified key removed.
       *
       * @param key - The key to remove.
       * @param comparator - Comparator.
       * @returns New tree, with item removed.
       */
      remove(key, comparator) {
          return this;
      }
      /**
       * @returns The total number of nodes in the tree.
       */
      count() {
          return 0;
      }
      /**
       * @returns True if the tree is empty.
       */
      isEmpty() {
          return true;
      }
      /**
       * Traverses the tree in key order and calls the specified action function
       * for each node.
       *
       * @param action - Callback function to be called for each
       * node.  If it returns true, traversal is aborted.
       * @returns True if traversal was aborted.
       */
      inorderTraversal(action) {
          return false;
      }
      /**
       * Traverses the tree in reverse key order and calls the specified action function
       * for each node.
       *
       * @param action - Callback function to be called for each
       * node.  If it returns true, traversal is aborted.
       * @returns True if traversal was aborted.
       */
      reverseTraversal(action) {
          return false;
      }
      minKey() {
          return null;
      }
      maxKey() {
          return null;
      }
      check_() {
          return 0;
      }
      /**
       * @returns Whether this node is red.
       */
      isRed_() {
          return false;
      }
  }
  /**
   * An immutable sorted map implementation, based on a Left-leaning Red-Black
   * tree.
   */
  class SortedMap {
      /**
       * @param comparator_ - Key comparator.
       * @param root_ - Optional root node for the map.
       */
      constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {
          this.comparator_ = comparator_;
          this.root_ = root_;
      }
      /**
       * Returns a copy of the map, with the specified key/value added or replaced.
       * (TODO: We should perhaps rename this method to 'put')
       *
       * @param key - Key to be added.
       * @param value - Value to be added.
       * @returns New map, with item added.
       */
      insert(key, value) {
          return new SortedMap(this.comparator_, this.root_
              .insert(key, value, this.comparator_)
              .copy(null, null, LLRBNode.BLACK, null, null));
      }
      /**
       * Returns a copy of the map, with the specified key removed.
       *
       * @param key - The key to remove.
       * @returns New map, with item removed.
       */
      remove(key) {
          return new SortedMap(this.comparator_, this.root_
              .remove(key, this.comparator_)
              .copy(null, null, LLRBNode.BLACK, null, null));
      }
      /**
       * Returns the value of the node with the given key, or null.
       *
       * @param key - The key to look up.
       * @returns The value of the node with the given key, or null if the
       * key doesn't exist.
       */
      get(key) {
          let cmp;
          let node = this.root_;
          while (!node.isEmpty()) {
              cmp = this.comparator_(key, node.key);
              if (cmp === 0) {
                  return node.value;
              }
              else if (cmp < 0) {
                  node = node.left;
              }
              else if (cmp > 0) {
                  node = node.right;
              }
          }
          return null;
      }
      /**
       * Returns the key of the item *before* the specified key, or null if key is the first item.
       * @param key - The key to find the predecessor of
       * @returns The predecessor key.
       */
      getPredecessorKey(key) {
          let cmp, node = this.root_, rightParent = null;
          while (!node.isEmpty()) {
              cmp = this.comparator_(key, node.key);
              if (cmp === 0) {
                  if (!node.left.isEmpty()) {
                      node = node.left;
                      while (!node.right.isEmpty()) {
                          node = node.right;
                      }
                      return node.key;
                  }
                  else if (rightParent) {
                      return rightParent.key;
                  }
                  else {
                      return null; // first item.
                  }
              }
              else if (cmp < 0) {
                  node = node.left;
              }
              else if (cmp > 0) {
                  rightParent = node;
                  node = node.right;
              }
          }
          throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');
      }
      /**
       * @returns True if the map is empty.
       */
      isEmpty() {
          return this.root_.isEmpty();
      }
      /**
       * @returns The total number of nodes in the map.
       */
      count() {
          return this.root_.count();
      }
      /**
       * @returns The minimum key in the map.
       */
      minKey() {
          return this.root_.minKey();
      }
      /**
       * @returns The maximum key in the map.
       */
      maxKey() {
          return this.root_.maxKey();
      }
      /**
       * Traverses the map in key order and calls the specified action function
       * for each key/value pair.
       *
       * @param action - Callback function to be called
       * for each key/value pair.  If action returns true, traversal is aborted.
       * @returns The first truthy value returned by action, or the last falsey
       *   value returned by action
       */
      inorderTraversal(action) {
          return this.root_.inorderTraversal(action);
      }
      /**
       * Traverses the map in reverse key order and calls the specified action function
       * for each key/value pair.
       *
       * @param action - Callback function to be called
       * for each key/value pair.  If action returns true, traversal is aborted.
       * @returns True if the traversal was aborted.
       */
      reverseTraversal(action) {
          return this.root_.reverseTraversal(action);
      }
      /**
       * Returns an iterator over the SortedMap.
       * @returns The iterator.
       */
      getIterator(resultGenerator) {
          return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);
      }
      getIteratorFrom(key, resultGenerator) {
          return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);
      }
      getReverseIteratorFrom(key, resultGenerator) {
          return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);
      }
      getReverseIterator(resultGenerator) {
          return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);
      }
  }
  /**
   * Always use the same empty node, to reduce memory.
   */
  SortedMap.EMPTY_NODE = new LLRBEmptyNode();

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function NAME_ONLY_COMPARATOR(left, right) {
      return nameCompare(left.name, right.name);
  }
  function NAME_COMPARATOR(left, right) {
      return nameCompare(left, right);
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  let MAX_NODE$2;
  function setMaxNode$1(val) {
      MAX_NODE$2 = val;
  }
  const priorityHashText = function (priority) {
      if (typeof priority === 'number') {
          return 'number:' + doubleToIEEE754String(priority);
      }
      else {
          return 'string:' + priority;
      }
  };
  /**
   * Validates that a priority snapshot Node is valid.
   */
  const validatePriorityNode = function (priorityNode) {
      if (priorityNode.isLeafNode()) {
          const val = priorityNode.val();
          assert$1(typeof val === 'string' ||
              typeof val === 'number' ||
              (typeof val === 'object' && contains$1(val, '.sv')), 'Priority must be a string or number.');
      }
      else {
          assert$1(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');
      }
      // Don't call getPriority() on MAX_NODE to avoid hitting assertion.
      assert$1(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), "Priority nodes can't have a priority of their own.");
  };

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  let __childrenNodeConstructor;
  /**
   * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It
   * implements Node and stores the value of the node (a string,
   * number, or boolean) accessible via getValue().
   */
  class LeafNode {
      static set __childrenNodeConstructor(val) {
          __childrenNodeConstructor = val;
      }
      static get __childrenNodeConstructor() {
          return __childrenNodeConstructor;
      }
      /**
       * @param value_ - The value to store in this leaf node. The object type is
       * possible in the event of a deferred value
       * @param priorityNode_ - The priority of this node.
       */
      constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {
          this.value_ = value_;
          this.priorityNode_ = priorityNode_;
          this.lazyHash_ = null;
          assert$1(this.value_ !== undefined && this.value_ !== null, "LeafNode shouldn't be created with null/undefined value.");
          validatePriorityNode(this.priorityNode_);
      }
      /** @inheritDoc */
      isLeafNode() {
          return true;
      }
      /** @inheritDoc */
      getPriority() {
          return this.priorityNode_;
      }
      /** @inheritDoc */
      updatePriority(newPriorityNode) {
          return new LeafNode(this.value_, newPriorityNode);
      }
      /** @inheritDoc */
      getImmediateChild(childName) {
          // Hack to treat priority as a regular child
          if (childName === '.priority') {
              return this.priorityNode_;
          }
          else {
              return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
          }
      }
      /** @inheritDoc */
      getChild(path) {
          if (pathIsEmpty(path)) {
              return this;
          }
          else if (pathGetFront(path) === '.priority') {
              return this.priorityNode_;
          }
          else {
              return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
          }
      }
      hasChild() {
          return false;
      }
      /** @inheritDoc */
      getPredecessorChildName(childName, childNode) {
          return null;
      }
      /** @inheritDoc */
      updateImmediateChild(childName, newChildNode) {
          if (childName === '.priority') {
              return this.updatePriority(newChildNode);
          }
          else if (newChildNode.isEmpty() && childName !== '.priority') {
              return this;
          }
          else {
              return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);
          }
      }
      /** @inheritDoc */
      updateChild(path, newChildNode) {
          const front = pathGetFront(path);
          if (front === null) {
              return newChildNode;
          }
          else if (newChildNode.isEmpty() && front !== '.priority') {
              return this;
          }
          else {
              assert$1(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');
              return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));
          }
      }
      /** @inheritDoc */
      isEmpty() {
          return false;
      }
      /** @inheritDoc */
      numChildren() {
          return 0;
      }
      /** @inheritDoc */
      forEachChild(index, action) {
          return false;
      }
      val(exportFormat) {
          if (exportFormat && !this.getPriority().isEmpty()) {
              return {
                  '.value': this.getValue(),
                  '.priority': this.getPriority().val()
              };
          }
          else {
              return this.getValue();
          }
      }
      /** @inheritDoc */
      hash() {
          if (this.lazyHash_ === null) {
              let toHash = '';
              if (!this.priorityNode_.isEmpty()) {
                  toHash +=
                      'priority:' +
                          priorityHashText(this.priorityNode_.val()) +
                          ':';
              }
              const type = typeof this.value_;
              toHash += type + ':';
              if (type === 'number') {
                  toHash += doubleToIEEE754String(this.value_);
              }
              else {
                  toHash += this.value_;
              }
              this.lazyHash_ = sha1(toHash);
          }
          return this.lazyHash_;
      }
      /**
       * Returns the value of the leaf node.
       * @returns The value of the node.
       */
      getValue() {
          return this.value_;
      }
      compareTo(other) {
          if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {
              return 1;
          }
          else if (other instanceof LeafNode.__childrenNodeConstructor) {
              return -1;
          }
          else {
              assert$1(other.isLeafNode(), 'Unknown node type');
              return this.compareToLeafNode_(other);
          }
      }
      /**
       * Comparison specifically for two leaf nodes
       */
      compareToLeafNode_(otherLeaf) {
          const otherLeafType = typeof otherLeaf.value_;
          const thisLeafType = typeof this.value_;
          const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);
          const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);
          assert$1(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);
          assert$1(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);
          if (otherIndex === thisIndex) {
              // Same type, compare values
              if (thisLeafType === 'object') {
                  // Deferred value nodes are all equal, but we should also never get to this point...
                  return 0;
              }
              else {
                  // Note that this works because true > false, all others are number or string comparisons
                  if (this.value_ < otherLeaf.value_) {
                      return -1;
                  }
                  else if (this.value_ === otherLeaf.value_) {
                      return 0;
                  }
                  else {
                      return 1;
                  }
              }
          }
          else {
              return thisIndex - otherIndex;
          }
      }
      withIndex() {
          return this;
      }
      isIndexed() {
          return true;
      }
      equals(other) {
          if (other === this) {
              return true;
          }
          else if (other.isLeafNode()) {
              const otherLeaf = other;
              return (this.value_ === otherLeaf.value_ &&
                  this.priorityNode_.equals(otherLeaf.priorityNode_));
          }
          else {
              return false;
          }
      }
  }
  /**
   * The sort order for comparing leaf nodes of different types. If two leaf nodes have
   * the same type, the comparison falls back to their value
   */
  LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  let nodeFromJSON$1;
  let MAX_NODE$1;
  function setNodeFromJSON(val) {
      nodeFromJSON$1 = val;
  }
  function setMaxNode(val) {
      MAX_NODE$1 = val;
  }
  class PriorityIndex extends Index {
      compare(a, b) {
          const aPriority = a.node.getPriority();
          const bPriority = b.node.getPriority();
          const indexCmp = aPriority.compareTo(bPriority);
          if (indexCmp === 0) {
              return nameCompare(a.name, b.name);
          }
          else {
              return indexCmp;
          }
      }
      isDefinedOn(node) {
          return !node.getPriority().isEmpty();
      }
      indexedValueChanged(oldNode, newNode) {
          return !oldNode.getPriority().equals(newNode.getPriority());
      }
      minPost() {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          return NamedNode.MIN;
      }
      maxPost() {
          return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));
      }
      makePost(indexValue, name) {
          const priorityNode = nodeFromJSON$1(indexValue);
          return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));
      }
      /**
       * @returns String representation for inclusion in a query spec
       */
      toString() {
          return '.priority';
      }
  }
  const PRIORITY_INDEX = new PriorityIndex();

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const LOG_2 = Math.log(2);
  class Base12Num {
      constructor(length) {
          const logBase2 = (num) => 
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          parseInt((Math.log(num) / LOG_2), 10);
          const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);
          this.count = logBase2(length + 1);
          this.current_ = this.count - 1;
          const mask = bitMask(this.count);
          this.bits_ = (length + 1) & mask;
      }
      nextBitIsOne() {
          //noinspection JSBitwiseOperatorUsage
          const result = !(this.bits_ & (0x1 << this.current_));
          this.current_--;
          return result;
      }
  }
  /**
   * Takes a list of child nodes and constructs a SortedSet using the given comparison
   * function
   *
   * Uses the algorithm described in the paper linked here:
   * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458
   *
   * @param childList - Unsorted list of children
   * @param cmp - The comparison method to be used
   * @param keyFn - An optional function to extract K from a node wrapper, if K's
   * type is not NamedNode
   * @param mapSortFn - An optional override for comparator used by the generated sorted map
   */
  const buildChildSet = function (childList, cmp, keyFn, mapSortFn) {
      childList.sort(cmp);
      const buildBalancedTree = function (low, high) {
          const length = high - low;
          let namedNode;
          let key;
          if (length === 0) {
              return null;
          }
          else if (length === 1) {
              namedNode = childList[low];
              key = keyFn ? keyFn(namedNode) : namedNode;
              return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);
          }
          else {
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              const middle = parseInt((length / 2), 10) + low;
              const left = buildBalancedTree(low, middle);
              const right = buildBalancedTree(middle + 1, high);
              namedNode = childList[middle];
              key = keyFn ? keyFn(namedNode) : namedNode;
              return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);
          }
      };
      const buildFrom12Array = function (base12) {
          let node = null;
          let root = null;
          let index = childList.length;
          const buildPennant = function (chunkSize, color) {
              const low = index - chunkSize;
              const high = index;
              index -= chunkSize;
              const childTree = buildBalancedTree(low + 1, high);
              const namedNode = childList[low];
              const key = keyFn ? keyFn(namedNode) : namedNode;
              attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));
          };
          const attachPennant = function (pennant) {
              if (node) {
                  node.left = pennant;
                  node = pennant;
              }
              else {
                  root = pennant;
                  node = pennant;
              }
          };
          for (let i = 0; i < base12.count; ++i) {
              const isOne = base12.nextBitIsOne();
              // The number of nodes taken in each slice is 2^(arr.length - (i + 1))
              const chunkSize = Math.pow(2, base12.count - (i + 1));
              if (isOne) {
                  buildPennant(chunkSize, LLRBNode.BLACK);
              }
              else {
                  // current == 2
                  buildPennant(chunkSize, LLRBNode.BLACK);
                  buildPennant(chunkSize, LLRBNode.RED);
              }
          }
          return root;
      };
      const base12 = new Base12Num(childList.length);
      const root = buildFrom12Array(base12);
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      return new SortedMap(mapSortFn || cmp, root);
  };

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  let _defaultIndexMap;
  const fallbackObject = {};
  class IndexMap {
      /**
       * The default IndexMap for nodes without a priority
       */
      static get Default() {
          assert$1(PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');
          _defaultIndexMap =
              _defaultIndexMap ||
                  new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });
          return _defaultIndexMap;
      }
      constructor(indexes_, indexSet_) {
          this.indexes_ = indexes_;
          this.indexSet_ = indexSet_;
      }
      get(indexKey) {
          const sortedMap = safeGet(this.indexes_, indexKey);
          if (!sortedMap) {
              throw new Error('No index defined for ' + indexKey);
          }
          if (sortedMap instanceof SortedMap) {
              return sortedMap;
          }
          else {
              // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the
              // regular child map
              return null;
          }
      }
      hasIndex(indexDefinition) {
          return contains$1(this.indexSet_, indexDefinition.toString());
      }
      addIndex(indexDefinition, existingChildren) {
          assert$1(indexDefinition !== KEY_INDEX, "KeyIndex always exists and isn't meant to be added to the IndexMap.");
          const childList = [];
          let sawIndexedValue = false;
          const iter = existingChildren.getIterator(NamedNode.Wrap);
          let next = iter.getNext();
          while (next) {
              sawIndexedValue =
                  sawIndexedValue || indexDefinition.isDefinedOn(next.node);
              childList.push(next);
              next = iter.getNext();
          }
          let newIndex;
          if (sawIndexedValue) {
              newIndex = buildChildSet(childList, indexDefinition.getCompare());
          }
          else {
              newIndex = fallbackObject;
          }
          const indexName = indexDefinition.toString();
          const newIndexSet = Object.assign({}, this.indexSet_);
          newIndexSet[indexName] = indexDefinition;
          const newIndexes = Object.assign({}, this.indexes_);
          newIndexes[indexName] = newIndex;
          return new IndexMap(newIndexes, newIndexSet);
      }
      /**
       * Ensure that this node is properly tracked in any indexes that we're maintaining
       */
      addToIndexes(namedNode, existingChildren) {
          const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {
              const index = safeGet(this.indexSet_, indexName);
              assert$1(index, 'Missing index implementation for ' + indexName);
              if (indexedChildren === fallbackObject) {
                  // Check to see if we need to index everything
                  if (index.isDefinedOn(namedNode.node)) {
                      // We need to build this index
                      const childList = [];
                      const iter = existingChildren.getIterator(NamedNode.Wrap);
                      let next = iter.getNext();
                      while (next) {
                          if (next.name !== namedNode.name) {
                              childList.push(next);
                          }
                          next = iter.getNext();
                      }
                      childList.push(namedNode);
                      return buildChildSet(childList, index.getCompare());
                  }
                  else {
                      // No change, this remains a fallback
                      return fallbackObject;
                  }
              }
              else {
                  const existingSnap = existingChildren.get(namedNode.name);
                  let newChildren = indexedChildren;
                  if (existingSnap) {
                      newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));
                  }
                  return newChildren.insert(namedNode, namedNode.node);
              }
          });
          return new IndexMap(newIndexes, this.indexSet_);
      }
      /**
       * Create a new IndexMap instance with the given value removed
       */
      removeFromIndexes(namedNode, existingChildren) {
          const newIndexes = map(this.indexes_, (indexedChildren) => {
              if (indexedChildren === fallbackObject) {
                  // This is the fallback. Just return it, nothing to do in this case
                  return indexedChildren;
              }
              else {
                  const existingSnap = existingChildren.get(namedNode.name);
                  if (existingSnap) {
                      return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));
                  }
                  else {
                      // No record of this child
                      return indexedChildren;
                  }
              }
          });
          return new IndexMap(newIndexes, this.indexSet_);
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // TODO: For memory savings, don't store priorityNode_ if it's empty.
  let EMPTY_NODE;
  /**
   * ChildrenNode is a class for storing internal nodes in a DataSnapshot
   * (i.e. nodes with children).  It implements Node and stores the
   * list of children in the children property, sorted by child name.
   */
  class ChildrenNode {
      static get EMPTY_NODE() {
          return (EMPTY_NODE ||
              (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));
      }
      /**
       * @param children_ - List of children of this node..
       * @param priorityNode_ - The priority of this node (as a snapshot node).
       */
      constructor(children_, priorityNode_, indexMap_) {
          this.children_ = children_;
          this.priorityNode_ = priorityNode_;
          this.indexMap_ = indexMap_;
          this.lazyHash_ = null;
          /**
           * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use
           * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own
           * class instead of an empty ChildrenNode.
           */
          if (this.priorityNode_) {
              validatePriorityNode(this.priorityNode_);
          }
          if (this.children_.isEmpty()) {
              assert$1(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');
          }
      }
      /** @inheritDoc */
      isLeafNode() {
          return false;
      }
      /** @inheritDoc */
      getPriority() {
          return this.priorityNode_ || EMPTY_NODE;
      }
      /** @inheritDoc */
      updatePriority(newPriorityNode) {
          if (this.children_.isEmpty()) {
              // Don't allow priorities on empty nodes
              return this;
          }
          else {
              return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);
          }
      }
      /** @inheritDoc */
      getImmediateChild(childName) {
          // Hack to treat priority as a regular child
          if (childName === '.priority') {
              return this.getPriority();
          }
          else {
              const child = this.children_.get(childName);
              return child === null ? EMPTY_NODE : child;
          }
      }
      /** @inheritDoc */
      getChild(path) {
          const front = pathGetFront(path);
          if (front === null) {
              return this;
          }
          return this.getImmediateChild(front).getChild(pathPopFront(path));
      }
      /** @inheritDoc */
      hasChild(childName) {
          return this.children_.get(childName) !== null;
      }
      /** @inheritDoc */
      updateImmediateChild(childName, newChildNode) {
          assert$1(newChildNode, 'We should always be passing snapshot nodes');
          if (childName === '.priority') {
              return this.updatePriority(newChildNode);
          }
          else {
              const namedNode = new NamedNode(childName, newChildNode);
              let newChildren, newIndexMap;
              if (newChildNode.isEmpty()) {
                  newChildren = this.children_.remove(childName);
                  newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);
              }
              else {
                  newChildren = this.children_.insert(childName, newChildNode);
                  newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);
              }
              const newPriority = newChildren.isEmpty()
                  ? EMPTY_NODE
                  : this.priorityNode_;
              return new ChildrenNode(newChildren, newPriority, newIndexMap);
          }
      }
      /** @inheritDoc */
      updateChild(path, newChildNode) {
          const front = pathGetFront(path);
          if (front === null) {
              return newChildNode;
          }
          else {
              assert$1(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');
              const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);
              return this.updateImmediateChild(front, newImmediateChild);
          }
      }
      /** @inheritDoc */
      isEmpty() {
          return this.children_.isEmpty();
      }
      /** @inheritDoc */
      numChildren() {
          return this.children_.count();
      }
      /** @inheritDoc */
      val(exportFormat) {
          if (this.isEmpty()) {
              return null;
          }
          const obj = {};
          let numKeys = 0, maxKey = 0, allIntegerKeys = true;
          this.forEachChild(PRIORITY_INDEX, (key, childNode) => {
              obj[key] = childNode.val(exportFormat);
              numKeys++;
              if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {
                  maxKey = Math.max(maxKey, Number(key));
              }
              else {
                  allIntegerKeys = false;
              }
          });
          if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {
              // convert to array.
              const array = [];
              // eslint-disable-next-line guard-for-in
              for (const key in obj) {
                  array[key] = obj[key];
              }
              return array;
          }
          else {
              if (exportFormat && !this.getPriority().isEmpty()) {
                  obj['.priority'] = this.getPriority().val();
              }
              return obj;
          }
      }
      /** @inheritDoc */
      hash() {
          if (this.lazyHash_ === null) {
              let toHash = '';
              if (!this.getPriority().isEmpty()) {
                  toHash +=
                      'priority:' +
                          priorityHashText(this.getPriority().val()) +
                          ':';
              }
              this.forEachChild(PRIORITY_INDEX, (key, childNode) => {
                  const childHash = childNode.hash();
                  if (childHash !== '') {
                      toHash += ':' + key + ':' + childHash;
                  }
              });
              this.lazyHash_ = toHash === '' ? '' : sha1(toHash);
          }
          return this.lazyHash_;
      }
      /** @inheritDoc */
      getPredecessorChildName(childName, childNode, index) {
          const idx = this.resolveIndex_(index);
          if (idx) {
              const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));
              return predecessor ? predecessor.name : null;
          }
          else {
              return this.children_.getPredecessorKey(childName);
          }
      }
      getFirstChildName(indexDefinition) {
          const idx = this.resolveIndex_(indexDefinition);
          if (idx) {
              const minKey = idx.minKey();
              return minKey && minKey.name;
          }
          else {
              return this.children_.minKey();
          }
      }
      getFirstChild(indexDefinition) {
          const minKey = this.getFirstChildName(indexDefinition);
          if (minKey) {
              return new NamedNode(minKey, this.children_.get(minKey));
          }
          else {
              return null;
          }
      }
      /**
       * Given an index, return the key name of the largest value we have, according to that index
       */
      getLastChildName(indexDefinition) {
          const idx = this.resolveIndex_(indexDefinition);
          if (idx) {
              const maxKey = idx.maxKey();
              return maxKey && maxKey.name;
          }
          else {
              return this.children_.maxKey();
          }
      }
      getLastChild(indexDefinition) {
          const maxKey = this.getLastChildName(indexDefinition);
          if (maxKey) {
              return new NamedNode(maxKey, this.children_.get(maxKey));
          }
          else {
              return null;
          }
      }
      forEachChild(index, action) {
          const idx = this.resolveIndex_(index);
          if (idx) {
              return idx.inorderTraversal(wrappedNode => {
                  return action(wrappedNode.name, wrappedNode.node);
              });
          }
          else {
              return this.children_.inorderTraversal(action);
          }
      }
      getIterator(indexDefinition) {
          return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);
      }
      getIteratorFrom(startPost, indexDefinition) {
          const idx = this.resolveIndex_(indexDefinition);
          if (idx) {
              return idx.getIteratorFrom(startPost, key => key);
          }
          else {
              const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);
              let next = iterator.peek();
              while (next != null && indexDefinition.compare(next, startPost) < 0) {
                  iterator.getNext();
                  next = iterator.peek();
              }
              return iterator;
          }
      }
      getReverseIterator(indexDefinition) {
          return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);
      }
      getReverseIteratorFrom(endPost, indexDefinition) {
          const idx = this.resolveIndex_(indexDefinition);
          if (idx) {
              return idx.getReverseIteratorFrom(endPost, key => {
                  return key;
              });
          }
          else {
              const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);
              let next = iterator.peek();
              while (next != null && indexDefinition.compare(next, endPost) > 0) {
                  iterator.getNext();
                  next = iterator.peek();
              }
              return iterator;
          }
      }
      compareTo(other) {
          if (this.isEmpty()) {
              if (other.isEmpty()) {
                  return 0;
              }
              else {
                  return -1;
              }
          }
          else if (other.isLeafNode() || other.isEmpty()) {
              return 1;
          }
          else if (other === MAX_NODE) {
              return -1;
          }
          else {
              // Must be another node with children.
              return 0;
          }
      }
      withIndex(indexDefinition) {
          if (indexDefinition === KEY_INDEX ||
              this.indexMap_.hasIndex(indexDefinition)) {
              return this;
          }
          else {
              const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);
              return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);
          }
      }
      isIndexed(index) {
          return index === KEY_INDEX || this.indexMap_.hasIndex(index);
      }
      equals(other) {
          if (other === this) {
              return true;
          }
          else if (other.isLeafNode()) {
              return false;
          }
          else {
              const otherChildrenNode = other;
              if (!this.getPriority().equals(otherChildrenNode.getPriority())) {
                  return false;
              }
              else if (this.children_.count() === otherChildrenNode.children_.count()) {
                  const thisIter = this.getIterator(PRIORITY_INDEX);
                  const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);
                  let thisCurrent = thisIter.getNext();
                  let otherCurrent = otherIter.getNext();
                  while (thisCurrent && otherCurrent) {
                      if (thisCurrent.name !== otherCurrent.name ||
                          !thisCurrent.node.equals(otherCurrent.node)) {
                          return false;
                      }
                      thisCurrent = thisIter.getNext();
                      otherCurrent = otherIter.getNext();
                  }
                  return thisCurrent === null && otherCurrent === null;
              }
              else {
                  return false;
              }
          }
      }
      /**
       * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used
       * instead.
       *
       */
      resolveIndex_(indexDefinition) {
          if (indexDefinition === KEY_INDEX) {
              return null;
          }
          else {
              return this.indexMap_.get(indexDefinition.toString());
          }
      }
  }
  ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\d*)$/;
  class MaxNode extends ChildrenNode {
      constructor() {
          super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);
      }
      compareTo(other) {
          if (other === this) {
              return 0;
          }
          else {
              return 1;
          }
      }
      equals(other) {
          // Not that we every compare it, but MAX_NODE is only ever equal to itself
          return other === this;
      }
      getPriority() {
          return this;
      }
      getImmediateChild(childName) {
          return ChildrenNode.EMPTY_NODE;
      }
      isEmpty() {
          return false;
      }
  }
  /**
   * Marker that will sort higher than any other snapshot.
   */
  const MAX_NODE = new MaxNode();
  Object.defineProperties(NamedNode, {
      MIN: {
          value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)
      },
      MAX: {
          value: new NamedNode(MAX_NAME, MAX_NODE)
      }
  });
  /**
   * Reference Extensions
   */
  KeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;
  LeafNode.__childrenNodeConstructor = ChildrenNode;
  setMaxNode$1(MAX_NODE);
  setMaxNode(MAX_NODE);

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const USE_HINZE = true;
  /**
   * Constructs a snapshot node representing the passed JSON and returns it.
   * @param json - JSON to create a node for.
   * @param priority - Optional priority to use.  This will be ignored if the
   * passed JSON contains a .priority property.
   */
  function nodeFromJSON(json, priority = null) {
      if (json === null) {
          return ChildrenNode.EMPTY_NODE;
      }
      if (typeof json === 'object' && '.priority' in json) {
          priority = json['.priority'];
      }
      assert$1(priority === null ||
          typeof priority === 'string' ||
          typeof priority === 'number' ||
          (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);
      if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {
          json = json['.value'];
      }
      // Valid leaf nodes include non-objects or server-value wrapper objects
      if (typeof json !== 'object' || '.sv' in json) {
          const jsonLeaf = json;
          return new LeafNode(jsonLeaf, nodeFromJSON(priority));
      }
      if (!(json instanceof Array) && USE_HINZE) {
          const children = [];
          let childrenHavePriority = false;
          const hinzeJsonObj = json;
          each(hinzeJsonObj, (key, child) => {
              if (key.substring(0, 1) !== '.') {
                  // Ignore metadata nodes
                  const childNode = nodeFromJSON(child);
                  if (!childNode.isEmpty()) {
                      childrenHavePriority =
                          childrenHavePriority || !childNode.getPriority().isEmpty();
                      children.push(new NamedNode(key, childNode));
                  }
              }
          });
          if (children.length === 0) {
              return ChildrenNode.EMPTY_NODE;
          }
          const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);
          if (childrenHavePriority) {
              const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());
              return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));
          }
          else {
              return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);
          }
      }
      else {
          let node = ChildrenNode.EMPTY_NODE;
          each(json, (key, childData) => {
              if (contains$1(json, key)) {
                  if (key.substring(0, 1) !== '.') {
                      // ignore metadata nodes.
                      const childNode = nodeFromJSON(childData);
                      if (childNode.isLeafNode() || !childNode.isEmpty()) {
                          node = node.updateImmediateChild(key, childNode);
                      }
                  }
              }
          });
          return node.updatePriority(nodeFromJSON(priority));
      }
  }
  setNodeFromJSON(nodeFromJSON);

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class PathIndex extends Index {
      constructor(indexPath_) {
          super();
          this.indexPath_ = indexPath_;
          assert$1(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', "Can't create PathIndex with empty path or .priority key");
      }
      extractChild(snap) {
          return snap.getChild(this.indexPath_);
      }
      isDefinedOn(node) {
          return !node.getChild(this.indexPath_).isEmpty();
      }
      compare(a, b) {
          const aChild = this.extractChild(a.node);
          const bChild = this.extractChild(b.node);
          const indexCmp = aChild.compareTo(bChild);
          if (indexCmp === 0) {
              return nameCompare(a.name, b.name);
          }
          else {
              return indexCmp;
          }
      }
      makePost(indexValue, name) {
          const valueNode = nodeFromJSON(indexValue);
          const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);
          return new NamedNode(name, node);
      }
      maxPost() {
          const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);
          return new NamedNode(MAX_NAME, node);
      }
      toString() {
          return pathSlice(this.indexPath_, 0).join('/');
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class ValueIndex extends Index {
      compare(a, b) {
          const indexCmp = a.node.compareTo(b.node);
          if (indexCmp === 0) {
              return nameCompare(a.name, b.name);
          }
          else {
              return indexCmp;
          }
      }
      isDefinedOn(node) {
          return true;
      }
      indexedValueChanged(oldNode, newNode) {
          return !oldNode.equals(newNode);
      }
      minPost() {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          return NamedNode.MIN;
      }
      maxPost() {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          return NamedNode.MAX;
      }
      makePost(indexValue, name) {
          const valueNode = nodeFromJSON(indexValue);
          return new NamedNode(name, valueNode);
      }
      /**
       * @returns String representation for inclusion in a query spec
       */
      toString() {
          return '.value';
      }
  }
  const VALUE_INDEX = new ValueIndex();

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function changeValue(snapshotNode) {
      return { type: "value" /* ChangeType.VALUE */, snapshotNode };
  }
  function changeChildAdded(childName, snapshotNode) {
      return { type: "child_added" /* ChangeType.CHILD_ADDED */, snapshotNode, childName };
  }
  function changeChildRemoved(childName, snapshotNode) {
      return { type: "child_removed" /* ChangeType.CHILD_REMOVED */, snapshotNode, childName };
  }
  function changeChildChanged(childName, snapshotNode, oldSnap) {
      return {
          type: "child_changed" /* ChangeType.CHILD_CHANGED */,
          snapshotNode,
          childName,
          oldSnap
      };
  }
  function changeChildMoved(childName, snapshotNode) {
      return { type: "child_moved" /* ChangeType.CHILD_MOVED */, snapshotNode, childName };
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Doesn't really filter nodes but applies an index to the node and keeps track of any changes
   */
  class IndexedFilter {
      constructor(index_) {
          this.index_ = index_;
      }
      updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {
          assert$1(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');
          const oldChild = snap.getImmediateChild(key);
          // Check if anything actually changed.
          if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {
              // There's an edge case where a child can enter or leave the view because affectedPath was set to null.
              // In this case, affectedPath will appear null in both the old and new snapshots.  So we need
              // to avoid treating these cases as "nothing changed."
              if (oldChild.isEmpty() === newChild.isEmpty()) {
                  // Nothing changed.
                  // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.
                  //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');
                  return snap;
              }
          }
          if (optChangeAccumulator != null) {
              if (newChild.isEmpty()) {
                  if (snap.hasChild(key)) {
                      optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));
                  }
                  else {
                      assert$1(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');
                  }
              }
              else if (oldChild.isEmpty()) {
                  optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));
              }
              else {
                  optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));
              }
          }
          if (snap.isLeafNode() && newChild.isEmpty()) {
              return snap;
          }
          else {
              // Make sure the node is indexed
              return snap.updateImmediateChild(key, newChild).withIndex(this.index_);
          }
      }
      updateFullNode(oldSnap, newSnap, optChangeAccumulator) {
          if (optChangeAccumulator != null) {
              if (!oldSnap.isLeafNode()) {
                  oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {
                      if (!newSnap.hasChild(key)) {
                          optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));
                      }
                  });
              }
              if (!newSnap.isLeafNode()) {
                  newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {
                      if (oldSnap.hasChild(key)) {
                          const oldChild = oldSnap.getImmediateChild(key);
                          if (!oldChild.equals(childNode)) {
                              optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));
                          }
                      }
                      else {
                          optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));
                      }
                  });
              }
          }
          return newSnap.withIndex(this.index_);
      }
      updatePriority(oldSnap, newPriority) {
          if (oldSnap.isEmpty()) {
              return ChildrenNode.EMPTY_NODE;
          }
          else {
              return oldSnap.updatePriority(newPriority);
          }
      }
      filtersNodes() {
          return false;
      }
      getIndexedFilter() {
          return this;
      }
      getIndex() {
          return this.index_;
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node
   */
  class RangedFilter {
      constructor(params) {
          this.indexedFilter_ = new IndexedFilter(params.getIndex());
          this.index_ = params.getIndex();
          this.startPost_ = RangedFilter.getStartPost_(params);
          this.endPost_ = RangedFilter.getEndPost_(params);
          this.startIsInclusive_ = !params.startAfterSet_;
          this.endIsInclusive_ = !params.endBeforeSet_;
      }
      getStartPost() {
          return this.startPost_;
      }
      getEndPost() {
          return this.endPost_;
      }
      matches(node) {
          const isWithinStart = this.startIsInclusive_
              ? this.index_.compare(this.getStartPost(), node) <= 0
              : this.index_.compare(this.getStartPost(), node) < 0;
          const isWithinEnd = this.endIsInclusive_
              ? this.index_.compare(node, this.getEndPost()) <= 0
              : this.index_.compare(node, this.getEndPost()) < 0;
          return isWithinStart && isWithinEnd;
      }
      updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {
          if (!this.matches(new NamedNode(key, newChild))) {
              newChild = ChildrenNode.EMPTY_NODE;
          }
          return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
      }
      updateFullNode(oldSnap, newSnap, optChangeAccumulator) {
          if (newSnap.isLeafNode()) {
              // Make sure we have a children node with the correct index, not a leaf node;
              newSnap = ChildrenNode.EMPTY_NODE;
          }
          let filtered = newSnap.withIndex(this.index_);
          // Don't support priorities on queries
          filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
          const self = this;
          newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {
              if (!self.matches(new NamedNode(key, childNode))) {
                  filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);
              }
          });
          return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);
      }
      updatePriority(oldSnap, newPriority) {
          // Don't support priorities on queries
          return oldSnap;
      }
      filtersNodes() {
          return true;
      }
      getIndexedFilter() {
          return this.indexedFilter_;
      }
      getIndex() {
          return this.index_;
      }
      static getStartPost_(params) {
          if (params.hasStart()) {
              const startName = params.getIndexStartName();
              return params.getIndex().makePost(params.getIndexStartValue(), startName);
          }
          else {
              return params.getIndex().minPost();
          }
      }
      static getEndPost_(params) {
          if (params.hasEnd()) {
              const endName = params.getIndexEndName();
              return params.getIndex().makePost(params.getIndexEndValue(), endName);
          }
          else {
              return params.getIndex().maxPost();
          }
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible
   */
  class LimitedFilter {
      constructor(params) {
          this.withinDirectionalStart = (node) => this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);
          this.withinDirectionalEnd = (node) => this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);
          this.withinStartPost = (node) => {
              const compareRes = this.index_.compare(this.rangedFilter_.getStartPost(), node);
              return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;
          };
          this.withinEndPost = (node) => {
              const compareRes = this.index_.compare(node, this.rangedFilter_.getEndPost());
              return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;
          };
          this.rangedFilter_ = new RangedFilter(params);
          this.index_ = params.getIndex();
          this.limit_ = params.getLimit();
          this.reverse_ = !params.isViewFromLeft();
          this.startIsInclusive_ = !params.startAfterSet_;
          this.endIsInclusive_ = !params.endBeforeSet_;
      }
      updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {
          if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {
              newChild = ChildrenNode.EMPTY_NODE;
          }
          if (snap.getImmediateChild(key).equals(newChild)) {
              // No change
              return snap;
          }
          else if (snap.numChildren() < this.limit_) {
              return this.rangedFilter_
                  .getIndexedFilter()
                  .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
          }
          else {
              return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);
          }
      }
      updateFullNode(oldSnap, newSnap, optChangeAccumulator) {
          let filtered;
          if (newSnap.isLeafNode() || newSnap.isEmpty()) {
              // Make sure we have a children node with the correct index, not a leaf node;
              filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
          }
          else {
              if (this.limit_ * 2 < newSnap.numChildren() &&
                  newSnap.isIndexed(this.index_)) {
                  // Easier to build up a snapshot, since what we're given has more than twice the elements we want
                  filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
                  // anchor to the startPost, endPost, or last element as appropriate
                  let iterator;
                  if (this.reverse_) {
                      iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);
                  }
                  else {
                      iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);
                  }
                  let count = 0;
                  while (iterator.hasNext() && count < this.limit_) {
                      const next = iterator.getNext();
                      if (!this.withinDirectionalStart(next)) {
                          // if we have not reached the start, skip to the next element
                          continue;
                      }
                      else if (!this.withinDirectionalEnd(next)) {
                          // if we have reached the end, stop adding elements
                          break;
                      }
                      else {
                          filtered = filtered.updateImmediateChild(next.name, next.node);
                          count++;
                      }
                  }
              }
              else {
                  // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one
                  filtered = newSnap.withIndex(this.index_);
                  // Don't support priorities on queries
                  filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
                  let iterator;
                  if (this.reverse_) {
                      iterator = filtered.getReverseIterator(this.index_);
                  }
                  else {
                      iterator = filtered.getIterator(this.index_);
                  }
                  let count = 0;
                  while (iterator.hasNext()) {
                      const next = iterator.getNext();
                      const inRange = count < this.limit_ &&
                          this.withinDirectionalStart(next) &&
                          this.withinDirectionalEnd(next);
                      if (inRange) {
                          count++;
                      }
                      else {
                          filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);
                      }
                  }
              }
          }
          return this.rangedFilter_
              .getIndexedFilter()
              .updateFullNode(oldSnap, filtered, optChangeAccumulator);
      }
      updatePriority(oldSnap, newPriority) {
          // Don't support priorities on queries
          return oldSnap;
      }
      filtersNodes() {
          return true;
      }
      getIndexedFilter() {
          return this.rangedFilter_.getIndexedFilter();
      }
      getIndex() {
          return this.index_;
      }
      fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {
          // TODO: rename all cache stuff etc to general snap terminology
          let cmp;
          if (this.reverse_) {
              const indexCmp = this.index_.getCompare();
              cmp = (a, b) => indexCmp(b, a);
          }
          else {
              cmp = this.index_.getCompare();
          }
          const oldEventCache = snap;
          assert$1(oldEventCache.numChildren() === this.limit_, '');
          const newChildNamedNode = new NamedNode(childKey, childSnap);
          const windowBoundary = this.reverse_
              ? oldEventCache.getFirstChild(this.index_)
              : oldEventCache.getLastChild(this.index_);
          const inRange = this.rangedFilter_.matches(newChildNamedNode);
          if (oldEventCache.hasChild(childKey)) {
              const oldChildSnap = oldEventCache.getImmediateChild(childKey);
              let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);
              while (nextChild != null &&
                  (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {
                  // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't
                  // been applied to the limited filter yet. Ignore this next child which will be updated later in
                  // the limited filter...
                  nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);
              }
              const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);
              const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;
              if (remainsInWindow) {
                  if (changeAccumulator != null) {
                      changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));
                  }
                  return oldEventCache.updateImmediateChild(childKey, childSnap);
              }
              else {
                  if (changeAccumulator != null) {
                      changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));
                  }
                  const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);
                  const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);
                  if (nextChildInRange) {
                      if (changeAccumulator != null) {
                          changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));
                      }
                      return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);
                  }
                  else {
                      return newEventCache;
                  }
              }
          }
          else if (childSnap.isEmpty()) {
              // we're deleting a node, but it was not in the window, so ignore it
              return snap;
          }
          else if (inRange) {
              if (cmp(windowBoundary, newChildNamedNode) >= 0) {
                  if (changeAccumulator != null) {
                      changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));
                      changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));
                  }
                  return oldEventCache
                      .updateImmediateChild(childKey, childSnap)
                      .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);
              }
              else {
                  return snap;
              }
          }
          else {
              return snap;
          }
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a
   * range to be returned for a particular location. It is assumed that validation of parameters is done at the
   * user-facing API level, so it is not done here.
   *
   * @internal
   */
  class QueryParams {
      constructor() {
          this.limitSet_ = false;
          this.startSet_ = false;
          this.startNameSet_ = false;
          this.startAfterSet_ = false; // can only be true if startSet_ is true
          this.endSet_ = false;
          this.endNameSet_ = false;
          this.endBeforeSet_ = false; // can only be true if endSet_ is true
          this.limit_ = 0;
          this.viewFrom_ = '';
          this.indexStartValue_ = null;
          this.indexStartName_ = '';
          this.indexEndValue_ = null;
          this.indexEndName_ = '';
          this.index_ = PRIORITY_INDEX;
      }
      hasStart() {
          return this.startSet_;
      }
      /**
       * @returns True if it would return from left.
       */
      isViewFromLeft() {
          if (this.viewFrom_ === '') {
              // limit(), rather than limitToFirst or limitToLast was called.
              // This means that only one of startSet_ and endSet_ is true. Use them
              // to calculate which side of the view to anchor to. If neither is set,
              // anchor to the end.
              return this.startSet_;
          }
          else {
              return this.viewFrom_ === "l" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;
          }
      }
      /**
       * Only valid to call if hasStart() returns true
       */
      getIndexStartValue() {
          assert$1(this.startSet_, 'Only valid if start has been set');
          return this.indexStartValue_;
      }
      /**
       * Only valid to call if hasStart() returns true.
       * Returns the starting key name for the range defined by these query parameters
       */
      getIndexStartName() {
          assert$1(this.startSet_, 'Only valid if start has been set');
          if (this.startNameSet_) {
              return this.indexStartName_;
          }
          else {
              return MIN_NAME;
          }
      }
      hasEnd() {
          return this.endSet_;
      }
      /**
       * Only valid to call if hasEnd() returns true.
       */
      getIndexEndValue() {
          assert$1(this.endSet_, 'Only valid if end has been set');
          return this.indexEndValue_;
      }
      /**
       * Only valid to call if hasEnd() returns true.
       * Returns the end key name for the range defined by these query parameters
       */
      getIndexEndName() {
          assert$1(this.endSet_, 'Only valid if end has been set');
          if (this.endNameSet_) {
              return this.indexEndName_;
          }
          else {
              return MAX_NAME;
          }
      }
      hasLimit() {
          return this.limitSet_;
      }
      /**
       * @returns True if a limit has been set and it has been explicitly anchored
       */
      hasAnchoredLimit() {
          return this.limitSet_ && this.viewFrom_ !== '';
      }
      /**
       * Only valid to call if hasLimit() returns true
       */
      getLimit() {
          assert$1(this.limitSet_, 'Only valid if limit has been set');
          return this.limit_;
      }
      getIndex() {
          return this.index_;
      }
      loadsAllData() {
          return !(this.startSet_ || this.endSet_ || this.limitSet_);
      }
      isDefault() {
          return this.loadsAllData() && this.index_ === PRIORITY_INDEX;
      }
      copy() {
          const copy = new QueryParams();
          copy.limitSet_ = this.limitSet_;
          copy.limit_ = this.limit_;
          copy.startSet_ = this.startSet_;
          copy.startAfterSet_ = this.startAfterSet_;
          copy.indexStartValue_ = this.indexStartValue_;
          copy.startNameSet_ = this.startNameSet_;
          copy.indexStartName_ = this.indexStartName_;
          copy.endSet_ = this.endSet_;
          copy.endBeforeSet_ = this.endBeforeSet_;
          copy.indexEndValue_ = this.indexEndValue_;
          copy.endNameSet_ = this.endNameSet_;
          copy.indexEndName_ = this.indexEndName_;
          copy.index_ = this.index_;
          copy.viewFrom_ = this.viewFrom_;
          return copy;
      }
  }
  function queryParamsGetNodeFilter(queryParams) {
      if (queryParams.loadsAllData()) {
          return new IndexedFilter(queryParams.getIndex());
      }
      else if (queryParams.hasLimit()) {
          return new LimitedFilter(queryParams);
      }
      else {
          return new RangedFilter(queryParams);
      }
  }
  /**
   * Returns a set of REST query string parameters representing this query.
   *
   * @returns query string parameters
   */
  function queryParamsToRestQueryStringParameters(queryParams) {
      const qs = {};
      if (queryParams.isDefault()) {
          return qs;
      }
      let orderBy;
      if (queryParams.index_ === PRIORITY_INDEX) {
          orderBy = "$priority" /* REST_QUERY_CONSTANTS.PRIORITY_INDEX */;
      }
      else if (queryParams.index_ === VALUE_INDEX) {
          orderBy = "$value" /* REST_QUERY_CONSTANTS.VALUE_INDEX */;
      }
      else if (queryParams.index_ === KEY_INDEX) {
          orderBy = "$key" /* REST_QUERY_CONSTANTS.KEY_INDEX */;
      }
      else {
          assert$1(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');
          orderBy = queryParams.index_.toString();
      }
      qs["orderBy" /* REST_QUERY_CONSTANTS.ORDER_BY */] = stringify(orderBy);
      if (queryParams.startSet_) {
          const startParam = queryParams.startAfterSet_
              ? "startAfter" /* REST_QUERY_CONSTANTS.START_AFTER */
              : "startAt" /* REST_QUERY_CONSTANTS.START_AT */;
          qs[startParam] = stringify(queryParams.indexStartValue_);
          if (queryParams.startNameSet_) {
              qs[startParam] += ',' + stringify(queryParams.indexStartName_);
          }
      }
      if (queryParams.endSet_) {
          const endParam = queryParams.endBeforeSet_
              ? "endBefore" /* REST_QUERY_CONSTANTS.END_BEFORE */
              : "endAt" /* REST_QUERY_CONSTANTS.END_AT */;
          qs[endParam] = stringify(queryParams.indexEndValue_);
          if (queryParams.endNameSet_) {
              qs[endParam] += ',' + stringify(queryParams.indexEndName_);
          }
      }
      if (queryParams.limitSet_) {
          if (queryParams.isViewFromLeft()) {
              qs["limitToFirst" /* REST_QUERY_CONSTANTS.LIMIT_TO_FIRST */] = queryParams.limit_;
          }
          else {
              qs["limitToLast" /* REST_QUERY_CONSTANTS.LIMIT_TO_LAST */] = queryParams.limit_;
          }
      }
      return qs;
  }
  function queryParamsGetQueryObject(queryParams) {
      const obj = {};
      if (queryParams.startSet_) {
          obj["sp" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE */] =
              queryParams.indexStartValue_;
          if (queryParams.startNameSet_) {
              obj["sn" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME */] =
                  queryParams.indexStartName_;
          }
          obj["sin" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE */] =
              !queryParams.startAfterSet_;
      }
      if (queryParams.endSet_) {
          obj["ep" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE */] = queryParams.indexEndValue_;
          if (queryParams.endNameSet_) {
              obj["en" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME */] = queryParams.indexEndName_;
          }
          obj["ein" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE */] =
              !queryParams.endBeforeSet_;
      }
      if (queryParams.limitSet_) {
          obj["l" /* WIRE_PROTOCOL_CONSTANTS.LIMIT */] = queryParams.limit_;
          let viewFrom = queryParams.viewFrom_;
          if (viewFrom === '') {
              if (queryParams.isViewFromLeft()) {
                  viewFrom = "l" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;
              }
              else {
                  viewFrom = "r" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;
              }
          }
          obj["vf" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM */] = viewFrom;
      }
      // For now, priority index is the default, so we only specify if it's some other index
      if (queryParams.index_ !== PRIORITY_INDEX) {
          obj["i" /* WIRE_PROTOCOL_CONSTANTS.INDEX */] = queryParams.index_.toString();
      }
      return obj;
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * An implementation of ServerActions that communicates with the server via REST requests.
   * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full
   * persistent connection (using WebSockets or long-polling)
   */
  class ReadonlyRestClient extends ServerActions {
      reportStats(stats) {
          throw new Error('Method not implemented.');
      }
      static getListenId_(query, tag) {
          if (tag !== undefined) {
              return 'tag$' + tag;
          }
          else {
              assert$1(query._queryParams.isDefault(), "should have a tag if it's not a default query.");
              return query._path.toString();
          }
      }
      /**
       * @param repoInfo_ - Data about the namespace we are connecting to
       * @param onDataUpdate_ - A callback for new data from the server
       */
      constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {
          super();
          this.repoInfo_ = repoInfo_;
          this.onDataUpdate_ = onDataUpdate_;
          this.authTokenProvider_ = authTokenProvider_;
          this.appCheckTokenProvider_ = appCheckTokenProvider_;
          /** @private {function(...[*])} */
          this.log_ = logWrapper('p:rest:');
          /**
           * We don't actually need to track listens, except to prevent us calling an onComplete for a listen
           * that's been removed. :-/
           */
          this.listens_ = {};
      }
      /** @inheritDoc */
      listen(query, currentHashFn, tag, onComplete) {
          const pathString = query._path.toString();
          this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);
          // Mark this listener so we can tell if it's removed.
          const listenId = ReadonlyRestClient.getListenId_(query, tag);
          const thisListen = {};
          this.listens_[listenId] = thisListen;
          const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);
          this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {
              let data = result;
              if (error === 404) {
                  data = null;
                  error = null;
              }
              if (error === null) {
                  this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);
              }
              if (safeGet(this.listens_, listenId) === thisListen) {
                  let status;
                  if (!error) {
                      status = 'ok';
                  }
                  else if (error === 401) {
                      status = 'permission_denied';
                  }
                  else {
                      status = 'rest_error:' + error;
                  }
                  onComplete(status, null);
              }
          });
      }
      /** @inheritDoc */
      unlisten(query, tag) {
          const listenId = ReadonlyRestClient.getListenId_(query, tag);
          delete this.listens_[listenId];
      }
      get(query) {
          const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);
          const pathString = query._path.toString();
          const deferred = new Deferred();
          this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {
              let data = result;
              if (error === 404) {
                  data = null;
                  error = null;
              }
              if (error === null) {
                  this.onDataUpdate_(pathString, data, 
                  /*isMerge=*/ false, 
                  /*tag=*/ null);
                  deferred.resolve(data);
              }
              else {
                  deferred.reject(new Error(data));
              }
          });
          return deferred.promise;
      }
      /** @inheritDoc */
      refreshAuthToken(token) {
          // no-op since we just always call getToken.
      }
      /**
       * Performs a REST request to the given path, with the provided query string parameters,
       * and any auth credentials we have.
       */
      restRequest_(pathString, queryStringParameters = {}, callback) {
          queryStringParameters['format'] = 'export';
          return Promise.all([
              this.authTokenProvider_.getToken(/*forceRefresh=*/ false),
              this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)
          ]).then(([authToken, appCheckToken]) => {
              if (authToken && authToken.accessToken) {
                  queryStringParameters['auth'] = authToken.accessToken;
              }
              if (appCheckToken && appCheckToken.token) {
                  queryStringParameters['ac'] = appCheckToken.token;
              }
              const url = (this.repoInfo_.secure ? 'https://' : 'http://') +
                  this.repoInfo_.host +
                  pathString +
                  '?' +
                  'ns=' +
                  this.repoInfo_.namespace +
                  querystring(queryStringParameters);
              this.log_('Sending REST request for ' + url);
              const xhr = new XMLHttpRequest();
              xhr.onreadystatechange = () => {
                  if (callback && xhr.readyState === 4) {
                      this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);
                      let res = null;
                      if (xhr.status >= 200 && xhr.status < 300) {
                          try {
                              res = jsonEval(xhr.responseText);
                          }
                          catch (e) {
                              warn('Failed to parse JSON response for ' +
                                  url +
                                  ': ' +
                                  xhr.responseText);
                          }
                          callback(null, res);
                      }
                      else {
                          // 401 and 404 are expected.
                          if (xhr.status !== 401 && xhr.status !== 404) {
                              warn('Got unsuccessful REST response for ' +
                                  url +
                                  ' Status: ' +
                                  xhr.status);
                          }
                          callback(xhr.status);
                      }
                      callback = null;
                  }
              };
              xhr.open('GET', url, /*asynchronous=*/ true);
              xhr.send();
          });
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Mutable object which basically just stores a reference to the "latest" immutable snapshot.
   */
  class SnapshotHolder {
      constructor() {
          this.rootNode_ = ChildrenNode.EMPTY_NODE;
      }
      getNode(path) {
          return this.rootNode_.getChild(path);
      }
      updateSnapshot(path, newSnapshotNode) {
          this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function newSparseSnapshotTree() {
      return {
          value: null,
          children: new Map()
      };
  }
  /**
   * Stores the given node at the specified path. If there is already a node
   * at a shallower path, it merges the new data into that snapshot node.
   *
   * @param path - Path to look up snapshot for.
   * @param data - The new data, or null.
   */
  function sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {
      if (pathIsEmpty(path)) {
          sparseSnapshotTree.value = data;
          sparseSnapshotTree.children.clear();
      }
      else if (sparseSnapshotTree.value !== null) {
          sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);
      }
      else {
          const childKey = pathGetFront(path);
          if (!sparseSnapshotTree.children.has(childKey)) {
              sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());
          }
          const child = sparseSnapshotTree.children.get(childKey);
          path = pathPopFront(path);
          sparseSnapshotTreeRemember(child, path, data);
      }
  }
  /**
   * Recursively iterates through all of the stored tree and calls the
   * callback on each one.
   *
   * @param prefixPath - Path to look up node for.
   * @param func - The function to invoke for each tree.
   */
  function sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {
      if (sparseSnapshotTree.value !== null) {
          func(prefixPath, sparseSnapshotTree.value);
      }
      else {
          sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {
              const path = new Path(prefixPath.toString() + '/' + key);
              sparseSnapshotTreeForEachTree(tree, path, func);
          });
      }
  }
  /**
   * Iterates through each immediate child and triggers the callback.
   * Only seems to be used in tests.
   *
   * @param func - The function to invoke for each child.
   */
  function sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {
      sparseSnapshotTree.children.forEach((tree, key) => {
          func(key, tree);
      });
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Returns the delta from the previous call to get stats.
   *
   * @param collection_ - The collection to "listen" to.
   */
  class StatsListener {
      constructor(collection_) {
          this.collection_ = collection_;
          this.last_ = null;
      }
      get() {
          const newStats = this.collection_.get();
          const delta = Object.assign({}, newStats);
          if (this.last_) {
              each(this.last_, (stat, value) => {
                  delta[stat] = delta[stat] - value;
              });
          }
          this.last_ = newStats;
          return delta;
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  // Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably
  // happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10
  // seconds to try to ensure the Firebase connection is established / settled.
  const FIRST_STATS_MIN_TIME = 10 * 1000;
  const FIRST_STATS_MAX_TIME = 30 * 1000;
  // We'll continue to report stats on average every 5 minutes.
  const REPORT_STATS_INTERVAL = 5 * 60 * 1000;
  class StatsReporter {
      constructor(collection, server_) {
          this.server_ = server_;
          this.statsToReport_ = {};
          this.statsListener_ = new StatsListener(collection);
          const timeout = FIRST_STATS_MIN_TIME +
              (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();
          setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));
      }
      reportStats_() {
          const stats = this.statsListener_.get();
          const reportedStats = {};
          let haveStatsToReport = false;
          each(stats, (stat, value) => {
              if (value > 0 && contains$1(this.statsToReport_, stat)) {
                  reportedStats[stat] = value;
                  haveStatsToReport = true;
              }
          });
          if (haveStatsToReport) {
              this.server_.reportStats(reportedStats);
          }
          // queue our next run.
          setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   *
   * @enum
   */
  var OperationType;
  (function (OperationType) {
      OperationType[OperationType["OVERWRITE"] = 0] = "OVERWRITE";
      OperationType[OperationType["MERGE"] = 1] = "MERGE";
      OperationType[OperationType["ACK_USER_WRITE"] = 2] = "ACK_USER_WRITE";
      OperationType[OperationType["LISTEN_COMPLETE"] = 3] = "LISTEN_COMPLETE";
  })(OperationType || (OperationType = {}));
  function newOperationSourceUser() {
      return {
          fromUser: true,
          fromServer: false,
          queryId: null,
          tagged: false
      };
  }
  function newOperationSourceServer() {
      return {
          fromUser: false,
          fromServer: true,
          queryId: null,
          tagged: false
      };
  }
  function newOperationSourceServerTaggedQuery(queryId) {
      return {
          fromUser: false,
          fromServer: true,
          queryId,
          tagged: true
      };
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class AckUserWrite {
      /**
       * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.
       */
      constructor(
      /** @inheritDoc */ path, 
      /** @inheritDoc */ affectedTree, 
      /** @inheritDoc */ revert) {
          this.path = path;
          this.affectedTree = affectedTree;
          this.revert = revert;
          /** @inheritDoc */
          this.type = OperationType.ACK_USER_WRITE;
          /** @inheritDoc */
          this.source = newOperationSourceUser();
      }
      operationForChild(childName) {
          if (!pathIsEmpty(this.path)) {
              assert$1(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');
              return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);
          }
          else if (this.affectedTree.value != null) {
              assert$1(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');
              // All child locations are affected as well; just return same operation.
              return this;
          }
          else {
              const childTree = this.affectedTree.subtree(new Path(childName));
              return new AckUserWrite(newEmptyPath(), childTree, this.revert);
          }
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class ListenComplete {
      constructor(source, path) {
          this.source = source;
          this.path = path;
          /** @inheritDoc */
          this.type = OperationType.LISTEN_COMPLETE;
      }
      operationForChild(childName) {
          if (pathIsEmpty(this.path)) {
              return new ListenComplete(this.source, newEmptyPath());
          }
          else {
              return new ListenComplete(this.source, pathPopFront(this.path));
          }
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class Overwrite {
      constructor(source, path, snap) {
          this.source = source;
          this.path = path;
          this.snap = snap;
          /** @inheritDoc */
          this.type = OperationType.OVERWRITE;
      }
      operationForChild(childName) {
          if (pathIsEmpty(this.path)) {
              return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));
          }
          else {
              return new Overwrite(this.source, pathPopFront(this.path), this.snap);
          }
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class Merge {
      constructor(
      /** @inheritDoc */ source, 
      /** @inheritDoc */ path, 
      /** @inheritDoc */ children) {
          this.source = source;
          this.path = path;
          this.children = children;
          /** @inheritDoc */
          this.type = OperationType.MERGE;
      }
      operationForChild(childName) {
          if (pathIsEmpty(this.path)) {
              const childTree = this.children.subtree(new Path(childName));
              if (childTree.isEmpty()) {
                  // This child is unaffected
                  return null;
              }
              else if (childTree.value) {
                  // We have a snapshot for the child in question.  This becomes an overwrite of the child.
                  return new Overwrite(this.source, newEmptyPath(), childTree.value);
              }
              else {
                  // This is a merge at a deeper level
                  return new Merge(this.source, newEmptyPath(), childTree);
              }
          }
          else {
              assert$1(pathGetFront(this.path) === childName, "Can't get a merge for a child not on the path of the operation");
              return new Merge(this.source, pathPopFront(this.path), this.children);
          }
      }
      toString() {
          return ('Operation(' +
              this.path +
              ': ' +
              this.source.toString() +
              ' merge: ' +
              this.children.toString() +
              ')');
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully
   * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.
   * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks
   * whether a node potentially had children removed due to a filter.
   */
  class CacheNode {
      constructor(node_, fullyInitialized_, filtered_) {
          this.node_ = node_;
          this.fullyInitialized_ = fullyInitialized_;
          this.filtered_ = filtered_;
      }
      /**
       * Returns whether this node was fully initialized with either server data or a complete overwrite by the client
       */
      isFullyInitialized() {
          return this.fullyInitialized_;
      }
      /**
       * Returns whether this node is potentially missing children due to a filter applied to the node
       */
      isFiltered() {
          return this.filtered_;
      }
      isCompleteForPath(path) {
          if (pathIsEmpty(path)) {
              return this.isFullyInitialized() && !this.filtered_;
          }
          const childKey = pathGetFront(path);
          return this.isCompleteForChild(childKey);
      }
      isCompleteForChild(key) {
          return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));
      }
      getNode() {
          return this.node_;
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * An EventGenerator is used to convert "raw" changes (Change) as computed by the
   * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()
   * for details.
   *
   */
  class EventGenerator {
      constructor(query_) {
          this.query_ = query_;
          this.index_ = this.query_._queryParams.getIndex();
      }
  }
  /**
   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of
   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.
   *
   * Notes:
   *  - child_moved events will be synthesized at this time for any child_changed events that affect
   *    our index.
   *  - prevName will be calculated based on the index ordering.
   */
  function eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {
      const events = [];
      const moves = [];
      changes.forEach(change => {
          if (change.type === "child_changed" /* ChangeType.CHILD_CHANGED */ &&
              eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {
              moves.push(changeChildMoved(change.childName, change.snapshotNode));
          }
      });
      eventGeneratorGenerateEventsForType(eventGenerator, events, "child_removed" /* ChangeType.CHILD_REMOVED */, changes, eventRegistrations, eventCache);
      eventGeneratorGenerateEventsForType(eventGenerator, events, "child_added" /* ChangeType.CHILD_ADDED */, changes, eventRegistrations, eventCache);
      eventGeneratorGenerateEventsForType(eventGenerator, events, "child_moved" /* ChangeType.CHILD_MOVED */, moves, eventRegistrations, eventCache);
      eventGeneratorGenerateEventsForType(eventGenerator, events, "child_changed" /* ChangeType.CHILD_CHANGED */, changes, eventRegistrations, eventCache);
      eventGeneratorGenerateEventsForType(eventGenerator, events, "value" /* ChangeType.VALUE */, changes, eventRegistrations, eventCache);
      return events;
  }
  /**
   * Given changes of a single change type, generate the corresponding events.
   */
  function eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {
      const filteredChanges = changes.filter(change => change.type === eventType);
      filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));
      filteredChanges.forEach(change => {
          const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);
          registrations.forEach(registration => {
              if (registration.respondsTo(change.type)) {
                  events.push(registration.createEvent(materializedChange, eventGenerator.query_));
              }
          });
      });
  }
  function eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {
      if (change.type === 'value' || change.type === 'child_removed') {
          return change;
      }
      else {
          change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);
          return change;
      }
  }
  function eventGeneratorCompareChanges(eventGenerator, a, b) {
      if (a.childName == null || b.childName == null) {
          throw assertionError('Should only compare child_ events.');
      }
      const aWrapped = new NamedNode(a.childName, a.snapshotNode);
      const bWrapped = new NamedNode(b.childName, b.snapshotNode);
      return eventGenerator.index_.compare(aWrapped, bWrapped);
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function newViewCache(eventCache, serverCache) {
      return { eventCache, serverCache };
  }
  function viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {
      return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);
  }
  function viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {
      return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));
  }
  function viewCacheGetCompleteEventSnap(viewCache) {
      return viewCache.eventCache.isFullyInitialized()
          ? viewCache.eventCache.getNode()
          : null;
  }
  function viewCacheGetCompleteServerSnap(viewCache) {
      return viewCache.serverCache.isFullyInitialized()
          ? viewCache.serverCache.getNode()
          : null;
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  let emptyChildrenSingleton;
  /**
   * Singleton empty children collection.
   *
   */
  const EmptyChildren = () => {
      if (!emptyChildrenSingleton) {
          emptyChildrenSingleton = new SortedMap(stringCompare);
      }
      return emptyChildrenSingleton;
  };
  /**
   * A tree with immutable elements.
   */
  class ImmutableTree {
      static fromObject(obj) {
          let tree = new ImmutableTree(null);
          each(obj, (childPath, childSnap) => {
              tree = tree.set(new Path(childPath), childSnap);
          });
          return tree;
      }
      constructor(value, children = EmptyChildren()) {
          this.value = value;
          this.children = children;
      }
      /**
       * True if the value is empty and there are no children
       */
      isEmpty() {
          return this.value === null && this.children.isEmpty();
      }
      /**
       * Given a path and predicate, return the first node and the path to that node
       * where the predicate returns true.
       *
       * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`
       * objects on the way back out, it may be better to pass down a pathSoFar obj.
       *
       * @param relativePath - The remainder of the path
       * @param predicate - The predicate to satisfy to return a node
       */
      findRootMostMatchingPathAndValue(relativePath, predicate) {
          if (this.value != null && predicate(this.value)) {
              return { path: newEmptyPath(), value: this.value };
          }
          else {
              if (pathIsEmpty(relativePath)) {
                  return null;
              }
              else {
                  const front = pathGetFront(relativePath);
                  const child = this.children.get(front);
                  if (child !== null) {
                      const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);
                      if (childExistingPathAndValue != null) {
                          const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);
                          return { path: fullPath, value: childExistingPathAndValue.value };
                      }
                      else {
                          return null;
                      }
                  }
                  else {
                      return null;
                  }
              }
          }
      }
      /**
       * Find, if it exists, the shortest subpath of the given path that points a defined
       * value in the tree
       */
      findRootMostValueAndPath(relativePath) {
          return this.findRootMostMatchingPathAndValue(relativePath, () => true);
      }
      /**
       * @returns The subtree at the given path
       */
      subtree(relativePath) {
          if (pathIsEmpty(relativePath)) {
              return this;
          }
          else {
              const front = pathGetFront(relativePath);
              const childTree = this.children.get(front);
              if (childTree !== null) {
                  return childTree.subtree(pathPopFront(relativePath));
              }
              else {
                  return new ImmutableTree(null);
              }
          }
      }
      /**
       * Sets a value at the specified path.
       *
       * @param relativePath - Path to set value at.
       * @param toSet - Value to set.
       * @returns Resulting tree.
       */
      set(relativePath, toSet) {
          if (pathIsEmpty(relativePath)) {
              return new ImmutableTree(toSet, this.children);
          }
          else {
              const front = pathGetFront(relativePath);
              const child = this.children.get(front) || new ImmutableTree(null);
              const newChild = child.set(pathPopFront(relativePath), toSet);
              const newChildren = this.children.insert(front, newChild);
              return new ImmutableTree(this.value, newChildren);
          }
      }
      /**
       * Removes the value at the specified path.
       *
       * @param relativePath - Path to value to remove.
       * @returns Resulting tree.
       */
      remove(relativePath) {
          if (pathIsEmpty(relativePath)) {
              if (this.children.isEmpty()) {
                  return new ImmutableTree(null);
              }
              else {
                  return new ImmutableTree(null, this.children);
              }
          }
          else {
              const front = pathGetFront(relativePath);
              const child = this.children.get(front);
              if (child) {
                  const newChild = child.remove(pathPopFront(relativePath));
                  let newChildren;
                  if (newChild.isEmpty()) {
                      newChildren = this.children.remove(front);
                  }
                  else {
                      newChildren = this.children.insert(front, newChild);
                  }
                  if (this.value === null && newChildren.isEmpty()) {
                      return new ImmutableTree(null);
                  }
                  else {
                      return new ImmutableTree(this.value, newChildren);
                  }
              }
              else {
                  return this;
              }
          }
      }
      /**
       * Gets a value from the tree.
       *
       * @param relativePath - Path to get value for.
       * @returns Value at path, or null.
       */
      get(relativePath) {
          if (pathIsEmpty(relativePath)) {
              return this.value;
          }
          else {
              const front = pathGetFront(relativePath);
              const child = this.children.get(front);
              if (child) {
                  return child.get(pathPopFront(relativePath));
              }
              else {
                  return null;
              }
          }
      }
      /**
       * Replace the subtree at the specified path with the given new tree.
       *
       * @param relativePath - Path to replace subtree for.
       * @param newTree - New tree.
       * @returns Resulting tree.
       */
      setTree(relativePath, newTree) {
          if (pathIsEmpty(relativePath)) {
              return newTree;
          }
          else {
              const front = pathGetFront(relativePath);
              const child = this.children.get(front) || new ImmutableTree(null);
              const newChild = child.setTree(pathPopFront(relativePath), newTree);
              let newChildren;
              if (newChild.isEmpty()) {
                  newChildren = this.children.remove(front);
              }
              else {
                  newChildren = this.children.insert(front, newChild);
              }
              return new ImmutableTree(this.value, newChildren);
          }
      }
      /**
       * Performs a depth first fold on this tree. Transforms a tree into a single
       * value, given a function that operates on the path to a node, an optional
       * current value, and a map of child names to folded subtrees
       */
      fold(fn) {
          return this.fold_(newEmptyPath(), fn);
      }
      /**
       * Recursive helper for public-facing fold() method
       */
      fold_(pathSoFar, fn) {
          const accum = {};
          this.children.inorderTraversal((childKey, childTree) => {
              accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);
          });
          return fn(pathSoFar, this.value, accum);
      }
      /**
       * Find the first matching value on the given path. Return the result of applying f to it.
       */
      findOnPath(path, f) {
          return this.findOnPath_(path, newEmptyPath(), f);
      }
      findOnPath_(pathToFollow, pathSoFar, f) {
          const result = this.value ? f(pathSoFar, this.value) : false;
          if (result) {
              return result;
          }
          else {
              if (pathIsEmpty(pathToFollow)) {
                  return null;
              }
              else {
                  const front = pathGetFront(pathToFollow);
                  const nextChild = this.children.get(front);
                  if (nextChild) {
                      return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);
                  }
                  else {
                      return null;
                  }
              }
          }
      }
      foreachOnPath(path, f) {
          return this.foreachOnPath_(path, newEmptyPath(), f);
      }
      foreachOnPath_(pathToFollow, currentRelativePath, f) {
          if (pathIsEmpty(pathToFollow)) {
              return this;
          }
          else {
              if (this.value) {
                  f(currentRelativePath, this.value);
              }
              const front = pathGetFront(pathToFollow);
              const nextChild = this.children.get(front);
              if (nextChild) {
                  return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);
              }
              else {
                  return new ImmutableTree(null);
              }
          }
      }
      /**
       * Calls the given function for each node in the tree that has a value.
       *
       * @param f - A function to be called with the path from the root of the tree to
       * a node, and the value at that node. Called in depth-first order.
       */
      foreach(f) {
          this.foreach_(newEmptyPath(), f);
      }
      foreach_(currentRelativePath, f) {
          this.children.inorderTraversal((childName, childTree) => {
              childTree.foreach_(pathChild(currentRelativePath, childName), f);
          });
          if (this.value) {
              f(currentRelativePath, this.value);
          }
      }
      foreachChild(f) {
          this.children.inorderTraversal((childName, childTree) => {
              if (childTree.value) {
                  f(childName, childTree.value);
              }
          });
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with
   * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write
   * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write
   * to reflect the write added.
   */
  class CompoundWrite {
      constructor(writeTree_) {
          this.writeTree_ = writeTree_;
      }
      static empty() {
          return new CompoundWrite(new ImmutableTree(null));
      }
  }
  function compoundWriteAddWrite(compoundWrite, path, node) {
      if (pathIsEmpty(path)) {
          return new CompoundWrite(new ImmutableTree(node));
      }
      else {
          const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);
          if (rootmost != null) {
              const rootMostPath = rootmost.path;
              let value = rootmost.value;
              const relativePath = newRelativePath(rootMostPath, path);
              value = value.updateChild(relativePath, node);
              return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));
          }
          else {
              const subtree = new ImmutableTree(node);
              const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);
              return new CompoundWrite(newWriteTree);
          }
      }
  }
  function compoundWriteAddWrites(compoundWrite, path, updates) {
      let newWrite = compoundWrite;
      each(updates, (childKey, node) => {
          newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);
      });
      return newWrite;
  }
  /**
   * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher
   * location, which must be removed by calling this method with that path.
   *
   * @param compoundWrite - The CompoundWrite to remove.
   * @param path - The path at which a write and all deeper writes should be removed
   * @returns The new CompoundWrite with the removed path
   */
  function compoundWriteRemoveWrite(compoundWrite, path) {
      if (pathIsEmpty(path)) {
          return CompoundWrite.empty();
      }
      else {
          const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));
          return new CompoundWrite(newWriteTree);
      }
  }
  /**
   * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be
   * considered "complete".
   *
   * @param compoundWrite - The CompoundWrite to check.
   * @param path - The path to check for
   * @returns Whether there is a complete write at that path
   */
  function compoundWriteHasCompleteWrite(compoundWrite, path) {
      return compoundWriteGetCompleteNode(compoundWrite, path) != null;
  }
  /**
   * Returns a node for a path if and only if the node is a "complete" overwrite at that path. This will not aggregate
   * writes from deeper paths, but will return child nodes from a more shallow path.
   *
   * @param compoundWrite - The CompoundWrite to get the node from.
   * @param path - The path to get a complete write
   * @returns The node if complete at that path, or null otherwise.
   */
  function compoundWriteGetCompleteNode(compoundWrite, path) {
      const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);
      if (rootmost != null) {
          return compoundWrite.writeTree_
              .get(rootmost.path)
              .getChild(newRelativePath(rootmost.path, path));
      }
      else {
          return null;
      }
  }
  /**
   * Returns all children that are guaranteed to be a complete overwrite.
   *
   * @param compoundWrite - The CompoundWrite to get children from.
   * @returns A list of all complete children.
   */
  function compoundWriteGetCompleteChildren(compoundWrite) {
      const children = [];
      const node = compoundWrite.writeTree_.value;
      if (node != null) {
          // If it's a leaf node, it has no children; so nothing to do.
          if (!node.isLeafNode()) {
              node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {
                  children.push(new NamedNode(childName, childNode));
              });
          }
      }
      else {
          compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {
              if (childTree.value != null) {
                  children.push(new NamedNode(childName, childTree.value));
              }
          });
      }
      return children;
  }
  function compoundWriteChildCompoundWrite(compoundWrite, path) {
      if (pathIsEmpty(path)) {
          return compoundWrite;
      }
      else {
          const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);
          if (shadowingNode != null) {
              return new CompoundWrite(new ImmutableTree(shadowingNode));
          }
          else {
              return new CompoundWrite(compoundWrite.writeTree_.subtree(path));
          }
      }
  }
  /**
   * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.
   * @returns Whether this CompoundWrite is empty
   */
  function compoundWriteIsEmpty(compoundWrite) {
      return compoundWrite.writeTree_.isEmpty();
  }
  /**
   * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the
   * node
   * @param node - The node to apply this CompoundWrite to
   * @returns The node with all writes applied
   */
  function compoundWriteApply(compoundWrite, node) {
      return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);
  }
  function applySubtreeWrite(relativePath, writeTree, node) {
      if (writeTree.value != null) {
          // Since there a write is always a leaf, we're done here
          return node.updateChild(relativePath, writeTree.value);
      }
      else {
          let priorityWrite = null;
          writeTree.children.inorderTraversal((childKey, childTree) => {
              if (childKey === '.priority') {
                  // Apply priorities at the end so we don't update priorities for either empty nodes or forget
                  // to apply priorities to empty nodes that are later filled
                  assert$1(childTree.value !== null, 'Priority writes must always be leaf nodes');
                  priorityWrite = childTree.value;
              }
              else {
                  node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);
              }
          });
          // If there was a priority write, we only apply it if the node is not empty
          if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {
              node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);
          }
          return node;
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.
   *
   */
  function writeTreeChildWrites(writeTree, path) {
      return newWriteTreeRef(path, writeTree);
  }
  /**
   * Record a new overwrite from user code.
   *
   * @param visible - This is set to false by some transactions. It should be excluded from event caches
   */
  function writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {
      assert$1(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');
      if (visible === undefined) {
          visible = true;
      }
      writeTree.allWrites.push({
          path,
          snap,
          writeId,
          visible
      });
      if (visible) {
          writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);
      }
      writeTree.lastWriteId = writeId;
  }
  /**
   * Record a new merge from user code.
   */
  function writeTreeAddMerge(writeTree, path, changedChildren, writeId) {
      assert$1(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');
      writeTree.allWrites.push({
          path,
          children: changedChildren,
          writeId,
          visible: true
      });
      writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);
      writeTree.lastWriteId = writeId;
  }
  function writeTreeGetWrite(writeTree, writeId) {
      for (let i = 0; i < writeTree.allWrites.length; i++) {
          const record = writeTree.allWrites[i];
          if (record.writeId === writeId) {
              return record;
          }
      }
      return null;
  }
  /**
   * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates
   * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.
   *
   * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise
   * events as a result).
   */
  function writeTreeRemoveWrite(writeTree, writeId) {
      // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied
      // out of order.
      //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;
      //assert(validClear, "Either we don't have this write, or it's the first one in the queue");
      const idx = writeTree.allWrites.findIndex(s => {
          return s.writeId === writeId;
      });
      assert$1(idx >= 0, 'removeWrite called with nonexistent writeId.');
      const writeToRemove = writeTree.allWrites[idx];
      writeTree.allWrites.splice(idx, 1);
      let removedWriteWasVisible = writeToRemove.visible;
      let removedWriteOverlapsWithOtherWrites = false;
      let i = writeTree.allWrites.length - 1;
      while (removedWriteWasVisible && i >= 0) {
          const currentWrite = writeTree.allWrites[i];
          if (currentWrite.visible) {
              if (i >= idx &&
                  writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {
                  // The removed write was completely shadowed by a subsequent write.
                  removedWriteWasVisible = false;
              }
              else if (pathContains(writeToRemove.path, currentWrite.path)) {
                  // Either we're covering some writes or they're covering part of us (depending on which came first).
                  removedWriteOverlapsWithOtherWrites = true;
              }
          }
          i--;
      }
      if (!removedWriteWasVisible) {
          return false;
      }
      else if (removedWriteOverlapsWithOtherWrites) {
          // There's some shadowing going on. Just rebuild the visible writes from scratch.
          writeTreeResetTree_(writeTree);
          return true;
      }
      else {
          // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.
          if (writeToRemove.snap) {
              writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);
          }
          else {
              const children = writeToRemove.children;
              each(children, (childName) => {
                  writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));
              });
          }
          return true;
      }
  }
  function writeTreeRecordContainsPath_(writeRecord, path) {
      if (writeRecord.snap) {
          return pathContains(writeRecord.path, path);
      }
      else {
          for (const childName in writeRecord.children) {
              if (writeRecord.children.hasOwnProperty(childName) &&
                  pathContains(pathChild(writeRecord.path, childName), path)) {
                  return true;
              }
          }
          return false;
      }
  }
  /**
   * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots
   */
  function writeTreeResetTree_(writeTree) {
      writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());
      if (writeTree.allWrites.length > 0) {
          writeTree.lastWriteId =
              writeTree.allWrites[writeTree.allWrites.length - 1].writeId;
      }
      else {
          writeTree.lastWriteId = -1;
      }
  }
  /**
   * The default filter used when constructing the tree. Keep everything that's visible.
   */
  function writeTreeDefaultFilter_(write) {
      return write.visible;
  }
  /**
   * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of
   * event data at that path.
   */
  function writeTreeLayerTree_(writes, filter, treeRoot) {
      let compoundWrite = CompoundWrite.empty();
      for (let i = 0; i < writes.length; ++i) {
          const write = writes[i];
          // Theory, a later set will either:
          // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction
          // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction
          if (filter(write)) {
              const writePath = write.path;
              let relativePath;
              if (write.snap) {
                  if (pathContains(treeRoot, writePath)) {
                      relativePath = newRelativePath(treeRoot, writePath);
                      compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);
                  }
                  else if (pathContains(writePath, treeRoot)) {
                      relativePath = newRelativePath(writePath, treeRoot);
                      compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));
                  }
                  else ;
              }
              else if (write.children) {
                  if (pathContains(treeRoot, writePath)) {
                      relativePath = newRelativePath(treeRoot, writePath);
                      compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);
                  }
                  else if (pathContains(writePath, treeRoot)) {
                      relativePath = newRelativePath(writePath, treeRoot);
                      if (pathIsEmpty(relativePath)) {
                          compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);
                      }
                      else {
                          const child = safeGet(write.children, pathGetFront(relativePath));
                          if (child) {
                              // There exists a child in this node that matches the root path
                              const deepNode = child.getChild(pathPopFront(relativePath));
                              compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);
                          }
                      }
                  }
                  else ;
              }
              else {
                  throw assertionError('WriteRecord should have .snap or .children');
              }
          }
      }
      return compoundWrite;
  }
  /**
   * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden
   * writes), attempt to calculate a complete snapshot for the given path
   *
   * @param writeIdsToExclude - An optional set to be excluded
   * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false
   */
  function writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
      if (!writeIdsToExclude && !includeHiddenWrites) {
          const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);
          if (shadowingNode != null) {
              return shadowingNode;
          }
          else {
              const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
              if (compoundWriteIsEmpty(subMerge)) {
                  return completeServerCache;
              }
              else if (completeServerCache == null &&
                  !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {
                  // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow
                  return null;
              }
              else {
                  const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
                  return compoundWriteApply(subMerge, layeredCache);
              }
          }
      }
      else {
          const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
          if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {
              return completeServerCache;
          }
          else {
              // If the server cache is null, and we don't have a complete cache, we need to return null
              if (!includeHiddenWrites &&
                  completeServerCache == null &&
                  !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {
                  return null;
              }
              else {
                  const filter = function (write) {
                      return ((write.visible || includeHiddenWrites) &&
                          (!writeIdsToExclude ||
                              !~writeIdsToExclude.indexOf(write.writeId)) &&
                          (pathContains(write.path, treePath) ||
                              pathContains(treePath, write.path)));
                  };
                  const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);
                  const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
                  return compoundWriteApply(mergeAtPath, layeredCache);
              }
          }
      }
  }
  /**
   * With optional, underlying server data, attempt to return a children node of children that we have complete data for.
   * Used when creating new views, to pre-fill their complete event children snapshot.
   */
  function writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {
      let completeChildren = ChildrenNode.EMPTY_NODE;
      const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);
      if (topLevelSet) {
          if (!topLevelSet.isLeafNode()) {
              // we're shadowing everything. Return the children.
              topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {
                  completeChildren = completeChildren.updateImmediateChild(childName, childSnap);
              });
          }
          return completeChildren;
      }
      else if (completeServerChildren) {
          // Layer any children we have on top of this
          // We know we don't have a top-level set, so just enumerate existing children
          const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
          completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {
              const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);
              completeChildren = completeChildren.updateImmediateChild(childName, node);
          });
          // Add any complete children we have from the set
          compoundWriteGetCompleteChildren(merge).forEach(namedNode => {
              completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
          });
          return completeChildren;
      }
      else {
          // We don't have anything to layer on top of. Layer on any children we have
          // Note that we can return an empty snap if we have a defined delete
          const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
          compoundWriteGetCompleteChildren(merge).forEach(namedNode => {
              completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
          });
          return completeChildren;
      }
  }
  /**
   * Given that the underlying server data has updated, determine what, if anything, needs to be
   * applied to the event cache.
   *
   * Possibilities:
   *
   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
   *
   * 2. Some write is completely shadowing. No events to be raised
   *
   * 3. Is partially shadowed. Events
   *
   * Either existingEventSnap or existingServerSnap must exist
   */
  function writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {
      assert$1(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');
      const path = pathChild(treePath, childPath);
      if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {
          // At this point we can probably guarantee that we're in case 2, meaning no events
          // May need to check visibility while doing the findRootMostValueAndPath call
          return null;
      }
      else {
          // No complete shadowing. We're either partially shadowing or not shadowing at all.
          const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);
          if (compoundWriteIsEmpty(childMerge)) {
              // We're not shadowing at all. Case 1
              return existingServerSnap.getChild(childPath);
          }
          else {
              // This could be more efficient if the serverNode + updates doesn't change the eventSnap
              // However this is tricky to find out, since user updates don't necessary change the server
              // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server
              // adds nodes, but doesn't change any existing writes. It is therefore not enough to
              // only check if the updates change the serverNode.
              // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?
              return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));
          }
      }
  }
  /**
   * Returns a complete child for a given server snap after applying all user writes or null if there is no
   * complete child for this ChildKey.
   */
  function writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {
      const path = pathChild(treePath, childKey);
      const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);
      if (shadowingNode != null) {
          return shadowingNode;
      }
      else {
          if (existingServerSnap.isCompleteForChild(childKey)) {
              const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);
              return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));
          }
          else {
              return null;
          }
      }
  }
  /**
   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
   * a higher path, this will return the child of that write relative to the write and this path.
   * Returns null if there is no write at this path.
   */
  function writeTreeShadowingWrite(writeTree, path) {
      return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);
  }
  /**
   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
   * the window, but may now be in the window.
   */
  function writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {
      let toIterate;
      const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
      const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());
      if (shadowingNode != null) {
          toIterate = shadowingNode;
      }
      else if (completeServerData != null) {
          toIterate = compoundWriteApply(merge, completeServerData);
      }
      else {
          // no children to iterate on
          return [];
      }
      toIterate = toIterate.withIndex(index);
      if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {
          const nodes = [];
          const cmp = index.getCompare();
          const iter = reverse
              ? toIterate.getReverseIteratorFrom(startPost, index)
              : toIterate.getIteratorFrom(startPost, index);
          let next = iter.getNext();
          while (next && nodes.length < count) {
              if (cmp(next, startPost) !== 0) {
                  nodes.push(next);
              }
              next = iter.getNext();
          }
          return nodes;
      }
      else {
          return [];
      }
  }
  function newWriteTree() {
      return {
          visibleWrites: CompoundWrite.empty(),
          allWrites: [],
          lastWriteId: -1
      };
  }
  /**
   * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used
   * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node
   * can lead to a more expensive calculation.
   *
   * @param writeIdsToExclude - Optional writes to exclude.
   * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false
   */
  function writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
      return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);
  }
  /**
   * If possible, returns a children node containing all of the complete children we have data for. The returned data is a
   * mix of the given server data and write data.
   *
   */
  function writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {
      return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);
  }
  /**
   * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,
   * if anything, needs to be applied to the event cache.
   *
   * Possibilities:
   *
   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
   *
   * 2. Some write is completely shadowing. No events to be raised
   *
   * 3. Is partially shadowed. Events should be raised
   *
   * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert
   *
   *
   */
  function writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {
      return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);
  }
  /**
   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
   * a higher path, this will return the child of that write relative to the write and this path.
   * Returns null if there is no write at this path.
   *
   */
  function writeTreeRefShadowingWrite(writeTreeRef, path) {
      return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));
  }
  /**
   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
   * the window, but may now be in the window
   */
  function writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {
      return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);
  }
  /**
   * Returns a complete child for a given server snap after applying all user writes or null if there is no
   * complete child for this ChildKey.
   */
  function writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {
      return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);
  }
  /**
   * Return a WriteTreeRef for a child.
   */
  function writeTreeRefChild(writeTreeRef, childName) {
      return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);
  }
  function newWriteTreeRef(path, writeTree) {
      return {
          treePath: path,
          writeTree
      };
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class ChildChangeAccumulator {
      constructor() {
          this.changeMap = new Map();
      }
      trackChildChange(change) {
          const type = change.type;
          const childKey = change.childName;
          assert$1(type === "child_added" /* ChangeType.CHILD_ADDED */ ||
              type === "child_changed" /* ChangeType.CHILD_CHANGED */ ||
              type === "child_removed" /* ChangeType.CHILD_REMOVED */, 'Only child changes supported for tracking');
          assert$1(childKey !== '.priority', 'Only non-priority child changes can be tracked.');
          const oldChange = this.changeMap.get(childKey);
          if (oldChange) {
              const oldType = oldChange.type;
              if (type === "child_added" /* ChangeType.CHILD_ADDED */ &&
                  oldType === "child_removed" /* ChangeType.CHILD_REMOVED */) {
                  this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));
              }
              else if (type === "child_removed" /* ChangeType.CHILD_REMOVED */ &&
                  oldType === "child_added" /* ChangeType.CHILD_ADDED */) {
                  this.changeMap.delete(childKey);
              }
              else if (type === "child_removed" /* ChangeType.CHILD_REMOVED */ &&
                  oldType === "child_changed" /* ChangeType.CHILD_CHANGED */) {
                  this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));
              }
              else if (type === "child_changed" /* ChangeType.CHILD_CHANGED */ &&
                  oldType === "child_added" /* ChangeType.CHILD_ADDED */) {
                  this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));
              }
              else if (type === "child_changed" /* ChangeType.CHILD_CHANGED */ &&
                  oldType === "child_changed" /* ChangeType.CHILD_CHANGED */) {
                  this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));
              }
              else {
                  throw assertionError('Illegal combination of changes: ' +
                      change +
                      ' occurred after ' +
                      oldChange);
              }
          }
          else {
              this.changeMap.set(childKey, change);
          }
      }
      getChanges() {
          return Array.from(this.changeMap.values());
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * An implementation of CompleteChildSource that never returns any additional children
   */
  // eslint-disable-next-line @typescript-eslint/naming-convention
  class NoCompleteChildSource_ {
      getCompleteChild(childKey) {
          return null;
      }
      getChildAfterChild(index, child, reverse) {
          return null;
      }
  }
  /**
   * Singleton instance.
   */
  const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();
  /**
   * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or
   * old event caches available to calculate complete children.
   */
  class WriteTreeCompleteChildSource {
      constructor(writes_, viewCache_, optCompleteServerCache_ = null) {
          this.writes_ = writes_;
          this.viewCache_ = viewCache_;
          this.optCompleteServerCache_ = optCompleteServerCache_;
      }
      getCompleteChild(childKey) {
          const node = this.viewCache_.eventCache;
          if (node.isCompleteForChild(childKey)) {
              return node.getNode().getImmediateChild(childKey);
          }
          else {
              const serverNode = this.optCompleteServerCache_ != null
                  ? new CacheNode(this.optCompleteServerCache_, true, false)
                  : this.viewCache_.serverCache;
              return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);
          }
      }
      getChildAfterChild(index, child, reverse) {
          const completeServerData = this.optCompleteServerCache_ != null
              ? this.optCompleteServerCache_
              : viewCacheGetCompleteServerSnap(this.viewCache_);
          const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);
          if (nodes.length === 0) {
              return null;
          }
          else {
              return nodes[0];
          }
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function newViewProcessor(filter) {
      return { filter };
  }
  function viewProcessorAssertIndexed(viewProcessor, viewCache) {
      assert$1(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');
      assert$1(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');
  }
  function viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {
      const accumulator = new ChildChangeAccumulator();
      let newViewCache, filterServerNode;
      if (operation.type === OperationType.OVERWRITE) {
          const overwrite = operation;
          if (overwrite.source.fromUser) {
              newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);
          }
          else {
              assert$1(overwrite.source.fromServer, 'Unknown source.');
              // We filter the node if it's a tagged update or the node has been previously filtered  and the
              // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered
              // again
              filterServerNode =
                  overwrite.source.tagged ||
                      (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));
              newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);
          }
      }
      else if (operation.type === OperationType.MERGE) {
          const merge = operation;
          if (merge.source.fromUser) {
              newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);
          }
          else {
              assert$1(merge.source.fromServer, 'Unknown source.');
              // We filter the node if it's a tagged update or the node has been previously filtered
              filterServerNode =
                  merge.source.tagged || oldViewCache.serverCache.isFiltered();
              newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);
          }
      }
      else if (operation.type === OperationType.ACK_USER_WRITE) {
          const ackUserWrite = operation;
          if (!ackUserWrite.revert) {
              newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);
          }
          else {
              newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);
          }
      }
      else if (operation.type === OperationType.LISTEN_COMPLETE) {
          newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);
      }
      else {
          throw assertionError('Unknown operation type: ' + operation.type);
      }
      const changes = accumulator.getChanges();
      viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);
      return { viewCache: newViewCache, changes };
  }
  function viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {
      const eventSnap = newViewCache.eventCache;
      if (eventSnap.isFullyInitialized()) {
          const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();
          const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);
          if (accumulator.length > 0 ||
              !oldViewCache.eventCache.isFullyInitialized() ||
              (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||
              !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {
              accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));
          }
      }
  }
  function viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {
      const oldEventSnap = viewCache.eventCache;
      if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {
          // we have a shadowing write, ignore changes
          return viewCache;
      }
      else {
          let newEventCache, serverNode;
          if (pathIsEmpty(changePath)) {
              // TODO: figure out how this plays with "sliding ack windows"
              assert$1(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');
              if (viewCache.serverCache.isFiltered()) {
                  // We need to special case this, because we need to only apply writes to complete children, or
                  // we might end up raising events for incomplete children. If the server data is filtered deep
                  // writes cannot be guaranteed to be complete
                  const serverCache = viewCacheGetCompleteServerSnap(viewCache);
                  const completeChildren = serverCache instanceof ChildrenNode
                      ? serverCache
                      : ChildrenNode.EMPTY_NODE;
                  const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);
                  newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);
              }
              else {
                  const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));
                  newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);
              }
          }
          else {
              const childKey = pathGetFront(changePath);
              if (childKey === '.priority') {
                  assert$1(pathGetLength(changePath) === 1, "Can't have a priority with additional path components");
                  const oldEventNode = oldEventSnap.getNode();
                  serverNode = viewCache.serverCache.getNode();
                  // we might have overwrites for this priority
                  const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);
                  if (updatedPriority != null) {
                      newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);
                  }
                  else {
                      // priority didn't change, keep old node
                      newEventCache = oldEventSnap.getNode();
                  }
              }
              else {
                  const childChangePath = pathPopFront(changePath);
                  // update child
                  let newEventChild;
                  if (oldEventSnap.isCompleteForChild(childKey)) {
                      serverNode = viewCache.serverCache.getNode();
                      const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);
                      if (eventChildUpdate != null) {
                          newEventChild = oldEventSnap
                              .getNode()
                              .getImmediateChild(childKey)
                              .updateChild(childChangePath, eventChildUpdate);
                      }
                      else {
                          // Nothing changed, just keep the old child
                          newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);
                      }
                  }
                  else {
                      newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);
                  }
                  if (newEventChild != null) {
                      newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);
                  }
                  else {
                      // no complete child available or no change
                      newEventCache = oldEventSnap.getNode();
                  }
              }
          }
          return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());
      }
  }
  function viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {
      const oldServerSnap = oldViewCache.serverCache;
      let newServerCache;
      const serverFilter = filterServerNode
          ? viewProcessor.filter
          : viewProcessor.filter.getIndexedFilter();
      if (pathIsEmpty(changePath)) {
          newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);
      }
      else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {
          // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update
          const newServerNode = oldServerSnap
              .getNode()
              .updateChild(changePath, changedSnap);
          newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);
      }
      else {
          const childKey = pathGetFront(changePath);
          if (!oldServerSnap.isCompleteForPath(changePath) &&
              pathGetLength(changePath) > 1) {
              // We don't update incomplete nodes with updates intended for other listeners
              return oldViewCache;
          }
          const childChangePath = pathPopFront(changePath);
          const childNode = oldServerSnap.getNode().getImmediateChild(childKey);
          const newChildNode = childNode.updateChild(childChangePath, changedSnap);
          if (childKey === '.priority') {
              newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);
          }
          else {
              newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);
          }
      }
      const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());
      const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);
      return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);
  }
  function viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {
      const oldEventSnap = oldViewCache.eventCache;
      let newViewCache, newEventCache;
      const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);
      if (pathIsEmpty(changePath)) {
          newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);
          newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());
      }
      else {
          const childKey = pathGetFront(changePath);
          if (childKey === '.priority') {
              newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);
              newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());
          }
          else {
              const childChangePath = pathPopFront(changePath);
              const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);
              let newChild;
              if (pathIsEmpty(childChangePath)) {
                  // Child overwrite, we can replace the child
                  newChild = changedSnap;
              }
              else {
                  const childNode = source.getCompleteChild(childKey);
                  if (childNode != null) {
                      if (pathGetBack(childChangePath) === '.priority' &&
                          childNode.getChild(pathParent(childChangePath)).isEmpty()) {
                          // This is a priority update on an empty node. If this node exists on the server, the
                          // server will send down the priority in the update, so ignore for now
                          newChild = childNode;
                      }
                      else {
                          newChild = childNode.updateChild(childChangePath, changedSnap);
                      }
                  }
                  else {
                      // There is no complete child node available
                      newChild = ChildrenNode.EMPTY_NODE;
                  }
              }
              if (!oldChild.equals(newChild)) {
                  const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);
                  newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());
              }
              else {
                  newViewCache = oldViewCache;
              }
          }
      }
      return newViewCache;
  }
  function viewProcessorCacheHasChild(viewCache, childKey) {
      return viewCache.eventCache.isCompleteForChild(childKey);
  }
  function viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {
      // HACK: In the case of a limit query, there may be some changes that bump things out of the
      // window leaving room for new items.  It's important we process these changes first, so we
      // iterate the changes twice, first processing any that affect items currently in view.
      // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
      // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
      // not the other.
      let curViewCache = viewCache;
      changedChildren.foreach((relativePath, childNode) => {
          const writePath = pathChild(path, relativePath);
          if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {
              curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
          }
      });
      changedChildren.foreach((relativePath, childNode) => {
          const writePath = pathChild(path, relativePath);
          if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {
              curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
          }
      });
      return curViewCache;
  }
  function viewProcessorApplyMerge(viewProcessor, node, merge) {
      merge.foreach((relativePath, childNode) => {
          node = node.updateChild(relativePath, childNode);
      });
      return node;
  }
  function viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {
      // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and
      // wait for the complete data update coming soon.
      if (viewCache.serverCache.getNode().isEmpty() &&
          !viewCache.serverCache.isFullyInitialized()) {
          return viewCache;
      }
      // HACK: In the case of a limit query, there may be some changes that bump things out of the
      // window leaving room for new items.  It's important we process these changes first, so we
      // iterate the changes twice, first processing any that affect items currently in view.
      // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
      // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
      // not the other.
      let curViewCache = viewCache;
      let viewMergeTree;
      if (pathIsEmpty(path)) {
          viewMergeTree = changedChildren;
      }
      else {
          viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);
      }
      const serverNode = viewCache.serverCache.getNode();
      viewMergeTree.children.inorderTraversal((childKey, childTree) => {
          if (serverNode.hasChild(childKey)) {
              const serverChild = viewCache.serverCache
                  .getNode()
                  .getImmediateChild(childKey);
              const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);
              curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
          }
      });
      viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {
          const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&
              childMergeTree.value === null;
          if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {
              const serverChild = viewCache.serverCache
                  .getNode()
                  .getImmediateChild(childKey);
              const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);
              curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
          }
      });
      return curViewCache;
  }
  function viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {
      if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {
          return viewCache;
      }
      // Only filter server node if it is currently filtered
      const filterServerNode = viewCache.serverCache.isFiltered();
      // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update
      // now that it won't be shadowed.
      const serverCache = viewCache.serverCache;
      if (affectedTree.value != null) {
          // This is an overwrite.
          if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||
              serverCache.isCompleteForPath(ackPath)) {
              return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);
          }
          else if (pathIsEmpty(ackPath)) {
              // This is a goofy edge case where we are acking data at this location but don't have full data.  We
              // should just re-apply whatever we have in our cache as a merge.
              let changedChildren = new ImmutableTree(null);
              serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {
                  changedChildren = changedChildren.set(new Path(name), node);
              });
              return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);
          }
          else {
              return viewCache;
          }
      }
      else {
          // This is a merge.
          let changedChildren = new ImmutableTree(null);
          affectedTree.foreach((mergePath, value) => {
              const serverCachePath = pathChild(ackPath, mergePath);
              if (serverCache.isCompleteForPath(serverCachePath)) {
                  changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));
              }
          });
          return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);
      }
  }
  function viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {
      const oldServerNode = viewCache.serverCache;
      const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());
      return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);
  }
  function viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {
      let complete;
      if (writeTreeRefShadowingWrite(writesCache, path) != null) {
          return viewCache;
      }
      else {
          const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);
          const oldEventCache = viewCache.eventCache.getNode();
          let newEventCache;
          if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {
              let newNode;
              if (viewCache.serverCache.isFullyInitialized()) {
                  newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));
              }
              else {
                  const serverChildren = viewCache.serverCache.getNode();
                  assert$1(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');
                  newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);
              }
              newNode = newNode;
              newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);
          }
          else {
              const childKey = pathGetFront(path);
              let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);
              if (newChild == null &&
                  viewCache.serverCache.isCompleteForChild(childKey)) {
                  newChild = oldEventCache.getImmediateChild(childKey);
              }
              if (newChild != null) {
                  newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);
              }
              else if (viewCache.eventCache.getNode().hasChild(childKey)) {
                  // No complete child available, delete the existing one, if any
                  newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);
              }
              else {
                  newEventCache = oldEventCache;
              }
              if (newEventCache.isEmpty() &&
                  viewCache.serverCache.isFullyInitialized()) {
                  // We might have reverted all child writes. Maybe the old event was a leaf node
                  complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));
                  if (complete.isLeafNode()) {
                      newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);
                  }
              }
          }
          complete =
              viewCache.serverCache.isFullyInitialized() ||
                  writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;
          return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A view represents a specific location and query that has 1 or more event registrations.
   *
   * It does several things:
   *  - Maintains the list of event registrations for this location/query.
   *  - Maintains a cache of the data visible for this location/query.
   *  - Applies new operations (via applyOperation), updates the cache, and based on the event
   *    registrations returns the set of events to be raised.
   */
  class View {
      constructor(query_, initialViewCache) {
          this.query_ = query_;
          this.eventRegistrations_ = [];
          const params = this.query_._queryParams;
          const indexFilter = new IndexedFilter(params.getIndex());
          const filter = queryParamsGetNodeFilter(params);
          this.processor_ = newViewProcessor(filter);
          const initialServerCache = initialViewCache.serverCache;
          const initialEventCache = initialViewCache.eventCache;
          // Don't filter server node with other filter than index, wait for tagged listen
          const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);
          const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);
          const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());
          const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());
          this.viewCache_ = newViewCache(newEventCache, newServerCache);
          this.eventGenerator_ = new EventGenerator(this.query_);
      }
      get query() {
          return this.query_;
      }
  }
  function viewGetServerCache(view) {
      return view.viewCache_.serverCache.getNode();
  }
  function viewGetCompleteNode(view) {
      return viewCacheGetCompleteEventSnap(view.viewCache_);
  }
  function viewGetCompleteServerCache(view, path) {
      const cache = viewCacheGetCompleteServerSnap(view.viewCache_);
      if (cache) {
          // If this isn't a "loadsAllData" view, then cache isn't actually a complete cache and
          // we need to see if it contains the child we're interested in.
          if (view.query._queryParams.loadsAllData() ||
              (!pathIsEmpty(path) &&
                  !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {
              return cache.getChild(path);
          }
      }
      return null;
  }
  function viewIsEmpty(view) {
      return view.eventRegistrations_.length === 0;
  }
  function viewAddEventRegistration(view, eventRegistration) {
      view.eventRegistrations_.push(eventRegistration);
  }
  /**
   * @param eventRegistration - If null, remove all callbacks.
   * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.
   * @returns Cancel events, if cancelError was provided.
   */
  function viewRemoveEventRegistration(view, eventRegistration, cancelError) {
      const cancelEvents = [];
      if (cancelError) {
          assert$1(eventRegistration == null, 'A cancel should cancel all event registrations.');
          const path = view.query._path;
          view.eventRegistrations_.forEach(registration => {
              const maybeEvent = registration.createCancelEvent(cancelError, path);
              if (maybeEvent) {
                  cancelEvents.push(maybeEvent);
              }
          });
      }
      if (eventRegistration) {
          let remaining = [];
          for (let i = 0; i < view.eventRegistrations_.length; ++i) {
              const existing = view.eventRegistrations_[i];
              if (!existing.matches(eventRegistration)) {
                  remaining.push(existing);
              }
              else if (eventRegistration.hasAnyCallback()) {
                  // We're removing just this one
                  remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));
                  break;
              }
          }
          view.eventRegistrations_ = remaining;
      }
      else {
          view.eventRegistrations_ = [];
      }
      return cancelEvents;
  }
  /**
   * Applies the given Operation, updates our cache, and returns the appropriate events.
   */
  function viewApplyOperation(view, operation, writesCache, completeServerCache) {
      if (operation.type === OperationType.MERGE &&
          operation.source.queryId !== null) {
          assert$1(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');
          assert$1(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');
      }
      const oldViewCache = view.viewCache_;
      const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);
      viewProcessorAssertIndexed(view.processor_, result.viewCache);
      assert$1(result.viewCache.serverCache.isFullyInitialized() ||
          !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');
      view.viewCache_ = result.viewCache;
      return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);
  }
  function viewGetInitialEvents(view, registration) {
      const eventSnap = view.viewCache_.eventCache;
      const initialChanges = [];
      if (!eventSnap.getNode().isLeafNode()) {
          const eventNode = eventSnap.getNode();
          eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {
              initialChanges.push(changeChildAdded(key, childNode));
          });
      }
      if (eventSnap.isFullyInitialized()) {
          initialChanges.push(changeValue(eventSnap.getNode()));
      }
      return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);
  }
  function viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {
      const registrations = eventRegistration
          ? [eventRegistration]
          : view.eventRegistrations_;
      return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  let referenceConstructor$1;
  /**
   * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to
   * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes
   * and user writes (set, transaction, update).
   *
   * It's responsible for:
   *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).
   *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,
   *    applyUserOverwrite, etc.)
   */
  class SyncPoint {
      constructor() {
          /**
           * The Views being tracked at this location in the tree, stored as a map where the key is a
           * queryId and the value is the View for that query.
           *
           * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).
           */
          this.views = new Map();
      }
  }
  function syncPointSetReferenceConstructor(val) {
      assert$1(!referenceConstructor$1, '__referenceConstructor has already been defined');
      referenceConstructor$1 = val;
  }
  function syncPointGetReferenceConstructor() {
      assert$1(referenceConstructor$1, 'Reference.ts has not been loaded');
      return referenceConstructor$1;
  }
  function syncPointIsEmpty(syncPoint) {
      return syncPoint.views.size === 0;
  }
  function syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {
      const queryId = operation.source.queryId;
      if (queryId !== null) {
          const view = syncPoint.views.get(queryId);
          assert$1(view != null, 'SyncTree gave us an op for an invalid query.');
          return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);
      }
      else {
          let events = [];
          for (const view of syncPoint.views.values()) {
              events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));
          }
          return events;
      }
  }
  /**
   * Get a view for the specified query.
   *
   * @param query - The query to return a view for
   * @param writesCache
   * @param serverCache
   * @param serverCacheComplete
   * @returns Events to raise.
   */
  function syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {
      const queryId = query._queryIdentifier;
      const view = syncPoint.views.get(queryId);
      if (!view) {
          // TODO: make writesCache take flag for complete server node
          let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);
          let eventCacheComplete = false;
          if (eventCache) {
              eventCacheComplete = true;
          }
          else if (serverCache instanceof ChildrenNode) {
              eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);
              eventCacheComplete = false;
          }
          else {
              eventCache = ChildrenNode.EMPTY_NODE;
              eventCacheComplete = false;
          }
          const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));
          return new View(query, viewCache);
      }
      return view;
  }
  /**
   * Add an event callback for the specified query.
   *
   * @param query
   * @param eventRegistration
   * @param writesCache
   * @param serverCache - Complete server cache, if we have it.
   * @param serverCacheComplete
   * @returns Events to raise.
   */
  function syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {
      const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);
      if (!syncPoint.views.has(query._queryIdentifier)) {
          syncPoint.views.set(query._queryIdentifier, view);
      }
      // This is guaranteed to exist now, we just created anything that was missing
      viewAddEventRegistration(view, eventRegistration);
      return viewGetInitialEvents(view, eventRegistration);
  }
  /**
   * Remove event callback(s).  Return cancelEvents if a cancelError is specified.
   *
   * If query is the default query, we'll check all views for the specified eventRegistration.
   * If eventRegistration is null, we'll remove all callbacks for the specified view(s).
   *
   * @param eventRegistration - If null, remove all callbacks.
   * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.
   * @returns removed queries and any cancel events
   */
  function syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {
      const queryId = query._queryIdentifier;
      const removed = [];
      let cancelEvents = [];
      const hadCompleteView = syncPointHasCompleteView(syncPoint);
      if (queryId === 'default') {
          // When you do ref.off(...), we search all views for the registration to remove.
          for (const [viewQueryId, view] of syncPoint.views.entries()) {
              cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));
              if (viewIsEmpty(view)) {
                  syncPoint.views.delete(viewQueryId);
                  // We'll deal with complete views later.
                  if (!view.query._queryParams.loadsAllData()) {
                      removed.push(view.query);
                  }
              }
          }
      }
      else {
          // remove the callback from the specific view.
          const view = syncPoint.views.get(queryId);
          if (view) {
              cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));
              if (viewIsEmpty(view)) {
                  syncPoint.views.delete(queryId);
                  // We'll deal with complete views later.
                  if (!view.query._queryParams.loadsAllData()) {
                      removed.push(view.query);
                  }
              }
          }
      }
      if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {
          // We removed our last complete view.
          removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));
      }
      return { removed, events: cancelEvents };
  }
  function syncPointGetQueryViews(syncPoint) {
      const result = [];
      for (const view of syncPoint.views.values()) {
          if (!view.query._queryParams.loadsAllData()) {
              result.push(view);
          }
      }
      return result;
  }
  /**
   * @param path - The path to the desired complete snapshot
   * @returns A complete cache, if it exists
   */
  function syncPointGetCompleteServerCache(syncPoint, path) {
      let serverCache = null;
      for (const view of syncPoint.views.values()) {
          serverCache = serverCache || viewGetCompleteServerCache(view, path);
      }
      return serverCache;
  }
  function syncPointViewForQuery(syncPoint, query) {
      const params = query._queryParams;
      if (params.loadsAllData()) {
          return syncPointGetCompleteView(syncPoint);
      }
      else {
          const queryId = query._queryIdentifier;
          return syncPoint.views.get(queryId);
      }
  }
  function syncPointViewExistsForQuery(syncPoint, query) {
      return syncPointViewForQuery(syncPoint, query) != null;
  }
  function syncPointHasCompleteView(syncPoint) {
      return syncPointGetCompleteView(syncPoint) != null;
  }
  function syncPointGetCompleteView(syncPoint) {
      for (const view of syncPoint.views.values()) {
          if (view.query._queryParams.loadsAllData()) {
              return view;
          }
      }
      return null;
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  let referenceConstructor;
  function syncTreeSetReferenceConstructor(val) {
      assert$1(!referenceConstructor, '__referenceConstructor has already been defined');
      referenceConstructor = val;
  }
  function syncTreeGetReferenceConstructor() {
      assert$1(referenceConstructor, 'Reference.ts has not been loaded');
      return referenceConstructor;
  }
  /**
   * Static tracker for next query tag.
   */
  let syncTreeNextQueryTag_ = 1;
  /**
   * SyncTree is the central class for managing event callback registration, data caching, views
   * (query processing), and event generation.  There are typically two SyncTree instances for
   * each Repo, one for the normal Firebase data, and one for the .info data.
   *
   * It has a number of responsibilities, including:
   *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).
   *  - Applying and caching data changes for user set(), transaction(), and update() calls
   *    (applyUserOverwrite(), applyUserMerge()).
   *  - Applying and caching data changes for server data changes (applyServerOverwrite(),
   *    applyServerMerge()).
   *  - Generating user-facing events for server and user changes (all of the apply* methods
   *    return the set of events that need to be raised as a result).
   *  - Maintaining the appropriate set of server listens to ensure we are always subscribed
   *    to the correct set of paths and queries to satisfy the current set of user event
   *    callbacks (listens are started/stopped using the provided listenProvider).
   *
   * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual
   * events are returned to the caller rather than raised synchronously.
   *
   */
  class SyncTree {
      /**
       * @param listenProvider_ - Used by SyncTree to start / stop listening
       *   to server data.
       */
      constructor(listenProvider_) {
          this.listenProvider_ = listenProvider_;
          /**
           * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.
           */
          this.syncPointTree_ = new ImmutableTree(null);
          /**
           * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).
           */
          this.pendingWriteTree_ = newWriteTree();
          this.tagToQueryMap = new Map();
          this.queryToTagMap = new Map();
      }
  }
  /**
   * Apply the data changes for a user-generated set() or transaction() call.
   *
   * @returns Events to raise.
   */
  function syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {
      // Record pending write.
      writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);
      if (!visible) {
          return [];
      }
      else {
          return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));
      }
  }
  /**
   * Apply the data from a user-generated update() call
   *
   * @returns Events to raise.
   */
  function syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {
      // Record pending merge.
      writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);
      const changeTree = ImmutableTree.fromObject(changedChildren);
      return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));
  }
  /**
   * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().
   *
   * @param revert - True if the given write failed and needs to be reverted
   * @returns Events to raise.
   */
  function syncTreeAckUserWrite(syncTree, writeId, revert = false) {
      const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);
      const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);
      if (!needToReevaluate) {
          return [];
      }
      else {
          let affectedTree = new ImmutableTree(null);
          if (write.snap != null) {
              // overwrite
              affectedTree = affectedTree.set(newEmptyPath(), true);
          }
          else {
              each(write.children, (pathString) => {
                  affectedTree = affectedTree.set(new Path(pathString), true);
              });
          }
          return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));
      }
  }
  /**
   * Apply new server data for the specified path..
   *
   * @returns Events to raise.
   */
  function syncTreeApplyServerOverwrite(syncTree, path, newData) {
      return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));
  }
  /**
   * Apply new server data to be merged in at the specified path.
   *
   * @returns Events to raise.
   */
  function syncTreeApplyServerMerge(syncTree, path, changedChildren) {
      const changeTree = ImmutableTree.fromObject(changedChildren);
      return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));
  }
  /**
   * Apply a listen complete for a query
   *
   * @returns Events to raise.
   */
  function syncTreeApplyListenComplete(syncTree, path) {
      return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));
  }
  /**
   * Apply a listen complete for a tagged query
   *
   * @returns Events to raise.
   */
  function syncTreeApplyTaggedListenComplete(syncTree, path, tag) {
      const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);
      if (queryKey) {
          const r = syncTreeParseQueryKey_(queryKey);
          const queryPath = r.path, queryId = r.queryId;
          const relativePath = newRelativePath(queryPath, path);
          const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);
          return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
      }
      else {
          // We've already removed the query. No big deal, ignore the update
          return [];
      }
  }
  /**
   * Remove event callback(s).
   *
   * If query is the default query, we'll check all queries for the specified eventRegistration.
   * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.
   *
   * @param eventRegistration - If null, all callbacks are removed.
   * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.
   * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no
   *  deduping needs to take place. This flag allows toggling of that behavior
   * @returns Cancel events, if cancelError was provided.
   */
  function syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError, skipListenerDedup = false) {
      // Find the syncPoint first. Then deal with whether or not it has matching listeners
      const path = query._path;
      const maybeSyncPoint = syncTree.syncPointTree_.get(path);
      let cancelEvents = [];
      // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without
      // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and
      // not loadsAllData().
      if (maybeSyncPoint &&
          (query._queryIdentifier === 'default' ||
              syncPointViewExistsForQuery(maybeSyncPoint, query))) {
          const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);
          if (syncPointIsEmpty(maybeSyncPoint)) {
              syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);
          }
          const removed = removedAndEvents.removed;
          cancelEvents = removedAndEvents.events;
          if (!skipListenerDedup) {
              /**
               * We may have just removed one of many listeners and can short-circuit this whole process
               * We may also not have removed a default listener, in which case all of the descendant listeners should already be
               * properly set up.
               */
              // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of
              // queryId === 'default'
              const removingDefault = -1 !==
                  removed.findIndex(query => {
                      return query._queryParams.loadsAllData();
                  });
              const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));
              if (removingDefault && !covered) {
                  const subtree = syncTree.syncPointTree_.subtree(path);
                  // There are potentially child listeners. Determine what if any listens we need to send before executing the
                  // removal
                  if (!subtree.isEmpty()) {
                      // We need to fold over our subtree and collect the listeners to send
                      const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);
                      // Ok, we've collected all the listens we need. Set them up.
                      for (let i = 0; i < newViews.length; ++i) {
                          const view = newViews[i], newQuery = view.query;
                          const listener = syncTreeCreateListenerForView_(syncTree, view);
                          syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery(syncTree, newQuery), listener.hashFn, listener.onComplete);
                      }
                  }
                  // Otherwise there's nothing below us, so nothing we need to start listening on
              }
              // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query
              // The above block has us covered in terms of making sure we're set up on listens lower in the tree.
              // Also, note that if we have a cancelError, it's already been removed at the provider level.
              if (!covered && removed.length > 0 && !cancelError) {
                  // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one
                  // default. Otherwise, we need to iterate through and cancel each individual query
                  if (removingDefault) {
                      // We don't tag default listeners
                      const defaultTag = null;
                      syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);
                  }
                  else {
                      removed.forEach((queryToRemove) => {
                          const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));
                          syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);
                      });
                  }
              }
          }
          // Now, clear all of the tags we're tracking for the removed listens
          syncTreeRemoveTags_(syncTree, removed);
      }
      return cancelEvents;
  }
  /**
   * Apply new server data for the specified tagged query.
   *
   * @returns Events to raise.
   */
  function syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {
      const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);
      if (queryKey != null) {
          const r = syncTreeParseQueryKey_(queryKey);
          const queryPath = r.path, queryId = r.queryId;
          const relativePath = newRelativePath(queryPath, path);
          const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);
          return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
      }
      else {
          // Query must have been removed already
          return [];
      }
  }
  /**
   * Apply server data to be merged in for the specified tagged query.
   *
   * @returns Events to raise.
   */
  function syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {
      const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);
      if (queryKey) {
          const r = syncTreeParseQueryKey_(queryKey);
          const queryPath = r.path, queryId = r.queryId;
          const relativePath = newRelativePath(queryPath, path);
          const changeTree = ImmutableTree.fromObject(changedChildren);
          const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);
          return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
      }
      else {
          // We've already removed the query. No big deal, ignore the update
          return [];
      }
  }
  /**
   * Add an event callback for the specified query.
   *
   * @returns Events to raise.
   */
  function syncTreeAddEventRegistration(syncTree, query, eventRegistration, skipSetupListener = false) {
      const path = query._path;
      let serverCache = null;
      let foundAncestorDefaultView = false;
      // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
      // Consider optimizing this once there's a better understanding of what actual behavior will be.
      syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {
          const relativePath = newRelativePath(pathToSyncPoint, path);
          serverCache =
              serverCache || syncPointGetCompleteServerCache(sp, relativePath);
          foundAncestorDefaultView =
              foundAncestorDefaultView || syncPointHasCompleteView(sp);
      });
      let syncPoint = syncTree.syncPointTree_.get(path);
      if (!syncPoint) {
          syncPoint = new SyncPoint();
          syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);
      }
      else {
          foundAncestorDefaultView =
              foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);
          serverCache =
              serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
      }
      let serverCacheComplete;
      if (serverCache != null) {
          serverCacheComplete = true;
      }
      else {
          serverCacheComplete = false;
          serverCache = ChildrenNode.EMPTY_NODE;
          const subtree = syncTree.syncPointTree_.subtree(path);
          subtree.foreachChild((childName, childSyncPoint) => {
              const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());
              if (completeCache) {
                  serverCache = serverCache.updateImmediateChild(childName, completeCache);
              }
          });
      }
      const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);
      if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {
          // We need to track a tag for this query
          const queryKey = syncTreeMakeQueryKey_(query);
          assert$1(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');
          const tag = syncTreeGetNextQueryTag_();
          syncTree.queryToTagMap.set(queryKey, tag);
          syncTree.tagToQueryMap.set(tag, queryKey);
      }
      const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);
      let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);
      if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {
          const view = syncPointViewForQuery(syncPoint, query);
          events = events.concat(syncTreeSetupListener_(syncTree, query, view));
      }
      return events;
  }
  /**
   * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a
   * listener above it, we will get a false "null". This shouldn't be a problem because transactions will always
   * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->
   *     <incremented total> as the write is applied locally and then acknowledged at the server.
   *
   * Note: this method will *include* hidden writes from transaction with applyLocally set to false.
   *
   * @param path - The path to the data we want
   * @param writeIdsToExclude - A specific set to be excluded
   */
  function syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {
      const includeHiddenSets = true;
      const writeTree = syncTree.pendingWriteTree_;
      const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {
          const relativePath = newRelativePath(pathSoFar, path);
          const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);
          if (serverCache) {
              return serverCache;
          }
      });
      return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);
  }
  function syncTreeGetServerValue(syncTree, query) {
      const path = query._path;
      let serverCache = null;
      // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
      // Consider optimizing this once there's a better understanding of what actual behavior will be.
      syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {
          const relativePath = newRelativePath(pathToSyncPoint, path);
          serverCache =
              serverCache || syncPointGetCompleteServerCache(sp, relativePath);
      });
      let syncPoint = syncTree.syncPointTree_.get(path);
      if (!syncPoint) {
          syncPoint = new SyncPoint();
          syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);
      }
      else {
          serverCache =
              serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
      }
      const serverCacheComplete = serverCache != null;
      const serverCacheNode = serverCacheComplete
          ? new CacheNode(serverCache, true, false)
          : null;
      const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);
      const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);
      return viewGetCompleteNode(view);
  }
  /**
   * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.
   *
   * NOTES:
   * - Descendant SyncPoints will be visited first (since we raise events depth-first).
   *
   * - We call applyOperation() on each SyncPoint passing three things:
   *   1. A version of the Operation that has been made relative to the SyncPoint location.
   *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.
   *   3. A snapshot Node with cached server data, if we have it.
   *
   * - We concatenate all of the events returned by each SyncPoint and return the result.
   */
  function syncTreeApplyOperationToSyncPoints_(syncTree, operation) {
      return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, 
      /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));
  }
  /**
   * Recursive helper for applyOperationToSyncPoints_
   */
  function syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {
      if (pathIsEmpty(operation.path)) {
          return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);
      }
      else {
          const syncPoint = syncPointTree.get(newEmptyPath());
          // If we don't have cached server data, see if we can get it from this SyncPoint.
          if (serverCache == null && syncPoint != null) {
              serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
          }
          let events = [];
          const childName = pathGetFront(operation.path);
          const childOperation = operation.operationForChild(childName);
          const childTree = syncPointTree.children.get(childName);
          if (childTree && childOperation) {
              const childServerCache = serverCache
                  ? serverCache.getImmediateChild(childName)
                  : null;
              const childWritesCache = writeTreeRefChild(writesCache, childName);
              events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));
          }
          if (syncPoint) {
              events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));
          }
          return events;
      }
  }
  /**
   * Recursive helper for applyOperationToSyncPoints_
   */
  function syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {
      const syncPoint = syncPointTree.get(newEmptyPath());
      // If we don't have cached server data, see if we can get it from this SyncPoint.
      if (serverCache == null && syncPoint != null) {
          serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
      }
      let events = [];
      syncPointTree.children.inorderTraversal((childName, childTree) => {
          const childServerCache = serverCache
              ? serverCache.getImmediateChild(childName)
              : null;
          const childWritesCache = writeTreeRefChild(writesCache, childName);
          const childOperation = operation.operationForChild(childName);
          if (childOperation) {
              events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));
          }
      });
      if (syncPoint) {
          events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));
      }
      return events;
  }
  function syncTreeCreateListenerForView_(syncTree, view) {
      const query = view.query;
      const tag = syncTreeTagForQuery(syncTree, query);
      return {
          hashFn: () => {
              const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;
              return cache.hash();
          },
          onComplete: (status) => {
              if (status === 'ok') {
                  if (tag) {
                      return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);
                  }
                  else {
                      return syncTreeApplyListenComplete(syncTree, query._path);
                  }
              }
              else {
                  // If a listen failed, kill all of the listeners here, not just the one that triggered the error.
                  // Note that this may need to be scoped to just this listener if we change permissions on filtered children
                  const error = errorForServerCode(status, query);
                  return syncTreeRemoveEventRegistration(syncTree, query, 
                  /*eventRegistration*/ null, error);
              }
          }
      };
  }
  /**
   * Return the tag associated with the given query.
   */
  function syncTreeTagForQuery(syncTree, query) {
      const queryKey = syncTreeMakeQueryKey_(query);
      return syncTree.queryToTagMap.get(queryKey);
  }
  /**
   * Given a query, computes a "queryKey" suitable for use in our queryToTagMap_.
   */
  function syncTreeMakeQueryKey_(query) {
      return query._path.toString() + '$' + query._queryIdentifier;
  }
  /**
   * Return the query associated with the given tag, if we have one
   */
  function syncTreeQueryKeyForTag_(syncTree, tag) {
      return syncTree.tagToQueryMap.get(tag);
  }
  /**
   * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.
   */
  function syncTreeParseQueryKey_(queryKey) {
      const splitIndex = queryKey.indexOf('$');
      assert$1(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');
      return {
          queryId: queryKey.substr(splitIndex + 1),
          path: new Path(queryKey.substr(0, splitIndex))
      };
  }
  /**
   * A helper method to apply tagged operations
   */
  function syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {
      const syncPoint = syncTree.syncPointTree_.get(queryPath);
      assert$1(syncPoint, "Missing sync point for query tag that we're tracking");
      const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);
      return syncPointApplyOperation(syncPoint, operation, writesCache, null);
  }
  /**
   * This collapses multiple unfiltered views into a single view, since we only need a single
   * listener for them.
   */
  function syncTreeCollectDistinctViewsForSubTree_(subtree) {
      return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {
          if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {
              const completeView = syncPointGetCompleteView(maybeChildSyncPoint);
              return [completeView];
          }
          else {
              // No complete view here, flatten any deeper listens into an array
              let views = [];
              if (maybeChildSyncPoint) {
                  views = syncPointGetQueryViews(maybeChildSyncPoint);
              }
              each(childMap, (_key, childViews) => {
                  views = views.concat(childViews);
              });
              return views;
          }
      });
  }
  /**
   * Normalizes a query to a query we send the server for listening
   *
   * @returns The normalized query
   */
  function syncTreeQueryForListening_(query) {
      if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {
          // We treat queries that load all data as default queries
          // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits
          // from Query
          return new (syncTreeGetReferenceConstructor())(query._repo, query._path);
      }
      else {
          return query;
      }
  }
  function syncTreeRemoveTags_(syncTree, queries) {
      for (let j = 0; j < queries.length; ++j) {
          const removedQuery = queries[j];
          if (!removedQuery._queryParams.loadsAllData()) {
              // We should have a tag for this
              const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);
              const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);
              syncTree.queryToTagMap.delete(removedQueryKey);
              syncTree.tagToQueryMap.delete(removedQueryTag);
          }
      }
  }
  /**
   * Static accessor for query tags.
   */
  function syncTreeGetNextQueryTag_() {
      return syncTreeNextQueryTag_++;
  }
  /**
   * For a given new listen, manage the de-duplication of outstanding subscriptions.
   *
   * @returns This method can return events to support synchronous data sources
   */
  function syncTreeSetupListener_(syncTree, query, view) {
      const path = query._path;
      const tag = syncTreeTagForQuery(syncTree, query);
      const listener = syncTreeCreateListenerForView_(syncTree, view);
      const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);
      const subtree = syncTree.syncPointTree_.subtree(path);
      // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we
      // may need to shadow other listens as well.
      if (tag) {
          assert$1(!syncPointHasCompleteView(subtree.value), "If we're adding a query, it shouldn't be shadowed");
      }
      else {
          // Shadow everything at or below this location, this is a default listener.
          const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {
              if (!pathIsEmpty(relativePath) &&
                  maybeChildSyncPoint &&
                  syncPointHasCompleteView(maybeChildSyncPoint)) {
                  return [syncPointGetCompleteView(maybeChildSyncPoint).query];
              }
              else {
                  // No default listener here, flatten any deeper queries into an array
                  let queries = [];
                  if (maybeChildSyncPoint) {
                      queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));
                  }
                  each(childMap, (_key, childQueries) => {
                      queries = queries.concat(childQueries);
                  });
                  return queries;
              }
          });
          for (let i = 0; i < queriesToStop.length; ++i) {
              const queryToStop = queriesToStop[i];
              syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery(syncTree, queryToStop));
          }
      }
      return events;
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  class ExistingValueProvider {
      constructor(node_) {
          this.node_ = node_;
      }
      getImmediateChild(childName) {
          const child = this.node_.getImmediateChild(childName);
          return new ExistingValueProvider(child);
      }
      node() {
          return this.node_;
      }
  }
  class DeferredValueProvider {
      constructor(syncTree, path) {
          this.syncTree_ = syncTree;
          this.path_ = path;
      }
      getImmediateChild(childName) {
          const childPath = pathChild(this.path_, childName);
          return new DeferredValueProvider(this.syncTree_, childPath);
      }
      node() {
          return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);
      }
  }
  /**
   * Generate placeholders for deferred values.
   */
  const generateWithValues = function (values) {
      values = values || {};
      values['timestamp'] = values['timestamp'] || new Date().getTime();
      return values;
  };
  /**
   * Value to use when firing local events. When writing server values, fire
   * local events with an approximate value, otherwise return value as-is.
   */
  const resolveDeferredLeafValue = function (value, existingVal, serverValues) {
      if (!value || typeof value !== 'object') {
          return value;
      }
      assert$1('.sv' in value, 'Unexpected leaf node or priority contents');
      if (typeof value['.sv'] === 'string') {
          return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);
      }
      else if (typeof value['.sv'] === 'object') {
          return resolveComplexDeferredValue(value['.sv'], existingVal);
      }
      else {
          assert$1(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));
      }
  };
  const resolveScalarDeferredValue = function (op, existing, serverValues) {
      switch (op) {
          case 'timestamp':
              return serverValues['timestamp'];
          default:
              assert$1(false, 'Unexpected server value: ' + op);
      }
  };
  const resolveComplexDeferredValue = function (op, existing, unused) {
      if (!op.hasOwnProperty('increment')) {
          assert$1(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));
      }
      const delta = op['increment'];
      if (typeof delta !== 'number') {
          assert$1(false, 'Unexpected increment value: ' + delta);
      }
      const existingNode = existing.node();
      assert$1(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');
      // Incrementing a non-number sets the value to the incremented amount
      if (!existingNode.isLeafNode()) {
          return delta;
      }
      const leaf = existingNode;
      const existingVal = leaf.getValue();
      if (typeof existingVal !== 'number') {
          return delta;
      }
      // No need to do over/underflow arithmetic here because JS only handles floats under the covers
      return existingVal + delta;
  };
  /**
   * Recursively replace all deferred values and priorities in the tree with the
   * specified generated replacement values.
   * @param path - path to which write is relative
   * @param node - new data written at path
   * @param syncTree - current data
   */
  const resolveDeferredValueTree = function (path, node, syncTree, serverValues) {
      return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);
  };
  /**
   * Recursively replace all deferred values and priorities in the node with the
   * specified generated replacement values.  If there are no server values in the node,
   * it'll be returned as-is.
   */
  const resolveDeferredValueSnapshot = function (node, existing, serverValues) {
      return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);
  };
  function resolveDeferredValue(node, existingVal, serverValues) {
      const rawPri = node.getPriority().val();
      const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);
      let newNode;
      if (node.isLeafNode()) {
          const leafNode = node;
          const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);
          if (value !== leafNode.getValue() ||
              priority !== leafNode.getPriority().val()) {
              return new LeafNode(value, nodeFromJSON(priority));
          }
          else {
              return node;
          }
      }
      else {
          const childrenNode = node;
          newNode = childrenNode;
          if (priority !== childrenNode.getPriority().val()) {
              newNode = newNode.updatePriority(new LeafNode(priority));
          }
          childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {
              const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);
              if (newChildNode !== childNode) {
                  newNode = newNode.updateImmediateChild(childName, newChildNode);
              }
          });
          return newNode;
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A light-weight tree, traversable by path.  Nodes can have both values and children.
   * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty
   * children.
   */
  class Tree {
      /**
       * @param name - Optional name of the node.
       * @param parent - Optional parent node.
       * @param node - Optional node to wrap.
       */
      constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {
          this.name = name;
          this.parent = parent;
          this.node = node;
      }
  }
  /**
   * Returns a sub-Tree for the given path.
   *
   * @param pathObj - Path to look up.
   * @returns Tree for path.
   */
  function treeSubTree(tree, pathObj) {
      // TODO: Require pathObj to be Path?
      let path = pathObj instanceof Path ? pathObj : new Path(pathObj);
      let child = tree, next = pathGetFront(path);
      while (next !== null) {
          const childNode = safeGet(child.node.children, next) || {
              children: {},
              childCount: 0
          };
          child = new Tree(next, child, childNode);
          path = pathPopFront(path);
          next = pathGetFront(path);
      }
      return child;
  }
  /**
   * Returns the data associated with this tree node.
   *
   * @returns The data or null if no data exists.
   */
  function treeGetValue(tree) {
      return tree.node.value;
  }
  /**
   * Sets data to this tree node.
   *
   * @param value - Value to set.
   */
  function treeSetValue(tree, value) {
      tree.node.value = value;
      treeUpdateParents(tree);
  }
  /**
   * @returns Whether the tree has any children.
   */
  function treeHasChildren(tree) {
      return tree.node.childCount > 0;
  }
  /**
   * @returns Whether the tree is empty (no value or children).
   */
  function treeIsEmpty(tree) {
      return treeGetValue(tree) === undefined && !treeHasChildren(tree);
  }
  /**
   * Calls action for each child of this tree node.
   *
   * @param action - Action to be called for each child.
   */
  function treeForEachChild(tree, action) {
      each(tree.node.children, (child, childTree) => {
          action(new Tree(child, tree, childTree));
      });
  }
  /**
   * Does a depth-first traversal of this node's descendants, calling action for each one.
   *
   * @param action - Action to be called for each child.
   * @param includeSelf - Whether to call action on this node as well. Defaults to
   *   false.
   * @param childrenFirst - Whether to call action on children before calling it on
   *   parent.
   */
  function treeForEachDescendant(tree, action, includeSelf, childrenFirst) {
      if (includeSelf && true) {
          action(tree);
      }
      treeForEachChild(tree, child => {
          treeForEachDescendant(child, action, true);
      });
  }
  /**
   * Calls action on each ancestor node.
   *
   * @param action - Action to be called on each parent; return
   *   true to abort.
   * @param includeSelf - Whether to call action on this node as well.
   * @returns true if the action callback returned true.
   */
  function treeForEachAncestor(tree, action, includeSelf) {
      let node = tree.parent;
      while (node !== null) {
          if (action(node)) {
              return true;
          }
          node = node.parent;
      }
      return false;
  }
  /**
   * @returns The path of this tree node, as a Path.
   */
  function treeGetPath(tree) {
      return new Path(tree.parent === null
          ? tree.name
          : treeGetPath(tree.parent) + '/' + tree.name);
  }
  /**
   * Adds or removes this child from its parent based on whether it's empty or not.
   */
  function treeUpdateParents(tree) {
      if (tree.parent !== null) {
          treeUpdateChild(tree.parent, tree.name, tree);
      }
  }
  /**
   * Adds or removes the passed child to this tree node, depending on whether it's empty.
   *
   * @param childName - The name of the child to update.
   * @param child - The child to update.
   */
  function treeUpdateChild(tree, childName, child) {
      const childEmpty = treeIsEmpty(child);
      const childExists = contains$1(tree.node.children, childName);
      if (childEmpty && childExists) {
          delete tree.node.children[childName];
          tree.node.childCount--;
          treeUpdateParents(tree);
      }
      else if (!childEmpty && !childExists) {
          tree.node.children[childName] = child.node;
          tree.node.childCount++;
          treeUpdateParents(tree);
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * True for invalid Firebase keys
   */
  const INVALID_KEY_REGEX_ = /[\[\].#$\/\u0000-\u001F\u007F]/;
  /**
   * True for invalid Firebase paths.
   * Allows '/' in paths.
   */
  const INVALID_PATH_REGEX_ = /[\[\].#$\u0000-\u001F\u007F]/;
  /**
   * Maximum number of characters to allow in leaf value
   */
  const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;
  const isValidKey = function (key) {
      return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));
  };
  const isValidPathString = function (pathString) {
      return (typeof pathString === 'string' &&
          pathString.length !== 0 &&
          !INVALID_PATH_REGEX_.test(pathString));
  };
  const isValidRootPathString = function (pathString) {
      if (pathString) {
          // Allow '/.info/' at the beginning.
          pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
      }
      return isValidPathString(pathString);
  };
  const isValidPriority = function (priority) {
      return (priority === null ||
          typeof priority === 'string' ||
          (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||
          (priority &&
              typeof priority === 'object' &&
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              contains$1(priority, '.sv')));
  };
  /**
   * Pre-validate a datum passed as an argument to Firebase function.
   */
  const validateFirebaseDataArg = function (fnName, value, path, optional) {
      validateFirebaseData(errorPrefix(fnName, 'value'), value, path);
  };
  /**
   * Validate a data object client-side before sending to server.
   */
  const validateFirebaseData = function (errorPrefix, data, path_) {
      const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;
      if (data === undefined) {
          throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));
      }
      if (typeof data === 'function') {
          throw new Error(errorPrefix +
              'contains a function ' +
              validationPathToErrorString(path) +
              ' with contents = ' +
              data.toString());
      }
      if (isInvalidJSONNumber(data)) {
          throw new Error(errorPrefix +
              'contains ' +
              data.toString() +
              ' ' +
              validationPathToErrorString(path));
      }
      // Check max leaf size, but try to avoid the utf8 conversion if we can.
      if (typeof data === 'string' &&
          data.length > MAX_LEAF_SIZE_ / 3 &&
          stringLength(data) > MAX_LEAF_SIZE_) {
          throw new Error(errorPrefix +
              'contains a string greater than ' +
              MAX_LEAF_SIZE_ +
              ' utf8 bytes ' +
              validationPathToErrorString(path) +
              " ('" +
              data.substring(0, 50) +
              "...')");
      }
      // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON
      // to save extra walking of large objects.
      if (data && typeof data === 'object') {
          let hasDotValue = false;
          let hasActualChild = false;
          each(data, (key, value) => {
              if (key === '.value') {
                  hasDotValue = true;
              }
              else if (key !== '.priority' && key !== '.sv') {
                  hasActualChild = true;
                  if (!isValidKey(key)) {
                      throw new Error(errorPrefix +
                          ' contains an invalid key (' +
                          key +
                          ') ' +
                          validationPathToErrorString(path) +
                          '.  Keys must be non-empty strings ' +
                          'and can\'t contain ".", "#", "$", "/", "[", or "]"');
                  }
              }
              validationPathPush(path, key);
              validateFirebaseData(errorPrefix, value, path);
              validationPathPop(path);
          });
          if (hasDotValue && hasActualChild) {
              throw new Error(errorPrefix +
                  ' contains ".value" child ' +
                  validationPathToErrorString(path) +
                  ' in addition to actual children.');
          }
      }
  };
  /**
   * Pre-validate paths passed in the firebase function.
   */
  const validateFirebaseMergePaths = function (errorPrefix, mergePaths) {
      let i, curPath;
      for (i = 0; i < mergePaths.length; i++) {
          curPath = mergePaths[i];
          const keys = pathSlice(curPath);
          for (let j = 0; j < keys.length; j++) {
              if (keys[j] === '.priority' && j === keys.length - 1) ;
              else if (!isValidKey(keys[j])) {
                  throw new Error(errorPrefix +
                      'contains an invalid key (' +
                      keys[j] +
                      ') in path ' +
                      curPath.toString() +
                      '. Keys must be non-empty strings ' +
                      'and can\'t contain ".", "#", "$", "/", "[", or "]"');
              }
          }
      }
      // Check that update keys are not descendants of each other.
      // We rely on the property that sorting guarantees that ancestors come
      // right before descendants.
      mergePaths.sort(pathCompare);
      let prevPath = null;
      for (i = 0; i < mergePaths.length; i++) {
          curPath = mergePaths[i];
          if (prevPath !== null && pathContains(prevPath, curPath)) {
              throw new Error(errorPrefix +
                  'contains a path ' +
                  prevPath.toString() +
                  ' that is ancestor of another path ' +
                  curPath.toString());
          }
          prevPath = curPath;
      }
  };
  /**
   * pre-validate an object passed as an argument to firebase function (
   * must be an object - e.g. for firebase.update()).
   */
  const validateFirebaseMergeDataArg = function (fnName, data, path, optional) {
      const errorPrefix$1 = errorPrefix(fnName, 'values');
      if (!(data && typeof data === 'object') || Array.isArray(data)) {
          throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');
      }
      const mergePaths = [];
      each(data, (key, value) => {
          const curPath = new Path(key);
          validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));
          if (pathGetBack(curPath) === '.priority') {
              if (!isValidPriority(value)) {
                  throw new Error(errorPrefix$1 +
                      "contains an invalid value for '" +
                      curPath.toString() +
                      "', which must be a valid " +
                      'Firebase priority (a string, finite number, server value, or null).');
              }
          }
          mergePaths.push(curPath);
      });
      validateFirebaseMergePaths(errorPrefix$1, mergePaths);
  };
  /**
   * @internal
   */
  const validatePathString = function (fnName, argumentName, pathString, optional) {
      if (!isValidPathString(pathString)) {
          throw new Error(errorPrefix(fnName, argumentName) +
              'was an invalid path = "' +
              pathString +
              '". Paths must be non-empty strings and ' +
              'can\'t contain ".", "#", "$", "[", or "]"');
      }
  };
  const validateRootPathString = function (fnName, argumentName, pathString, optional) {
      if (pathString) {
          // Allow '/.info/' at the beginning.
          pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
      }
      validatePathString(fnName, argumentName, pathString);
  };
  /**
   * @internal
   */
  const validateWritablePath = function (fnName, path) {
      if (pathGetFront(path) === '.info') {
          throw new Error(fnName + " failed = Can't modify data under /.info/");
      }
  };
  const validateUrl = function (fnName, parsedUrl) {
      // TODO = Validate server better.
      const pathString = parsedUrl.path.toString();
      if (!(typeof parsedUrl.repoInfo.host === 'string') ||
          parsedUrl.repoInfo.host.length === 0 ||
          (!isValidKey(parsedUrl.repoInfo.namespace) &&
              parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||
          (pathString.length !== 0 && !isValidRootPathString(pathString))) {
          throw new Error(errorPrefix(fnName, 'url') +
              'must be a valid firebase URL and ' +
              'the path can\'t contain ".", "#", "$", "[", or "]".');
      }
  };

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * The event queue serves a few purposes:
   * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more
   *    events being queued.
   * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,
   *    raiseQueuedEvents() is called again, the "inner" call will pick up raising events where the "outer" call
   *    left off, ensuring that the events are still raised synchronously and in order.
   * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued
   *    events are raised synchronously.
   *
   * NOTE: This can all go away if/when we move to async events.
   *
   */
  class EventQueue {
      constructor() {
          this.eventLists_ = [];
          /**
           * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.
           */
          this.recursionDepth_ = 0;
      }
  }
  /**
   * @param eventDataList - The new events to queue.
   */
  function eventQueueQueueEvents(eventQueue, eventDataList) {
      // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.
      let currList = null;
      for (let i = 0; i < eventDataList.length; i++) {
          const data = eventDataList[i];
          const path = data.getPath();
          if (currList !== null && !pathEquals(path, currList.path)) {
              eventQueue.eventLists_.push(currList);
              currList = null;
          }
          if (currList === null) {
              currList = { events: [], path };
          }
          currList.events.push(data);
      }
      if (currList) {
          eventQueue.eventLists_.push(currList);
      }
  }
  /**
   * Queues the specified events and synchronously raises all events (including previously queued ones)
   * for the specified path.
   *
   * It is assumed that the new events are all for the specified path.
   *
   * @param path - The path to raise events for.
   * @param eventDataList - The new events to raise.
   */
  function eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {
      eventQueueQueueEvents(eventQueue, eventDataList);
      eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));
  }
  /**
   * Queues the specified events and synchronously raises all events (including previously queued ones) for
   * locations related to the specified change path (i.e. all ancestors and descendants).
   *
   * It is assumed that the new events are all related (ancestor or descendant) to the specified path.
   *
   * @param changedPath - The path to raise events for.
   * @param eventDataList - The events to raise
   */
  function eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {
      eventQueueQueueEvents(eventQueue, eventDataList);
      eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||
          pathContains(changedPath, eventPath));
  }
  function eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {
      eventQueue.recursionDepth_++;
      let sentAll = true;
      for (let i = 0; i < eventQueue.eventLists_.length; i++) {
          const eventList = eventQueue.eventLists_[i];
          if (eventList) {
              const eventPath = eventList.path;
              if (predicate(eventPath)) {
                  eventListRaise(eventQueue.eventLists_[i]);
                  eventQueue.eventLists_[i] = null;
              }
              else {
                  sentAll = false;
              }
          }
      }
      if (sentAll) {
          eventQueue.eventLists_ = [];
      }
      eventQueue.recursionDepth_--;
  }
  /**
   * Iterates through the list and raises each event
   */
  function eventListRaise(eventList) {
      for (let i = 0; i < eventList.events.length; i++) {
          const eventData = eventList.events[i];
          if (eventData !== null) {
              eventList.events[i] = null;
              const eventFn = eventData.getEventRunner();
              if (logger) {
                  log('event: ' + eventData.toString());
              }
              exceptionGuard(eventFn);
          }
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  const INTERRUPT_REASON = 'repo_interrupt';
  /**
   * If a transaction does not succeed after 25 retries, we abort it. Among other
   * things this ensure that if there's ever a bug causing a mismatch between
   * client / server hashes for some data, we won't retry indefinitely.
   */
  const MAX_TRANSACTION_RETRIES = 25;
  /**
   * A connection to a single data repository.
   */
  class Repo {
      constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {
          this.repoInfo_ = repoInfo_;
          this.forceRestClient_ = forceRestClient_;
          this.authTokenProvider_ = authTokenProvider_;
          this.appCheckProvider_ = appCheckProvider_;
          this.dataUpdateCount = 0;
          this.statsListener_ = null;
          this.eventQueue_ = new EventQueue();
          this.nextWriteId_ = 1;
          this.interceptServerDataCallback_ = null;
          /** A list of data pieces and paths to be set when this client disconnects. */
          this.onDisconnect_ = newSparseSnapshotTree();
          /** Stores queues of outstanding transactions for Firebase locations. */
          this.transactionQueueTree_ = new Tree();
          // TODO: This should be @private but it's used by test_access.js and internal.js
          this.persistentConnection_ = null;
          // This key is intentionally not updated if RepoInfo is later changed or replaced
          this.key = this.repoInfo_.toURLString();
      }
      /**
       * @returns The URL corresponding to the root of this Firebase.
       */
      toString() {
          return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);
      }
  }
  function repoStart(repo, appId, authOverride) {
      repo.stats_ = statsManagerGetCollection(repo.repoInfo_);
      if (repo.forceRestClient_ || beingCrawled()) {
          repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {
              repoOnDataUpdate(repo, pathString, data, isMerge, tag);
          }, repo.authTokenProvider_, repo.appCheckProvider_);
          // Minor hack: Fire onConnect immediately, since there's no actual connection.
          setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);
      }
      else {
          // Validate authOverride
          if (typeof authOverride !== 'undefined' && authOverride !== null) {
              if (typeof authOverride !== 'object') {
                  throw new Error('Only objects are supported for option databaseAuthVariableOverride');
              }
              try {
                  stringify(authOverride);
              }
              catch (e) {
                  throw new Error('Invalid authOverride provided: ' + e);
              }
          }
          repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {
              repoOnDataUpdate(repo, pathString, data, isMerge, tag);
          }, (connectStatus) => {
              repoOnConnectStatus(repo, connectStatus);
          }, (updates) => {
              repoOnServerInfoUpdate(repo, updates);
          }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);
          repo.server_ = repo.persistentConnection_;
      }
      repo.authTokenProvider_.addTokenChangeListener(token => {
          repo.server_.refreshAuthToken(token);
      });
      repo.appCheckProvider_.addTokenChangeListener(result => {
          repo.server_.refreshAppCheckToken(result.token);
      });
      // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),
      // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.
      repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));
      // Used for .info.
      repo.infoData_ = new SnapshotHolder();
      repo.infoSyncTree_ = new SyncTree({
          startListening: (query, tag, currentHashFn, onComplete) => {
              let infoEvents = [];
              const node = repo.infoData_.getNode(query._path);
              // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events
              // on initial data...
              if (!node.isEmpty()) {
                  infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);
                  setTimeout(() => {
                      onComplete('ok');
                  }, 0);
              }
              return infoEvents;
          },
          stopListening: () => { }
      });
      repoUpdateInfo(repo, 'connected', false);
      repo.serverSyncTree_ = new SyncTree({
          startListening: (query, tag, currentHashFn, onComplete) => {
              repo.server_.listen(query, currentHashFn, tag, (status, data) => {
                  const events = onComplete(status, data);
                  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);
              });
              // No synchronous events for network-backed sync trees
              return [];
          },
          stopListening: (query, tag) => {
              repo.server_.unlisten(query, tag);
          }
      });
  }
  /**
   * @returns The time in milliseconds, taking the server offset into account if we have one.
   */
  function repoServerTime(repo) {
      const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));
      const offset = offsetNode.val() || 0;
      return new Date().getTime() + offset;
  }
  /**
   * Generate ServerValues using some variables from the repo object.
   */
  function repoGenerateServerValues(repo) {
      return generateWithValues({
          timestamp: repoServerTime(repo)
      });
  }
  /**
   * Called by realtime when we get new messages from the server.
   */
  function repoOnDataUpdate(repo, pathString, data, isMerge, tag) {
      // For testing.
      repo.dataUpdateCount++;
      const path = new Path(pathString);
      data = repo.interceptServerDataCallback_
          ? repo.interceptServerDataCallback_(pathString, data)
          : data;
      let events = [];
      if (tag) {
          if (isMerge) {
              const taggedChildren = map(data, (raw) => nodeFromJSON(raw));
              events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);
          }
          else {
              const taggedSnap = nodeFromJSON(data);
              events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);
          }
      }
      else if (isMerge) {
          const changedChildren = map(data, (raw) => nodeFromJSON(raw));
          events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);
      }
      else {
          const snap = nodeFromJSON(data);
          events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);
      }
      let affectedPath = path;
      if (events.length > 0) {
          // Since we have a listener outstanding for each transaction, receiving any events
          // is a proxy for some change having occurred.
          affectedPath = repoRerunTransactions(repo, path);
      }
      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);
  }
  function repoOnConnectStatus(repo, connectStatus) {
      repoUpdateInfo(repo, 'connected', connectStatus);
      if (connectStatus === false) {
          repoRunOnDisconnectEvents(repo);
      }
  }
  function repoOnServerInfoUpdate(repo, updates) {
      each(updates, (key, value) => {
          repoUpdateInfo(repo, key, value);
      });
  }
  function repoUpdateInfo(repo, pathString, value) {
      const path = new Path('/.info/' + pathString);
      const newNode = nodeFromJSON(value);
      repo.infoData_.updateSnapshot(path, newNode);
      const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);
      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
  }
  function repoGetNextWriteId(repo) {
      return repo.nextWriteId_++;
  }
  /**
   * The purpose of `getValue` is to return the latest known value
   * satisfying `query`.
   *
   * This method will first check for in-memory cached values
   * belonging to active listeners. If they are found, such values
   * are considered to be the most up-to-date.
   *
   * If the client is not connected, this method will wait until the
   *  repo has established a connection and then request the value for `query`.
   * If the client is not able to retrieve the query result for another reason,
   * it reports an error.
   *
   * @param query - The query to surface a value for.
   */
  function repoGetValue(repo, query, eventRegistration) {
      // Only active queries are cached. There is no persisted cache.
      const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);
      if (cached != null) {
          return Promise.resolve(cached);
      }
      return repo.server_.get(query).then(payload => {
          const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());
          /**
           * Below we simulate the actions of an `onlyOnce` `onValue()` event where:
           * Add an event registration,
           * Update data at the path,
           * Raise any events,
           * Cleanup the SyncTree
           */
          syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration, true);
          let events;
          if (query._queryParams.loadsAllData()) {
              events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);
          }
          else {
              const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);
              events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);
          }
          /*
           * We need to raise events in the scenario where `get()` is called at a parent path, and
           * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting
           * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree
           * and its corresponding serverCache, including the child location where `onValue` is called. Then,
           * `onValue` will receive the event from the server, but look at the syncTree and see that the data received
           * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.
           * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and
           * ensure the corresponding child events will get fired.
           */
          eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);
          syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration, null, true);
          return node;
      }, err => {
          repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);
          return Promise.reject(new Error(err));
      });
  }
  function repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {
      repoLog(repo, 'set', {
          path: path.toString(),
          value: newVal,
          priority: newPriority
      });
      // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or
      // (b) store unresolved paths on JSON parse
      const serverValues = repoGenerateServerValues(repo);
      const newNodeUnresolved = nodeFromJSON(newVal, newPriority);
      const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);
      const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);
      const writeId = repoGetNextWriteId(repo);
      const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);
      eventQueueQueueEvents(repo.eventQueue_, events);
      repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {
          const success = status === 'ok';
          if (!success) {
              warn('set at ' + path + ' failed: ' + status);
          }
          const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);
          eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);
          repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
      });
      const affectedPath = repoAbortTransactions(repo, path);
      repoRerunTransactions(repo, affectedPath);
      // We queued the events above, so just flush the queue here
      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);
  }
  function repoUpdate(repo, path, childrenToMerge, onComplete) {
      repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });
      // Start with our existing data and merge each child into it.
      let empty = true;
      const serverValues = repoGenerateServerValues(repo);
      const changedChildren = {};
      each(childrenToMerge, (changedKey, changedValue) => {
          empty = false;
          changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);
      });
      if (!empty) {
          const writeId = repoGetNextWriteId(repo);
          const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);
          eventQueueQueueEvents(repo.eventQueue_, events);
          repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {
              const success = status === 'ok';
              if (!success) {
                  warn('update at ' + path + ' failed: ' + status);
              }
              const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);
              const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;
              eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);
              repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
          });
          each(childrenToMerge, (changedPath) => {
              const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));
              repoRerunTransactions(repo, affectedPath);
          });
          // We queued the events above, so just flush the queue here
          eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);
      }
      else {
          log("update() called with empty data.  Don't do anything.");
          repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);
      }
  }
  /**
   * Applies all of the changes stored up in the onDisconnect_ tree.
   */
  function repoRunOnDisconnectEvents(repo) {
      repoLog(repo, 'onDisconnectEvents');
      const serverValues = repoGenerateServerValues(repo);
      const resolvedOnDisconnectTree = newSparseSnapshotTree();
      sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {
          const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);
          sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);
      });
      let events = [];
      sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {
          events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));
          const affectedPath = repoAbortTransactions(repo, path);
          repoRerunTransactions(repo, affectedPath);
      });
      repo.onDisconnect_ = newSparseSnapshotTree();
      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);
  }
  function repoAddEventCallbackForQuery(repo, query, eventRegistration) {
      let events;
      if (pathGetFront(query._path) === '.info') {
          events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);
      }
      else {
          events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);
      }
      eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);
  }
  function repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {
      // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof
      // a little bit by handling the return values anyways.
      let events;
      if (pathGetFront(query._path) === '.info') {
          events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);
      }
      else {
          events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);
      }
      eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);
  }
  function repoInterrupt(repo) {
      if (repo.persistentConnection_) {
          repo.persistentConnection_.interrupt(INTERRUPT_REASON);
      }
  }
  function repoLog(repo, ...varArgs) {
      let prefix = '';
      if (repo.persistentConnection_) {
          prefix = repo.persistentConnection_.id + ':';
      }
      log(prefix, ...varArgs);
  }
  function repoCallOnCompleteCallback(repo, callback, status, errorReason) {
      if (callback) {
          exceptionGuard(() => {
              if (status === 'ok') {
                  callback(null);
              }
              else {
                  const code = (status || 'error').toUpperCase();
                  let message = code;
                  if (errorReason) {
                      message += ': ' + errorReason;
                  }
                  const error = new Error(message);
                  // eslint-disable-next-line @typescript-eslint/no-explicit-any
                  error.code = code;
                  callback(error);
              }
          });
      }
  }
  /**
   * @param excludeSets - A specific set to exclude
   */
  function repoGetLatestState(repo, path, excludeSets) {
      return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||
          ChildrenNode.EMPTY_NODE);
  }
  /**
   * Sends any already-run transactions that aren't waiting for outstanding
   * transactions to complete.
   *
   * Externally it's called with no arguments, but it calls itself recursively
   * with a particular transactionQueueTree node to recurse through the tree.
   *
   * @param node - transactionQueueTree node to start at.
   */
  function repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {
      // Before recursing, make sure any completed transactions are removed.
      if (!node) {
          repoPruneCompletedTransactionsBelowNode(repo, node);
      }
      if (treeGetValue(node)) {
          const queue = repoBuildTransactionQueue(repo, node);
          assert$1(queue.length > 0, 'Sending zero length transaction queue');
          const allRun = queue.every((transaction) => transaction.status === 0 /* TransactionStatus.RUN */);
          // If they're all run (and not sent), we can send them.  Else, we must wait.
          if (allRun) {
              repoSendTransactionQueue(repo, treeGetPath(node), queue);
          }
      }
      else if (treeHasChildren(node)) {
          treeForEachChild(node, childNode => {
              repoSendReadyTransactions(repo, childNode);
          });
      }
  }
  /**
   * Given a list of run transactions, send them to the server and then handle
   * the result (success or failure).
   *
   * @param path - The location of the queue.
   * @param queue - Queue of transactions under the specified location.
   */
  function repoSendTransactionQueue(repo, path, queue) {
      // Mark transactions as sent and increment retry count!
      const setsToIgnore = queue.map(txn => {
          return txn.currentWriteId;
      });
      const latestState = repoGetLatestState(repo, path, setsToIgnore);
      let snapToSend = latestState;
      const latestHash = latestState.hash();
      for (let i = 0; i < queue.length; i++) {
          const txn = queue[i];
          assert$1(txn.status === 0 /* TransactionStatus.RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');
          txn.status = 1 /* TransactionStatus.SENT */;
          txn.retryCount++;
          const relativePath = newRelativePath(path, txn.path);
          // If we've gotten to this point, the output snapshot must be defined.
          snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);
      }
      const dataToSend = snapToSend.val(true);
      const pathToSend = path;
      // Send the put.
      repo.server_.put(pathToSend.toString(), dataToSend, (status) => {
          repoLog(repo, 'transaction put response', {
              path: pathToSend.toString(),
              status
          });
          let events = [];
          if (status === 'ok') {
              // Queue up the callbacks and fire them after cleaning up all of our
              // transaction state, since the callback could trigger more
              // transactions or sets.
              const callbacks = [];
              for (let i = 0; i < queue.length; i++) {
                  queue[i].status = 2 /* TransactionStatus.COMPLETED */;
                  events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));
                  if (queue[i].onComplete) {
                      // We never unset the output snapshot, and given that this
                      // transaction is complete, it should be set
                      callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));
                  }
                  queue[i].unwatcher();
              }
              // Now remove the completed transactions.
              repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));
              // There may be pending transactions that we can now send.
              repoSendReadyTransactions(repo, repo.transactionQueueTree_);
              eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
              // Finally, trigger onComplete callbacks.
              for (let i = 0; i < callbacks.length; i++) {
                  exceptionGuard(callbacks[i]);
              }
          }
          else {
              // transactions are no longer sent.  Update their status appropriately.
              if (status === 'datastale') {
                  for (let i = 0; i < queue.length; i++) {
                      if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) {
                          queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;
                      }
                      else {
                          queue[i].status = 0 /* TransactionStatus.RUN */;
                      }
                  }
              }
              else {
                  warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);
                  for (let i = 0; i < queue.length; i++) {
                      queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;
                      queue[i].abortReason = status;
                  }
              }
              repoRerunTransactions(repo, path);
          }
      }, latestHash);
  }
  /**
   * Finds all transactions dependent on the data at changedPath and reruns them.
   *
   * Should be called any time cached data changes.
   *
   * Return the highest path that was affected by rerunning transactions. This
   * is the path at which events need to be raised for.
   *
   * @param changedPath - The path in mergedData that changed.
   * @returns The rootmost path that was affected by rerunning transactions.
   */
  function repoRerunTransactions(repo, changedPath) {
      const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);
      const path = treeGetPath(rootMostTransactionNode);
      const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);
      repoRerunTransactionQueue(repo, queue, path);
      return path;
  }
  /**
   * Does all the work of rerunning transactions (as well as cleans up aborted
   * transactions and whatnot).
   *
   * @param queue - The queue of transactions to run.
   * @param path - The path the queue is for.
   */
  function repoRerunTransactionQueue(repo, queue, path) {
      if (queue.length === 0) {
          return; // Nothing to do!
      }
      // Queue up the callbacks and fire them after cleaning up all of our
      // transaction state, since the callback could trigger more transactions or
      // sets.
      const callbacks = [];
      let events = [];
      // Ignore all of the sets we're going to re-run.
      const txnsToRerun = queue.filter(q => {
          return q.status === 0 /* TransactionStatus.RUN */;
      });
      const setsToIgnore = txnsToRerun.map(q => {
          return q.currentWriteId;
      });
      for (let i = 0; i < queue.length; i++) {
          const transaction = queue[i];
          const relativePath = newRelativePath(path, transaction.path);
          let abortTransaction = false, abortReason;
          assert$1(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');
          if (transaction.status === 4 /* TransactionStatus.NEEDS_ABORT */) {
              abortTransaction = true;
              abortReason = transaction.abortReason;
              events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
          }
          else if (transaction.status === 0 /* TransactionStatus.RUN */) {
              if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {
                  abortTransaction = true;
                  abortReason = 'maxretry';
                  events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
              }
              else {
                  // This code reruns a transaction
                  const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);
                  transaction.currentInputSnapshot = currentNode;
                  const newData = queue[i].update(currentNode.val());
                  if (newData !== undefined) {
                      validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);
                      let newDataNode = nodeFromJSON(newData);
                      const hasExplicitPriority = typeof newData === 'object' &&
                          newData != null &&
                          contains$1(newData, '.priority');
                      if (!hasExplicitPriority) {
                          // Keep the old priority if there wasn't a priority explicitly specified.
                          newDataNode = newDataNode.updatePriority(currentNode.getPriority());
                      }
                      const oldWriteId = transaction.currentWriteId;
                      const serverValues = repoGenerateServerValues(repo);
                      const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);
                      transaction.currentOutputSnapshotRaw = newDataNode;
                      transaction.currentOutputSnapshotResolved = newNodeResolved;
                      transaction.currentWriteId = repoGetNextWriteId(repo);
                      // Mutates setsToIgnore in place
                      setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);
                      events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));
                      events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));
                  }
                  else {
                      abortTransaction = true;
                      abortReason = 'nodata';
                      events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
                  }
              }
          }
          eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
          events = [];
          if (abortTransaction) {
              // Abort.
              queue[i].status = 2 /* TransactionStatus.COMPLETED */;
              // Removing a listener can trigger pruning which can muck with
              // mergedData/visibleData (as it prunes data). So defer the unwatcher
              // until we're done.
              (function (unwatcher) {
                  setTimeout(unwatcher, Math.floor(0));
              })(queue[i].unwatcher);
              if (queue[i].onComplete) {
                  if (abortReason === 'nodata') {
                      callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));
                  }
                  else {
                      callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));
                  }
              }
          }
      }
      // Clean up completed transactions.
      repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);
      // Now fire callbacks, now that we're in a good, known state.
      for (let i = 0; i < callbacks.length; i++) {
          exceptionGuard(callbacks[i]);
      }
      // Try to send the transaction result to the server.
      repoSendReadyTransactions(repo, repo.transactionQueueTree_);
  }
  /**
   * Returns the rootmost ancestor node of the specified path that has a pending
   * transaction on it, or just returns the node for the given path if there are
   * no pending transactions on any ancestor.
   *
   * @param path - The location to start at.
   * @returns The rootmost node with a transaction.
   */
  function repoGetAncestorTransactionNode(repo, path) {
      let front;
      // Start at the root and walk deeper into the tree towards path until we
      // find a node with pending transactions.
      let transactionNode = repo.transactionQueueTree_;
      front = pathGetFront(path);
      while (front !== null && treeGetValue(transactionNode) === undefined) {
          transactionNode = treeSubTree(transactionNode, front);
          path = pathPopFront(path);
          front = pathGetFront(path);
      }
      return transactionNode;
  }
  /**
   * Builds the queue of all transactions at or below the specified
   * transactionNode.
   *
   * @param transactionNode
   * @returns The generated queue.
   */
  function repoBuildTransactionQueue(repo, transactionNode) {
      // Walk any child transaction queues and aggregate them into a single queue.
      const transactionQueue = [];
      repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);
      // Sort them by the order the transactions were created.
      transactionQueue.sort((a, b) => a.order - b.order);
      return transactionQueue;
  }
  function repoAggregateTransactionQueuesForNode(repo, node, queue) {
      const nodeQueue = treeGetValue(node);
      if (nodeQueue) {
          for (let i = 0; i < nodeQueue.length; i++) {
              queue.push(nodeQueue[i]);
          }
      }
      treeForEachChild(node, child => {
          repoAggregateTransactionQueuesForNode(repo, child, queue);
      });
  }
  /**
   * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.
   */
  function repoPruneCompletedTransactionsBelowNode(repo, node) {
      const queue = treeGetValue(node);
      if (queue) {
          let to = 0;
          for (let from = 0; from < queue.length; from++) {
              if (queue[from].status !== 2 /* TransactionStatus.COMPLETED */) {
                  queue[to] = queue[from];
                  to++;
              }
          }
          queue.length = to;
          treeSetValue(node, queue.length > 0 ? queue : undefined);
      }
      treeForEachChild(node, childNode => {
          repoPruneCompletedTransactionsBelowNode(repo, childNode);
      });
  }
  /**
   * Aborts all transactions on ancestors or descendants of the specified path.
   * Called when doing a set() or update() since we consider them incompatible
   * with transactions.
   *
   * @param path - Path for which we want to abort related transactions.
   */
  function repoAbortTransactions(repo, path) {
      const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));
      const transactionNode = treeSubTree(repo.transactionQueueTree_, path);
      treeForEachAncestor(transactionNode, (node) => {
          repoAbortTransactionsOnNode(repo, node);
      });
      repoAbortTransactionsOnNode(repo, transactionNode);
      treeForEachDescendant(transactionNode, (node) => {
          repoAbortTransactionsOnNode(repo, node);
      });
      return affectedPath;
  }
  /**
   * Abort transactions stored in this transaction queue node.
   *
   * @param node - Node to abort transactions for.
   */
  function repoAbortTransactionsOnNode(repo, node) {
      const queue = treeGetValue(node);
      if (queue) {
          // Queue up the callbacks and fire them after cleaning up all of our
          // transaction state, since the callback could trigger more transactions
          // or sets.
          const callbacks = [];
          // Go through queue.  Any already-sent transactions must be marked for
          // abort, while the unsent ones can be immediately aborted and removed.
          let events = [];
          let lastSent = -1;
          for (let i = 0; i < queue.length; i++) {
              if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) ;
              else if (queue[i].status === 1 /* TransactionStatus.SENT */) {
                  assert$1(lastSent === i - 1, 'All SENT items should be at beginning of queue.');
                  lastSent = i;
                  // Mark transaction for abort when it comes back.
                  queue[i].status = 3 /* TransactionStatus.SENT_NEEDS_ABORT */;
                  queue[i].abortReason = 'set';
              }
              else {
                  assert$1(queue[i].status === 0 /* TransactionStatus.RUN */, 'Unexpected transaction status in abort');
                  // We can abort it immediately.
                  queue[i].unwatcher();
                  events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));
                  if (queue[i].onComplete) {
                      callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));
                  }
              }
          }
          if (lastSent === -1) {
              // We're not waiting for any sent transactions.  We can clear the queue.
              treeSetValue(node, undefined);
          }
          else {
              // Remove the transactions we aborted.
              queue.length = lastSent + 1;
          }
          // Now fire the callbacks.
          eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);
          for (let i = 0; i < callbacks.length; i++) {
              exceptionGuard(callbacks[i]);
          }
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function decodePath(pathString) {
      let pathStringDecoded = '';
      const pieces = pathString.split('/');
      for (let i = 0; i < pieces.length; i++) {
          if (pieces[i].length > 0) {
              let piece = pieces[i];
              try {
                  piece = decodeURIComponent(piece.replace(/\+/g, ' '));
              }
              catch (e) { }
              pathStringDecoded += '/' + piece;
          }
      }
      return pathStringDecoded;
  }
  /**
   * @returns key value hash
   */
  function decodeQuery(queryString) {
      const results = {};
      if (queryString.charAt(0) === '?') {
          queryString = queryString.substring(1);
      }
      for (const segment of queryString.split('&')) {
          if (segment.length === 0) {
              continue;
          }
          const kv = segment.split('=');
          if (kv.length === 2) {
              results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);
          }
          else {
              warn(`Invalid query segment '${segment}' in query '${queryString}'`);
          }
      }
      return results;
  }
  const parseRepoInfo = function (dataURL, nodeAdmin) {
      const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;
      if (parsedUrl.domain === 'firebase.com') {
          fatal(parsedUrl.host +
              ' is no longer supported. ' +
              'Please use <YOUR FIREBASE>.firebaseio.com instead');
      }
      // Catch common error of uninitialized namespace value.
      if ((!namespace || namespace === 'undefined') &&
          parsedUrl.domain !== 'localhost') {
          fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');
      }
      if (!parsedUrl.secure) {
          warnIfPageIsSecure();
      }
      const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';
      return {
          repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, 
          /*persistenceKey=*/ '', 
          /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),
          path: new Path(parsedUrl.pathString)
      };
  };
  const parseDatabaseURL = function (dataURL) {
      // Default to empty strings in the event of a malformed string.
      let host = '', domain = '', subdomain = '', pathString = '', namespace = '';
      // Always default to SSL, unless otherwise specified.
      let secure = true, scheme = 'https', port = 443;
      // Don't do any validation here. The caller is responsible for validating the result of parsing.
      if (typeof dataURL === 'string') {
          // Parse scheme.
          let colonInd = dataURL.indexOf('//');
          if (colonInd >= 0) {
              scheme = dataURL.substring(0, colonInd - 1);
              dataURL = dataURL.substring(colonInd + 2);
          }
          // Parse host, path, and query string.
          let slashInd = dataURL.indexOf('/');
          if (slashInd === -1) {
              slashInd = dataURL.length;
          }
          let questionMarkInd = dataURL.indexOf('?');
          if (questionMarkInd === -1) {
              questionMarkInd = dataURL.length;
          }
          host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));
          if (slashInd < questionMarkInd) {
              // For pathString, questionMarkInd will always come after slashInd
              pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));
          }
          const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));
          // If we have a port, use scheme for determining if it's secure.
          colonInd = host.indexOf(':');
          if (colonInd >= 0) {
              secure = scheme === 'https' || scheme === 'wss';
              port = parseInt(host.substring(colonInd + 1), 10);
          }
          else {
              colonInd = host.length;
          }
          const hostWithoutPort = host.slice(0, colonInd);
          if (hostWithoutPort.toLowerCase() === 'localhost') {
              domain = 'localhost';
          }
          else if (hostWithoutPort.split('.').length <= 2) {
              domain = hostWithoutPort;
          }
          else {
              // Interpret the subdomain of a 3 or more component URL as the namespace name.
              const dotInd = host.indexOf('.');
              subdomain = host.substring(0, dotInd).toLowerCase();
              domain = host.substring(dotInd + 1);
              // Normalize namespaces to lowercase to share storage / connection.
              namespace = subdomain;
          }
          // Always treat the value of the `ns` as the namespace name if it is present.
          if ('ns' in queryParams) {
              namespace = queryParams['ns'];
          }
      }
      return {
          host,
          port,
          domain,
          subdomain,
          secure,
          scheme,
          pathString,
          namespace
      };
  };

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * Encapsulates the data needed to raise an event
   */
  class DataEvent {
      /**
       * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed
       * @param eventRegistration - The function to call to with the event data. User provided
       * @param snapshot - The data backing the event
       * @param prevName - Optional, the name of the previous child for child_* events.
       */
      constructor(eventType, eventRegistration, snapshot, prevName) {
          this.eventType = eventType;
          this.eventRegistration = eventRegistration;
          this.snapshot = snapshot;
          this.prevName = prevName;
      }
      getPath() {
          const ref = this.snapshot.ref;
          if (this.eventType === 'value') {
              return ref._path;
          }
          else {
              return ref.parent._path;
          }
      }
      getEventType() {
          return this.eventType;
      }
      getEventRunner() {
          return this.eventRegistration.getEventRunner(this);
      }
      toString() {
          return (this.getPath().toString() +
              ':' +
              this.eventType +
              ':' +
              stringify(this.snapshot.exportVal()));
      }
  }
  class CancelEvent {
      constructor(eventRegistration, error, path) {
          this.eventRegistration = eventRegistration;
          this.error = error;
          this.path = path;
      }
      getPath() {
          return this.path;
      }
      getEventType() {
          return 'cancel';
      }
      getEventRunner() {
          return this.eventRegistration.getEventRunner(this);
      }
      toString() {
          return this.path.toString() + ':cancel';
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * A wrapper class that converts events from the database@exp SDK to the legacy
   * Database SDK. Events are not converted directly as event registration relies
   * on reference comparison of the original user callback (see `matches()`) and
   * relies on equality of the legacy SDK's `context` object.
   */
  class CallbackContext {
      constructor(snapshotCallback, cancelCallback) {
          this.snapshotCallback = snapshotCallback;
          this.cancelCallback = cancelCallback;
      }
      onValue(expDataSnapshot, previousChildName) {
          this.snapshotCallback.call(null, expDataSnapshot, previousChildName);
      }
      onCancel(error) {
          assert$1(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');
          return this.cancelCallback.call(null, error);
      }
      get hasCancelCallback() {
          return !!this.cancelCallback;
      }
      matches(other) {
          return (this.snapshotCallback === other.snapshotCallback ||
              (this.snapshotCallback.userCallback !== undefined &&
                  this.snapshotCallback.userCallback ===
                      other.snapshotCallback.userCallback &&
                  this.snapshotCallback.context === other.snapshotCallback.context));
      }
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * @internal
   */
  class QueryImpl {
      /**
       * @hideconstructor
       */
      constructor(_repo, _path, _queryParams, _orderByCalled) {
          this._repo = _repo;
          this._path = _path;
          this._queryParams = _queryParams;
          this._orderByCalled = _orderByCalled;
      }
      get key() {
          if (pathIsEmpty(this._path)) {
              return null;
          }
          else {
              return pathGetBack(this._path);
          }
      }
      get ref() {
          return new ReferenceImpl(this._repo, this._path);
      }
      get _queryIdentifier() {
          const obj = queryParamsGetQueryObject(this._queryParams);
          const id = ObjectToUniqueKey(obj);
          return id === '{}' ? 'default' : id;
      }
      /**
       * An object representation of the query parameters used by this Query.
       */
      get _queryObject() {
          return queryParamsGetQueryObject(this._queryParams);
      }
      isEqual(other) {
          other = getModularInstance(other);
          if (!(other instanceof QueryImpl)) {
              return false;
          }
          const sameRepo = this._repo === other._repo;
          const samePath = pathEquals(this._path, other._path);
          const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;
          return sameRepo && samePath && sameQueryIdentifier;
      }
      toJSON() {
          return this.toString();
      }
      toString() {
          return this._repo.toString() + pathToUrlEncodedString(this._path);
      }
  }
  /**
   * @internal
   */
  class ReferenceImpl extends QueryImpl {
      /** @hideconstructor */
      constructor(repo, path) {
          super(repo, path, new QueryParams(), false);
      }
      get parent() {
          const parentPath = pathParent(this._path);
          return parentPath === null
              ? null
              : new ReferenceImpl(this._repo, parentPath);
      }
      get root() {
          let ref = this;
          while (ref.parent !== null) {
              ref = ref.parent;
          }
          return ref;
      }
  }
  /**
   * A `DataSnapshot` contains data from a Database location.
   *
   * Any time you read data from the Database, you receive the data as a
   * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach
   * with `on()` or `once()`. You can extract the contents of the snapshot as a
   * JavaScript object by calling the `val()` method. Alternatively, you can
   * traverse into the snapshot by calling `child()` to return child snapshots
   * (which you could then call `val()` on).
   *
   * A `DataSnapshot` is an efficiently generated, immutable copy of the data at
   * a Database location. It cannot be modified and will never change (to modify
   * data, you always call the `set()` method on a `Reference` directly).
   */
  class DataSnapshot {
      /**
       * @param _node - A SnapshotNode to wrap.
       * @param ref - The location this snapshot came from.
       * @param _index - The iteration order for this snapshot
       * @hideconstructor
       */
      constructor(_node, 
      /**
       * The location of this DataSnapshot.
       */
      ref, _index) {
          this._node = _node;
          this.ref = ref;
          this._index = _index;
      }
      /**
       * Gets the priority value of the data in this `DataSnapshot`.
       *
       * Applications need not use priority but can order collections by
       * ordinary properties (see
       * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}
       * ).
       */
      get priority() {
          // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)
          return this._node.getPriority().val();
      }
      /**
       * The key (last part of the path) of the location of this `DataSnapshot`.
       *
       * The last token in a Database location is considered its key. For example,
       * "ada" is the key for the /users/ada/ node. Accessing the key on any
       * `DataSnapshot` will return the key for the location that generated it.
       * However, accessing the key on the root URL of a Database will return
       * `null`.
       */
      get key() {
          return this.ref.key;
      }
      /** Returns the number of child properties of this `DataSnapshot`. */
      get size() {
          return this._node.numChildren();
      }
      /**
       * Gets another `DataSnapshot` for the location at the specified relative path.
       *
       * Passing a relative path to the `child()` method of a DataSnapshot returns
       * another `DataSnapshot` for the location at the specified relative path. The
       * relative path can either be a simple child name (for example, "ada") or a
       * deeper, slash-separated path (for example, "ada/name/first"). If the child
       * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`
       * whose value is `null`) is returned.
       *
       * @param path - A relative path to the location of child data.
       */
      child(path) {
          const childPath = new Path(path);
          const childRef = child(this.ref, path);
          return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);
      }
      /**
       * Returns true if this `DataSnapshot` contains any data. It is slightly more
       * efficient than using `snapshot.val() !== null`.
       */
      exists() {
          return !this._node.isEmpty();
      }
      /**
       * Exports the entire contents of the DataSnapshot as a JavaScript object.
       *
       * The `exportVal()` method is similar to `val()`, except priority information
       * is included (if available), making it suitable for backing up your data.
       *
       * @returns The DataSnapshot's contents as a JavaScript value (Object,
       *   Array, string, number, boolean, or `null`).
       */
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      exportVal() {
          return this._node.val(true);
      }
      /**
       * Enumerates the top-level children in the `IteratedDataSnapshot`.
       *
       * Because of the way JavaScript objects work, the ordering of data in the
       * JavaScript object returned by `val()` is not guaranteed to match the
       * ordering on the server nor the ordering of `onChildAdded()` events. That is
       * where `forEach()` comes in handy. It guarantees the children of a
       * `DataSnapshot` will be iterated in their query order.
       *
       * If no explicit `orderBy*()` method is used, results are returned
       * ordered by key (unless priorities are used, in which case, results are
       * returned by priority).
       *
       * @param action - A function that will be called for each child DataSnapshot.
       * The callback can return true to cancel further enumeration.
       * @returns true if enumeration was canceled due to your callback returning
       * true.
       */
      forEach(action) {
          if (this._node.isLeafNode()) {
              return false;
          }
          const childrenNode = this._node;
          // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...
          return !!childrenNode.forEachChild(this._index, (key, node) => {
              return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));
          });
      }
      /**
       * Returns true if the specified child path has (non-null) data.
       *
       * @param path - A relative path to the location of a potential child.
       * @returns `true` if data exists at the specified child path; else
       *  `false`.
       */
      hasChild(path) {
          const childPath = new Path(path);
          return !this._node.getChild(childPath).isEmpty();
      }
      /**
       * Returns whether or not the `DataSnapshot` has any non-`null` child
       * properties.
       *
       * You can use `hasChildren()` to determine if a `DataSnapshot` has any
       * children. If it does, you can enumerate them using `forEach()`. If it
       * doesn't, then either this snapshot contains a primitive value (which can be
       * retrieved with `val()`) or it is empty (in which case, `val()` will return
       * `null`).
       *
       * @returns true if this snapshot has any children; else false.
       */
      hasChildren() {
          if (this._node.isLeafNode()) {
              return false;
          }
          else {
              return !this._node.isEmpty();
          }
      }
      /**
       * Returns a JSON-serializable representation of this object.
       */
      toJSON() {
          return this.exportVal();
      }
      /**
       * Extracts a JavaScript value from a `DataSnapshot`.
       *
       * Depending on the data in a `DataSnapshot`, the `val()` method may return a
       * scalar type (string, number, or boolean), an array, or an object. It may
       * also return null, indicating that the `DataSnapshot` is empty (contains no
       * data).
       *
       * @returns The DataSnapshot's contents as a JavaScript value (Object,
       *   Array, string, number, boolean, or `null`).
       */
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      val() {
          return this._node.val();
      }
  }
  /**
   *
   * Returns a `Reference` representing the location in the Database
   * corresponding to the provided path. If no path is provided, the `Reference`
   * will point to the root of the Database.
   *
   * @param db - The database instance to obtain a reference for.
   * @param path - Optional path representing the location the returned
   *   `Reference` will point. If not provided, the returned `Reference` will
   *   point to the root of the Database.
   * @returns If a path is provided, a `Reference`
   *   pointing to the provided path. Otherwise, a `Reference` pointing to the
   *   root of the Database.
   */
  function ref(db, path) {
      db = getModularInstance(db);
      db._checkNotDeleted('ref');
      return path !== undefined ? child(db._root, path) : db._root;
  }
  /**
   * Gets a `Reference` for the location at the specified relative path.
   *
   * The relative path can either be a simple child name (for example, "ada") or
   * a deeper slash-separated path (for example, "ada/name/first").
   *
   * @param parent - The parent location.
   * @param path - A relative path from this location to the desired child
   *   location.
   * @returns The specified child location.
   */
  function child(parent, path) {
      parent = getModularInstance(parent);
      if (pathGetFront(parent._path) === null) {
          validateRootPathString('child', 'path', path);
      }
      else {
          validatePathString('child', 'path', path);
      }
      return new ReferenceImpl(parent._repo, pathChild(parent._path, path));
  }
  /**
   * Removes the data at this Database location.
   *
   * Any data at child locations will also be deleted.
   *
   * The effect of the remove will be visible immediately and the corresponding
   * event 'value' will be triggered. Synchronization of the remove to the
   * Firebase servers will also be started, and the returned Promise will resolve
   * when complete. If provided, the onComplete callback will be called
   * asynchronously after synchronization has finished.
   *
   * @param ref - The location to remove.
   * @returns Resolves when remove on server is complete.
   */
  function remove(ref) {
      validateWritablePath('remove', ref._path);
      return set(ref, null);
  }
  /**
   * Writes data to this Database location.
   *
   * This will overwrite any data at this location and all child locations.
   *
   * The effect of the write will be visible immediately, and the corresponding
   * events ("value", "child_added", etc.) will be triggered. Synchronization of
   * the data to the Firebase servers will also be started, and the returned
   * Promise will resolve when complete. If provided, the `onComplete` callback
   * will be called asynchronously after synchronization has finished.
   *
   * Passing `null` for the new value is equivalent to calling `remove()`; namely,
   * all data at this location and all child locations will be deleted.
   *
   * `set()` will remove any priority stored at this location, so if priority is
   * meant to be preserved, you need to use `setWithPriority()` instead.
   *
   * Note that modifying data with `set()` will cancel any pending transactions
   * at that location, so extreme care should be taken if mixing `set()` and
   * `transaction()` to modify the same data.
   *
   * A single `set()` will generate a single "value" event at the location where
   * the `set()` was performed.
   *
   * @param ref - The location to write to.
   * @param value - The value to be written (string, number, boolean, object,
   *   array, or null).
   * @returns Resolves when write to server is complete.
   */
  function set(ref, value) {
      ref = getModularInstance(ref);
      validateWritablePath('set', ref._path);
      validateFirebaseDataArg('set', value, ref._path);
      const deferred = new Deferred();
      repoSetWithPriority(ref._repo, ref._path, value, 
      /*priority=*/ null, deferred.wrapCallback(() => { }));
      return deferred.promise;
  }
  /**
   * Writes multiple values to the Database at once.
   *
   * The `values` argument contains multiple property-value pairs that will be
   * written to the Database together. Each child property can either be a simple
   * property (for example, "name") or a relative path (for example,
   * "name/first") from the current location to the data to update.
   *
   * As opposed to the `set()` method, `update()` can be use to selectively update
   * only the referenced properties at the current location (instead of replacing
   * all the child properties at the current location).
   *
   * The effect of the write will be visible immediately, and the corresponding
   * events ('value', 'child_added', etc.) will be triggered. Synchronization of
   * the data to the Firebase servers will also be started, and the returned
   * Promise will resolve when complete. If provided, the `onComplete` callback
   * will be called asynchronously after synchronization has finished.
   *
   * A single `update()` will generate a single "value" event at the location
   * where the `update()` was performed, regardless of how many children were
   * modified.
   *
   * Note that modifying data with `update()` will cancel any pending
   * transactions at that location, so extreme care should be taken if mixing
   * `update()` and `transaction()` to modify the same data.
   *
   * Passing `null` to `update()` will remove the data at this location.
   *
   * See
   * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.
   *
   * @param ref - The location to write to.
   * @param values - Object containing multiple values.
   * @returns Resolves when update on server is complete.
   */
  function update(ref, values) {
      validateFirebaseMergeDataArg('update', values, ref._path);
      const deferred = new Deferred();
      repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));
      return deferred.promise;
  }
  /**
   * Gets the most up-to-date result for this query.
   *
   * @param query - The query to run.
   * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is
   * available, or rejects if the client is unable to return a value (e.g., if the
   * server is unreachable and there is nothing cached).
   */
  function get(query) {
      query = getModularInstance(query);
      const callbackContext = new CallbackContext(() => { });
      const container = new ValueEventRegistration(callbackContext);
      return repoGetValue(query._repo, query, container).then(node => {
          return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());
      });
  }
  /**
   * Represents registration for 'value' events.
   */
  class ValueEventRegistration {
      constructor(callbackContext) {
          this.callbackContext = callbackContext;
      }
      respondsTo(eventType) {
          return eventType === 'value';
      }
      createEvent(change, query) {
          const index = query._queryParams.getIndex();
          return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));
      }
      getEventRunner(eventData) {
          if (eventData.getEventType() === 'cancel') {
              return () => this.callbackContext.onCancel(eventData.error);
          }
          else {
              return () => this.callbackContext.onValue(eventData.snapshot, null);
          }
      }
      createCancelEvent(error, path) {
          if (this.callbackContext.hasCancelCallback) {
              return new CancelEvent(this, error, path);
          }
          else {
              return null;
          }
      }
      matches(other) {
          if (!(other instanceof ValueEventRegistration)) {
              return false;
          }
          else if (!other.callbackContext || !this.callbackContext) {
              // If no callback specified, we consider it to match any callback.
              return true;
          }
          else {
              return other.callbackContext.matches(this.callbackContext);
          }
      }
      hasAnyCallback() {
          return this.callbackContext !== null;
      }
  }
  function addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {
      const callbackContext = new CallbackContext(callback, undefined);
      const container = new ValueEventRegistration(callbackContext)
          ;
      repoAddEventCallbackForQuery(query._repo, query, container);
      return () => repoRemoveEventCallbackForQuery(query._repo, query, container);
  }
  function onValue(query, callback, cancelCallbackOrListenOptions, options) {
      return addEventListener(query, 'value', callback);
  }
  /**
   * Define reference constructor in various modules
   *
   * We are doing this here to avoid several circular
   * dependency issues
   */
  syncPointSetReferenceConstructor(ReferenceImpl);
  syncTreeSetReferenceConstructor(ReferenceImpl);

  /**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  /**
   * This variable is also defined in the firebase Node.js Admin SDK. Before
   * modifying this definition, consult the definition in:
   *
   * https://github.com/firebase/firebase-admin-node
   *
   * and make sure the two are consistent.
   */
  const FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';
  /**
   * Creates and caches `Repo` instances.
   */
  const repos = {};
  /**
   * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).
   */
  let useRestClient = false;
  /**
   * Update an existing `Repo` in place to point to a new host/port.
   */
  function repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {
      repo.repoInfo_ = new RepoInfo(`${host}:${port}`, 
      /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams, 
      /*isUsingEmulator=*/ true);
      if (tokenProvider) {
          repo.authTokenProvider_ = tokenProvider;
      }
  }
  /**
   * This function should only ever be called to CREATE a new database instance.
   * @internal
   */
  function repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {
      let dbUrl = url || app.options.databaseURL;
      if (dbUrl === undefined) {
          if (!app.options.projectId) {
              fatal("Can't determine Firebase Database URL. Be sure to include " +
                  ' a Project ID when calling firebase.initializeApp().');
          }
          log('Using default host for project ', app.options.projectId);
          dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;
      }
      let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);
      let repoInfo = parsedUrl.repoInfo;
      let dbEmulatorHost = undefined;
      if (typeof process !== 'undefined' && process.env) {
          dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];
      }
      if (dbEmulatorHost) {
          dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;
          parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);
          repoInfo = parsedUrl.repoInfo;
      }
      else {
          !parsedUrl.repoInfo.secure;
      }
      const authTokenProvider = new FirebaseAuthTokenProvider(app.name, app.options, authProvider);
      validateUrl('Invalid Firebase Database URL', parsedUrl);
      if (!pathIsEmpty(parsedUrl.path)) {
          fatal('Database URL must point to the root of a Firebase Database ' +
              '(not including a child path).');
      }
      const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));
      return new Database(repo, app);
  }
  /**
   * Remove the repo and make sure it is disconnected.
   *
   */
  function repoManagerDeleteRepo(repo, appName) {
      const appRepos = repos[appName];
      // This should never happen...
      if (!appRepos || appRepos[repo.key] !== repo) {
          fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);
      }
      repoInterrupt(repo);
      delete appRepos[repo.key];
  }
  /**
   * Ensures a repo doesn't already exist and then creates one using the
   * provided app.
   *
   * @param repoInfo - The metadata about the Repo
   * @returns The Repo object for the specified server / repoName.
   */
  function repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {
      let appRepos = repos[app.name];
      if (!appRepos) {
          appRepos = {};
          repos[app.name] = appRepos;
      }
      let repo = appRepos[repoInfo.toURLString()];
      if (repo) {
          fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');
      }
      repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);
      appRepos[repoInfo.toURLString()] = repo;
      return repo;
  }
  /**
   * Class representing a Firebase Realtime Database.
   */
  class Database {
      /** @hideconstructor */
      constructor(_repoInternal, 
      /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */
      app) {
          this._repoInternal = _repoInternal;
          this.app = app;
          /** Represents a `Database` instance. */
          this['type'] = 'database';
          /** Track if the instance has been used (root or repo accessed) */
          this._instanceStarted = false;
      }
      get _repo() {
          if (!this._instanceStarted) {
              repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);
              this._instanceStarted = true;
          }
          return this._repoInternal;
      }
      get _root() {
          if (!this._rootInternal) {
              this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());
          }
          return this._rootInternal;
      }
      _delete() {
          if (this._rootInternal !== null) {
              repoManagerDeleteRepo(this._repo, this.app.name);
              this._repoInternal = null;
              this._rootInternal = null;
          }
          return Promise.resolve();
      }
      _checkNotDeleted(apiName) {
          if (this._rootInternal === null) {
              fatal('Cannot call ' + apiName + ' on a deleted database.');
          }
      }
  }
  /**
   * Returns the instance of the Realtime Database SDK that is associated with the provided
   * {@link @firebase/app#FirebaseApp}. Initializes a new instance with default settings if
   * no instance exists or if the existing instance uses a custom database URL.
   *
   * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime
   * Database instance is associated with.
   * @param url - The URL of the Realtime Database instance to connect to. If not
   * provided, the SDK connects to the default instance of the Firebase App.
   * @returns The `Database` instance of the provided app.
   */
  function getDatabase(app = getApp(), url) {
      const db = _getProvider(app, 'database').getImmediate({
          identifier: url
      });
      if (!db._instanceStarted) {
          const emulator = getDefaultEmulatorHostnameAndPort('database');
          if (emulator) {
              connectDatabaseEmulator(db, ...emulator);
          }
      }
      return db;
  }
  /**
   * Modify the provided instance to communicate with the Realtime Database
   * emulator.
   *
   * <p>Note: This method must be called before performing any other operation.
   *
   * @param db - The instance to modify.
   * @param host - The emulator host (ex: localhost)
   * @param port - The emulator port (ex: 8080)
   * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules
   */
  function connectDatabaseEmulator(db, host, port, options = {}) {
      db = getModularInstance(db);
      db._checkNotDeleted('useEmulator');
      if (db._instanceStarted) {
          fatal('Cannot call useEmulator() after instance has already been initialized.');
      }
      const repo = db._repoInternal;
      let tokenProvider = undefined;
      if (repo.repoInfo_.nodeAdmin) {
          if (options.mockUserToken) {
              fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the "firebase" package instead of "firebase-admin".');
          }
          tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);
      }
      else if (options.mockUserToken) {
          const token = typeof options.mockUserToken === 'string'
              ? options.mockUserToken
              : createMockUserToken(options.mockUserToken, db.app.options.projectId);
          tokenProvider = new EmulatorTokenProvider(token);
      }
      // Modify the repo to apply emulator settings
      repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);
  }

  /**
   * @license
   * Copyright 2021 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function registerDatabase(variant) {
      setSDKVersion(SDK_VERSION$1);
      _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {
          const app = container.getProvider('app').getImmediate();
          const authProvider = container.getProvider('auth-internal');
          const appCheckProvider = container.getProvider('app-check-internal');
          return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);
      }, "PUBLIC" /* ComponentType.PUBLIC */).setMultipleInstances(true));
      registerVersion(name, version$1, variant);
      // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation
      registerVersion(name, version$1, 'esm2017');
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  PersistentConnection.prototype.simpleListen = function (pathString, onComplete) {
      this.sendRequest('q', { p: pathString }, onComplete);
  };
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  PersistentConnection.prototype.echo = function (data, onEcho) {
      this.sendRequest('echo', { d: data }, onEcho);
  };

  /**
   * Firebase Realtime Database
   *
   * @packageDocumentation
   */
  registerDatabase();

  // src/config-firebase/script.js


  // =====================
  // Configuración de Firebase
  // =====================
  const configuracionFirebaseAutoQuiz = {
    apiKey: "AIzaSyANIA0nk7P3RTo33P86jmW3GM6jMxxdoAs",
    authDomain: "moodlequizdatascraping.firebaseapp.com",
    databaseURL: "https://moodlequizdatascraping-default-rtdb.firebaseio.com",
    projectId: "moodlequizdatascraping",
    storageBucket: "moodlequizdatascraping.appspot.com",
    messagingSenderId: "782692660220",
    appId: "1:782692660220:web:8258d30da03e338f4c3879"
  };

  // Declaración de las variables que se exportarán
  let autenticacion = null;
  let database = null;

  // Inicializa Firebase solo si la URL incluye "altissia.org" o si la página es Moodle
  if (window.location.href.includes('altissia.org') || esPaginaMoodle$1()) {
    // Inicializa Firebase
    const app = initializeApp(configuracionFirebaseAutoQuiz);
    // Inicializa servicios de Firebase
    autenticacion = getAuth(app);
    database = getDatabase(app);

    // Exponer las variables en el objeto global `window` para depuración
    window.autenticacion = autenticacion;
    window.database = database;

   }

  var html = "<div id=\"barra-lateral-autoquizfillapp\">\r\n</div>\r\n<button id=\"boton-mostrar-ocultar-autoquizfillapp\">\r\n  <i class=\"fa-solid fa-angles-right\"></i>\r\n</button>\r\n";

  function styleInject(css, ref) {
    if ( ref === undefined ) ref = {};
    var insertAt = ref.insertAt;

    if (!css || typeof document === 'undefined') { return; }

    var head = document.head || document.getElementsByTagName('head')[0];
    var style = document.createElement('style');
    style.type = 'text/css';

    if (insertAt === 'top') {
      if (head.firstChild) {
        head.insertBefore(style, head.firstChild);
      } else {
        head.appendChild(style);
      }
    } else {
      head.appendChild(style);
    }

    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(document.createTextNode(css));
    }
  }

  var css_248z$7 = "/* Estilos para la barra lateral de AutoQuizFillApp */\r\n#barra-lateral-autoquizfillapp {\r\n  width: 27.5%; /* Define el ancho de la barra lateral como el 27.5% del ancho total del viewport */\r\n  min-width: 400px; /* Establece un ancho mínimo para asegurar que la barra no sea demasiado estrecha */\r\n  max-width: 500px; /* Establece un ancho máximo para evitar que la barra lateral ocupe demasiado espacio */\r\n  height: 100%; /* Hace que la barra lateral ocupe el 100% de la altura del viewport */\r\n  position: fixed; /* Posiciona la barra lateral de manera fija en la parte superior e izquierda de la ventana */\r\n  top: 0;\r\n  left: 0;\r\n  background-color: #ecf0f1; /* Define un color de fondo claro para la barra lateral */\r\n  padding: 15px; /* Añade un padding interno de 20px para espaciar el contenido */\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); /* Aplica una sombra para darle profundidad y separar visualmente la barra del contenido */\r\n  z-index: 9999; /* Asegura que la barra lateral esté por encima de otros elementos en la página */\r\n  display: flex; /* Configura el layout interno para usar flexbox */\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  /* overflow-y: auto; /* Permite el desplazamiento vertical si el contenido excede la altura de la barra */\r\n  scrollbar-width: none; /* Oculta la barra de desplazamiento en Firefox */\r\n  font-family: 'Poppins', sans-serif; /* Aplica la fuente Poppins a todo el contenido dentro de la barra lateral */\r\n}\r\n\r\n/* Estilos para ocultar la barra de desplazamiento en navegadores basados en WebKit (Chrome, Safari, Edge) */\r\n#barra-lateral-autoquizfillapp::-webkit-scrollbar {\r\n  display: none; /* Oculta la barra de desplazamiento en Chrome, Safari y Edge */\r\n}\r\n\r\n/* Estilos para el botón de mostrar/ocultar la barra lateral */\r\n#boton-mostrar-ocultar-autoquizfillapp {\r\n  position: fixed; /* Posiciona el botón de manera fija en la parte superior izquierda, ajustando según el ancho mínimo de la barra */\r\n  top: 20px;\r\n  left: 375px; /* Ajusta según el ancho mínimo */\r\n  z-index: 10000; /* Asegura que el botón esté por encima de otros elementos */\r\n  width: 40px; /* Define el tamaño del botón */\r\n  height: 40px;\r\n  cursor: pointer; /* Cambia el cursor a un puntero para indicar que es interactivo */\r\n  border: none; /* Elimina el borde predeterminado del botón */\r\n  background-color: #3498db; /* Establece un color de fondo azul para el botón */\r\n  color: #ffffff; /* Define el color del texto/icono dentro del botón */\r\n  border-radius: 5px; /* Aplica bordes redondeados al botón */\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2); /* Añade una sombra para darle profundidad */\r\n  display: flex; /* Configura el layout interno para centrar el contenido (icono) */\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 18px; /* Aumenta el tamaño de la fuente del icono */\r\n}\r\n\r\n/* Estilos para los iconos de FontAwesome */\r\n.fa-classic, .fa-regular, .fa-solid, .far, .fas {\r\n  font-family: \"Font Awesome 6 Free\";\r\n}\r\n\r\n\r\n\r\n/* Estilos Adicionales Opcionales */\r\n\r\n/* Enlaces dentro de la Barra Lateral */\r\n#barra-lateral-autoquizfillapp a {\r\n    color: #0066cc;\r\n    text-decoration: none;\r\n}\r\n\r\n#barra-lateral-autoquizfillapp a:hover {\r\n    text-decoration: underline;\r\n}\r\n\r\n\r\n/* Sobrescribir estilos para párrafos dentro de #barra-lateral-autoquizfillapp */\r\n#barra-lateral-autoquizfillapp p {\r\n  margin-top: 0;           /* Restablece el margen superior */\r\n  margin-bottom: 0;        /* Restablece el margen inferior */\r\n  /* Puedes añadir más propiedades para personalizar según tus necesidades */\r\n  /* Por ejemplo: */\r\n  /* font-size: 1rem; */\r\n  /* color: #000; */\r\n}\r\n\r\n/* Sobrescribir el selector universal dentro de #barra-lateral-autoquizfillapp */\r\n#barra-lateral-autoquizfillapp,\r\n#barra-lateral-autoquizfillapp *,\r\n#barra-lateral-autoquizfillapp *::before,\r\n#barra-lateral-autoquizfillapp *::after {\r\n    box-sizing: border-box; /* O el valor que prefieras */\r\n    /* Restablece o define otras propiedades del selector universal si es necesario */\r\n}\r\n\r\n";
  styleInject(css_248z$7);

  /**
   * Lexing or parsing positional information for error reporting.
   * This object is immutable.
   */
  class SourceLocation {
    // The + prefix indicates that these fields aren't writeable
    // Lexer holding the input string.
    // Start offset, zero-based inclusive.
    // End offset, zero-based exclusive.
    constructor(lexer, start, end) {
      this.lexer = undefined;
      this.start = undefined;
      this.end = undefined;
      this.lexer = lexer;
      this.start = start;
      this.end = end;
    }
    /**
     * Merges two `SourceLocation`s from location providers, given they are
     * provided in order of appearance.
     * - Returns the first one's location if only the first is provided.
     * - Returns a merged range of the first and the last if both are provided
     *   and their lexers match.
     * - Otherwise, returns null.
     */


    static range(first, second) {
      if (!second) {
        return first && first.loc;
      } else if (!first || !first.loc || !second.loc || first.loc.lexer !== second.loc.lexer) {
        return null;
      } else {
        return new SourceLocation(first.loc.lexer, first.loc.start, second.loc.end);
      }
    }

  }

  /**
   * Interface required to break circular dependency between Token, Lexer, and
   * ParseError.
   */

  /**
   * The resulting token returned from `lex`.
   *
   * It consists of the token text plus some position information.
   * The position information is essentially a range in an input string,
   * but instead of referencing the bare input string, we refer to the lexer.
   * That way it is possible to attach extra metadata to the input string,
   * like for example a file name or similar.
   *
   * The position information is optional, so it is OK to construct synthetic
   * tokens if appropriate. Not providing available position information may
   * lead to degraded error reporting, though.
   */
  class Token {
    // don't expand the token
    // used in \noexpand
    constructor(text, // the text of this token
    loc) {
      this.text = undefined;
      this.loc = undefined;
      this.noexpand = undefined;
      this.treatAsRelax = undefined;
      this.text = text;
      this.loc = loc;
    }
    /**
     * Given a pair of tokens (this and endToken), compute a `Token` encompassing
     * the whole input range enclosed by these two.
     */


    range(endToken, // last token of the range, inclusive
    text // the text of the newly constructed token
    ) {
      return new Token(text, SourceLocation.range(this, endToken));
    }

  }

  /**
   * This is the ParseError class, which is the main error thrown by KaTeX
   * functions when something has gone wrong. This is used to distinguish internal
   * errors from errors in the expression that the user provided.
   *
   * If possible, a caller should provide a Token or ParseNode with information
   * about where in the source string the problem occurred.
   */
  class ParseError {
    // Error start position based on passed-in Token or ParseNode.
    // Length of affected text based on passed-in Token or ParseNode.
    // The underlying error message without any context added.
    constructor(message, // The error message
    token // An object providing position information
    ) {
      this.name = undefined;
      this.position = undefined;
      this.length = undefined;
      this.rawMessage = undefined;
      var error = "KaTeX parse error: " + message;
      var start;
      var end;
      var loc = token && token.loc;

      if (loc && loc.start <= loc.end) {
        // If we have the input and a position, make the error a bit fancier
        // Get the input
        var input = loc.lexer.input; // Prepend some information

        start = loc.start;
        end = loc.end;

        if (start === input.length) {
          error += " at end of input: ";
        } else {
          error += " at position " + (start + 1) + ": ";
        } // Underline token in question using combining underscores


        var underlined = input.slice(start, end).replace(/[^]/g, "$&\u0332"); // Extract some context from the input and add it to the error

        var left;

        if (start > 15) {
          left = "…" + input.slice(start - 15, start);
        } else {
          left = input.slice(0, start);
        }

        var right;

        if (end + 15 < input.length) {
          right = input.slice(end, end + 15) + "…";
        } else {
          right = input.slice(end);
        }

        error += left + underlined + right;
      } // Some hackery to make ParseError a prototype of Error
      // See http://stackoverflow.com/a/8460753
      // $FlowFixMe


      var self = new Error(error);
      self.name = "ParseError"; // $FlowFixMe

      self.__proto__ = ParseError.prototype;
      self.position = start;

      if (start != null && end != null) {
        self.length = end - start;
      }

      self.rawMessage = message;
      return self;
    }

  } // $FlowFixMe More hackery


  ParseError.prototype.__proto__ = Error.prototype;

  /**
   * This file contains a list of utility functions which are useful in other
   * files.
   */

  /**
   * Return whether an element is contained in a list
   */
  var contains = function contains(list, elem) {
    return list.indexOf(elem) !== -1;
  };
  /**
   * Provide a default value if a setting is undefined
   * NOTE: Couldn't use `T` as the output type due to facebook/flow#5022.
   */


  var deflt = function deflt(setting, defaultIfUndefined) {
    return setting === undefined ? defaultIfUndefined : setting;
  }; // hyphenate and escape adapted from Facebook's React under Apache 2 license


  var uppercase = /([A-Z])/g;

  var hyphenate = function hyphenate(str) {
    return str.replace(uppercase, "-$1").toLowerCase();
  };

  var ESCAPE_LOOKUP = {
    "&": "&amp;",
    ">": "&gt;",
    "<": "&lt;",
    "\"": "&quot;",
    "'": "&#x27;"
  };
  var ESCAPE_REGEX = /[&><"']/g;
  /**
   * Escapes text to prevent scripting attacks.
   */

  function escape(text) {
    return String(text).replace(ESCAPE_REGEX, match => ESCAPE_LOOKUP[match]);
  }
  /**
   * Sometimes we want to pull out the innermost element of a group. In most
   * cases, this will just be the group itself, but when ordgroups and colors have
   * a single element, we want to pull that out.
   */


  var getBaseElem = function getBaseElem(group) {
    if (group.type === "ordgroup") {
      if (group.body.length === 1) {
        return getBaseElem(group.body[0]);
      } else {
        return group;
      }
    } else if (group.type === "color") {
      if (group.body.length === 1) {
        return getBaseElem(group.body[0]);
      } else {
        return group;
      }
    } else if (group.type === "font") {
      return getBaseElem(group.body);
    } else {
      return group;
    }
  };
  /**
   * TeXbook algorithms often reference "character boxes", which are simply groups
   * with a single character in them. To decide if something is a character box,
   * we find its innermost group, and see if it is a single character.
   */


  var isCharacterBox = function isCharacterBox(group) {
    var baseElem = getBaseElem(group); // These are all they types of groups which hold single characters

    return baseElem.type === "mathord" || baseElem.type === "textord" || baseElem.type === "atom";
  };

  var assert = function assert(value) {
    if (!value) {
      throw new Error('Expected non-null, but got ' + String(value));
    }

    return value;
  };
  /**
   * Return the protocol of a URL, or "_relative" if the URL does not specify a
   * protocol (and thus is relative), or `null` if URL has invalid protocol
   * (so should be outright rejected).
   */

  var protocolFromUrl = function protocolFromUrl(url) {
    // Check for possible leading protocol.
    // https://url.spec.whatwg.org/#url-parsing strips leading whitespace
    // (U+20) or C0 control (U+00-U+1F) characters.
    // eslint-disable-next-line no-control-regex
    var protocol = /^[\x00-\x20]*([^\\/#?]*?)(:|&#0*58|&#x0*3a|&colon)/i.exec(url);

    if (!protocol) {
      return "_relative";
    } // Reject weird colons


    if (protocol[2] !== ":") {
      return null;
    } // Reject invalid characters in scheme according to
    // https://datatracker.ietf.org/doc/html/rfc3986#section-3.1


    if (!/^[a-zA-Z][a-zA-Z0-9+\-.]*$/.test(protocol[1])) {
      return null;
    } // Lowercase the protocol


    return protocol[1].toLowerCase();
  };
  var utils = {
    contains,
    deflt,
    escape,
    hyphenate,
    getBaseElem,
    isCharacterBox,
    protocolFromUrl
  };

  /* eslint no-console:0 */
  // TODO: automatically generate documentation
  // TODO: check all properties on Settings exist
  // TODO: check the type of a property on Settings matches
  var SETTINGS_SCHEMA = {
    displayMode: {
      type: "boolean",
      description: "Render math in display mode, which puts the math in " + "display style (so \\int and \\sum are large, for example), and " + "centers the math on the page on its own line.",
      cli: "-d, --display-mode"
    },
    output: {
      type: {
        enum: ["htmlAndMathml", "html", "mathml"]
      },
      description: "Determines the markup language of the output.",
      cli: "-F, --format <type>"
    },
    leqno: {
      type: "boolean",
      description: "Render display math in leqno style (left-justified tags)."
    },
    fleqn: {
      type: "boolean",
      description: "Render display math flush left."
    },
    throwOnError: {
      type: "boolean",
      default: true,
      cli: "-t, --no-throw-on-error",
      cliDescription: "Render errors (in the color given by --error-color) ins" + "tead of throwing a ParseError exception when encountering an error."
    },
    errorColor: {
      type: "string",
      default: "#cc0000",
      cli: "-c, --error-color <color>",
      cliDescription: "A color string given in the format 'rgb' or 'rrggbb' " + "(no #). This option determines the color of errors rendered by the " + "-t option.",
      cliProcessor: color => "#" + color
    },
    macros: {
      type: "object",
      cli: "-m, --macro <def>",
      cliDescription: "Define custom macro of the form '\\foo:expansion' (use " + "multiple -m arguments for multiple macros).",
      cliDefault: [],
      cliProcessor: (def, defs) => {
        defs.push(def);
        return defs;
      }
    },
    minRuleThickness: {
      type: "number",
      description: "Specifies a minimum thickness, in ems, for fraction lines," + " `\\sqrt` top lines, `{array}` vertical lines, `\\hline`, " + "`\\hdashline`, `\\underline`, `\\overline`, and the borders of " + "`\\fbox`, `\\boxed`, and `\\fcolorbox`.",
      processor: t => Math.max(0, t),
      cli: "--min-rule-thickness <size>",
      cliProcessor: parseFloat
    },
    colorIsTextColor: {
      type: "boolean",
      description: "Makes \\color behave like LaTeX's 2-argument \\textcolor, " + "instead of LaTeX's one-argument \\color mode change.",
      cli: "-b, --color-is-text-color"
    },
    strict: {
      type: [{
        enum: ["warn", "ignore", "error"]
      }, "boolean", "function"],
      description: "Turn on strict / LaTeX faithfulness mode, which throws an " + "error if the input uses features that are not supported by LaTeX.",
      cli: "-S, --strict",
      cliDefault: false
    },
    trust: {
      type: ["boolean", "function"],
      description: "Trust the input, enabling all HTML features such as \\url.",
      cli: "-T, --trust"
    },
    maxSize: {
      type: "number",
      default: Infinity,
      description: "If non-zero, all user-specified sizes, e.g. in " + "\\rule{500em}{500em}, will be capped to maxSize ems. Otherwise, " + "elements and spaces can be arbitrarily large",
      processor: s => Math.max(0, s),
      cli: "-s, --max-size <n>",
      cliProcessor: parseInt
    },
    maxExpand: {
      type: "number",
      default: 1000,
      description: "Limit the number of macro expansions to the specified " + "number, to prevent e.g. infinite macro loops. If set to Infinity, " + "the macro expander will try to fully expand as in LaTeX.",
      processor: n => Math.max(0, n),
      cli: "-e, --max-expand <n>",
      cliProcessor: n => n === "Infinity" ? Infinity : parseInt(n)
    },
    globalGroup: {
      type: "boolean",
      cli: false
    }
  };

  function getDefaultValue(schema) {
    if (schema.default) {
      return schema.default;
    }

    var type = schema.type;
    var defaultType = Array.isArray(type) ? type[0] : type;

    if (typeof defaultType !== 'string') {
      return defaultType.enum[0];
    }

    switch (defaultType) {
      case 'boolean':
        return false;

      case 'string':
        return '';

      case 'number':
        return 0;

      case 'object':
        return {};
    }
  }
  /**
   * The main Settings object
   *
   * The current options stored are:
   *  - displayMode: Whether the expression should be typeset as inline math
   *                 (false, the default), meaning that the math starts in
   *                 \textstyle and is placed in an inline-block); or as display
   *                 math (true), meaning that the math starts in \displaystyle
   *                 and is placed in a block with vertical margin.
   */


  class Settings {
    constructor(options) {
      this.displayMode = undefined;
      this.output = undefined;
      this.leqno = undefined;
      this.fleqn = undefined;
      this.throwOnError = undefined;
      this.errorColor = undefined;
      this.macros = undefined;
      this.minRuleThickness = undefined;
      this.colorIsTextColor = undefined;
      this.strict = undefined;
      this.trust = undefined;
      this.maxSize = undefined;
      this.maxExpand = undefined;
      this.globalGroup = undefined;
      // allow null options
      options = options || {};

      for (var prop in SETTINGS_SCHEMA) {
        if (SETTINGS_SCHEMA.hasOwnProperty(prop)) {
          // $FlowFixMe
          var schema = SETTINGS_SCHEMA[prop]; // TODO: validate options
          // $FlowFixMe

          this[prop] = options[prop] !== undefined ? schema.processor ? schema.processor(options[prop]) : options[prop] : getDefaultValue(schema);
        }
      }
    }
    /**
     * Report nonstrict (non-LaTeX-compatible) input.
     * Can safely not be called if `this.strict` is false in JavaScript.
     */


    reportNonstrict(errorCode, errorMsg, token) {
      var strict = this.strict;

      if (typeof strict === "function") {
        // Allow return value of strict function to be boolean or string
        // (or null/undefined, meaning no further processing).
        strict = strict(errorCode, errorMsg, token);
      }

      if (!strict || strict === "ignore") {
        return;
      } else if (strict === true || strict === "error") {
        throw new ParseError("LaTeX-incompatible input and strict mode is set to 'error': " + (errorMsg + " [" + errorCode + "]"), token);
      } else if (strict === "warn") {
        typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (errorMsg + " [" + errorCode + "]"));
      } else {
        // won't happen in type-safe code
        typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + strict + "': " + errorMsg + " [" + errorCode + "]"));
      }
    }
    /**
     * Check whether to apply strict (LaTeX-adhering) behavior for unusual
     * input (like `\\`).  Unlike `nonstrict`, will not throw an error;
     * instead, "error" translates to a return value of `true`, while "ignore"
     * translates to a return value of `false`.  May still print a warning:
     * "warn" prints a warning and returns `false`.
     * This is for the second category of `errorCode`s listed in the README.
     */


    useStrictBehavior(errorCode, errorMsg, token) {
      var strict = this.strict;

      if (typeof strict === "function") {
        // Allow return value of strict function to be boolean or string
        // (or null/undefined, meaning no further processing).
        // But catch any exceptions thrown by function, treating them
        // like "error".
        try {
          strict = strict(errorCode, errorMsg, token);
        } catch (error) {
          strict = "error";
        }
      }

      if (!strict || strict === "ignore") {
        return false;
      } else if (strict === true || strict === "error") {
        return true;
      } else if (strict === "warn") {
        typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (errorMsg + " [" + errorCode + "]"));
        return false;
      } else {
        // won't happen in type-safe code
        typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + strict + "': " + errorMsg + " [" + errorCode + "]"));
        return false;
      }
    }
    /**
     * Check whether to test potentially dangerous input, and return
     * `true` (trusted) or `false` (untrusted).  The sole argument `context`
     * should be an object with `command` field specifying the relevant LaTeX
     * command (as a string starting with `\`), and any other arguments, etc.
     * If `context` has a `url` field, a `protocol` field will automatically
     * get added by this function (changing the specified object).
     */


    isTrusted(context) {
      if (context.url && !context.protocol) {
        var protocol = utils.protocolFromUrl(context.url);

        if (protocol == null) {
          return false;
        }

        context.protocol = protocol;
      }

      var trust = typeof this.trust === "function" ? this.trust(context) : this.trust;
      return Boolean(trust);
    }

  }

  /**
   * This file contains information and classes for the various kinds of styles
   * used in TeX. It provides a generic `Style` class, which holds information
   * about a specific style. It then provides instances of all the different kinds
   * of styles possible, and provides functions to move between them and get
   * information about them.
   */

  /**
   * The main style class. Contains a unique id for the style, a size (which is
   * the same for cramped and uncramped version of a style), and a cramped flag.
   */
  class Style {
    constructor(id, size, cramped) {
      this.id = undefined;
      this.size = undefined;
      this.cramped = undefined;
      this.id = id;
      this.size = size;
      this.cramped = cramped;
    }
    /**
     * Get the style of a superscript given a base in the current style.
     */


    sup() {
      return styles[sup[this.id]];
    }
    /**
     * Get the style of a subscript given a base in the current style.
     */


    sub() {
      return styles[sub[this.id]];
    }
    /**
     * Get the style of a fraction numerator given the fraction in the current
     * style.
     */


    fracNum() {
      return styles[fracNum[this.id]];
    }
    /**
     * Get the style of a fraction denominator given the fraction in the current
     * style.
     */


    fracDen() {
      return styles[fracDen[this.id]];
    }
    /**
     * Get the cramped version of a style (in particular, cramping a cramped style
     * doesn't change the style).
     */


    cramp() {
      return styles[cramp[this.id]];
    }
    /**
     * Get a text or display version of this style.
     */


    text() {
      return styles[text$1[this.id]];
    }
    /**
     * Return true if this style is tightly spaced (scriptstyle/scriptscriptstyle)
     */


    isTight() {
      return this.size >= 2;
    }

  } // Export an interface for type checking, but don't expose the implementation.
  // This way, no more styles can be generated.


  // IDs of the different styles
  var D = 0;
  var Dc = 1;
  var T = 2;
  var Tc = 3;
  var S = 4;
  var Sc = 5;
  var SS = 6;
  var SSc = 7; // Instances of the different styles

  var styles = [new Style(D, 0, false), new Style(Dc, 0, true), new Style(T, 1, false), new Style(Tc, 1, true), new Style(S, 2, false), new Style(Sc, 2, true), new Style(SS, 3, false), new Style(SSc, 3, true)]; // Lookup tables for switching from one style to another

  var sup = [S, Sc, S, Sc, SS, SSc, SS, SSc];
  var sub = [Sc, Sc, Sc, Sc, SSc, SSc, SSc, SSc];
  var fracNum = [T, Tc, S, Sc, SS, SSc, SS, SSc];
  var fracDen = [Tc, Tc, Sc, Sc, SSc, SSc, SSc, SSc];
  var cramp = [Dc, Dc, Tc, Tc, Sc, Sc, SSc, SSc];
  var text$1 = [D, Dc, T, Tc, T, Tc, T, Tc]; // We only export some of the styles.

  var Style$1 = {
    DISPLAY: styles[D],
    TEXT: styles[T],
    SCRIPT: styles[S],
    SCRIPTSCRIPT: styles[SS]
  };

  /*
   * This file defines the Unicode scripts and script families that we
   * support. To add new scripts or families, just add a new entry to the
   * scriptData array below. Adding scripts to the scriptData array allows
   * characters from that script to appear in \text{} environments.
   */

  /**
   * Each script or script family has a name and an array of blocks.
   * Each block is an array of two numbers which specify the start and
   * end points (inclusive) of a block of Unicode codepoints.
   */

  /**
   * Unicode block data for the families of scripts we support in \text{}.
   * Scripts only need to appear here if they do not have font metrics.
   */
  var scriptData = [{
    // Latin characters beyond the Latin-1 characters we have metrics for.
    // Needed for Czech, Hungarian and Turkish text, for example.
    name: 'latin',
    blocks: [[0x0100, 0x024f], // Latin Extended-A and Latin Extended-B
    [0x0300, 0x036f] // Combining Diacritical marks
    ]
  }, {
    // The Cyrillic script used by Russian and related languages.
    // A Cyrillic subset used to be supported as explicitly defined
    // symbols in symbols.js
    name: 'cyrillic',
    blocks: [[0x0400, 0x04ff]]
  }, {
    // Armenian
    name: 'armenian',
    blocks: [[0x0530, 0x058F]]
  }, {
    // The Brahmic scripts of South and Southeast Asia
    // Devanagari (0900–097F)
    // Bengali (0980–09FF)
    // Gurmukhi (0A00–0A7F)
    // Gujarati (0A80–0AFF)
    // Oriya (0B00–0B7F)
    // Tamil (0B80–0BFF)
    // Telugu (0C00–0C7F)
    // Kannada (0C80–0CFF)
    // Malayalam (0D00–0D7F)
    // Sinhala (0D80–0DFF)
    // Thai (0E00–0E7F)
    // Lao (0E80–0EFF)
    // Tibetan (0F00–0FFF)
    // Myanmar (1000–109F)
    name: 'brahmic',
    blocks: [[0x0900, 0x109F]]
  }, {
    name: 'georgian',
    blocks: [[0x10A0, 0x10ff]]
  }, {
    // Chinese and Japanese.
    // The "k" in cjk is for Korean, but we've separated Korean out
    name: "cjk",
    blocks: [[0x3000, 0x30FF], // CJK symbols and punctuation, Hiragana, Katakana
    [0x4E00, 0x9FAF], // CJK ideograms
    [0xFF00, 0xFF60] // Fullwidth punctuation
    // TODO: add halfwidth Katakana and Romanji glyphs
    ]
  }, {
    // Korean
    name: 'hangul',
    blocks: [[0xAC00, 0xD7AF]]
  }];
  /**
   * Given a codepoint, return the name of the script or script family
   * it is from, or null if it is not part of a known block
   */

  function scriptFromCodepoint(codepoint) {
    for (var i = 0; i < scriptData.length; i++) {
      var script = scriptData[i];

      for (var _i = 0; _i < script.blocks.length; _i++) {
        var block = script.blocks[_i];

        if (codepoint >= block[0] && codepoint <= block[1]) {
          return script.name;
        }
      }
    }

    return null;
  }
  /**
   * A flattened version of all the supported blocks in a single array.
   * This is an optimization to make supportedCodepoint() fast.
   */

  var allBlocks = [];
  scriptData.forEach(s => s.blocks.forEach(b => allBlocks.push(...b)));
  /**
   * Given a codepoint, return true if it falls within one of the
   * scripts or script families defined above and false otherwise.
   *
   * Micro benchmarks shows that this is faster than
   * /[\u3000-\u30FF\u4E00-\u9FAF\uFF00-\uFF60\uAC00-\uD7AF\u0900-\u109F]/.test()
   * in Firefox, Chrome and Node.
   */

  function supportedCodepoint(codepoint) {
    for (var i = 0; i < allBlocks.length; i += 2) {
      if (codepoint >= allBlocks[i] && codepoint <= allBlocks[i + 1]) {
        return true;
      }
    }

    return false;
  }

  /**
   * This file provides support to domTree.js and delimiter.js.
   * It's a storehouse of path geometry for SVG images.
   */
  // In all paths below, the viewBox-to-em scale is 1000:1.
  var hLinePad = 80; // padding above a sqrt vinculum. Prevents image cropping.
  // The vinculum of a \sqrt can be made thicker by a KaTeX rendering option.
  // Think of variable extraVinculum as two detours in the SVG path.
  // The detour begins at the lower left of the area labeled extraVinculum below.
  // The detour proceeds one extraVinculum distance up and slightly to the right,
  // displacing the radiused corner between surd and vinculum. The radius is
  // traversed as usual, then the detour resumes. It goes right, to the end of
  // the very long vinculum, then down one extraVinculum distance,
  // after which it resumes regular path geometry for the radical.

  /*                                                  vinculum
                                                     /
           /▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒←extraVinculum
          / █████████████████████←0.04em (40 unit) std vinculum thickness
         / /
        / /
       / /\
      / / surd
  */

  var sqrtMain = function sqrtMain(extraVinculum, hLinePad) {
    // sqrtMain path geometry is from glyph U221A in the font KaTeX Main
    return "M95," + (622 + extraVinculum + hLinePad) + "\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl" + extraVinculum / 2.075 + " -" + extraVinculum + "\nc5.3,-9.3,12,-14,20,-14\nH400000v" + (40 + extraVinculum) + "H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM" + (834 + extraVinculum) + " " + hLinePad + "h400000v" + (40 + extraVinculum) + "h-400000z";
  };

  var sqrtSize1 = function sqrtSize1(extraVinculum, hLinePad) {
    // size1 is from glyph U221A in the font KaTeX_Size1-Regular
    return "M263," + (601 + extraVinculum + hLinePad) + "c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl" + extraVinculum / 2.084 + " -" + extraVinculum + "\nc4.7,-7.3,11,-11,19,-11\nH40000v" + (40 + extraVinculum) + "H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM" + (1001 + extraVinculum) + " " + hLinePad + "h400000v" + (40 + extraVinculum) + "h-400000z";
  };

  var sqrtSize2 = function sqrtSize2(extraVinculum, hLinePad) {
    // size2 is from glyph U221A in the font KaTeX_Size2-Regular
    return "M983 " + (10 + extraVinculum + hLinePad) + "\nl" + extraVinculum / 3.13 + " -" + extraVinculum + "\nc4,-6.7,10,-10,18,-10 H400000v" + (40 + extraVinculum) + "\nH1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7\ns-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744\nc-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30\nc26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722\nc56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5\nc53.7,-170.3,84.5,-266.8,92.5,-289.5z\nM" + (1001 + extraVinculum) + " " + hLinePad + "h400000v" + (40 + extraVinculum) + "h-400000z";
  };

  var sqrtSize3 = function sqrtSize3(extraVinculum, hLinePad) {
    // size3 is from glyph U221A in the font KaTeX_Size3-Regular
    return "M424," + (2398 + extraVinculum + hLinePad) + "\nc-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514\nc0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20\ns-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121\ns209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081\nl" + extraVinculum / 4.223 + " -" + extraVinculum + "c4,-6.7,10,-10,18,-10 H400000\nv" + (40 + extraVinculum) + "H1014.6\ns-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185\nc-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2z M" + (1001 + extraVinculum) + " " + hLinePad + "\nh400000v" + (40 + extraVinculum) + "h-400000z";
  };

  var sqrtSize4 = function sqrtSize4(extraVinculum, hLinePad) {
    // size4 is from glyph U221A in the font KaTeX_Size4-Regular
    return "M473," + (2713 + extraVinculum + hLinePad) + "\nc339.3,-1799.3,509.3,-2700,510,-2702 l" + extraVinculum / 5.298 + " -" + extraVinculum + "\nc3.3,-7.3,9.3,-11,18,-11 H400000v" + (40 + extraVinculum) + "H1017.7\ns-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200\nc0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26\ns76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,\n606zM" + (1001 + extraVinculum) + " " + hLinePad + "h400000v" + (40 + extraVinculum) + "H1017.7z";
  };

  var phasePath = function phasePath(y) {
    var x = y / 2; // x coordinate at top of angle

    return "M400000 " + y + " H0 L" + x + " 0 l65 45 L145 " + (y - 80) + " H400000z";
  };

  var sqrtTall = function sqrtTall(extraVinculum, hLinePad, viewBoxHeight) {
    // sqrtTall is from glyph U23B7 in the font KaTeX_Size4-Regular
    // One path edge has a variable length. It runs vertically from the vinculum
    // to a point near (14 units) the bottom of the surd. The vinculum
    // is normally 40 units thick. So the length of the line in question is:
    var vertSegment = viewBoxHeight - 54 - hLinePad - extraVinculum;
    return "M702 " + (extraVinculum + hLinePad) + "H400000" + (40 + extraVinculum) + "\nH742v" + vertSegment + "l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1\nh-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170\nc-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667\n219 661 l218 661zM702 " + hLinePad + "H400000v" + (40 + extraVinculum) + "H742z";
  };

  var sqrtPath = function sqrtPath(size, extraVinculum, viewBoxHeight) {
    extraVinculum = 1000 * extraVinculum; // Convert from document ems to viewBox.

    var path = "";

    switch (size) {
      case "sqrtMain":
        path = sqrtMain(extraVinculum, hLinePad);
        break;

      case "sqrtSize1":
        path = sqrtSize1(extraVinculum, hLinePad);
        break;

      case "sqrtSize2":
        path = sqrtSize2(extraVinculum, hLinePad);
        break;

      case "sqrtSize3":
        path = sqrtSize3(extraVinculum, hLinePad);
        break;

      case "sqrtSize4":
        path = sqrtSize4(extraVinculum, hLinePad);
        break;

      case "sqrtTall":
        path = sqrtTall(extraVinculum, hLinePad, viewBoxHeight);
    }

    return path;
  };
  var innerPath = function innerPath(name, height) {
    // The inner part of stretchy tall delimiters
    switch (name) {
      case "\u239c":
        return "M291 0 H417 V" + height + " H291z M291 0 H417 V" + height + " H291z";

      case "\u2223":
        return "M145 0 H188 V" + height + " H145z M145 0 H188 V" + height + " H145z";

      case "\u2225":
        return "M145 0 H188 V" + height + " H145z M145 0 H188 V" + height + " H145z" + ("M367 0 H410 V" + height + " H367z M367 0 H410 V" + height + " H367z");

      case "\u239f":
        return "M457 0 H583 V" + height + " H457z M457 0 H583 V" + height + " H457z";

      case "\u23a2":
        return "M319 0 H403 V" + height + " H319z M319 0 H403 V" + height + " H319z";

      case "\u23a5":
        return "M263 0 H347 V" + height + " H263z M263 0 H347 V" + height + " H263z";

      case "\u23aa":
        return "M384 0 H504 V" + height + " H384z M384 0 H504 V" + height + " H384z";

      case "\u23d0":
        return "M312 0 H355 V" + height + " H312z M312 0 H355 V" + height + " H312z";

      case "\u2016":
        return "M257 0 H300 V" + height + " H257z M257 0 H300 V" + height + " H257z" + ("M478 0 H521 V" + height + " H478z M478 0 H521 V" + height + " H478z");

      default:
        return "";
    }
  };
  var path = {
    // The doubleleftarrow geometry is from glyph U+21D0 in the font KaTeX Main
    doubleleftarrow: "M262 157\nl10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3\n 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28\n 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5\nc2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5\n 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87\n-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7\n-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z\nm8 0v40h399730v-40zm0 194v40h399730v-40z",
    // doublerightarrow is from glyph U+21D2 in font KaTeX Main
    doublerightarrow: "M399738 392l\n-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5\n 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88\n-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68\n-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18\n-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782\nc-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3\n-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z",
    // leftarrow is from glyph U+2190 in font KaTeX Main
    leftarrow: "M400000 241H110l3-3c68.7-52.7 113.7-120\n 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8\n-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247\nc-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208\n 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3\n 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202\n l-3-3h399890zM100 241v40h399900v-40z",
    // overbrace is from glyphs U+23A9/23A8/23A7 in font KaTeX_Size4-Regular
    leftbrace: "M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117\n-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7\n 5-6 9-10 13-.7 1-7.3 1-20 1H6z",
    leftbraceunder: "M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z",
    // overgroup is from the MnSymbol package (public domain)
    leftgroup: "M400000 80\nH435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0\n 435 0h399565z",
    leftgroupunder: "M400000 262\nH435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219\n 435 219h399565z",
    // Harpoons are from glyph U+21BD in font KaTeX Main
    leftharpoon: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3\n-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5\n-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7\n-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z",
    leftharpoonplus: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5\n 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3\n-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7\n-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z\nm0 0v40h400000v-40z",
    leftharpoondown: "M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333\n 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5\n 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667\n-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z",
    leftharpoondownplus: "M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z",
    // hook is from glyph U+21A9 in font KaTeX Main
    lefthook: "M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5\n-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3\n-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21\n 71.5 23h399859zM103 281v-40h399897v40z",
    leftlinesegment: "M40 281 V428 H0 V94 H40 V241 H400000 v40z\nM40 281 V428 H0 V94 H40 V241 H400000 v40z",
    leftmapsto: "M40 281 V448H0V74H40V241H400000v40z\nM40 281 V448H0V74H40V241H400000v40z",
    // tofrom is from glyph U+21C4 in font KaTeX AMS Regular
    leftToFrom: "M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23\n-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8\nc28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3\n 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z",
    longequal: "M0 50 h400000 v40H0z m0 194h40000v40H0z\nM0 50 h400000 v40H0z m0 194h40000v40H0z",
    midbrace: "M200428 334\nc-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14\n-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7\n 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11\n 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z",
    midbraceunder: "M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z",
    oiintSize1: "M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6\n-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z\nm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8\n60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z",
    oiintSize2: "M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8\n-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z\nm502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2\nc0 110 84 276 504 276s502.4-166 502.4-276z",
    oiiintSize1: "M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6\n-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z\nm525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0\n85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z",
    oiiintSize2: "M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8\n-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z\nm770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1\nc0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z",
    rightarrow: "M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z",
    rightbrace: "M400000 542l\n-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5\ns-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1\nc124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z",
    rightbraceunder: "M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z",
    rightgroup: "M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0\n 3-1 3-3v-38c-76-158-257-219-435-219H0z",
    rightgroupunder: "M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18\n 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z",
    rightharpoon: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3\n-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2\n-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58\n 69.2 92 94.5zm0 0v40h399900v-40z",
    rightharpoonplus: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z",
    rightharpoondown: "M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8\n 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5\n-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95\n-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z",
    rightharpoondownplus: "M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8\n 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3\n 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3\n-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z\nm0-194v40h400000v-40zm0 0v40h400000v-40z",
    righthook: "M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3\n 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0\n-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21\n 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z",
    rightlinesegment: "M399960 241 V94 h40 V428 h-40 V281 H0 v-40z\nM399960 241 V94 h40 V428 h-40 V281 H0 v-40z",
    rightToFrom: "M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23\n 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32\n-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142\n-167z M100 147v40h399900v-40zM0 341v40h399900v-40z",
    // twoheadleftarrow is from glyph U+219E in font KaTeX AMS Regular
    twoheadleftarrow: "M0 167c68 40\n 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69\n-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3\n-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19\n-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101\n 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z",
    twoheadrightarrow: "M400000 167\nc-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3\n 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42\n 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333\n-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70\n 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z",
    // tilde1 is a modified version of a glyph from the MnSymbol package
    tilde1: "M200 55.538c-77 0-168 73.953-177 73.953-3 0-7\n-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0\n 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0\n 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128\n-68.267.847-113-73.952-191-73.952z",
    // ditto tilde2, tilde3, & tilde4
    tilde2: "M344 55.266c-142 0-300.638 81.316-311.5 86.418\n-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9\n 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114\nc1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751\n 181.476 676 181.476c-149 0-189-126.21-332-126.21z",
    tilde3: "M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457\n-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0\n 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697\n 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696\n -338 0-409-156.573-744-156.573z",
    tilde4: "M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345\n-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409\n 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9\n 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409\n -175.236-744-175.236z",
    // vec is from glyph U+20D7 in font KaTeX Main
    vec: "M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z",
    // widehat1 is a modified version of a glyph from the MnSymbol package
    widehat1: "M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z",
    // ditto widehat2, widehat3, & widehat4
    widehat2: "M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
    widehat3: "M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
    widehat4: "M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
    // widecheck paths are all inverted versions of widehat
    widecheck1: "M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,\n-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z",
    widecheck2: "M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
    widecheck3: "M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
    widecheck4: "M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
    // The next ten paths support reaction arrows from the mhchem package.
    // Arrows for \ce{<-->} are offset from xAxis by 0.22ex, per mhchem in LaTeX
    // baraboveleftarrow is mostly from glyph U+2190 in font KaTeX Main
    baraboveleftarrow: "M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202\nc4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5\nc-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130\ns-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47\n121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6\ns2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11\nc0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z\nM100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z",
    // rightarrowabovebar is mostly from glyph U+2192, KaTeX Main
    rightarrowabovebar: "M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32\n-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0\n13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39\n-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5\n-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z",
    // The short left harpoon has 0.5em (i.e. 500 units) kern on the left end.
    // Ref from mhchem.sty: \rlap{\raisebox{-.22ex}{$\kern0.5em
    baraboveshortleftharpoon: "M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17\nc2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21\nc-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40\nc-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z\nM0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z",
    rightharpoonaboveshortbar: "M0,241 l0,40c399126,0,399993,0,399993,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z",
    shortbaraboveleftharpoon: "M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,\n1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,\n-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z\nM93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z",
    shortrightharpoonabovebar: "M53,241l0,40c398570,0,399437,0,399437,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z"
  };
  var tallDelim = function tallDelim(label, midHeight) {
    switch (label) {
      case "lbrack":
        return "M403 1759 V84 H666 V0 H319 V1759 v" + midHeight + " v1759 h347 v-84\nH403z M403 1759 V0 H319 V1759 v" + midHeight + " v1759 h84z";

      case "rbrack":
        return "M347 1759 V0 H0 V84 H263 V1759 v" + midHeight + " v1759 H0 v84 H347z\nM347 1759 V0 H263 V1759 v" + midHeight + " v1759 h84z";

      case "vert":
        return "M145 15 v585 v" + midHeight + " v585 c2.667,10,9.667,15,21,15\nc10,0,16.667,-5,20,-15 v-585 v" + -midHeight + " v-585 c-2.667,-10,-9.667,-15,-21,-15\nc-10,0,-16.667,5,-20,15z M188 15 H145 v585 v" + midHeight + " v585 h43z";

      case "doublevert":
        return "M145 15 v585 v" + midHeight + " v585 c2.667,10,9.667,15,21,15\nc10,0,16.667,-5,20,-15 v-585 v" + -midHeight + " v-585 c-2.667,-10,-9.667,-15,-21,-15\nc-10,0,-16.667,5,-20,15z M188 15 H145 v585 v" + midHeight + " v585 h43z\nM367 15 v585 v" + midHeight + " v585 c2.667,10,9.667,15,21,15\nc10,0,16.667,-5,20,-15 v-585 v" + -midHeight + " v-585 c-2.667,-10,-9.667,-15,-21,-15\nc-10,0,-16.667,5,-20,15z M410 15 H367 v585 v" + midHeight + " v585 h43z";

      case "lfloor":
        return "M319 602 V0 H403 V602 v" + midHeight + " v1715 h263 v84 H319z\nMM319 602 V0 H403 V602 v" + midHeight + " v1715 H319z";

      case "rfloor":
        return "M319 602 V0 H403 V602 v" + midHeight + " v1799 H0 v-84 H319z\nMM319 602 V0 H403 V602 v" + midHeight + " v1715 H319z";

      case "lceil":
        return "M403 1759 V84 H666 V0 H319 V1759 v" + midHeight + " v602 h84z\nM403 1759 V0 H319 V1759 v" + midHeight + " v602 h84z";

      case "rceil":
        return "M347 1759 V0 H0 V84 H263 V1759 v" + midHeight + " v602 h84z\nM347 1759 V0 h-84 V1759 v" + midHeight + " v602 h84z";

      case "lparen":
        return "M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1\nc-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,\n-36,557 l0," + (midHeight + 84) + "c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,\n949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9\nc0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,\n-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189\nl0,-" + (midHeight + 92) + "c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,\n-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z";

      case "rparen":
        return "M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,\n63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5\nc11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0," + (midHeight + 9) + "\nc-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664\nc-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11\nc0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17\nc242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558\nl0,-" + (midHeight + 144) + "c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,\n-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z";

      default:
        // We should not ever get here.
        throw new Error("Unknown stretchy delimiter.");
    }
  };

  /**
   * This node represents a document fragment, which contains elements, but when
   * placed into the DOM doesn't have any representation itself. It only contains
   * children and doesn't have any DOM node properties.
   */
  class DocumentFragment {
    // HtmlDomNode
    // Never used; needed for satisfying interface.
    constructor(children) {
      this.children = undefined;
      this.classes = undefined;
      this.height = undefined;
      this.depth = undefined;
      this.maxFontSize = undefined;
      this.style = undefined;
      this.children = children;
      this.classes = [];
      this.height = 0;
      this.depth = 0;
      this.maxFontSize = 0;
      this.style = {};
    }

    hasClass(className) {
      return utils.contains(this.classes, className);
    }
    /** Convert the fragment into a node. */


    toNode() {
      var frag = document.createDocumentFragment();

      for (var i = 0; i < this.children.length; i++) {
        frag.appendChild(this.children[i].toNode());
      }

      return frag;
    }
    /** Convert the fragment into HTML markup. */


    toMarkup() {
      var markup = ""; // Simply concatenate the markup for the children together.

      for (var i = 0; i < this.children.length; i++) {
        markup += this.children[i].toMarkup();
      }

      return markup;
    }
    /**
     * Converts the math node into a string, similar to innerText. Applies to
     * MathDomNode's only.
     */


    toText() {
      // To avoid this, we would subclass documentFragment separately for
      // MathML, but polyfills for subclassing is expensive per PR 1469.
      // $FlowFixMe: Only works for ChildType = MathDomNode.
      var toText = child => child.toText();

      return this.children.map(toText).join("");
    }

  }

  // This file is GENERATED by buildMetrics.sh. DO NOT MODIFY.
  var fontMetricsData = {
    "AMS-Regular": {
      "32": [0, 0, 0, 0, 0.25],
      "65": [0, 0.68889, 0, 0, 0.72222],
      "66": [0, 0.68889, 0, 0, 0.66667],
      "67": [0, 0.68889, 0, 0, 0.72222],
      "68": [0, 0.68889, 0, 0, 0.72222],
      "69": [0, 0.68889, 0, 0, 0.66667],
      "70": [0, 0.68889, 0, 0, 0.61111],
      "71": [0, 0.68889, 0, 0, 0.77778],
      "72": [0, 0.68889, 0, 0, 0.77778],
      "73": [0, 0.68889, 0, 0, 0.38889],
      "74": [0.16667, 0.68889, 0, 0, 0.5],
      "75": [0, 0.68889, 0, 0, 0.77778],
      "76": [0, 0.68889, 0, 0, 0.66667],
      "77": [0, 0.68889, 0, 0, 0.94445],
      "78": [0, 0.68889, 0, 0, 0.72222],
      "79": [0.16667, 0.68889, 0, 0, 0.77778],
      "80": [0, 0.68889, 0, 0, 0.61111],
      "81": [0.16667, 0.68889, 0, 0, 0.77778],
      "82": [0, 0.68889, 0, 0, 0.72222],
      "83": [0, 0.68889, 0, 0, 0.55556],
      "84": [0, 0.68889, 0, 0, 0.66667],
      "85": [0, 0.68889, 0, 0, 0.72222],
      "86": [0, 0.68889, 0, 0, 0.72222],
      "87": [0, 0.68889, 0, 0, 1.0],
      "88": [0, 0.68889, 0, 0, 0.72222],
      "89": [0, 0.68889, 0, 0, 0.72222],
      "90": [0, 0.68889, 0, 0, 0.66667],
      "107": [0, 0.68889, 0, 0, 0.55556],
      "160": [0, 0, 0, 0, 0.25],
      "165": [0, 0.675, 0.025, 0, 0.75],
      "174": [0.15559, 0.69224, 0, 0, 0.94666],
      "240": [0, 0.68889, 0, 0, 0.55556],
      "295": [0, 0.68889, 0, 0, 0.54028],
      "710": [0, 0.825, 0, 0, 2.33334],
      "732": [0, 0.9, 0, 0, 2.33334],
      "770": [0, 0.825, 0, 0, 2.33334],
      "771": [0, 0.9, 0, 0, 2.33334],
      "989": [0.08167, 0.58167, 0, 0, 0.77778],
      "1008": [0, 0.43056, 0.04028, 0, 0.66667],
      "8245": [0, 0.54986, 0, 0, 0.275],
      "8463": [0, 0.68889, 0, 0, 0.54028],
      "8487": [0, 0.68889, 0, 0, 0.72222],
      "8498": [0, 0.68889, 0, 0, 0.55556],
      "8502": [0, 0.68889, 0, 0, 0.66667],
      "8503": [0, 0.68889, 0, 0, 0.44445],
      "8504": [0, 0.68889, 0, 0, 0.66667],
      "8513": [0, 0.68889, 0, 0, 0.63889],
      "8592": [-0.03598, 0.46402, 0, 0, 0.5],
      "8594": [-0.03598, 0.46402, 0, 0, 0.5],
      "8602": [-0.13313, 0.36687, 0, 0, 1.0],
      "8603": [-0.13313, 0.36687, 0, 0, 1.0],
      "8606": [0.01354, 0.52239, 0, 0, 1.0],
      "8608": [0.01354, 0.52239, 0, 0, 1.0],
      "8610": [0.01354, 0.52239, 0, 0, 1.11111],
      "8611": [0.01354, 0.52239, 0, 0, 1.11111],
      "8619": [0, 0.54986, 0, 0, 1.0],
      "8620": [0, 0.54986, 0, 0, 1.0],
      "8621": [-0.13313, 0.37788, 0, 0, 1.38889],
      "8622": [-0.13313, 0.36687, 0, 0, 1.0],
      "8624": [0, 0.69224, 0, 0, 0.5],
      "8625": [0, 0.69224, 0, 0, 0.5],
      "8630": [0, 0.43056, 0, 0, 1.0],
      "8631": [0, 0.43056, 0, 0, 1.0],
      "8634": [0.08198, 0.58198, 0, 0, 0.77778],
      "8635": [0.08198, 0.58198, 0, 0, 0.77778],
      "8638": [0.19444, 0.69224, 0, 0, 0.41667],
      "8639": [0.19444, 0.69224, 0, 0, 0.41667],
      "8642": [0.19444, 0.69224, 0, 0, 0.41667],
      "8643": [0.19444, 0.69224, 0, 0, 0.41667],
      "8644": [0.1808, 0.675, 0, 0, 1.0],
      "8646": [0.1808, 0.675, 0, 0, 1.0],
      "8647": [0.1808, 0.675, 0, 0, 1.0],
      "8648": [0.19444, 0.69224, 0, 0, 0.83334],
      "8649": [0.1808, 0.675, 0, 0, 1.0],
      "8650": [0.19444, 0.69224, 0, 0, 0.83334],
      "8651": [0.01354, 0.52239, 0, 0, 1.0],
      "8652": [0.01354, 0.52239, 0, 0, 1.0],
      "8653": [-0.13313, 0.36687, 0, 0, 1.0],
      "8654": [-0.13313, 0.36687, 0, 0, 1.0],
      "8655": [-0.13313, 0.36687, 0, 0, 1.0],
      "8666": [0.13667, 0.63667, 0, 0, 1.0],
      "8667": [0.13667, 0.63667, 0, 0, 1.0],
      "8669": [-0.13313, 0.37788, 0, 0, 1.0],
      "8672": [-0.064, 0.437, 0, 0, 1.334],
      "8674": [-0.064, 0.437, 0, 0, 1.334],
      "8705": [0, 0.825, 0, 0, 0.5],
      "8708": [0, 0.68889, 0, 0, 0.55556],
      "8709": [0.08167, 0.58167, 0, 0, 0.77778],
      "8717": [0, 0.43056, 0, 0, 0.42917],
      "8722": [-0.03598, 0.46402, 0, 0, 0.5],
      "8724": [0.08198, 0.69224, 0, 0, 0.77778],
      "8726": [0.08167, 0.58167, 0, 0, 0.77778],
      "8733": [0, 0.69224, 0, 0, 0.77778],
      "8736": [0, 0.69224, 0, 0, 0.72222],
      "8737": [0, 0.69224, 0, 0, 0.72222],
      "8738": [0.03517, 0.52239, 0, 0, 0.72222],
      "8739": [0.08167, 0.58167, 0, 0, 0.22222],
      "8740": [0.25142, 0.74111, 0, 0, 0.27778],
      "8741": [0.08167, 0.58167, 0, 0, 0.38889],
      "8742": [0.25142, 0.74111, 0, 0, 0.5],
      "8756": [0, 0.69224, 0, 0, 0.66667],
      "8757": [0, 0.69224, 0, 0, 0.66667],
      "8764": [-0.13313, 0.36687, 0, 0, 0.77778],
      "8765": [-0.13313, 0.37788, 0, 0, 0.77778],
      "8769": [-0.13313, 0.36687, 0, 0, 0.77778],
      "8770": [-0.03625, 0.46375, 0, 0, 0.77778],
      "8774": [0.30274, 0.79383, 0, 0, 0.77778],
      "8776": [-0.01688, 0.48312, 0, 0, 0.77778],
      "8778": [0.08167, 0.58167, 0, 0, 0.77778],
      "8782": [0.06062, 0.54986, 0, 0, 0.77778],
      "8783": [0.06062, 0.54986, 0, 0, 0.77778],
      "8785": [0.08198, 0.58198, 0, 0, 0.77778],
      "8786": [0.08198, 0.58198, 0, 0, 0.77778],
      "8787": [0.08198, 0.58198, 0, 0, 0.77778],
      "8790": [0, 0.69224, 0, 0, 0.77778],
      "8791": [0.22958, 0.72958, 0, 0, 0.77778],
      "8796": [0.08198, 0.91667, 0, 0, 0.77778],
      "8806": [0.25583, 0.75583, 0, 0, 0.77778],
      "8807": [0.25583, 0.75583, 0, 0, 0.77778],
      "8808": [0.25142, 0.75726, 0, 0, 0.77778],
      "8809": [0.25142, 0.75726, 0, 0, 0.77778],
      "8812": [0.25583, 0.75583, 0, 0, 0.5],
      "8814": [0.20576, 0.70576, 0, 0, 0.77778],
      "8815": [0.20576, 0.70576, 0, 0, 0.77778],
      "8816": [0.30274, 0.79383, 0, 0, 0.77778],
      "8817": [0.30274, 0.79383, 0, 0, 0.77778],
      "8818": [0.22958, 0.72958, 0, 0, 0.77778],
      "8819": [0.22958, 0.72958, 0, 0, 0.77778],
      "8822": [0.1808, 0.675, 0, 0, 0.77778],
      "8823": [0.1808, 0.675, 0, 0, 0.77778],
      "8828": [0.13667, 0.63667, 0, 0, 0.77778],
      "8829": [0.13667, 0.63667, 0, 0, 0.77778],
      "8830": [0.22958, 0.72958, 0, 0, 0.77778],
      "8831": [0.22958, 0.72958, 0, 0, 0.77778],
      "8832": [0.20576, 0.70576, 0, 0, 0.77778],
      "8833": [0.20576, 0.70576, 0, 0, 0.77778],
      "8840": [0.30274, 0.79383, 0, 0, 0.77778],
      "8841": [0.30274, 0.79383, 0, 0, 0.77778],
      "8842": [0.13597, 0.63597, 0, 0, 0.77778],
      "8843": [0.13597, 0.63597, 0, 0, 0.77778],
      "8847": [0.03517, 0.54986, 0, 0, 0.77778],
      "8848": [0.03517, 0.54986, 0, 0, 0.77778],
      "8858": [0.08198, 0.58198, 0, 0, 0.77778],
      "8859": [0.08198, 0.58198, 0, 0, 0.77778],
      "8861": [0.08198, 0.58198, 0, 0, 0.77778],
      "8862": [0, 0.675, 0, 0, 0.77778],
      "8863": [0, 0.675, 0, 0, 0.77778],
      "8864": [0, 0.675, 0, 0, 0.77778],
      "8865": [0, 0.675, 0, 0, 0.77778],
      "8872": [0, 0.69224, 0, 0, 0.61111],
      "8873": [0, 0.69224, 0, 0, 0.72222],
      "8874": [0, 0.69224, 0, 0, 0.88889],
      "8876": [0, 0.68889, 0, 0, 0.61111],
      "8877": [0, 0.68889, 0, 0, 0.61111],
      "8878": [0, 0.68889, 0, 0, 0.72222],
      "8879": [0, 0.68889, 0, 0, 0.72222],
      "8882": [0.03517, 0.54986, 0, 0, 0.77778],
      "8883": [0.03517, 0.54986, 0, 0, 0.77778],
      "8884": [0.13667, 0.63667, 0, 0, 0.77778],
      "8885": [0.13667, 0.63667, 0, 0, 0.77778],
      "8888": [0, 0.54986, 0, 0, 1.11111],
      "8890": [0.19444, 0.43056, 0, 0, 0.55556],
      "8891": [0.19444, 0.69224, 0, 0, 0.61111],
      "8892": [0.19444, 0.69224, 0, 0, 0.61111],
      "8901": [0, 0.54986, 0, 0, 0.27778],
      "8903": [0.08167, 0.58167, 0, 0, 0.77778],
      "8905": [0.08167, 0.58167, 0, 0, 0.77778],
      "8906": [0.08167, 0.58167, 0, 0, 0.77778],
      "8907": [0, 0.69224, 0, 0, 0.77778],
      "8908": [0, 0.69224, 0, 0, 0.77778],
      "8909": [-0.03598, 0.46402, 0, 0, 0.77778],
      "8910": [0, 0.54986, 0, 0, 0.76042],
      "8911": [0, 0.54986, 0, 0, 0.76042],
      "8912": [0.03517, 0.54986, 0, 0, 0.77778],
      "8913": [0.03517, 0.54986, 0, 0, 0.77778],
      "8914": [0, 0.54986, 0, 0, 0.66667],
      "8915": [0, 0.54986, 0, 0, 0.66667],
      "8916": [0, 0.69224, 0, 0, 0.66667],
      "8918": [0.0391, 0.5391, 0, 0, 0.77778],
      "8919": [0.0391, 0.5391, 0, 0, 0.77778],
      "8920": [0.03517, 0.54986, 0, 0, 1.33334],
      "8921": [0.03517, 0.54986, 0, 0, 1.33334],
      "8922": [0.38569, 0.88569, 0, 0, 0.77778],
      "8923": [0.38569, 0.88569, 0, 0, 0.77778],
      "8926": [0.13667, 0.63667, 0, 0, 0.77778],
      "8927": [0.13667, 0.63667, 0, 0, 0.77778],
      "8928": [0.30274, 0.79383, 0, 0, 0.77778],
      "8929": [0.30274, 0.79383, 0, 0, 0.77778],
      "8934": [0.23222, 0.74111, 0, 0, 0.77778],
      "8935": [0.23222, 0.74111, 0, 0, 0.77778],
      "8936": [0.23222, 0.74111, 0, 0, 0.77778],
      "8937": [0.23222, 0.74111, 0, 0, 0.77778],
      "8938": [0.20576, 0.70576, 0, 0, 0.77778],
      "8939": [0.20576, 0.70576, 0, 0, 0.77778],
      "8940": [0.30274, 0.79383, 0, 0, 0.77778],
      "8941": [0.30274, 0.79383, 0, 0, 0.77778],
      "8994": [0.19444, 0.69224, 0, 0, 0.77778],
      "8995": [0.19444, 0.69224, 0, 0, 0.77778],
      "9416": [0.15559, 0.69224, 0, 0, 0.90222],
      "9484": [0, 0.69224, 0, 0, 0.5],
      "9488": [0, 0.69224, 0, 0, 0.5],
      "9492": [0, 0.37788, 0, 0, 0.5],
      "9496": [0, 0.37788, 0, 0, 0.5],
      "9585": [0.19444, 0.68889, 0, 0, 0.88889],
      "9586": [0.19444, 0.74111, 0, 0, 0.88889],
      "9632": [0, 0.675, 0, 0, 0.77778],
      "9633": [0, 0.675, 0, 0, 0.77778],
      "9650": [0, 0.54986, 0, 0, 0.72222],
      "9651": [0, 0.54986, 0, 0, 0.72222],
      "9654": [0.03517, 0.54986, 0, 0, 0.77778],
      "9660": [0, 0.54986, 0, 0, 0.72222],
      "9661": [0, 0.54986, 0, 0, 0.72222],
      "9664": [0.03517, 0.54986, 0, 0, 0.77778],
      "9674": [0.11111, 0.69224, 0, 0, 0.66667],
      "9733": [0.19444, 0.69224, 0, 0, 0.94445],
      "10003": [0, 0.69224, 0, 0, 0.83334],
      "10016": [0, 0.69224, 0, 0, 0.83334],
      "10731": [0.11111, 0.69224, 0, 0, 0.66667],
      "10846": [0.19444, 0.75583, 0, 0, 0.61111],
      "10877": [0.13667, 0.63667, 0, 0, 0.77778],
      "10878": [0.13667, 0.63667, 0, 0, 0.77778],
      "10885": [0.25583, 0.75583, 0, 0, 0.77778],
      "10886": [0.25583, 0.75583, 0, 0, 0.77778],
      "10887": [0.13597, 0.63597, 0, 0, 0.77778],
      "10888": [0.13597, 0.63597, 0, 0, 0.77778],
      "10889": [0.26167, 0.75726, 0, 0, 0.77778],
      "10890": [0.26167, 0.75726, 0, 0, 0.77778],
      "10891": [0.48256, 0.98256, 0, 0, 0.77778],
      "10892": [0.48256, 0.98256, 0, 0, 0.77778],
      "10901": [0.13667, 0.63667, 0, 0, 0.77778],
      "10902": [0.13667, 0.63667, 0, 0, 0.77778],
      "10933": [0.25142, 0.75726, 0, 0, 0.77778],
      "10934": [0.25142, 0.75726, 0, 0, 0.77778],
      "10935": [0.26167, 0.75726, 0, 0, 0.77778],
      "10936": [0.26167, 0.75726, 0, 0, 0.77778],
      "10937": [0.26167, 0.75726, 0, 0, 0.77778],
      "10938": [0.26167, 0.75726, 0, 0, 0.77778],
      "10949": [0.25583, 0.75583, 0, 0, 0.77778],
      "10950": [0.25583, 0.75583, 0, 0, 0.77778],
      "10955": [0.28481, 0.79383, 0, 0, 0.77778],
      "10956": [0.28481, 0.79383, 0, 0, 0.77778],
      "57350": [0.08167, 0.58167, 0, 0, 0.22222],
      "57351": [0.08167, 0.58167, 0, 0, 0.38889],
      "57352": [0.08167, 0.58167, 0, 0, 0.77778],
      "57353": [0, 0.43056, 0.04028, 0, 0.66667],
      "57356": [0.25142, 0.75726, 0, 0, 0.77778],
      "57357": [0.25142, 0.75726, 0, 0, 0.77778],
      "57358": [0.41951, 0.91951, 0, 0, 0.77778],
      "57359": [0.30274, 0.79383, 0, 0, 0.77778],
      "57360": [0.30274, 0.79383, 0, 0, 0.77778],
      "57361": [0.41951, 0.91951, 0, 0, 0.77778],
      "57366": [0.25142, 0.75726, 0, 0, 0.77778],
      "57367": [0.25142, 0.75726, 0, 0, 0.77778],
      "57368": [0.25142, 0.75726, 0, 0, 0.77778],
      "57369": [0.25142, 0.75726, 0, 0, 0.77778],
      "57370": [0.13597, 0.63597, 0, 0, 0.77778],
      "57371": [0.13597, 0.63597, 0, 0, 0.77778]
    },
    "Caligraphic-Regular": {
      "32": [0, 0, 0, 0, 0.25],
      "65": [0, 0.68333, 0, 0.19445, 0.79847],
      "66": [0, 0.68333, 0.03041, 0.13889, 0.65681],
      "67": [0, 0.68333, 0.05834, 0.13889, 0.52653],
      "68": [0, 0.68333, 0.02778, 0.08334, 0.77139],
      "69": [0, 0.68333, 0.08944, 0.11111, 0.52778],
      "70": [0, 0.68333, 0.09931, 0.11111, 0.71875],
      "71": [0.09722, 0.68333, 0.0593, 0.11111, 0.59487],
      "72": [0, 0.68333, 0.00965, 0.11111, 0.84452],
      "73": [0, 0.68333, 0.07382, 0, 0.54452],
      "74": [0.09722, 0.68333, 0.18472, 0.16667, 0.67778],
      "75": [0, 0.68333, 0.01445, 0.05556, 0.76195],
      "76": [0, 0.68333, 0, 0.13889, 0.68972],
      "77": [0, 0.68333, 0, 0.13889, 1.2009],
      "78": [0, 0.68333, 0.14736, 0.08334, 0.82049],
      "79": [0, 0.68333, 0.02778, 0.11111, 0.79611],
      "80": [0, 0.68333, 0.08222, 0.08334, 0.69556],
      "81": [0.09722, 0.68333, 0, 0.11111, 0.81667],
      "82": [0, 0.68333, 0, 0.08334, 0.8475],
      "83": [0, 0.68333, 0.075, 0.13889, 0.60556],
      "84": [0, 0.68333, 0.25417, 0, 0.54464],
      "85": [0, 0.68333, 0.09931, 0.08334, 0.62583],
      "86": [0, 0.68333, 0.08222, 0, 0.61278],
      "87": [0, 0.68333, 0.08222, 0.08334, 0.98778],
      "88": [0, 0.68333, 0.14643, 0.13889, 0.7133],
      "89": [0.09722, 0.68333, 0.08222, 0.08334, 0.66834],
      "90": [0, 0.68333, 0.07944, 0.13889, 0.72473],
      "160": [0, 0, 0, 0, 0.25]
    },
    "Fraktur-Regular": {
      "32": [0, 0, 0, 0, 0.25],
      "33": [0, 0.69141, 0, 0, 0.29574],
      "34": [0, 0.69141, 0, 0, 0.21471],
      "38": [0, 0.69141, 0, 0, 0.73786],
      "39": [0, 0.69141, 0, 0, 0.21201],
      "40": [0.24982, 0.74947, 0, 0, 0.38865],
      "41": [0.24982, 0.74947, 0, 0, 0.38865],
      "42": [0, 0.62119, 0, 0, 0.27764],
      "43": [0.08319, 0.58283, 0, 0, 0.75623],
      "44": [0, 0.10803, 0, 0, 0.27764],
      "45": [0.08319, 0.58283, 0, 0, 0.75623],
      "46": [0, 0.10803, 0, 0, 0.27764],
      "47": [0.24982, 0.74947, 0, 0, 0.50181],
      "48": [0, 0.47534, 0, 0, 0.50181],
      "49": [0, 0.47534, 0, 0, 0.50181],
      "50": [0, 0.47534, 0, 0, 0.50181],
      "51": [0.18906, 0.47534, 0, 0, 0.50181],
      "52": [0.18906, 0.47534, 0, 0, 0.50181],
      "53": [0.18906, 0.47534, 0, 0, 0.50181],
      "54": [0, 0.69141, 0, 0, 0.50181],
      "55": [0.18906, 0.47534, 0, 0, 0.50181],
      "56": [0, 0.69141, 0, 0, 0.50181],
      "57": [0.18906, 0.47534, 0, 0, 0.50181],
      "58": [0, 0.47534, 0, 0, 0.21606],
      "59": [0.12604, 0.47534, 0, 0, 0.21606],
      "61": [-0.13099, 0.36866, 0, 0, 0.75623],
      "63": [0, 0.69141, 0, 0, 0.36245],
      "65": [0, 0.69141, 0, 0, 0.7176],
      "66": [0, 0.69141, 0, 0, 0.88397],
      "67": [0, 0.69141, 0, 0, 0.61254],
      "68": [0, 0.69141, 0, 0, 0.83158],
      "69": [0, 0.69141, 0, 0, 0.66278],
      "70": [0.12604, 0.69141, 0, 0, 0.61119],
      "71": [0, 0.69141, 0, 0, 0.78539],
      "72": [0.06302, 0.69141, 0, 0, 0.7203],
      "73": [0, 0.69141, 0, 0, 0.55448],
      "74": [0.12604, 0.69141, 0, 0, 0.55231],
      "75": [0, 0.69141, 0, 0, 0.66845],
      "76": [0, 0.69141, 0, 0, 0.66602],
      "77": [0, 0.69141, 0, 0, 1.04953],
      "78": [0, 0.69141, 0, 0, 0.83212],
      "79": [0, 0.69141, 0, 0, 0.82699],
      "80": [0.18906, 0.69141, 0, 0, 0.82753],
      "81": [0.03781, 0.69141, 0, 0, 0.82699],
      "82": [0, 0.69141, 0, 0, 0.82807],
      "83": [0, 0.69141, 0, 0, 0.82861],
      "84": [0, 0.69141, 0, 0, 0.66899],
      "85": [0, 0.69141, 0, 0, 0.64576],
      "86": [0, 0.69141, 0, 0, 0.83131],
      "87": [0, 0.69141, 0, 0, 1.04602],
      "88": [0, 0.69141, 0, 0, 0.71922],
      "89": [0.18906, 0.69141, 0, 0, 0.83293],
      "90": [0.12604, 0.69141, 0, 0, 0.60201],
      "91": [0.24982, 0.74947, 0, 0, 0.27764],
      "93": [0.24982, 0.74947, 0, 0, 0.27764],
      "94": [0, 0.69141, 0, 0, 0.49965],
      "97": [0, 0.47534, 0, 0, 0.50046],
      "98": [0, 0.69141, 0, 0, 0.51315],
      "99": [0, 0.47534, 0, 0, 0.38946],
      "100": [0, 0.62119, 0, 0, 0.49857],
      "101": [0, 0.47534, 0, 0, 0.40053],
      "102": [0.18906, 0.69141, 0, 0, 0.32626],
      "103": [0.18906, 0.47534, 0, 0, 0.5037],
      "104": [0.18906, 0.69141, 0, 0, 0.52126],
      "105": [0, 0.69141, 0, 0, 0.27899],
      "106": [0, 0.69141, 0, 0, 0.28088],
      "107": [0, 0.69141, 0, 0, 0.38946],
      "108": [0, 0.69141, 0, 0, 0.27953],
      "109": [0, 0.47534, 0, 0, 0.76676],
      "110": [0, 0.47534, 0, 0, 0.52666],
      "111": [0, 0.47534, 0, 0, 0.48885],
      "112": [0.18906, 0.52396, 0, 0, 0.50046],
      "113": [0.18906, 0.47534, 0, 0, 0.48912],
      "114": [0, 0.47534, 0, 0, 0.38919],
      "115": [0, 0.47534, 0, 0, 0.44266],
      "116": [0, 0.62119, 0, 0, 0.33301],
      "117": [0, 0.47534, 0, 0, 0.5172],
      "118": [0, 0.52396, 0, 0, 0.5118],
      "119": [0, 0.52396, 0, 0, 0.77351],
      "120": [0.18906, 0.47534, 0, 0, 0.38865],
      "121": [0.18906, 0.47534, 0, 0, 0.49884],
      "122": [0.18906, 0.47534, 0, 0, 0.39054],
      "160": [0, 0, 0, 0, 0.25],
      "8216": [0, 0.69141, 0, 0, 0.21471],
      "8217": [0, 0.69141, 0, 0, 0.21471],
      "58112": [0, 0.62119, 0, 0, 0.49749],
      "58113": [0, 0.62119, 0, 0, 0.4983],
      "58114": [0.18906, 0.69141, 0, 0, 0.33328],
      "58115": [0.18906, 0.69141, 0, 0, 0.32923],
      "58116": [0.18906, 0.47534, 0, 0, 0.50343],
      "58117": [0, 0.69141, 0, 0, 0.33301],
      "58118": [0, 0.62119, 0, 0, 0.33409],
      "58119": [0, 0.47534, 0, 0, 0.50073]
    },
    "Main-Bold": {
      "32": [0, 0, 0, 0, 0.25],
      "33": [0, 0.69444, 0, 0, 0.35],
      "34": [0, 0.69444, 0, 0, 0.60278],
      "35": [0.19444, 0.69444, 0, 0, 0.95833],
      "36": [0.05556, 0.75, 0, 0, 0.575],
      "37": [0.05556, 0.75, 0, 0, 0.95833],
      "38": [0, 0.69444, 0, 0, 0.89444],
      "39": [0, 0.69444, 0, 0, 0.31944],
      "40": [0.25, 0.75, 0, 0, 0.44722],
      "41": [0.25, 0.75, 0, 0, 0.44722],
      "42": [0, 0.75, 0, 0, 0.575],
      "43": [0.13333, 0.63333, 0, 0, 0.89444],
      "44": [0.19444, 0.15556, 0, 0, 0.31944],
      "45": [0, 0.44444, 0, 0, 0.38333],
      "46": [0, 0.15556, 0, 0, 0.31944],
      "47": [0.25, 0.75, 0, 0, 0.575],
      "48": [0, 0.64444, 0, 0, 0.575],
      "49": [0, 0.64444, 0, 0, 0.575],
      "50": [0, 0.64444, 0, 0, 0.575],
      "51": [0, 0.64444, 0, 0, 0.575],
      "52": [0, 0.64444, 0, 0, 0.575],
      "53": [0, 0.64444, 0, 0, 0.575],
      "54": [0, 0.64444, 0, 0, 0.575],
      "55": [0, 0.64444, 0, 0, 0.575],
      "56": [0, 0.64444, 0, 0, 0.575],
      "57": [0, 0.64444, 0, 0, 0.575],
      "58": [0, 0.44444, 0, 0, 0.31944],
      "59": [0.19444, 0.44444, 0, 0, 0.31944],
      "60": [0.08556, 0.58556, 0, 0, 0.89444],
      "61": [-0.10889, 0.39111, 0, 0, 0.89444],
      "62": [0.08556, 0.58556, 0, 0, 0.89444],
      "63": [0, 0.69444, 0, 0, 0.54305],
      "64": [0, 0.69444, 0, 0, 0.89444],
      "65": [0, 0.68611, 0, 0, 0.86944],
      "66": [0, 0.68611, 0, 0, 0.81805],
      "67": [0, 0.68611, 0, 0, 0.83055],
      "68": [0, 0.68611, 0, 0, 0.88194],
      "69": [0, 0.68611, 0, 0, 0.75555],
      "70": [0, 0.68611, 0, 0, 0.72361],
      "71": [0, 0.68611, 0, 0, 0.90416],
      "72": [0, 0.68611, 0, 0, 0.9],
      "73": [0, 0.68611, 0, 0, 0.43611],
      "74": [0, 0.68611, 0, 0, 0.59444],
      "75": [0, 0.68611, 0, 0, 0.90138],
      "76": [0, 0.68611, 0, 0, 0.69166],
      "77": [0, 0.68611, 0, 0, 1.09166],
      "78": [0, 0.68611, 0, 0, 0.9],
      "79": [0, 0.68611, 0, 0, 0.86388],
      "80": [0, 0.68611, 0, 0, 0.78611],
      "81": [0.19444, 0.68611, 0, 0, 0.86388],
      "82": [0, 0.68611, 0, 0, 0.8625],
      "83": [0, 0.68611, 0, 0, 0.63889],
      "84": [0, 0.68611, 0, 0, 0.8],
      "85": [0, 0.68611, 0, 0, 0.88472],
      "86": [0, 0.68611, 0.01597, 0, 0.86944],
      "87": [0, 0.68611, 0.01597, 0, 1.18888],
      "88": [0, 0.68611, 0, 0, 0.86944],
      "89": [0, 0.68611, 0.02875, 0, 0.86944],
      "90": [0, 0.68611, 0, 0, 0.70277],
      "91": [0.25, 0.75, 0, 0, 0.31944],
      "92": [0.25, 0.75, 0, 0, 0.575],
      "93": [0.25, 0.75, 0, 0, 0.31944],
      "94": [0, 0.69444, 0, 0, 0.575],
      "95": [0.31, 0.13444, 0.03194, 0, 0.575],
      "97": [0, 0.44444, 0, 0, 0.55902],
      "98": [0, 0.69444, 0, 0, 0.63889],
      "99": [0, 0.44444, 0, 0, 0.51111],
      "100": [0, 0.69444, 0, 0, 0.63889],
      "101": [0, 0.44444, 0, 0, 0.52708],
      "102": [0, 0.69444, 0.10903, 0, 0.35139],
      "103": [0.19444, 0.44444, 0.01597, 0, 0.575],
      "104": [0, 0.69444, 0, 0, 0.63889],
      "105": [0, 0.69444, 0, 0, 0.31944],
      "106": [0.19444, 0.69444, 0, 0, 0.35139],
      "107": [0, 0.69444, 0, 0, 0.60694],
      "108": [0, 0.69444, 0, 0, 0.31944],
      "109": [0, 0.44444, 0, 0, 0.95833],
      "110": [0, 0.44444, 0, 0, 0.63889],
      "111": [0, 0.44444, 0, 0, 0.575],
      "112": [0.19444, 0.44444, 0, 0, 0.63889],
      "113": [0.19444, 0.44444, 0, 0, 0.60694],
      "114": [0, 0.44444, 0, 0, 0.47361],
      "115": [0, 0.44444, 0, 0, 0.45361],
      "116": [0, 0.63492, 0, 0, 0.44722],
      "117": [0, 0.44444, 0, 0, 0.63889],
      "118": [0, 0.44444, 0.01597, 0, 0.60694],
      "119": [0, 0.44444, 0.01597, 0, 0.83055],
      "120": [0, 0.44444, 0, 0, 0.60694],
      "121": [0.19444, 0.44444, 0.01597, 0, 0.60694],
      "122": [0, 0.44444, 0, 0, 0.51111],
      "123": [0.25, 0.75, 0, 0, 0.575],
      "124": [0.25, 0.75, 0, 0, 0.31944],
      "125": [0.25, 0.75, 0, 0, 0.575],
      "126": [0.35, 0.34444, 0, 0, 0.575],
      "160": [0, 0, 0, 0, 0.25],
      "163": [0, 0.69444, 0, 0, 0.86853],
      "168": [0, 0.69444, 0, 0, 0.575],
      "172": [0, 0.44444, 0, 0, 0.76666],
      "176": [0, 0.69444, 0, 0, 0.86944],
      "177": [0.13333, 0.63333, 0, 0, 0.89444],
      "184": [0.17014, 0, 0, 0, 0.51111],
      "198": [0, 0.68611, 0, 0, 1.04166],
      "215": [0.13333, 0.63333, 0, 0, 0.89444],
      "216": [0.04861, 0.73472, 0, 0, 0.89444],
      "223": [0, 0.69444, 0, 0, 0.59722],
      "230": [0, 0.44444, 0, 0, 0.83055],
      "247": [0.13333, 0.63333, 0, 0, 0.89444],
      "248": [0.09722, 0.54167, 0, 0, 0.575],
      "305": [0, 0.44444, 0, 0, 0.31944],
      "338": [0, 0.68611, 0, 0, 1.16944],
      "339": [0, 0.44444, 0, 0, 0.89444],
      "567": [0.19444, 0.44444, 0, 0, 0.35139],
      "710": [0, 0.69444, 0, 0, 0.575],
      "711": [0, 0.63194, 0, 0, 0.575],
      "713": [0, 0.59611, 0, 0, 0.575],
      "714": [0, 0.69444, 0, 0, 0.575],
      "715": [0, 0.69444, 0, 0, 0.575],
      "728": [0, 0.69444, 0, 0, 0.575],
      "729": [0, 0.69444, 0, 0, 0.31944],
      "730": [0, 0.69444, 0, 0, 0.86944],
      "732": [0, 0.69444, 0, 0, 0.575],
      "733": [0, 0.69444, 0, 0, 0.575],
      "915": [0, 0.68611, 0, 0, 0.69166],
      "916": [0, 0.68611, 0, 0, 0.95833],
      "920": [0, 0.68611, 0, 0, 0.89444],
      "923": [0, 0.68611, 0, 0, 0.80555],
      "926": [0, 0.68611, 0, 0, 0.76666],
      "928": [0, 0.68611, 0, 0, 0.9],
      "931": [0, 0.68611, 0, 0, 0.83055],
      "933": [0, 0.68611, 0, 0, 0.89444],
      "934": [0, 0.68611, 0, 0, 0.83055],
      "936": [0, 0.68611, 0, 0, 0.89444],
      "937": [0, 0.68611, 0, 0, 0.83055],
      "8211": [0, 0.44444, 0.03194, 0, 0.575],
      "8212": [0, 0.44444, 0.03194, 0, 1.14999],
      "8216": [0, 0.69444, 0, 0, 0.31944],
      "8217": [0, 0.69444, 0, 0, 0.31944],
      "8220": [0, 0.69444, 0, 0, 0.60278],
      "8221": [0, 0.69444, 0, 0, 0.60278],
      "8224": [0.19444, 0.69444, 0, 0, 0.51111],
      "8225": [0.19444, 0.69444, 0, 0, 0.51111],
      "8242": [0, 0.55556, 0, 0, 0.34444],
      "8407": [0, 0.72444, 0.15486, 0, 0.575],
      "8463": [0, 0.69444, 0, 0, 0.66759],
      "8465": [0, 0.69444, 0, 0, 0.83055],
      "8467": [0, 0.69444, 0, 0, 0.47361],
      "8472": [0.19444, 0.44444, 0, 0, 0.74027],
      "8476": [0, 0.69444, 0, 0, 0.83055],
      "8501": [0, 0.69444, 0, 0, 0.70277],
      "8592": [-0.10889, 0.39111, 0, 0, 1.14999],
      "8593": [0.19444, 0.69444, 0, 0, 0.575],
      "8594": [-0.10889, 0.39111, 0, 0, 1.14999],
      "8595": [0.19444, 0.69444, 0, 0, 0.575],
      "8596": [-0.10889, 0.39111, 0, 0, 1.14999],
      "8597": [0.25, 0.75, 0, 0, 0.575],
      "8598": [0.19444, 0.69444, 0, 0, 1.14999],
      "8599": [0.19444, 0.69444, 0, 0, 1.14999],
      "8600": [0.19444, 0.69444, 0, 0, 1.14999],
      "8601": [0.19444, 0.69444, 0, 0, 1.14999],
      "8636": [-0.10889, 0.39111, 0, 0, 1.14999],
      "8637": [-0.10889, 0.39111, 0, 0, 1.14999],
      "8640": [-0.10889, 0.39111, 0, 0, 1.14999],
      "8641": [-0.10889, 0.39111, 0, 0, 1.14999],
      "8656": [-0.10889, 0.39111, 0, 0, 1.14999],
      "8657": [0.19444, 0.69444, 0, 0, 0.70277],
      "8658": [-0.10889, 0.39111, 0, 0, 1.14999],
      "8659": [0.19444, 0.69444, 0, 0, 0.70277],
      "8660": [-0.10889, 0.39111, 0, 0, 1.14999],
      "8661": [0.25, 0.75, 0, 0, 0.70277],
      "8704": [0, 0.69444, 0, 0, 0.63889],
      "8706": [0, 0.69444, 0.06389, 0, 0.62847],
      "8707": [0, 0.69444, 0, 0, 0.63889],
      "8709": [0.05556, 0.75, 0, 0, 0.575],
      "8711": [0, 0.68611, 0, 0, 0.95833],
      "8712": [0.08556, 0.58556, 0, 0, 0.76666],
      "8715": [0.08556, 0.58556, 0, 0, 0.76666],
      "8722": [0.13333, 0.63333, 0, 0, 0.89444],
      "8723": [0.13333, 0.63333, 0, 0, 0.89444],
      "8725": [0.25, 0.75, 0, 0, 0.575],
      "8726": [0.25, 0.75, 0, 0, 0.575],
      "8727": [-0.02778, 0.47222, 0, 0, 0.575],
      "8728": [-0.02639, 0.47361, 0, 0, 0.575],
      "8729": [-0.02639, 0.47361, 0, 0, 0.575],
      "8730": [0.18, 0.82, 0, 0, 0.95833],
      "8733": [0, 0.44444, 0, 0, 0.89444],
      "8734": [0, 0.44444, 0, 0, 1.14999],
      "8736": [0, 0.69224, 0, 0, 0.72222],
      "8739": [0.25, 0.75, 0, 0, 0.31944],
      "8741": [0.25, 0.75, 0, 0, 0.575],
      "8743": [0, 0.55556, 0, 0, 0.76666],
      "8744": [0, 0.55556, 0, 0, 0.76666],
      "8745": [0, 0.55556, 0, 0, 0.76666],
      "8746": [0, 0.55556, 0, 0, 0.76666],
      "8747": [0.19444, 0.69444, 0.12778, 0, 0.56875],
      "8764": [-0.10889, 0.39111, 0, 0, 0.89444],
      "8768": [0.19444, 0.69444, 0, 0, 0.31944],
      "8771": [0.00222, 0.50222, 0, 0, 0.89444],
      "8773": [0.027, 0.638, 0, 0, 0.894],
      "8776": [0.02444, 0.52444, 0, 0, 0.89444],
      "8781": [0.00222, 0.50222, 0, 0, 0.89444],
      "8801": [0.00222, 0.50222, 0, 0, 0.89444],
      "8804": [0.19667, 0.69667, 0, 0, 0.89444],
      "8805": [0.19667, 0.69667, 0, 0, 0.89444],
      "8810": [0.08556, 0.58556, 0, 0, 1.14999],
      "8811": [0.08556, 0.58556, 0, 0, 1.14999],
      "8826": [0.08556, 0.58556, 0, 0, 0.89444],
      "8827": [0.08556, 0.58556, 0, 0, 0.89444],
      "8834": [0.08556, 0.58556, 0, 0, 0.89444],
      "8835": [0.08556, 0.58556, 0, 0, 0.89444],
      "8838": [0.19667, 0.69667, 0, 0, 0.89444],
      "8839": [0.19667, 0.69667, 0, 0, 0.89444],
      "8846": [0, 0.55556, 0, 0, 0.76666],
      "8849": [0.19667, 0.69667, 0, 0, 0.89444],
      "8850": [0.19667, 0.69667, 0, 0, 0.89444],
      "8851": [0, 0.55556, 0, 0, 0.76666],
      "8852": [0, 0.55556, 0, 0, 0.76666],
      "8853": [0.13333, 0.63333, 0, 0, 0.89444],
      "8854": [0.13333, 0.63333, 0, 0, 0.89444],
      "8855": [0.13333, 0.63333, 0, 0, 0.89444],
      "8856": [0.13333, 0.63333, 0, 0, 0.89444],
      "8857": [0.13333, 0.63333, 0, 0, 0.89444],
      "8866": [0, 0.69444, 0, 0, 0.70277],
      "8867": [0, 0.69444, 0, 0, 0.70277],
      "8868": [0, 0.69444, 0, 0, 0.89444],
      "8869": [0, 0.69444, 0, 0, 0.89444],
      "8900": [-0.02639, 0.47361, 0, 0, 0.575],
      "8901": [-0.02639, 0.47361, 0, 0, 0.31944],
      "8902": [-0.02778, 0.47222, 0, 0, 0.575],
      "8968": [0.25, 0.75, 0, 0, 0.51111],
      "8969": [0.25, 0.75, 0, 0, 0.51111],
      "8970": [0.25, 0.75, 0, 0, 0.51111],
      "8971": [0.25, 0.75, 0, 0, 0.51111],
      "8994": [-0.13889, 0.36111, 0, 0, 1.14999],
      "8995": [-0.13889, 0.36111, 0, 0, 1.14999],
      "9651": [0.19444, 0.69444, 0, 0, 1.02222],
      "9657": [-0.02778, 0.47222, 0, 0, 0.575],
      "9661": [0.19444, 0.69444, 0, 0, 1.02222],
      "9667": [-0.02778, 0.47222, 0, 0, 0.575],
      "9711": [0.19444, 0.69444, 0, 0, 1.14999],
      "9824": [0.12963, 0.69444, 0, 0, 0.89444],
      "9825": [0.12963, 0.69444, 0, 0, 0.89444],
      "9826": [0.12963, 0.69444, 0, 0, 0.89444],
      "9827": [0.12963, 0.69444, 0, 0, 0.89444],
      "9837": [0, 0.75, 0, 0, 0.44722],
      "9838": [0.19444, 0.69444, 0, 0, 0.44722],
      "9839": [0.19444, 0.69444, 0, 0, 0.44722],
      "10216": [0.25, 0.75, 0, 0, 0.44722],
      "10217": [0.25, 0.75, 0, 0, 0.44722],
      "10815": [0, 0.68611, 0, 0, 0.9],
      "10927": [0.19667, 0.69667, 0, 0, 0.89444],
      "10928": [0.19667, 0.69667, 0, 0, 0.89444],
      "57376": [0.19444, 0.69444, 0, 0, 0]
    },
    "Main-BoldItalic": {
      "32": [0, 0, 0, 0, 0.25],
      "33": [0, 0.69444, 0.11417, 0, 0.38611],
      "34": [0, 0.69444, 0.07939, 0, 0.62055],
      "35": [0.19444, 0.69444, 0.06833, 0, 0.94444],
      "37": [0.05556, 0.75, 0.12861, 0, 0.94444],
      "38": [0, 0.69444, 0.08528, 0, 0.88555],
      "39": [0, 0.69444, 0.12945, 0, 0.35555],
      "40": [0.25, 0.75, 0.15806, 0, 0.47333],
      "41": [0.25, 0.75, 0.03306, 0, 0.47333],
      "42": [0, 0.75, 0.14333, 0, 0.59111],
      "43": [0.10333, 0.60333, 0.03306, 0, 0.88555],
      "44": [0.19444, 0.14722, 0, 0, 0.35555],
      "45": [0, 0.44444, 0.02611, 0, 0.41444],
      "46": [0, 0.14722, 0, 0, 0.35555],
      "47": [0.25, 0.75, 0.15806, 0, 0.59111],
      "48": [0, 0.64444, 0.13167, 0, 0.59111],
      "49": [0, 0.64444, 0.13167, 0, 0.59111],
      "50": [0, 0.64444, 0.13167, 0, 0.59111],
      "51": [0, 0.64444, 0.13167, 0, 0.59111],
      "52": [0.19444, 0.64444, 0.13167, 0, 0.59111],
      "53": [0, 0.64444, 0.13167, 0, 0.59111],
      "54": [0, 0.64444, 0.13167, 0, 0.59111],
      "55": [0.19444, 0.64444, 0.13167, 0, 0.59111],
      "56": [0, 0.64444, 0.13167, 0, 0.59111],
      "57": [0, 0.64444, 0.13167, 0, 0.59111],
      "58": [0, 0.44444, 0.06695, 0, 0.35555],
      "59": [0.19444, 0.44444, 0.06695, 0, 0.35555],
      "61": [-0.10889, 0.39111, 0.06833, 0, 0.88555],
      "63": [0, 0.69444, 0.11472, 0, 0.59111],
      "64": [0, 0.69444, 0.09208, 0, 0.88555],
      "65": [0, 0.68611, 0, 0, 0.86555],
      "66": [0, 0.68611, 0.0992, 0, 0.81666],
      "67": [0, 0.68611, 0.14208, 0, 0.82666],
      "68": [0, 0.68611, 0.09062, 0, 0.87555],
      "69": [0, 0.68611, 0.11431, 0, 0.75666],
      "70": [0, 0.68611, 0.12903, 0, 0.72722],
      "71": [0, 0.68611, 0.07347, 0, 0.89527],
      "72": [0, 0.68611, 0.17208, 0, 0.8961],
      "73": [0, 0.68611, 0.15681, 0, 0.47166],
      "74": [0, 0.68611, 0.145, 0, 0.61055],
      "75": [0, 0.68611, 0.14208, 0, 0.89499],
      "76": [0, 0.68611, 0, 0, 0.69777],
      "77": [0, 0.68611, 0.17208, 0, 1.07277],
      "78": [0, 0.68611, 0.17208, 0, 0.8961],
      "79": [0, 0.68611, 0.09062, 0, 0.85499],
      "80": [0, 0.68611, 0.0992, 0, 0.78721],
      "81": [0.19444, 0.68611, 0.09062, 0, 0.85499],
      "82": [0, 0.68611, 0.02559, 0, 0.85944],
      "83": [0, 0.68611, 0.11264, 0, 0.64999],
      "84": [0, 0.68611, 0.12903, 0, 0.7961],
      "85": [0, 0.68611, 0.17208, 0, 0.88083],
      "86": [0, 0.68611, 0.18625, 0, 0.86555],
      "87": [0, 0.68611, 0.18625, 0, 1.15999],
      "88": [0, 0.68611, 0.15681, 0, 0.86555],
      "89": [0, 0.68611, 0.19803, 0, 0.86555],
      "90": [0, 0.68611, 0.14208, 0, 0.70888],
      "91": [0.25, 0.75, 0.1875, 0, 0.35611],
      "93": [0.25, 0.75, 0.09972, 0, 0.35611],
      "94": [0, 0.69444, 0.06709, 0, 0.59111],
      "95": [0.31, 0.13444, 0.09811, 0, 0.59111],
      "97": [0, 0.44444, 0.09426, 0, 0.59111],
      "98": [0, 0.69444, 0.07861, 0, 0.53222],
      "99": [0, 0.44444, 0.05222, 0, 0.53222],
      "100": [0, 0.69444, 0.10861, 0, 0.59111],
      "101": [0, 0.44444, 0.085, 0, 0.53222],
      "102": [0.19444, 0.69444, 0.21778, 0, 0.4],
      "103": [0.19444, 0.44444, 0.105, 0, 0.53222],
      "104": [0, 0.69444, 0.09426, 0, 0.59111],
      "105": [0, 0.69326, 0.11387, 0, 0.35555],
      "106": [0.19444, 0.69326, 0.1672, 0, 0.35555],
      "107": [0, 0.69444, 0.11111, 0, 0.53222],
      "108": [0, 0.69444, 0.10861, 0, 0.29666],
      "109": [0, 0.44444, 0.09426, 0, 0.94444],
      "110": [0, 0.44444, 0.09426, 0, 0.64999],
      "111": [0, 0.44444, 0.07861, 0, 0.59111],
      "112": [0.19444, 0.44444, 0.07861, 0, 0.59111],
      "113": [0.19444, 0.44444, 0.105, 0, 0.53222],
      "114": [0, 0.44444, 0.11111, 0, 0.50167],
      "115": [0, 0.44444, 0.08167, 0, 0.48694],
      "116": [0, 0.63492, 0.09639, 0, 0.385],
      "117": [0, 0.44444, 0.09426, 0, 0.62055],
      "118": [0, 0.44444, 0.11111, 0, 0.53222],
      "119": [0, 0.44444, 0.11111, 0, 0.76777],
      "120": [0, 0.44444, 0.12583, 0, 0.56055],
      "121": [0.19444, 0.44444, 0.105, 0, 0.56166],
      "122": [0, 0.44444, 0.13889, 0, 0.49055],
      "126": [0.35, 0.34444, 0.11472, 0, 0.59111],
      "160": [0, 0, 0, 0, 0.25],
      "168": [0, 0.69444, 0.11473, 0, 0.59111],
      "176": [0, 0.69444, 0, 0, 0.94888],
      "184": [0.17014, 0, 0, 0, 0.53222],
      "198": [0, 0.68611, 0.11431, 0, 1.02277],
      "216": [0.04861, 0.73472, 0.09062, 0, 0.88555],
      "223": [0.19444, 0.69444, 0.09736, 0, 0.665],
      "230": [0, 0.44444, 0.085, 0, 0.82666],
      "248": [0.09722, 0.54167, 0.09458, 0, 0.59111],
      "305": [0, 0.44444, 0.09426, 0, 0.35555],
      "338": [0, 0.68611, 0.11431, 0, 1.14054],
      "339": [0, 0.44444, 0.085, 0, 0.82666],
      "567": [0.19444, 0.44444, 0.04611, 0, 0.385],
      "710": [0, 0.69444, 0.06709, 0, 0.59111],
      "711": [0, 0.63194, 0.08271, 0, 0.59111],
      "713": [0, 0.59444, 0.10444, 0, 0.59111],
      "714": [0, 0.69444, 0.08528, 0, 0.59111],
      "715": [0, 0.69444, 0, 0, 0.59111],
      "728": [0, 0.69444, 0.10333, 0, 0.59111],
      "729": [0, 0.69444, 0.12945, 0, 0.35555],
      "730": [0, 0.69444, 0, 0, 0.94888],
      "732": [0, 0.69444, 0.11472, 0, 0.59111],
      "733": [0, 0.69444, 0.11472, 0, 0.59111],
      "915": [0, 0.68611, 0.12903, 0, 0.69777],
      "916": [0, 0.68611, 0, 0, 0.94444],
      "920": [0, 0.68611, 0.09062, 0, 0.88555],
      "923": [0, 0.68611, 0, 0, 0.80666],
      "926": [0, 0.68611, 0.15092, 0, 0.76777],
      "928": [0, 0.68611, 0.17208, 0, 0.8961],
      "931": [0, 0.68611, 0.11431, 0, 0.82666],
      "933": [0, 0.68611, 0.10778, 0, 0.88555],
      "934": [0, 0.68611, 0.05632, 0, 0.82666],
      "936": [0, 0.68611, 0.10778, 0, 0.88555],
      "937": [0, 0.68611, 0.0992, 0, 0.82666],
      "8211": [0, 0.44444, 0.09811, 0, 0.59111],
      "8212": [0, 0.44444, 0.09811, 0, 1.18221],
      "8216": [0, 0.69444, 0.12945, 0, 0.35555],
      "8217": [0, 0.69444, 0.12945, 0, 0.35555],
      "8220": [0, 0.69444, 0.16772, 0, 0.62055],
      "8221": [0, 0.69444, 0.07939, 0, 0.62055]
    },
    "Main-Italic": {
      "32": [0, 0, 0, 0, 0.25],
      "33": [0, 0.69444, 0.12417, 0, 0.30667],
      "34": [0, 0.69444, 0.06961, 0, 0.51444],
      "35": [0.19444, 0.69444, 0.06616, 0, 0.81777],
      "37": [0.05556, 0.75, 0.13639, 0, 0.81777],
      "38": [0, 0.69444, 0.09694, 0, 0.76666],
      "39": [0, 0.69444, 0.12417, 0, 0.30667],
      "40": [0.25, 0.75, 0.16194, 0, 0.40889],
      "41": [0.25, 0.75, 0.03694, 0, 0.40889],
      "42": [0, 0.75, 0.14917, 0, 0.51111],
      "43": [0.05667, 0.56167, 0.03694, 0, 0.76666],
      "44": [0.19444, 0.10556, 0, 0, 0.30667],
      "45": [0, 0.43056, 0.02826, 0, 0.35778],
      "46": [0, 0.10556, 0, 0, 0.30667],
      "47": [0.25, 0.75, 0.16194, 0, 0.51111],
      "48": [0, 0.64444, 0.13556, 0, 0.51111],
      "49": [0, 0.64444, 0.13556, 0, 0.51111],
      "50": [0, 0.64444, 0.13556, 0, 0.51111],
      "51": [0, 0.64444, 0.13556, 0, 0.51111],
      "52": [0.19444, 0.64444, 0.13556, 0, 0.51111],
      "53": [0, 0.64444, 0.13556, 0, 0.51111],
      "54": [0, 0.64444, 0.13556, 0, 0.51111],
      "55": [0.19444, 0.64444, 0.13556, 0, 0.51111],
      "56": [0, 0.64444, 0.13556, 0, 0.51111],
      "57": [0, 0.64444, 0.13556, 0, 0.51111],
      "58": [0, 0.43056, 0.0582, 0, 0.30667],
      "59": [0.19444, 0.43056, 0.0582, 0, 0.30667],
      "61": [-0.13313, 0.36687, 0.06616, 0, 0.76666],
      "63": [0, 0.69444, 0.1225, 0, 0.51111],
      "64": [0, 0.69444, 0.09597, 0, 0.76666],
      "65": [0, 0.68333, 0, 0, 0.74333],
      "66": [0, 0.68333, 0.10257, 0, 0.70389],
      "67": [0, 0.68333, 0.14528, 0, 0.71555],
      "68": [0, 0.68333, 0.09403, 0, 0.755],
      "69": [0, 0.68333, 0.12028, 0, 0.67833],
      "70": [0, 0.68333, 0.13305, 0, 0.65277],
      "71": [0, 0.68333, 0.08722, 0, 0.77361],
      "72": [0, 0.68333, 0.16389, 0, 0.74333],
      "73": [0, 0.68333, 0.15806, 0, 0.38555],
      "74": [0, 0.68333, 0.14028, 0, 0.525],
      "75": [0, 0.68333, 0.14528, 0, 0.76888],
      "76": [0, 0.68333, 0, 0, 0.62722],
      "77": [0, 0.68333, 0.16389, 0, 0.89666],
      "78": [0, 0.68333, 0.16389, 0, 0.74333],
      "79": [0, 0.68333, 0.09403, 0, 0.76666],
      "80": [0, 0.68333, 0.10257, 0, 0.67833],
      "81": [0.19444, 0.68333, 0.09403, 0, 0.76666],
      "82": [0, 0.68333, 0.03868, 0, 0.72944],
      "83": [0, 0.68333, 0.11972, 0, 0.56222],
      "84": [0, 0.68333, 0.13305, 0, 0.71555],
      "85": [0, 0.68333, 0.16389, 0, 0.74333],
      "86": [0, 0.68333, 0.18361, 0, 0.74333],
      "87": [0, 0.68333, 0.18361, 0, 0.99888],
      "88": [0, 0.68333, 0.15806, 0, 0.74333],
      "89": [0, 0.68333, 0.19383, 0, 0.74333],
      "90": [0, 0.68333, 0.14528, 0, 0.61333],
      "91": [0.25, 0.75, 0.1875, 0, 0.30667],
      "93": [0.25, 0.75, 0.10528, 0, 0.30667],
      "94": [0, 0.69444, 0.06646, 0, 0.51111],
      "95": [0.31, 0.12056, 0.09208, 0, 0.51111],
      "97": [0, 0.43056, 0.07671, 0, 0.51111],
      "98": [0, 0.69444, 0.06312, 0, 0.46],
      "99": [0, 0.43056, 0.05653, 0, 0.46],
      "100": [0, 0.69444, 0.10333, 0, 0.51111],
      "101": [0, 0.43056, 0.07514, 0, 0.46],
      "102": [0.19444, 0.69444, 0.21194, 0, 0.30667],
      "103": [0.19444, 0.43056, 0.08847, 0, 0.46],
      "104": [0, 0.69444, 0.07671, 0, 0.51111],
      "105": [0, 0.65536, 0.1019, 0, 0.30667],
      "106": [0.19444, 0.65536, 0.14467, 0, 0.30667],
      "107": [0, 0.69444, 0.10764, 0, 0.46],
      "108": [0, 0.69444, 0.10333, 0, 0.25555],
      "109": [0, 0.43056, 0.07671, 0, 0.81777],
      "110": [0, 0.43056, 0.07671, 0, 0.56222],
      "111": [0, 0.43056, 0.06312, 0, 0.51111],
      "112": [0.19444, 0.43056, 0.06312, 0, 0.51111],
      "113": [0.19444, 0.43056, 0.08847, 0, 0.46],
      "114": [0, 0.43056, 0.10764, 0, 0.42166],
      "115": [0, 0.43056, 0.08208, 0, 0.40889],
      "116": [0, 0.61508, 0.09486, 0, 0.33222],
      "117": [0, 0.43056, 0.07671, 0, 0.53666],
      "118": [0, 0.43056, 0.10764, 0, 0.46],
      "119": [0, 0.43056, 0.10764, 0, 0.66444],
      "120": [0, 0.43056, 0.12042, 0, 0.46389],
      "121": [0.19444, 0.43056, 0.08847, 0, 0.48555],
      "122": [0, 0.43056, 0.12292, 0, 0.40889],
      "126": [0.35, 0.31786, 0.11585, 0, 0.51111],
      "160": [0, 0, 0, 0, 0.25],
      "168": [0, 0.66786, 0.10474, 0, 0.51111],
      "176": [0, 0.69444, 0, 0, 0.83129],
      "184": [0.17014, 0, 0, 0, 0.46],
      "198": [0, 0.68333, 0.12028, 0, 0.88277],
      "216": [0.04861, 0.73194, 0.09403, 0, 0.76666],
      "223": [0.19444, 0.69444, 0.10514, 0, 0.53666],
      "230": [0, 0.43056, 0.07514, 0, 0.71555],
      "248": [0.09722, 0.52778, 0.09194, 0, 0.51111],
      "338": [0, 0.68333, 0.12028, 0, 0.98499],
      "339": [0, 0.43056, 0.07514, 0, 0.71555],
      "710": [0, 0.69444, 0.06646, 0, 0.51111],
      "711": [0, 0.62847, 0.08295, 0, 0.51111],
      "713": [0, 0.56167, 0.10333, 0, 0.51111],
      "714": [0, 0.69444, 0.09694, 0, 0.51111],
      "715": [0, 0.69444, 0, 0, 0.51111],
      "728": [0, 0.69444, 0.10806, 0, 0.51111],
      "729": [0, 0.66786, 0.11752, 0, 0.30667],
      "730": [0, 0.69444, 0, 0, 0.83129],
      "732": [0, 0.66786, 0.11585, 0, 0.51111],
      "733": [0, 0.69444, 0.1225, 0, 0.51111],
      "915": [0, 0.68333, 0.13305, 0, 0.62722],
      "916": [0, 0.68333, 0, 0, 0.81777],
      "920": [0, 0.68333, 0.09403, 0, 0.76666],
      "923": [0, 0.68333, 0, 0, 0.69222],
      "926": [0, 0.68333, 0.15294, 0, 0.66444],
      "928": [0, 0.68333, 0.16389, 0, 0.74333],
      "931": [0, 0.68333, 0.12028, 0, 0.71555],
      "933": [0, 0.68333, 0.11111, 0, 0.76666],
      "934": [0, 0.68333, 0.05986, 0, 0.71555],
      "936": [0, 0.68333, 0.11111, 0, 0.76666],
      "937": [0, 0.68333, 0.10257, 0, 0.71555],
      "8211": [0, 0.43056, 0.09208, 0, 0.51111],
      "8212": [0, 0.43056, 0.09208, 0, 1.02222],
      "8216": [0, 0.69444, 0.12417, 0, 0.30667],
      "8217": [0, 0.69444, 0.12417, 0, 0.30667],
      "8220": [0, 0.69444, 0.1685, 0, 0.51444],
      "8221": [0, 0.69444, 0.06961, 0, 0.51444],
      "8463": [0, 0.68889, 0, 0, 0.54028]
    },
    "Main-Regular": {
      "32": [0, 0, 0, 0, 0.25],
      "33": [0, 0.69444, 0, 0, 0.27778],
      "34": [0, 0.69444, 0, 0, 0.5],
      "35": [0.19444, 0.69444, 0, 0, 0.83334],
      "36": [0.05556, 0.75, 0, 0, 0.5],
      "37": [0.05556, 0.75, 0, 0, 0.83334],
      "38": [0, 0.69444, 0, 0, 0.77778],
      "39": [0, 0.69444, 0, 0, 0.27778],
      "40": [0.25, 0.75, 0, 0, 0.38889],
      "41": [0.25, 0.75, 0, 0, 0.38889],
      "42": [0, 0.75, 0, 0, 0.5],
      "43": [0.08333, 0.58333, 0, 0, 0.77778],
      "44": [0.19444, 0.10556, 0, 0, 0.27778],
      "45": [0, 0.43056, 0, 0, 0.33333],
      "46": [0, 0.10556, 0, 0, 0.27778],
      "47": [0.25, 0.75, 0, 0, 0.5],
      "48": [0, 0.64444, 0, 0, 0.5],
      "49": [0, 0.64444, 0, 0, 0.5],
      "50": [0, 0.64444, 0, 0, 0.5],
      "51": [0, 0.64444, 0, 0, 0.5],
      "52": [0, 0.64444, 0, 0, 0.5],
      "53": [0, 0.64444, 0, 0, 0.5],
      "54": [0, 0.64444, 0, 0, 0.5],
      "55": [0, 0.64444, 0, 0, 0.5],
      "56": [0, 0.64444, 0, 0, 0.5],
      "57": [0, 0.64444, 0, 0, 0.5],
      "58": [0, 0.43056, 0, 0, 0.27778],
      "59": [0.19444, 0.43056, 0, 0, 0.27778],
      "60": [0.0391, 0.5391, 0, 0, 0.77778],
      "61": [-0.13313, 0.36687, 0, 0, 0.77778],
      "62": [0.0391, 0.5391, 0, 0, 0.77778],
      "63": [0, 0.69444, 0, 0, 0.47222],
      "64": [0, 0.69444, 0, 0, 0.77778],
      "65": [0, 0.68333, 0, 0, 0.75],
      "66": [0, 0.68333, 0, 0, 0.70834],
      "67": [0, 0.68333, 0, 0, 0.72222],
      "68": [0, 0.68333, 0, 0, 0.76389],
      "69": [0, 0.68333, 0, 0, 0.68056],
      "70": [0, 0.68333, 0, 0, 0.65278],
      "71": [0, 0.68333, 0, 0, 0.78472],
      "72": [0, 0.68333, 0, 0, 0.75],
      "73": [0, 0.68333, 0, 0, 0.36111],
      "74": [0, 0.68333, 0, 0, 0.51389],
      "75": [0, 0.68333, 0, 0, 0.77778],
      "76": [0, 0.68333, 0, 0, 0.625],
      "77": [0, 0.68333, 0, 0, 0.91667],
      "78": [0, 0.68333, 0, 0, 0.75],
      "79": [0, 0.68333, 0, 0, 0.77778],
      "80": [0, 0.68333, 0, 0, 0.68056],
      "81": [0.19444, 0.68333, 0, 0, 0.77778],
      "82": [0, 0.68333, 0, 0, 0.73611],
      "83": [0, 0.68333, 0, 0, 0.55556],
      "84": [0, 0.68333, 0, 0, 0.72222],
      "85": [0, 0.68333, 0, 0, 0.75],
      "86": [0, 0.68333, 0.01389, 0, 0.75],
      "87": [0, 0.68333, 0.01389, 0, 1.02778],
      "88": [0, 0.68333, 0, 0, 0.75],
      "89": [0, 0.68333, 0.025, 0, 0.75],
      "90": [0, 0.68333, 0, 0, 0.61111],
      "91": [0.25, 0.75, 0, 0, 0.27778],
      "92": [0.25, 0.75, 0, 0, 0.5],
      "93": [0.25, 0.75, 0, 0, 0.27778],
      "94": [0, 0.69444, 0, 0, 0.5],
      "95": [0.31, 0.12056, 0.02778, 0, 0.5],
      "97": [0, 0.43056, 0, 0, 0.5],
      "98": [0, 0.69444, 0, 0, 0.55556],
      "99": [0, 0.43056, 0, 0, 0.44445],
      "100": [0, 0.69444, 0, 0, 0.55556],
      "101": [0, 0.43056, 0, 0, 0.44445],
      "102": [0, 0.69444, 0.07778, 0, 0.30556],
      "103": [0.19444, 0.43056, 0.01389, 0, 0.5],
      "104": [0, 0.69444, 0, 0, 0.55556],
      "105": [0, 0.66786, 0, 0, 0.27778],
      "106": [0.19444, 0.66786, 0, 0, 0.30556],
      "107": [0, 0.69444, 0, 0, 0.52778],
      "108": [0, 0.69444, 0, 0, 0.27778],
      "109": [0, 0.43056, 0, 0, 0.83334],
      "110": [0, 0.43056, 0, 0, 0.55556],
      "111": [0, 0.43056, 0, 0, 0.5],
      "112": [0.19444, 0.43056, 0, 0, 0.55556],
      "113": [0.19444, 0.43056, 0, 0, 0.52778],
      "114": [0, 0.43056, 0, 0, 0.39167],
      "115": [0, 0.43056, 0, 0, 0.39445],
      "116": [0, 0.61508, 0, 0, 0.38889],
      "117": [0, 0.43056, 0, 0, 0.55556],
      "118": [0, 0.43056, 0.01389, 0, 0.52778],
      "119": [0, 0.43056, 0.01389, 0, 0.72222],
      "120": [0, 0.43056, 0, 0, 0.52778],
      "121": [0.19444, 0.43056, 0.01389, 0, 0.52778],
      "122": [0, 0.43056, 0, 0, 0.44445],
      "123": [0.25, 0.75, 0, 0, 0.5],
      "124": [0.25, 0.75, 0, 0, 0.27778],
      "125": [0.25, 0.75, 0, 0, 0.5],
      "126": [0.35, 0.31786, 0, 0, 0.5],
      "160": [0, 0, 0, 0, 0.25],
      "163": [0, 0.69444, 0, 0, 0.76909],
      "167": [0.19444, 0.69444, 0, 0, 0.44445],
      "168": [0, 0.66786, 0, 0, 0.5],
      "172": [0, 0.43056, 0, 0, 0.66667],
      "176": [0, 0.69444, 0, 0, 0.75],
      "177": [0.08333, 0.58333, 0, 0, 0.77778],
      "182": [0.19444, 0.69444, 0, 0, 0.61111],
      "184": [0.17014, 0, 0, 0, 0.44445],
      "198": [0, 0.68333, 0, 0, 0.90278],
      "215": [0.08333, 0.58333, 0, 0, 0.77778],
      "216": [0.04861, 0.73194, 0, 0, 0.77778],
      "223": [0, 0.69444, 0, 0, 0.5],
      "230": [0, 0.43056, 0, 0, 0.72222],
      "247": [0.08333, 0.58333, 0, 0, 0.77778],
      "248": [0.09722, 0.52778, 0, 0, 0.5],
      "305": [0, 0.43056, 0, 0, 0.27778],
      "338": [0, 0.68333, 0, 0, 1.01389],
      "339": [0, 0.43056, 0, 0, 0.77778],
      "567": [0.19444, 0.43056, 0, 0, 0.30556],
      "710": [0, 0.69444, 0, 0, 0.5],
      "711": [0, 0.62847, 0, 0, 0.5],
      "713": [0, 0.56778, 0, 0, 0.5],
      "714": [0, 0.69444, 0, 0, 0.5],
      "715": [0, 0.69444, 0, 0, 0.5],
      "728": [0, 0.69444, 0, 0, 0.5],
      "729": [0, 0.66786, 0, 0, 0.27778],
      "730": [0, 0.69444, 0, 0, 0.75],
      "732": [0, 0.66786, 0, 0, 0.5],
      "733": [0, 0.69444, 0, 0, 0.5],
      "915": [0, 0.68333, 0, 0, 0.625],
      "916": [0, 0.68333, 0, 0, 0.83334],
      "920": [0, 0.68333, 0, 0, 0.77778],
      "923": [0, 0.68333, 0, 0, 0.69445],
      "926": [0, 0.68333, 0, 0, 0.66667],
      "928": [0, 0.68333, 0, 0, 0.75],
      "931": [0, 0.68333, 0, 0, 0.72222],
      "933": [0, 0.68333, 0, 0, 0.77778],
      "934": [0, 0.68333, 0, 0, 0.72222],
      "936": [0, 0.68333, 0, 0, 0.77778],
      "937": [0, 0.68333, 0, 0, 0.72222],
      "8211": [0, 0.43056, 0.02778, 0, 0.5],
      "8212": [0, 0.43056, 0.02778, 0, 1.0],
      "8216": [0, 0.69444, 0, 0, 0.27778],
      "8217": [0, 0.69444, 0, 0, 0.27778],
      "8220": [0, 0.69444, 0, 0, 0.5],
      "8221": [0, 0.69444, 0, 0, 0.5],
      "8224": [0.19444, 0.69444, 0, 0, 0.44445],
      "8225": [0.19444, 0.69444, 0, 0, 0.44445],
      "8230": [0, 0.123, 0, 0, 1.172],
      "8242": [0, 0.55556, 0, 0, 0.275],
      "8407": [0, 0.71444, 0.15382, 0, 0.5],
      "8463": [0, 0.68889, 0, 0, 0.54028],
      "8465": [0, 0.69444, 0, 0, 0.72222],
      "8467": [0, 0.69444, 0, 0.11111, 0.41667],
      "8472": [0.19444, 0.43056, 0, 0.11111, 0.63646],
      "8476": [0, 0.69444, 0, 0, 0.72222],
      "8501": [0, 0.69444, 0, 0, 0.61111],
      "8592": [-0.13313, 0.36687, 0, 0, 1.0],
      "8593": [0.19444, 0.69444, 0, 0, 0.5],
      "8594": [-0.13313, 0.36687, 0, 0, 1.0],
      "8595": [0.19444, 0.69444, 0, 0, 0.5],
      "8596": [-0.13313, 0.36687, 0, 0, 1.0],
      "8597": [0.25, 0.75, 0, 0, 0.5],
      "8598": [0.19444, 0.69444, 0, 0, 1.0],
      "8599": [0.19444, 0.69444, 0, 0, 1.0],
      "8600": [0.19444, 0.69444, 0, 0, 1.0],
      "8601": [0.19444, 0.69444, 0, 0, 1.0],
      "8614": [0.011, 0.511, 0, 0, 1.0],
      "8617": [0.011, 0.511, 0, 0, 1.126],
      "8618": [0.011, 0.511, 0, 0, 1.126],
      "8636": [-0.13313, 0.36687, 0, 0, 1.0],
      "8637": [-0.13313, 0.36687, 0, 0, 1.0],
      "8640": [-0.13313, 0.36687, 0, 0, 1.0],
      "8641": [-0.13313, 0.36687, 0, 0, 1.0],
      "8652": [0.011, 0.671, 0, 0, 1.0],
      "8656": [-0.13313, 0.36687, 0, 0, 1.0],
      "8657": [0.19444, 0.69444, 0, 0, 0.61111],
      "8658": [-0.13313, 0.36687, 0, 0, 1.0],
      "8659": [0.19444, 0.69444, 0, 0, 0.61111],
      "8660": [-0.13313, 0.36687, 0, 0, 1.0],
      "8661": [0.25, 0.75, 0, 0, 0.61111],
      "8704": [0, 0.69444, 0, 0, 0.55556],
      "8706": [0, 0.69444, 0.05556, 0.08334, 0.5309],
      "8707": [0, 0.69444, 0, 0, 0.55556],
      "8709": [0.05556, 0.75, 0, 0, 0.5],
      "8711": [0, 0.68333, 0, 0, 0.83334],
      "8712": [0.0391, 0.5391, 0, 0, 0.66667],
      "8715": [0.0391, 0.5391, 0, 0, 0.66667],
      "8722": [0.08333, 0.58333, 0, 0, 0.77778],
      "8723": [0.08333, 0.58333, 0, 0, 0.77778],
      "8725": [0.25, 0.75, 0, 0, 0.5],
      "8726": [0.25, 0.75, 0, 0, 0.5],
      "8727": [-0.03472, 0.46528, 0, 0, 0.5],
      "8728": [-0.05555, 0.44445, 0, 0, 0.5],
      "8729": [-0.05555, 0.44445, 0, 0, 0.5],
      "8730": [0.2, 0.8, 0, 0, 0.83334],
      "8733": [0, 0.43056, 0, 0, 0.77778],
      "8734": [0, 0.43056, 0, 0, 1.0],
      "8736": [0, 0.69224, 0, 0, 0.72222],
      "8739": [0.25, 0.75, 0, 0, 0.27778],
      "8741": [0.25, 0.75, 0, 0, 0.5],
      "8743": [0, 0.55556, 0, 0, 0.66667],
      "8744": [0, 0.55556, 0, 0, 0.66667],
      "8745": [0, 0.55556, 0, 0, 0.66667],
      "8746": [0, 0.55556, 0, 0, 0.66667],
      "8747": [0.19444, 0.69444, 0.11111, 0, 0.41667],
      "8764": [-0.13313, 0.36687, 0, 0, 0.77778],
      "8768": [0.19444, 0.69444, 0, 0, 0.27778],
      "8771": [-0.03625, 0.46375, 0, 0, 0.77778],
      "8773": [-0.022, 0.589, 0, 0, 0.778],
      "8776": [-0.01688, 0.48312, 0, 0, 0.77778],
      "8781": [-0.03625, 0.46375, 0, 0, 0.77778],
      "8784": [-0.133, 0.673, 0, 0, 0.778],
      "8801": [-0.03625, 0.46375, 0, 0, 0.77778],
      "8804": [0.13597, 0.63597, 0, 0, 0.77778],
      "8805": [0.13597, 0.63597, 0, 0, 0.77778],
      "8810": [0.0391, 0.5391, 0, 0, 1.0],
      "8811": [0.0391, 0.5391, 0, 0, 1.0],
      "8826": [0.0391, 0.5391, 0, 0, 0.77778],
      "8827": [0.0391, 0.5391, 0, 0, 0.77778],
      "8834": [0.0391, 0.5391, 0, 0, 0.77778],
      "8835": [0.0391, 0.5391, 0, 0, 0.77778],
      "8838": [0.13597, 0.63597, 0, 0, 0.77778],
      "8839": [0.13597, 0.63597, 0, 0, 0.77778],
      "8846": [0, 0.55556, 0, 0, 0.66667],
      "8849": [0.13597, 0.63597, 0, 0, 0.77778],
      "8850": [0.13597, 0.63597, 0, 0, 0.77778],
      "8851": [0, 0.55556, 0, 0, 0.66667],
      "8852": [0, 0.55556, 0, 0, 0.66667],
      "8853": [0.08333, 0.58333, 0, 0, 0.77778],
      "8854": [0.08333, 0.58333, 0, 0, 0.77778],
      "8855": [0.08333, 0.58333, 0, 0, 0.77778],
      "8856": [0.08333, 0.58333, 0, 0, 0.77778],
      "8857": [0.08333, 0.58333, 0, 0, 0.77778],
      "8866": [0, 0.69444, 0, 0, 0.61111],
      "8867": [0, 0.69444, 0, 0, 0.61111],
      "8868": [0, 0.69444, 0, 0, 0.77778],
      "8869": [0, 0.69444, 0, 0, 0.77778],
      "8872": [0.249, 0.75, 0, 0, 0.867],
      "8900": [-0.05555, 0.44445, 0, 0, 0.5],
      "8901": [-0.05555, 0.44445, 0, 0, 0.27778],
      "8902": [-0.03472, 0.46528, 0, 0, 0.5],
      "8904": [0.005, 0.505, 0, 0, 0.9],
      "8942": [0.03, 0.903, 0, 0, 0.278],
      "8943": [-0.19, 0.313, 0, 0, 1.172],
      "8945": [-0.1, 0.823, 0, 0, 1.282],
      "8968": [0.25, 0.75, 0, 0, 0.44445],
      "8969": [0.25, 0.75, 0, 0, 0.44445],
      "8970": [0.25, 0.75, 0, 0, 0.44445],
      "8971": [0.25, 0.75, 0, 0, 0.44445],
      "8994": [-0.14236, 0.35764, 0, 0, 1.0],
      "8995": [-0.14236, 0.35764, 0, 0, 1.0],
      "9136": [0.244, 0.744, 0, 0, 0.412],
      "9137": [0.244, 0.745, 0, 0, 0.412],
      "9651": [0.19444, 0.69444, 0, 0, 0.88889],
      "9657": [-0.03472, 0.46528, 0, 0, 0.5],
      "9661": [0.19444, 0.69444, 0, 0, 0.88889],
      "9667": [-0.03472, 0.46528, 0, 0, 0.5],
      "9711": [0.19444, 0.69444, 0, 0, 1.0],
      "9824": [0.12963, 0.69444, 0, 0, 0.77778],
      "9825": [0.12963, 0.69444, 0, 0, 0.77778],
      "9826": [0.12963, 0.69444, 0, 0, 0.77778],
      "9827": [0.12963, 0.69444, 0, 0, 0.77778],
      "9837": [0, 0.75, 0, 0, 0.38889],
      "9838": [0.19444, 0.69444, 0, 0, 0.38889],
      "9839": [0.19444, 0.69444, 0, 0, 0.38889],
      "10216": [0.25, 0.75, 0, 0, 0.38889],
      "10217": [0.25, 0.75, 0, 0, 0.38889],
      "10222": [0.244, 0.744, 0, 0, 0.412],
      "10223": [0.244, 0.745, 0, 0, 0.412],
      "10229": [0.011, 0.511, 0, 0, 1.609],
      "10230": [0.011, 0.511, 0, 0, 1.638],
      "10231": [0.011, 0.511, 0, 0, 1.859],
      "10232": [0.024, 0.525, 0, 0, 1.609],
      "10233": [0.024, 0.525, 0, 0, 1.638],
      "10234": [0.024, 0.525, 0, 0, 1.858],
      "10236": [0.011, 0.511, 0, 0, 1.638],
      "10815": [0, 0.68333, 0, 0, 0.75],
      "10927": [0.13597, 0.63597, 0, 0, 0.77778],
      "10928": [0.13597, 0.63597, 0, 0, 0.77778],
      "57376": [0.19444, 0.69444, 0, 0, 0]
    },
    "Math-BoldItalic": {
      "32": [0, 0, 0, 0, 0.25],
      "48": [0, 0.44444, 0, 0, 0.575],
      "49": [0, 0.44444, 0, 0, 0.575],
      "50": [0, 0.44444, 0, 0, 0.575],
      "51": [0.19444, 0.44444, 0, 0, 0.575],
      "52": [0.19444, 0.44444, 0, 0, 0.575],
      "53": [0.19444, 0.44444, 0, 0, 0.575],
      "54": [0, 0.64444, 0, 0, 0.575],
      "55": [0.19444, 0.44444, 0, 0, 0.575],
      "56": [0, 0.64444, 0, 0, 0.575],
      "57": [0.19444, 0.44444, 0, 0, 0.575],
      "65": [0, 0.68611, 0, 0, 0.86944],
      "66": [0, 0.68611, 0.04835, 0, 0.8664],
      "67": [0, 0.68611, 0.06979, 0, 0.81694],
      "68": [0, 0.68611, 0.03194, 0, 0.93812],
      "69": [0, 0.68611, 0.05451, 0, 0.81007],
      "70": [0, 0.68611, 0.15972, 0, 0.68889],
      "71": [0, 0.68611, 0, 0, 0.88673],
      "72": [0, 0.68611, 0.08229, 0, 0.98229],
      "73": [0, 0.68611, 0.07778, 0, 0.51111],
      "74": [0, 0.68611, 0.10069, 0, 0.63125],
      "75": [0, 0.68611, 0.06979, 0, 0.97118],
      "76": [0, 0.68611, 0, 0, 0.75555],
      "77": [0, 0.68611, 0.11424, 0, 1.14201],
      "78": [0, 0.68611, 0.11424, 0, 0.95034],
      "79": [0, 0.68611, 0.03194, 0, 0.83666],
      "80": [0, 0.68611, 0.15972, 0, 0.72309],
      "81": [0.19444, 0.68611, 0, 0, 0.86861],
      "82": [0, 0.68611, 0.00421, 0, 0.87235],
      "83": [0, 0.68611, 0.05382, 0, 0.69271],
      "84": [0, 0.68611, 0.15972, 0, 0.63663],
      "85": [0, 0.68611, 0.11424, 0, 0.80027],
      "86": [0, 0.68611, 0.25555, 0, 0.67778],
      "87": [0, 0.68611, 0.15972, 0, 1.09305],
      "88": [0, 0.68611, 0.07778, 0, 0.94722],
      "89": [0, 0.68611, 0.25555, 0, 0.67458],
      "90": [0, 0.68611, 0.06979, 0, 0.77257],
      "97": [0, 0.44444, 0, 0, 0.63287],
      "98": [0, 0.69444, 0, 0, 0.52083],
      "99": [0, 0.44444, 0, 0, 0.51342],
      "100": [0, 0.69444, 0, 0, 0.60972],
      "101": [0, 0.44444, 0, 0, 0.55361],
      "102": [0.19444, 0.69444, 0.11042, 0, 0.56806],
      "103": [0.19444, 0.44444, 0.03704, 0, 0.5449],
      "104": [0, 0.69444, 0, 0, 0.66759],
      "105": [0, 0.69326, 0, 0, 0.4048],
      "106": [0.19444, 0.69326, 0.0622, 0, 0.47083],
      "107": [0, 0.69444, 0.01852, 0, 0.6037],
      "108": [0, 0.69444, 0.0088, 0, 0.34815],
      "109": [0, 0.44444, 0, 0, 1.0324],
      "110": [0, 0.44444, 0, 0, 0.71296],
      "111": [0, 0.44444, 0, 0, 0.58472],
      "112": [0.19444, 0.44444, 0, 0, 0.60092],
      "113": [0.19444, 0.44444, 0.03704, 0, 0.54213],
      "114": [0, 0.44444, 0.03194, 0, 0.5287],
      "115": [0, 0.44444, 0, 0, 0.53125],
      "116": [0, 0.63492, 0, 0, 0.41528],
      "117": [0, 0.44444, 0, 0, 0.68102],
      "118": [0, 0.44444, 0.03704, 0, 0.56666],
      "119": [0, 0.44444, 0.02778, 0, 0.83148],
      "120": [0, 0.44444, 0, 0, 0.65903],
      "121": [0.19444, 0.44444, 0.03704, 0, 0.59028],
      "122": [0, 0.44444, 0.04213, 0, 0.55509],
      "160": [0, 0, 0, 0, 0.25],
      "915": [0, 0.68611, 0.15972, 0, 0.65694],
      "916": [0, 0.68611, 0, 0, 0.95833],
      "920": [0, 0.68611, 0.03194, 0, 0.86722],
      "923": [0, 0.68611, 0, 0, 0.80555],
      "926": [0, 0.68611, 0.07458, 0, 0.84125],
      "928": [0, 0.68611, 0.08229, 0, 0.98229],
      "931": [0, 0.68611, 0.05451, 0, 0.88507],
      "933": [0, 0.68611, 0.15972, 0, 0.67083],
      "934": [0, 0.68611, 0, 0, 0.76666],
      "936": [0, 0.68611, 0.11653, 0, 0.71402],
      "937": [0, 0.68611, 0.04835, 0, 0.8789],
      "945": [0, 0.44444, 0, 0, 0.76064],
      "946": [0.19444, 0.69444, 0.03403, 0, 0.65972],
      "947": [0.19444, 0.44444, 0.06389, 0, 0.59003],
      "948": [0, 0.69444, 0.03819, 0, 0.52222],
      "949": [0, 0.44444, 0, 0, 0.52882],
      "950": [0.19444, 0.69444, 0.06215, 0, 0.50833],
      "951": [0.19444, 0.44444, 0.03704, 0, 0.6],
      "952": [0, 0.69444, 0.03194, 0, 0.5618],
      "953": [0, 0.44444, 0, 0, 0.41204],
      "954": [0, 0.44444, 0, 0, 0.66759],
      "955": [0, 0.69444, 0, 0, 0.67083],
      "956": [0.19444, 0.44444, 0, 0, 0.70787],
      "957": [0, 0.44444, 0.06898, 0, 0.57685],
      "958": [0.19444, 0.69444, 0.03021, 0, 0.50833],
      "959": [0, 0.44444, 0, 0, 0.58472],
      "960": [0, 0.44444, 0.03704, 0, 0.68241],
      "961": [0.19444, 0.44444, 0, 0, 0.6118],
      "962": [0.09722, 0.44444, 0.07917, 0, 0.42361],
      "963": [0, 0.44444, 0.03704, 0, 0.68588],
      "964": [0, 0.44444, 0.13472, 0, 0.52083],
      "965": [0, 0.44444, 0.03704, 0, 0.63055],
      "966": [0.19444, 0.44444, 0, 0, 0.74722],
      "967": [0.19444, 0.44444, 0, 0, 0.71805],
      "968": [0.19444, 0.69444, 0.03704, 0, 0.75833],
      "969": [0, 0.44444, 0.03704, 0, 0.71782],
      "977": [0, 0.69444, 0, 0, 0.69155],
      "981": [0.19444, 0.69444, 0, 0, 0.7125],
      "982": [0, 0.44444, 0.03194, 0, 0.975],
      "1009": [0.19444, 0.44444, 0, 0, 0.6118],
      "1013": [0, 0.44444, 0, 0, 0.48333],
      "57649": [0, 0.44444, 0, 0, 0.39352],
      "57911": [0.19444, 0.44444, 0, 0, 0.43889]
    },
    "Math-Italic": {
      "32": [0, 0, 0, 0, 0.25],
      "48": [0, 0.43056, 0, 0, 0.5],
      "49": [0, 0.43056, 0, 0, 0.5],
      "50": [0, 0.43056, 0, 0, 0.5],
      "51": [0.19444, 0.43056, 0, 0, 0.5],
      "52": [0.19444, 0.43056, 0, 0, 0.5],
      "53": [0.19444, 0.43056, 0, 0, 0.5],
      "54": [0, 0.64444, 0, 0, 0.5],
      "55": [0.19444, 0.43056, 0, 0, 0.5],
      "56": [0, 0.64444, 0, 0, 0.5],
      "57": [0.19444, 0.43056, 0, 0, 0.5],
      "65": [0, 0.68333, 0, 0.13889, 0.75],
      "66": [0, 0.68333, 0.05017, 0.08334, 0.75851],
      "67": [0, 0.68333, 0.07153, 0.08334, 0.71472],
      "68": [0, 0.68333, 0.02778, 0.05556, 0.82792],
      "69": [0, 0.68333, 0.05764, 0.08334, 0.7382],
      "70": [0, 0.68333, 0.13889, 0.08334, 0.64306],
      "71": [0, 0.68333, 0, 0.08334, 0.78625],
      "72": [0, 0.68333, 0.08125, 0.05556, 0.83125],
      "73": [0, 0.68333, 0.07847, 0.11111, 0.43958],
      "74": [0, 0.68333, 0.09618, 0.16667, 0.55451],
      "75": [0, 0.68333, 0.07153, 0.05556, 0.84931],
      "76": [0, 0.68333, 0, 0.02778, 0.68056],
      "77": [0, 0.68333, 0.10903, 0.08334, 0.97014],
      "78": [0, 0.68333, 0.10903, 0.08334, 0.80347],
      "79": [0, 0.68333, 0.02778, 0.08334, 0.76278],
      "80": [0, 0.68333, 0.13889, 0.08334, 0.64201],
      "81": [0.19444, 0.68333, 0, 0.08334, 0.79056],
      "82": [0, 0.68333, 0.00773, 0.08334, 0.75929],
      "83": [0, 0.68333, 0.05764, 0.08334, 0.6132],
      "84": [0, 0.68333, 0.13889, 0.08334, 0.58438],
      "85": [0, 0.68333, 0.10903, 0.02778, 0.68278],
      "86": [0, 0.68333, 0.22222, 0, 0.58333],
      "87": [0, 0.68333, 0.13889, 0, 0.94445],
      "88": [0, 0.68333, 0.07847, 0.08334, 0.82847],
      "89": [0, 0.68333, 0.22222, 0, 0.58056],
      "90": [0, 0.68333, 0.07153, 0.08334, 0.68264],
      "97": [0, 0.43056, 0, 0, 0.52859],
      "98": [0, 0.69444, 0, 0, 0.42917],
      "99": [0, 0.43056, 0, 0.05556, 0.43276],
      "100": [0, 0.69444, 0, 0.16667, 0.52049],
      "101": [0, 0.43056, 0, 0.05556, 0.46563],
      "102": [0.19444, 0.69444, 0.10764, 0.16667, 0.48959],
      "103": [0.19444, 0.43056, 0.03588, 0.02778, 0.47697],
      "104": [0, 0.69444, 0, 0, 0.57616],
      "105": [0, 0.65952, 0, 0, 0.34451],
      "106": [0.19444, 0.65952, 0.05724, 0, 0.41181],
      "107": [0, 0.69444, 0.03148, 0, 0.5206],
      "108": [0, 0.69444, 0.01968, 0.08334, 0.29838],
      "109": [0, 0.43056, 0, 0, 0.87801],
      "110": [0, 0.43056, 0, 0, 0.60023],
      "111": [0, 0.43056, 0, 0.05556, 0.48472],
      "112": [0.19444, 0.43056, 0, 0.08334, 0.50313],
      "113": [0.19444, 0.43056, 0.03588, 0.08334, 0.44641],
      "114": [0, 0.43056, 0.02778, 0.05556, 0.45116],
      "115": [0, 0.43056, 0, 0.05556, 0.46875],
      "116": [0, 0.61508, 0, 0.08334, 0.36111],
      "117": [0, 0.43056, 0, 0.02778, 0.57246],
      "118": [0, 0.43056, 0.03588, 0.02778, 0.48472],
      "119": [0, 0.43056, 0.02691, 0.08334, 0.71592],
      "120": [0, 0.43056, 0, 0.02778, 0.57153],
      "121": [0.19444, 0.43056, 0.03588, 0.05556, 0.49028],
      "122": [0, 0.43056, 0.04398, 0.05556, 0.46505],
      "160": [0, 0, 0, 0, 0.25],
      "915": [0, 0.68333, 0.13889, 0.08334, 0.61528],
      "916": [0, 0.68333, 0, 0.16667, 0.83334],
      "920": [0, 0.68333, 0.02778, 0.08334, 0.76278],
      "923": [0, 0.68333, 0, 0.16667, 0.69445],
      "926": [0, 0.68333, 0.07569, 0.08334, 0.74236],
      "928": [0, 0.68333, 0.08125, 0.05556, 0.83125],
      "931": [0, 0.68333, 0.05764, 0.08334, 0.77986],
      "933": [0, 0.68333, 0.13889, 0.05556, 0.58333],
      "934": [0, 0.68333, 0, 0.08334, 0.66667],
      "936": [0, 0.68333, 0.11, 0.05556, 0.61222],
      "937": [0, 0.68333, 0.05017, 0.08334, 0.7724],
      "945": [0, 0.43056, 0.0037, 0.02778, 0.6397],
      "946": [0.19444, 0.69444, 0.05278, 0.08334, 0.56563],
      "947": [0.19444, 0.43056, 0.05556, 0, 0.51773],
      "948": [0, 0.69444, 0.03785, 0.05556, 0.44444],
      "949": [0, 0.43056, 0, 0.08334, 0.46632],
      "950": [0.19444, 0.69444, 0.07378, 0.08334, 0.4375],
      "951": [0.19444, 0.43056, 0.03588, 0.05556, 0.49653],
      "952": [0, 0.69444, 0.02778, 0.08334, 0.46944],
      "953": [0, 0.43056, 0, 0.05556, 0.35394],
      "954": [0, 0.43056, 0, 0, 0.57616],
      "955": [0, 0.69444, 0, 0, 0.58334],
      "956": [0.19444, 0.43056, 0, 0.02778, 0.60255],
      "957": [0, 0.43056, 0.06366, 0.02778, 0.49398],
      "958": [0.19444, 0.69444, 0.04601, 0.11111, 0.4375],
      "959": [0, 0.43056, 0, 0.05556, 0.48472],
      "960": [0, 0.43056, 0.03588, 0, 0.57003],
      "961": [0.19444, 0.43056, 0, 0.08334, 0.51702],
      "962": [0.09722, 0.43056, 0.07986, 0.08334, 0.36285],
      "963": [0, 0.43056, 0.03588, 0, 0.57141],
      "964": [0, 0.43056, 0.1132, 0.02778, 0.43715],
      "965": [0, 0.43056, 0.03588, 0.02778, 0.54028],
      "966": [0.19444, 0.43056, 0, 0.08334, 0.65417],
      "967": [0.19444, 0.43056, 0, 0.05556, 0.62569],
      "968": [0.19444, 0.69444, 0.03588, 0.11111, 0.65139],
      "969": [0, 0.43056, 0.03588, 0, 0.62245],
      "977": [0, 0.69444, 0, 0.08334, 0.59144],
      "981": [0.19444, 0.69444, 0, 0.08334, 0.59583],
      "982": [0, 0.43056, 0.02778, 0, 0.82813],
      "1009": [0.19444, 0.43056, 0, 0.08334, 0.51702],
      "1013": [0, 0.43056, 0, 0.05556, 0.4059],
      "57649": [0, 0.43056, 0, 0.02778, 0.32246],
      "57911": [0.19444, 0.43056, 0, 0.08334, 0.38403]
    },
    "SansSerif-Bold": {
      "32": [0, 0, 0, 0, 0.25],
      "33": [0, 0.69444, 0, 0, 0.36667],
      "34": [0, 0.69444, 0, 0, 0.55834],
      "35": [0.19444, 0.69444, 0, 0, 0.91667],
      "36": [0.05556, 0.75, 0, 0, 0.55],
      "37": [0.05556, 0.75, 0, 0, 1.02912],
      "38": [0, 0.69444, 0, 0, 0.83056],
      "39": [0, 0.69444, 0, 0, 0.30556],
      "40": [0.25, 0.75, 0, 0, 0.42778],
      "41": [0.25, 0.75, 0, 0, 0.42778],
      "42": [0, 0.75, 0, 0, 0.55],
      "43": [0.11667, 0.61667, 0, 0, 0.85556],
      "44": [0.10556, 0.13056, 0, 0, 0.30556],
      "45": [0, 0.45833, 0, 0, 0.36667],
      "46": [0, 0.13056, 0, 0, 0.30556],
      "47": [0.25, 0.75, 0, 0, 0.55],
      "48": [0, 0.69444, 0, 0, 0.55],
      "49": [0, 0.69444, 0, 0, 0.55],
      "50": [0, 0.69444, 0, 0, 0.55],
      "51": [0, 0.69444, 0, 0, 0.55],
      "52": [0, 0.69444, 0, 0, 0.55],
      "53": [0, 0.69444, 0, 0, 0.55],
      "54": [0, 0.69444, 0, 0, 0.55],
      "55": [0, 0.69444, 0, 0, 0.55],
      "56": [0, 0.69444, 0, 0, 0.55],
      "57": [0, 0.69444, 0, 0, 0.55],
      "58": [0, 0.45833, 0, 0, 0.30556],
      "59": [0.10556, 0.45833, 0, 0, 0.30556],
      "61": [-0.09375, 0.40625, 0, 0, 0.85556],
      "63": [0, 0.69444, 0, 0, 0.51945],
      "64": [0, 0.69444, 0, 0, 0.73334],
      "65": [0, 0.69444, 0, 0, 0.73334],
      "66": [0, 0.69444, 0, 0, 0.73334],
      "67": [0, 0.69444, 0, 0, 0.70278],
      "68": [0, 0.69444, 0, 0, 0.79445],
      "69": [0, 0.69444, 0, 0, 0.64167],
      "70": [0, 0.69444, 0, 0, 0.61111],
      "71": [0, 0.69444, 0, 0, 0.73334],
      "72": [0, 0.69444, 0, 0, 0.79445],
      "73": [0, 0.69444, 0, 0, 0.33056],
      "74": [0, 0.69444, 0, 0, 0.51945],
      "75": [0, 0.69444, 0, 0, 0.76389],
      "76": [0, 0.69444, 0, 0, 0.58056],
      "77": [0, 0.69444, 0, 0, 0.97778],
      "78": [0, 0.69444, 0, 0, 0.79445],
      "79": [0, 0.69444, 0, 0, 0.79445],
      "80": [0, 0.69444, 0, 0, 0.70278],
      "81": [0.10556, 0.69444, 0, 0, 0.79445],
      "82": [0, 0.69444, 0, 0, 0.70278],
      "83": [0, 0.69444, 0, 0, 0.61111],
      "84": [0, 0.69444, 0, 0, 0.73334],
      "85": [0, 0.69444, 0, 0, 0.76389],
      "86": [0, 0.69444, 0.01528, 0, 0.73334],
      "87": [0, 0.69444, 0.01528, 0, 1.03889],
      "88": [0, 0.69444, 0, 0, 0.73334],
      "89": [0, 0.69444, 0.0275, 0, 0.73334],
      "90": [0, 0.69444, 0, 0, 0.67223],
      "91": [0.25, 0.75, 0, 0, 0.34306],
      "93": [0.25, 0.75, 0, 0, 0.34306],
      "94": [0, 0.69444, 0, 0, 0.55],
      "95": [0.35, 0.10833, 0.03056, 0, 0.55],
      "97": [0, 0.45833, 0, 0, 0.525],
      "98": [0, 0.69444, 0, 0, 0.56111],
      "99": [0, 0.45833, 0, 0, 0.48889],
      "100": [0, 0.69444, 0, 0, 0.56111],
      "101": [0, 0.45833, 0, 0, 0.51111],
      "102": [0, 0.69444, 0.07639, 0, 0.33611],
      "103": [0.19444, 0.45833, 0.01528, 0, 0.55],
      "104": [0, 0.69444, 0, 0, 0.56111],
      "105": [0, 0.69444, 0, 0, 0.25556],
      "106": [0.19444, 0.69444, 0, 0, 0.28611],
      "107": [0, 0.69444, 0, 0, 0.53056],
      "108": [0, 0.69444, 0, 0, 0.25556],
      "109": [0, 0.45833, 0, 0, 0.86667],
      "110": [0, 0.45833, 0, 0, 0.56111],
      "111": [0, 0.45833, 0, 0, 0.55],
      "112": [0.19444, 0.45833, 0, 0, 0.56111],
      "113": [0.19444, 0.45833, 0, 0, 0.56111],
      "114": [0, 0.45833, 0.01528, 0, 0.37222],
      "115": [0, 0.45833, 0, 0, 0.42167],
      "116": [0, 0.58929, 0, 0, 0.40417],
      "117": [0, 0.45833, 0, 0, 0.56111],
      "118": [0, 0.45833, 0.01528, 0, 0.5],
      "119": [0, 0.45833, 0.01528, 0, 0.74445],
      "120": [0, 0.45833, 0, 0, 0.5],
      "121": [0.19444, 0.45833, 0.01528, 0, 0.5],
      "122": [0, 0.45833, 0, 0, 0.47639],
      "126": [0.35, 0.34444, 0, 0, 0.55],
      "160": [0, 0, 0, 0, 0.25],
      "168": [0, 0.69444, 0, 0, 0.55],
      "176": [0, 0.69444, 0, 0, 0.73334],
      "180": [0, 0.69444, 0, 0, 0.55],
      "184": [0.17014, 0, 0, 0, 0.48889],
      "305": [0, 0.45833, 0, 0, 0.25556],
      "567": [0.19444, 0.45833, 0, 0, 0.28611],
      "710": [0, 0.69444, 0, 0, 0.55],
      "711": [0, 0.63542, 0, 0, 0.55],
      "713": [0, 0.63778, 0, 0, 0.55],
      "728": [0, 0.69444, 0, 0, 0.55],
      "729": [0, 0.69444, 0, 0, 0.30556],
      "730": [0, 0.69444, 0, 0, 0.73334],
      "732": [0, 0.69444, 0, 0, 0.55],
      "733": [0, 0.69444, 0, 0, 0.55],
      "915": [0, 0.69444, 0, 0, 0.58056],
      "916": [0, 0.69444, 0, 0, 0.91667],
      "920": [0, 0.69444, 0, 0, 0.85556],
      "923": [0, 0.69444, 0, 0, 0.67223],
      "926": [0, 0.69444, 0, 0, 0.73334],
      "928": [0, 0.69444, 0, 0, 0.79445],
      "931": [0, 0.69444, 0, 0, 0.79445],
      "933": [0, 0.69444, 0, 0, 0.85556],
      "934": [0, 0.69444, 0, 0, 0.79445],
      "936": [0, 0.69444, 0, 0, 0.85556],
      "937": [0, 0.69444, 0, 0, 0.79445],
      "8211": [0, 0.45833, 0.03056, 0, 0.55],
      "8212": [0, 0.45833, 0.03056, 0, 1.10001],
      "8216": [0, 0.69444, 0, 0, 0.30556],
      "8217": [0, 0.69444, 0, 0, 0.30556],
      "8220": [0, 0.69444, 0, 0, 0.55834],
      "8221": [0, 0.69444, 0, 0, 0.55834]
    },
    "SansSerif-Italic": {
      "32": [0, 0, 0, 0, 0.25],
      "33": [0, 0.69444, 0.05733, 0, 0.31945],
      "34": [0, 0.69444, 0.00316, 0, 0.5],
      "35": [0.19444, 0.69444, 0.05087, 0, 0.83334],
      "36": [0.05556, 0.75, 0.11156, 0, 0.5],
      "37": [0.05556, 0.75, 0.03126, 0, 0.83334],
      "38": [0, 0.69444, 0.03058, 0, 0.75834],
      "39": [0, 0.69444, 0.07816, 0, 0.27778],
      "40": [0.25, 0.75, 0.13164, 0, 0.38889],
      "41": [0.25, 0.75, 0.02536, 0, 0.38889],
      "42": [0, 0.75, 0.11775, 0, 0.5],
      "43": [0.08333, 0.58333, 0.02536, 0, 0.77778],
      "44": [0.125, 0.08333, 0, 0, 0.27778],
      "45": [0, 0.44444, 0.01946, 0, 0.33333],
      "46": [0, 0.08333, 0, 0, 0.27778],
      "47": [0.25, 0.75, 0.13164, 0, 0.5],
      "48": [0, 0.65556, 0.11156, 0, 0.5],
      "49": [0, 0.65556, 0.11156, 0, 0.5],
      "50": [0, 0.65556, 0.11156, 0, 0.5],
      "51": [0, 0.65556, 0.11156, 0, 0.5],
      "52": [0, 0.65556, 0.11156, 0, 0.5],
      "53": [0, 0.65556, 0.11156, 0, 0.5],
      "54": [0, 0.65556, 0.11156, 0, 0.5],
      "55": [0, 0.65556, 0.11156, 0, 0.5],
      "56": [0, 0.65556, 0.11156, 0, 0.5],
      "57": [0, 0.65556, 0.11156, 0, 0.5],
      "58": [0, 0.44444, 0.02502, 0, 0.27778],
      "59": [0.125, 0.44444, 0.02502, 0, 0.27778],
      "61": [-0.13, 0.37, 0.05087, 0, 0.77778],
      "63": [0, 0.69444, 0.11809, 0, 0.47222],
      "64": [0, 0.69444, 0.07555, 0, 0.66667],
      "65": [0, 0.69444, 0, 0, 0.66667],
      "66": [0, 0.69444, 0.08293, 0, 0.66667],
      "67": [0, 0.69444, 0.11983, 0, 0.63889],
      "68": [0, 0.69444, 0.07555, 0, 0.72223],
      "69": [0, 0.69444, 0.11983, 0, 0.59722],
      "70": [0, 0.69444, 0.13372, 0, 0.56945],
      "71": [0, 0.69444, 0.11983, 0, 0.66667],
      "72": [0, 0.69444, 0.08094, 0, 0.70834],
      "73": [0, 0.69444, 0.13372, 0, 0.27778],
      "74": [0, 0.69444, 0.08094, 0, 0.47222],
      "75": [0, 0.69444, 0.11983, 0, 0.69445],
      "76": [0, 0.69444, 0, 0, 0.54167],
      "77": [0, 0.69444, 0.08094, 0, 0.875],
      "78": [0, 0.69444, 0.08094, 0, 0.70834],
      "79": [0, 0.69444, 0.07555, 0, 0.73611],
      "80": [0, 0.69444, 0.08293, 0, 0.63889],
      "81": [0.125, 0.69444, 0.07555, 0, 0.73611],
      "82": [0, 0.69444, 0.08293, 0, 0.64584],
      "83": [0, 0.69444, 0.09205, 0, 0.55556],
      "84": [0, 0.69444, 0.13372, 0, 0.68056],
      "85": [0, 0.69444, 0.08094, 0, 0.6875],
      "86": [0, 0.69444, 0.1615, 0, 0.66667],
      "87": [0, 0.69444, 0.1615, 0, 0.94445],
      "88": [0, 0.69444, 0.13372, 0, 0.66667],
      "89": [0, 0.69444, 0.17261, 0, 0.66667],
      "90": [0, 0.69444, 0.11983, 0, 0.61111],
      "91": [0.25, 0.75, 0.15942, 0, 0.28889],
      "93": [0.25, 0.75, 0.08719, 0, 0.28889],
      "94": [0, 0.69444, 0.0799, 0, 0.5],
      "95": [0.35, 0.09444, 0.08616, 0, 0.5],
      "97": [0, 0.44444, 0.00981, 0, 0.48056],
      "98": [0, 0.69444, 0.03057, 0, 0.51667],
      "99": [0, 0.44444, 0.08336, 0, 0.44445],
      "100": [0, 0.69444, 0.09483, 0, 0.51667],
      "101": [0, 0.44444, 0.06778, 0, 0.44445],
      "102": [0, 0.69444, 0.21705, 0, 0.30556],
      "103": [0.19444, 0.44444, 0.10836, 0, 0.5],
      "104": [0, 0.69444, 0.01778, 0, 0.51667],
      "105": [0, 0.67937, 0.09718, 0, 0.23889],
      "106": [0.19444, 0.67937, 0.09162, 0, 0.26667],
      "107": [0, 0.69444, 0.08336, 0, 0.48889],
      "108": [0, 0.69444, 0.09483, 0, 0.23889],
      "109": [0, 0.44444, 0.01778, 0, 0.79445],
      "110": [0, 0.44444, 0.01778, 0, 0.51667],
      "111": [0, 0.44444, 0.06613, 0, 0.5],
      "112": [0.19444, 0.44444, 0.0389, 0, 0.51667],
      "113": [0.19444, 0.44444, 0.04169, 0, 0.51667],
      "114": [0, 0.44444, 0.10836, 0, 0.34167],
      "115": [0, 0.44444, 0.0778, 0, 0.38333],
      "116": [0, 0.57143, 0.07225, 0, 0.36111],
      "117": [0, 0.44444, 0.04169, 0, 0.51667],
      "118": [0, 0.44444, 0.10836, 0, 0.46111],
      "119": [0, 0.44444, 0.10836, 0, 0.68334],
      "120": [0, 0.44444, 0.09169, 0, 0.46111],
      "121": [0.19444, 0.44444, 0.10836, 0, 0.46111],
      "122": [0, 0.44444, 0.08752, 0, 0.43472],
      "126": [0.35, 0.32659, 0.08826, 0, 0.5],
      "160": [0, 0, 0, 0, 0.25],
      "168": [0, 0.67937, 0.06385, 0, 0.5],
      "176": [0, 0.69444, 0, 0, 0.73752],
      "184": [0.17014, 0, 0, 0, 0.44445],
      "305": [0, 0.44444, 0.04169, 0, 0.23889],
      "567": [0.19444, 0.44444, 0.04169, 0, 0.26667],
      "710": [0, 0.69444, 0.0799, 0, 0.5],
      "711": [0, 0.63194, 0.08432, 0, 0.5],
      "713": [0, 0.60889, 0.08776, 0, 0.5],
      "714": [0, 0.69444, 0.09205, 0, 0.5],
      "715": [0, 0.69444, 0, 0, 0.5],
      "728": [0, 0.69444, 0.09483, 0, 0.5],
      "729": [0, 0.67937, 0.07774, 0, 0.27778],
      "730": [0, 0.69444, 0, 0, 0.73752],
      "732": [0, 0.67659, 0.08826, 0, 0.5],
      "733": [0, 0.69444, 0.09205, 0, 0.5],
      "915": [0, 0.69444, 0.13372, 0, 0.54167],
      "916": [0, 0.69444, 0, 0, 0.83334],
      "920": [0, 0.69444, 0.07555, 0, 0.77778],
      "923": [0, 0.69444, 0, 0, 0.61111],
      "926": [0, 0.69444, 0.12816, 0, 0.66667],
      "928": [0, 0.69444, 0.08094, 0, 0.70834],
      "931": [0, 0.69444, 0.11983, 0, 0.72222],
      "933": [0, 0.69444, 0.09031, 0, 0.77778],
      "934": [0, 0.69444, 0.04603, 0, 0.72222],
      "936": [0, 0.69444, 0.09031, 0, 0.77778],
      "937": [0, 0.69444, 0.08293, 0, 0.72222],
      "8211": [0, 0.44444, 0.08616, 0, 0.5],
      "8212": [0, 0.44444, 0.08616, 0, 1.0],
      "8216": [0, 0.69444, 0.07816, 0, 0.27778],
      "8217": [0, 0.69444, 0.07816, 0, 0.27778],
      "8220": [0, 0.69444, 0.14205, 0, 0.5],
      "8221": [0, 0.69444, 0.00316, 0, 0.5]
    },
    "SansSerif-Regular": {
      "32": [0, 0, 0, 0, 0.25],
      "33": [0, 0.69444, 0, 0, 0.31945],
      "34": [0, 0.69444, 0, 0, 0.5],
      "35": [0.19444, 0.69444, 0, 0, 0.83334],
      "36": [0.05556, 0.75, 0, 0, 0.5],
      "37": [0.05556, 0.75, 0, 0, 0.83334],
      "38": [0, 0.69444, 0, 0, 0.75834],
      "39": [0, 0.69444, 0, 0, 0.27778],
      "40": [0.25, 0.75, 0, 0, 0.38889],
      "41": [0.25, 0.75, 0, 0, 0.38889],
      "42": [0, 0.75, 0, 0, 0.5],
      "43": [0.08333, 0.58333, 0, 0, 0.77778],
      "44": [0.125, 0.08333, 0, 0, 0.27778],
      "45": [0, 0.44444, 0, 0, 0.33333],
      "46": [0, 0.08333, 0, 0, 0.27778],
      "47": [0.25, 0.75, 0, 0, 0.5],
      "48": [0, 0.65556, 0, 0, 0.5],
      "49": [0, 0.65556, 0, 0, 0.5],
      "50": [0, 0.65556, 0, 0, 0.5],
      "51": [0, 0.65556, 0, 0, 0.5],
      "52": [0, 0.65556, 0, 0, 0.5],
      "53": [0, 0.65556, 0, 0, 0.5],
      "54": [0, 0.65556, 0, 0, 0.5],
      "55": [0, 0.65556, 0, 0, 0.5],
      "56": [0, 0.65556, 0, 0, 0.5],
      "57": [0, 0.65556, 0, 0, 0.5],
      "58": [0, 0.44444, 0, 0, 0.27778],
      "59": [0.125, 0.44444, 0, 0, 0.27778],
      "61": [-0.13, 0.37, 0, 0, 0.77778],
      "63": [0, 0.69444, 0, 0, 0.47222],
      "64": [0, 0.69444, 0, 0, 0.66667],
      "65": [0, 0.69444, 0, 0, 0.66667],
      "66": [0, 0.69444, 0, 0, 0.66667],
      "67": [0, 0.69444, 0, 0, 0.63889],
      "68": [0, 0.69444, 0, 0, 0.72223],
      "69": [0, 0.69444, 0, 0, 0.59722],
      "70": [0, 0.69444, 0, 0, 0.56945],
      "71": [0, 0.69444, 0, 0, 0.66667],
      "72": [0, 0.69444, 0, 0, 0.70834],
      "73": [0, 0.69444, 0, 0, 0.27778],
      "74": [0, 0.69444, 0, 0, 0.47222],
      "75": [0, 0.69444, 0, 0, 0.69445],
      "76": [0, 0.69444, 0, 0, 0.54167],
      "77": [0, 0.69444, 0, 0, 0.875],
      "78": [0, 0.69444, 0, 0, 0.70834],
      "79": [0, 0.69444, 0, 0, 0.73611],
      "80": [0, 0.69444, 0, 0, 0.63889],
      "81": [0.125, 0.69444, 0, 0, 0.73611],
      "82": [0, 0.69444, 0, 0, 0.64584],
      "83": [0, 0.69444, 0, 0, 0.55556],
      "84": [0, 0.69444, 0, 0, 0.68056],
      "85": [0, 0.69444, 0, 0, 0.6875],
      "86": [0, 0.69444, 0.01389, 0, 0.66667],
      "87": [0, 0.69444, 0.01389, 0, 0.94445],
      "88": [0, 0.69444, 0, 0, 0.66667],
      "89": [0, 0.69444, 0.025, 0, 0.66667],
      "90": [0, 0.69444, 0, 0, 0.61111],
      "91": [0.25, 0.75, 0, 0, 0.28889],
      "93": [0.25, 0.75, 0, 0, 0.28889],
      "94": [0, 0.69444, 0, 0, 0.5],
      "95": [0.35, 0.09444, 0.02778, 0, 0.5],
      "97": [0, 0.44444, 0, 0, 0.48056],
      "98": [0, 0.69444, 0, 0, 0.51667],
      "99": [0, 0.44444, 0, 0, 0.44445],
      "100": [0, 0.69444, 0, 0, 0.51667],
      "101": [0, 0.44444, 0, 0, 0.44445],
      "102": [0, 0.69444, 0.06944, 0, 0.30556],
      "103": [0.19444, 0.44444, 0.01389, 0, 0.5],
      "104": [0, 0.69444, 0, 0, 0.51667],
      "105": [0, 0.67937, 0, 0, 0.23889],
      "106": [0.19444, 0.67937, 0, 0, 0.26667],
      "107": [0, 0.69444, 0, 0, 0.48889],
      "108": [0, 0.69444, 0, 0, 0.23889],
      "109": [0, 0.44444, 0, 0, 0.79445],
      "110": [0, 0.44444, 0, 0, 0.51667],
      "111": [0, 0.44444, 0, 0, 0.5],
      "112": [0.19444, 0.44444, 0, 0, 0.51667],
      "113": [0.19444, 0.44444, 0, 0, 0.51667],
      "114": [0, 0.44444, 0.01389, 0, 0.34167],
      "115": [0, 0.44444, 0, 0, 0.38333],
      "116": [0, 0.57143, 0, 0, 0.36111],
      "117": [0, 0.44444, 0, 0, 0.51667],
      "118": [0, 0.44444, 0.01389, 0, 0.46111],
      "119": [0, 0.44444, 0.01389, 0, 0.68334],
      "120": [0, 0.44444, 0, 0, 0.46111],
      "121": [0.19444, 0.44444, 0.01389, 0, 0.46111],
      "122": [0, 0.44444, 0, 0, 0.43472],
      "126": [0.35, 0.32659, 0, 0, 0.5],
      "160": [0, 0, 0, 0, 0.25],
      "168": [0, 0.67937, 0, 0, 0.5],
      "176": [0, 0.69444, 0, 0, 0.66667],
      "184": [0.17014, 0, 0, 0, 0.44445],
      "305": [0, 0.44444, 0, 0, 0.23889],
      "567": [0.19444, 0.44444, 0, 0, 0.26667],
      "710": [0, 0.69444, 0, 0, 0.5],
      "711": [0, 0.63194, 0, 0, 0.5],
      "713": [0, 0.60889, 0, 0, 0.5],
      "714": [0, 0.69444, 0, 0, 0.5],
      "715": [0, 0.69444, 0, 0, 0.5],
      "728": [0, 0.69444, 0, 0, 0.5],
      "729": [0, 0.67937, 0, 0, 0.27778],
      "730": [0, 0.69444, 0, 0, 0.66667],
      "732": [0, 0.67659, 0, 0, 0.5],
      "733": [0, 0.69444, 0, 0, 0.5],
      "915": [0, 0.69444, 0, 0, 0.54167],
      "916": [0, 0.69444, 0, 0, 0.83334],
      "920": [0, 0.69444, 0, 0, 0.77778],
      "923": [0, 0.69444, 0, 0, 0.61111],
      "926": [0, 0.69444, 0, 0, 0.66667],
      "928": [0, 0.69444, 0, 0, 0.70834],
      "931": [0, 0.69444, 0, 0, 0.72222],
      "933": [0, 0.69444, 0, 0, 0.77778],
      "934": [0, 0.69444, 0, 0, 0.72222],
      "936": [0, 0.69444, 0, 0, 0.77778],
      "937": [0, 0.69444, 0, 0, 0.72222],
      "8211": [0, 0.44444, 0.02778, 0, 0.5],
      "8212": [0, 0.44444, 0.02778, 0, 1.0],
      "8216": [0, 0.69444, 0, 0, 0.27778],
      "8217": [0, 0.69444, 0, 0, 0.27778],
      "8220": [0, 0.69444, 0, 0, 0.5],
      "8221": [0, 0.69444, 0, 0, 0.5]
    },
    "Script-Regular": {
      "32": [0, 0, 0, 0, 0.25],
      "65": [0, 0.7, 0.22925, 0, 0.80253],
      "66": [0, 0.7, 0.04087, 0, 0.90757],
      "67": [0, 0.7, 0.1689, 0, 0.66619],
      "68": [0, 0.7, 0.09371, 0, 0.77443],
      "69": [0, 0.7, 0.18583, 0, 0.56162],
      "70": [0, 0.7, 0.13634, 0, 0.89544],
      "71": [0, 0.7, 0.17322, 0, 0.60961],
      "72": [0, 0.7, 0.29694, 0, 0.96919],
      "73": [0, 0.7, 0.19189, 0, 0.80907],
      "74": [0.27778, 0.7, 0.19189, 0, 1.05159],
      "75": [0, 0.7, 0.31259, 0, 0.91364],
      "76": [0, 0.7, 0.19189, 0, 0.87373],
      "77": [0, 0.7, 0.15981, 0, 1.08031],
      "78": [0, 0.7, 0.3525, 0, 0.9015],
      "79": [0, 0.7, 0.08078, 0, 0.73787],
      "80": [0, 0.7, 0.08078, 0, 1.01262],
      "81": [0, 0.7, 0.03305, 0, 0.88282],
      "82": [0, 0.7, 0.06259, 0, 0.85],
      "83": [0, 0.7, 0.19189, 0, 0.86767],
      "84": [0, 0.7, 0.29087, 0, 0.74697],
      "85": [0, 0.7, 0.25815, 0, 0.79996],
      "86": [0, 0.7, 0.27523, 0, 0.62204],
      "87": [0, 0.7, 0.27523, 0, 0.80532],
      "88": [0, 0.7, 0.26006, 0, 0.94445],
      "89": [0, 0.7, 0.2939, 0, 0.70961],
      "90": [0, 0.7, 0.24037, 0, 0.8212],
      "160": [0, 0, 0, 0, 0.25]
    },
    "Size1-Regular": {
      "32": [0, 0, 0, 0, 0.25],
      "40": [0.35001, 0.85, 0, 0, 0.45834],
      "41": [0.35001, 0.85, 0, 0, 0.45834],
      "47": [0.35001, 0.85, 0, 0, 0.57778],
      "91": [0.35001, 0.85, 0, 0, 0.41667],
      "92": [0.35001, 0.85, 0, 0, 0.57778],
      "93": [0.35001, 0.85, 0, 0, 0.41667],
      "123": [0.35001, 0.85, 0, 0, 0.58334],
      "125": [0.35001, 0.85, 0, 0, 0.58334],
      "160": [0, 0, 0, 0, 0.25],
      "710": [0, 0.72222, 0, 0, 0.55556],
      "732": [0, 0.72222, 0, 0, 0.55556],
      "770": [0, 0.72222, 0, 0, 0.55556],
      "771": [0, 0.72222, 0, 0, 0.55556],
      "8214": [-99e-5, 0.601, 0, 0, 0.77778],
      "8593": [1e-05, 0.6, 0, 0, 0.66667],
      "8595": [1e-05, 0.6, 0, 0, 0.66667],
      "8657": [1e-05, 0.6, 0, 0, 0.77778],
      "8659": [1e-05, 0.6, 0, 0, 0.77778],
      "8719": [0.25001, 0.75, 0, 0, 0.94445],
      "8720": [0.25001, 0.75, 0, 0, 0.94445],
      "8721": [0.25001, 0.75, 0, 0, 1.05556],
      "8730": [0.35001, 0.85, 0, 0, 1.0],
      "8739": [-599e-5, 0.606, 0, 0, 0.33333],
      "8741": [-599e-5, 0.606, 0, 0, 0.55556],
      "8747": [0.30612, 0.805, 0.19445, 0, 0.47222],
      "8748": [0.306, 0.805, 0.19445, 0, 0.47222],
      "8749": [0.306, 0.805, 0.19445, 0, 0.47222],
      "8750": [0.30612, 0.805, 0.19445, 0, 0.47222],
      "8896": [0.25001, 0.75, 0, 0, 0.83334],
      "8897": [0.25001, 0.75, 0, 0, 0.83334],
      "8898": [0.25001, 0.75, 0, 0, 0.83334],
      "8899": [0.25001, 0.75, 0, 0, 0.83334],
      "8968": [0.35001, 0.85, 0, 0, 0.47222],
      "8969": [0.35001, 0.85, 0, 0, 0.47222],
      "8970": [0.35001, 0.85, 0, 0, 0.47222],
      "8971": [0.35001, 0.85, 0, 0, 0.47222],
      "9168": [-99e-5, 0.601, 0, 0, 0.66667],
      "10216": [0.35001, 0.85, 0, 0, 0.47222],
      "10217": [0.35001, 0.85, 0, 0, 0.47222],
      "10752": [0.25001, 0.75, 0, 0, 1.11111],
      "10753": [0.25001, 0.75, 0, 0, 1.11111],
      "10754": [0.25001, 0.75, 0, 0, 1.11111],
      "10756": [0.25001, 0.75, 0, 0, 0.83334],
      "10758": [0.25001, 0.75, 0, 0, 0.83334]
    },
    "Size2-Regular": {
      "32": [0, 0, 0, 0, 0.25],
      "40": [0.65002, 1.15, 0, 0, 0.59722],
      "41": [0.65002, 1.15, 0, 0, 0.59722],
      "47": [0.65002, 1.15, 0, 0, 0.81111],
      "91": [0.65002, 1.15, 0, 0, 0.47222],
      "92": [0.65002, 1.15, 0, 0, 0.81111],
      "93": [0.65002, 1.15, 0, 0, 0.47222],
      "123": [0.65002, 1.15, 0, 0, 0.66667],
      "125": [0.65002, 1.15, 0, 0, 0.66667],
      "160": [0, 0, 0, 0, 0.25],
      "710": [0, 0.75, 0, 0, 1.0],
      "732": [0, 0.75, 0, 0, 1.0],
      "770": [0, 0.75, 0, 0, 1.0],
      "771": [0, 0.75, 0, 0, 1.0],
      "8719": [0.55001, 1.05, 0, 0, 1.27778],
      "8720": [0.55001, 1.05, 0, 0, 1.27778],
      "8721": [0.55001, 1.05, 0, 0, 1.44445],
      "8730": [0.65002, 1.15, 0, 0, 1.0],
      "8747": [0.86225, 1.36, 0.44445, 0, 0.55556],
      "8748": [0.862, 1.36, 0.44445, 0, 0.55556],
      "8749": [0.862, 1.36, 0.44445, 0, 0.55556],
      "8750": [0.86225, 1.36, 0.44445, 0, 0.55556],
      "8896": [0.55001, 1.05, 0, 0, 1.11111],
      "8897": [0.55001, 1.05, 0, 0, 1.11111],
      "8898": [0.55001, 1.05, 0, 0, 1.11111],
      "8899": [0.55001, 1.05, 0, 0, 1.11111],
      "8968": [0.65002, 1.15, 0, 0, 0.52778],
      "8969": [0.65002, 1.15, 0, 0, 0.52778],
      "8970": [0.65002, 1.15, 0, 0, 0.52778],
      "8971": [0.65002, 1.15, 0, 0, 0.52778],
      "10216": [0.65002, 1.15, 0, 0, 0.61111],
      "10217": [0.65002, 1.15, 0, 0, 0.61111],
      "10752": [0.55001, 1.05, 0, 0, 1.51112],
      "10753": [0.55001, 1.05, 0, 0, 1.51112],
      "10754": [0.55001, 1.05, 0, 0, 1.51112],
      "10756": [0.55001, 1.05, 0, 0, 1.11111],
      "10758": [0.55001, 1.05, 0, 0, 1.11111]
    },
    "Size3-Regular": {
      "32": [0, 0, 0, 0, 0.25],
      "40": [0.95003, 1.45, 0, 0, 0.73611],
      "41": [0.95003, 1.45, 0, 0, 0.73611],
      "47": [0.95003, 1.45, 0, 0, 1.04445],
      "91": [0.95003, 1.45, 0, 0, 0.52778],
      "92": [0.95003, 1.45, 0, 0, 1.04445],
      "93": [0.95003, 1.45, 0, 0, 0.52778],
      "123": [0.95003, 1.45, 0, 0, 0.75],
      "125": [0.95003, 1.45, 0, 0, 0.75],
      "160": [0, 0, 0, 0, 0.25],
      "710": [0, 0.75, 0, 0, 1.44445],
      "732": [0, 0.75, 0, 0, 1.44445],
      "770": [0, 0.75, 0, 0, 1.44445],
      "771": [0, 0.75, 0, 0, 1.44445],
      "8730": [0.95003, 1.45, 0, 0, 1.0],
      "8968": [0.95003, 1.45, 0, 0, 0.58334],
      "8969": [0.95003, 1.45, 0, 0, 0.58334],
      "8970": [0.95003, 1.45, 0, 0, 0.58334],
      "8971": [0.95003, 1.45, 0, 0, 0.58334],
      "10216": [0.95003, 1.45, 0, 0, 0.75],
      "10217": [0.95003, 1.45, 0, 0, 0.75]
    },
    "Size4-Regular": {
      "32": [0, 0, 0, 0, 0.25],
      "40": [1.25003, 1.75, 0, 0, 0.79167],
      "41": [1.25003, 1.75, 0, 0, 0.79167],
      "47": [1.25003, 1.75, 0, 0, 1.27778],
      "91": [1.25003, 1.75, 0, 0, 0.58334],
      "92": [1.25003, 1.75, 0, 0, 1.27778],
      "93": [1.25003, 1.75, 0, 0, 0.58334],
      "123": [1.25003, 1.75, 0, 0, 0.80556],
      "125": [1.25003, 1.75, 0, 0, 0.80556],
      "160": [0, 0, 0, 0, 0.25],
      "710": [0, 0.825, 0, 0, 1.8889],
      "732": [0, 0.825, 0, 0, 1.8889],
      "770": [0, 0.825, 0, 0, 1.8889],
      "771": [0, 0.825, 0, 0, 1.8889],
      "8730": [1.25003, 1.75, 0, 0, 1.0],
      "8968": [1.25003, 1.75, 0, 0, 0.63889],
      "8969": [1.25003, 1.75, 0, 0, 0.63889],
      "8970": [1.25003, 1.75, 0, 0, 0.63889],
      "8971": [1.25003, 1.75, 0, 0, 0.63889],
      "9115": [0.64502, 1.155, 0, 0, 0.875],
      "9116": [1e-05, 0.6, 0, 0, 0.875],
      "9117": [0.64502, 1.155, 0, 0, 0.875],
      "9118": [0.64502, 1.155, 0, 0, 0.875],
      "9119": [1e-05, 0.6, 0, 0, 0.875],
      "9120": [0.64502, 1.155, 0, 0, 0.875],
      "9121": [0.64502, 1.155, 0, 0, 0.66667],
      "9122": [-99e-5, 0.601, 0, 0, 0.66667],
      "9123": [0.64502, 1.155, 0, 0, 0.66667],
      "9124": [0.64502, 1.155, 0, 0, 0.66667],
      "9125": [-99e-5, 0.601, 0, 0, 0.66667],
      "9126": [0.64502, 1.155, 0, 0, 0.66667],
      "9127": [1e-05, 0.9, 0, 0, 0.88889],
      "9128": [0.65002, 1.15, 0, 0, 0.88889],
      "9129": [0.90001, 0, 0, 0, 0.88889],
      "9130": [0, 0.3, 0, 0, 0.88889],
      "9131": [1e-05, 0.9, 0, 0, 0.88889],
      "9132": [0.65002, 1.15, 0, 0, 0.88889],
      "9133": [0.90001, 0, 0, 0, 0.88889],
      "9143": [0.88502, 0.915, 0, 0, 1.05556],
      "10216": [1.25003, 1.75, 0, 0, 0.80556],
      "10217": [1.25003, 1.75, 0, 0, 0.80556],
      "57344": [-499e-5, 0.605, 0, 0, 1.05556],
      "57345": [-499e-5, 0.605, 0, 0, 1.05556],
      "57680": [0, 0.12, 0, 0, 0.45],
      "57681": [0, 0.12, 0, 0, 0.45],
      "57682": [0, 0.12, 0, 0, 0.45],
      "57683": [0, 0.12, 0, 0, 0.45]
    },
    "Typewriter-Regular": {
      "32": [0, 0, 0, 0, 0.525],
      "33": [0, 0.61111, 0, 0, 0.525],
      "34": [0, 0.61111, 0, 0, 0.525],
      "35": [0, 0.61111, 0, 0, 0.525],
      "36": [0.08333, 0.69444, 0, 0, 0.525],
      "37": [0.08333, 0.69444, 0, 0, 0.525],
      "38": [0, 0.61111, 0, 0, 0.525],
      "39": [0, 0.61111, 0, 0, 0.525],
      "40": [0.08333, 0.69444, 0, 0, 0.525],
      "41": [0.08333, 0.69444, 0, 0, 0.525],
      "42": [0, 0.52083, 0, 0, 0.525],
      "43": [-0.08056, 0.53055, 0, 0, 0.525],
      "44": [0.13889, 0.125, 0, 0, 0.525],
      "45": [-0.08056, 0.53055, 0, 0, 0.525],
      "46": [0, 0.125, 0, 0, 0.525],
      "47": [0.08333, 0.69444, 0, 0, 0.525],
      "48": [0, 0.61111, 0, 0, 0.525],
      "49": [0, 0.61111, 0, 0, 0.525],
      "50": [0, 0.61111, 0, 0, 0.525],
      "51": [0, 0.61111, 0, 0, 0.525],
      "52": [0, 0.61111, 0, 0, 0.525],
      "53": [0, 0.61111, 0, 0, 0.525],
      "54": [0, 0.61111, 0, 0, 0.525],
      "55": [0, 0.61111, 0, 0, 0.525],
      "56": [0, 0.61111, 0, 0, 0.525],
      "57": [0, 0.61111, 0, 0, 0.525],
      "58": [0, 0.43056, 0, 0, 0.525],
      "59": [0.13889, 0.43056, 0, 0, 0.525],
      "60": [-0.05556, 0.55556, 0, 0, 0.525],
      "61": [-0.19549, 0.41562, 0, 0, 0.525],
      "62": [-0.05556, 0.55556, 0, 0, 0.525],
      "63": [0, 0.61111, 0, 0, 0.525],
      "64": [0, 0.61111, 0, 0, 0.525],
      "65": [0, 0.61111, 0, 0, 0.525],
      "66": [0, 0.61111, 0, 0, 0.525],
      "67": [0, 0.61111, 0, 0, 0.525],
      "68": [0, 0.61111, 0, 0, 0.525],
      "69": [0, 0.61111, 0, 0, 0.525],
      "70": [0, 0.61111, 0, 0, 0.525],
      "71": [0, 0.61111, 0, 0, 0.525],
      "72": [0, 0.61111, 0, 0, 0.525],
      "73": [0, 0.61111, 0, 0, 0.525],
      "74": [0, 0.61111, 0, 0, 0.525],
      "75": [0, 0.61111, 0, 0, 0.525],
      "76": [0, 0.61111, 0, 0, 0.525],
      "77": [0, 0.61111, 0, 0, 0.525],
      "78": [0, 0.61111, 0, 0, 0.525],
      "79": [0, 0.61111, 0, 0, 0.525],
      "80": [0, 0.61111, 0, 0, 0.525],
      "81": [0.13889, 0.61111, 0, 0, 0.525],
      "82": [0, 0.61111, 0, 0, 0.525],
      "83": [0, 0.61111, 0, 0, 0.525],
      "84": [0, 0.61111, 0, 0, 0.525],
      "85": [0, 0.61111, 0, 0, 0.525],
      "86": [0, 0.61111, 0, 0, 0.525],
      "87": [0, 0.61111, 0, 0, 0.525],
      "88": [0, 0.61111, 0, 0, 0.525],
      "89": [0, 0.61111, 0, 0, 0.525],
      "90": [0, 0.61111, 0, 0, 0.525],
      "91": [0.08333, 0.69444, 0, 0, 0.525],
      "92": [0.08333, 0.69444, 0, 0, 0.525],
      "93": [0.08333, 0.69444, 0, 0, 0.525],
      "94": [0, 0.61111, 0, 0, 0.525],
      "95": [0.09514, 0, 0, 0, 0.525],
      "96": [0, 0.61111, 0, 0, 0.525],
      "97": [0, 0.43056, 0, 0, 0.525],
      "98": [0, 0.61111, 0, 0, 0.525],
      "99": [0, 0.43056, 0, 0, 0.525],
      "100": [0, 0.61111, 0, 0, 0.525],
      "101": [0, 0.43056, 0, 0, 0.525],
      "102": [0, 0.61111, 0, 0, 0.525],
      "103": [0.22222, 0.43056, 0, 0, 0.525],
      "104": [0, 0.61111, 0, 0, 0.525],
      "105": [0, 0.61111, 0, 0, 0.525],
      "106": [0.22222, 0.61111, 0, 0, 0.525],
      "107": [0, 0.61111, 0, 0, 0.525],
      "108": [0, 0.61111, 0, 0, 0.525],
      "109": [0, 0.43056, 0, 0, 0.525],
      "110": [0, 0.43056, 0, 0, 0.525],
      "111": [0, 0.43056, 0, 0, 0.525],
      "112": [0.22222, 0.43056, 0, 0, 0.525],
      "113": [0.22222, 0.43056, 0, 0, 0.525],
      "114": [0, 0.43056, 0, 0, 0.525],
      "115": [0, 0.43056, 0, 0, 0.525],
      "116": [0, 0.55358, 0, 0, 0.525],
      "117": [0, 0.43056, 0, 0, 0.525],
      "118": [0, 0.43056, 0, 0, 0.525],
      "119": [0, 0.43056, 0, 0, 0.525],
      "120": [0, 0.43056, 0, 0, 0.525],
      "121": [0.22222, 0.43056, 0, 0, 0.525],
      "122": [0, 0.43056, 0, 0, 0.525],
      "123": [0.08333, 0.69444, 0, 0, 0.525],
      "124": [0.08333, 0.69444, 0, 0, 0.525],
      "125": [0.08333, 0.69444, 0, 0, 0.525],
      "126": [0, 0.61111, 0, 0, 0.525],
      "127": [0, 0.61111, 0, 0, 0.525],
      "160": [0, 0, 0, 0, 0.525],
      "176": [0, 0.61111, 0, 0, 0.525],
      "184": [0.19445, 0, 0, 0, 0.525],
      "305": [0, 0.43056, 0, 0, 0.525],
      "567": [0.22222, 0.43056, 0, 0, 0.525],
      "711": [0, 0.56597, 0, 0, 0.525],
      "713": [0, 0.56555, 0, 0, 0.525],
      "714": [0, 0.61111, 0, 0, 0.525],
      "715": [0, 0.61111, 0, 0, 0.525],
      "728": [0, 0.61111, 0, 0, 0.525],
      "730": [0, 0.61111, 0, 0, 0.525],
      "770": [0, 0.61111, 0, 0, 0.525],
      "771": [0, 0.61111, 0, 0, 0.525],
      "776": [0, 0.61111, 0, 0, 0.525],
      "915": [0, 0.61111, 0, 0, 0.525],
      "916": [0, 0.61111, 0, 0, 0.525],
      "920": [0, 0.61111, 0, 0, 0.525],
      "923": [0, 0.61111, 0, 0, 0.525],
      "926": [0, 0.61111, 0, 0, 0.525],
      "928": [0, 0.61111, 0, 0, 0.525],
      "931": [0, 0.61111, 0, 0, 0.525],
      "933": [0, 0.61111, 0, 0, 0.525],
      "934": [0, 0.61111, 0, 0, 0.525],
      "936": [0, 0.61111, 0, 0, 0.525],
      "937": [0, 0.61111, 0, 0, 0.525],
      "8216": [0, 0.61111, 0, 0, 0.525],
      "8217": [0, 0.61111, 0, 0, 0.525],
      "8242": [0, 0.61111, 0, 0, 0.525],
      "9251": [0.11111, 0.21944, 0, 0, 0.525]
    }
  };

  /**
   * This file contains metrics regarding fonts and individual symbols. The sigma
   * and xi variables, as well as the metricMap map contain data extracted from
   * TeX, TeX font metrics, and the TTF files. These data are then exposed via the
   * `metrics` variable and the getCharacterMetrics function.
   */
  // In TeX, there are actually three sets of dimensions, one for each of
  // textstyle (size index 5 and higher: >=9pt), scriptstyle (size index 3 and 4:
  // 7-8pt), and scriptscriptstyle (size index 1 and 2: 5-6pt).  These are
  // provided in the arrays below, in that order.
  //
  // The font metrics are stored in fonts cmsy10, cmsy7, and cmsy5 respectively.
  // This was determined by running the following script:
  //
  //     latex -interaction=nonstopmode \
  //     '\documentclass{article}\usepackage{amsmath}\begin{document}' \
  //     '$a$ \expandafter\show\the\textfont2' \
  //     '\expandafter\show\the\scriptfont2' \
  //     '\expandafter\show\the\scriptscriptfont2' \
  //     '\stop'
  //
  // The metrics themselves were retrieved using the following commands:
  //
  //     tftopl cmsy10
  //     tftopl cmsy7
  //     tftopl cmsy5
  //
  // The output of each of these commands is quite lengthy.  The only part we
  // care about is the FONTDIMEN section. Each value is measured in EMs.
  var sigmasAndXis = {
    slant: [0.250, 0.250, 0.250],
    // sigma1
    space: [0.000, 0.000, 0.000],
    // sigma2
    stretch: [0.000, 0.000, 0.000],
    // sigma3
    shrink: [0.000, 0.000, 0.000],
    // sigma4
    xHeight: [0.431, 0.431, 0.431],
    // sigma5
    quad: [1.000, 1.171, 1.472],
    // sigma6
    extraSpace: [0.000, 0.000, 0.000],
    // sigma7
    num1: [0.677, 0.732, 0.925],
    // sigma8
    num2: [0.394, 0.384, 0.387],
    // sigma9
    num3: [0.444, 0.471, 0.504],
    // sigma10
    denom1: [0.686, 0.752, 1.025],
    // sigma11
    denom2: [0.345, 0.344, 0.532],
    // sigma12
    sup1: [0.413, 0.503, 0.504],
    // sigma13
    sup2: [0.363, 0.431, 0.404],
    // sigma14
    sup3: [0.289, 0.286, 0.294],
    // sigma15
    sub1: [0.150, 0.143, 0.200],
    // sigma16
    sub2: [0.247, 0.286, 0.400],
    // sigma17
    supDrop: [0.386, 0.353, 0.494],
    // sigma18
    subDrop: [0.050, 0.071, 0.100],
    // sigma19
    delim1: [2.390, 1.700, 1.980],
    // sigma20
    delim2: [1.010, 1.157, 1.420],
    // sigma21
    axisHeight: [0.250, 0.250, 0.250],
    // sigma22
    // These font metrics are extracted from TeX by using tftopl on cmex10.tfm;
    // they correspond to the font parameters of the extension fonts (family 3).
    // See the TeXbook, page 441. In AMSTeX, the extension fonts scale; to
    // match cmex7, we'd use cmex7.tfm values for script and scriptscript
    // values.
    defaultRuleThickness: [0.04, 0.049, 0.049],
    // xi8; cmex7: 0.049
    bigOpSpacing1: [0.111, 0.111, 0.111],
    // xi9
    bigOpSpacing2: [0.166, 0.166, 0.166],
    // xi10
    bigOpSpacing3: [0.2, 0.2, 0.2],
    // xi11
    bigOpSpacing4: [0.6, 0.611, 0.611],
    // xi12; cmex7: 0.611
    bigOpSpacing5: [0.1, 0.143, 0.143],
    // xi13; cmex7: 0.143
    // The \sqrt rule width is taken from the height of the surd character.
    // Since we use the same font at all sizes, this thickness doesn't scale.
    sqrtRuleThickness: [0.04, 0.04, 0.04],
    // This value determines how large a pt is, for metrics which are defined
    // in terms of pts.
    // This value is also used in katex.scss; if you change it make sure the
    // values match.
    ptPerEm: [10.0, 10.0, 10.0],
    // The space between adjacent `|` columns in an array definition. From
    // `\showthe\doublerulesep` in LaTeX. Equals 2.0 / ptPerEm.
    doubleRuleSep: [0.2, 0.2, 0.2],
    // The width of separator lines in {array} environments. From
    // `\showthe\arrayrulewidth` in LaTeX. Equals 0.4 / ptPerEm.
    arrayRuleWidth: [0.04, 0.04, 0.04],
    // Two values from LaTeX source2e:
    fboxsep: [0.3, 0.3, 0.3],
    //        3 pt / ptPerEm
    fboxrule: [0.04, 0.04, 0.04] // 0.4 pt / ptPerEm

  }; // This map contains a mapping from font name and character code to character
  // should have Latin-1 and Cyrillic characters, but may not depending on the
  // operating system.  The metrics do not account for extra height from the
  // accents.  In the case of Cyrillic characters which have both ascenders and
  // descenders we prefer approximations with ascenders, primarily to prevent
  // the fraction bar or root line from intersecting the glyph.
  // TODO(kevinb) allow union of multiple glyph metrics for better accuracy.

  var extraCharacterMap = {
    // Latin-1
    'Å': 'A',
    'Ð': 'D',
    'Þ': 'o',
    'å': 'a',
    'ð': 'd',
    'þ': 'o',
    // Cyrillic
    'А': 'A',
    'Б': 'B',
    'В': 'B',
    'Г': 'F',
    'Д': 'A',
    'Е': 'E',
    'Ж': 'K',
    'З': '3',
    'И': 'N',
    'Й': 'N',
    'К': 'K',
    'Л': 'N',
    'М': 'M',
    'Н': 'H',
    'О': 'O',
    'П': 'N',
    'Р': 'P',
    'С': 'C',
    'Т': 'T',
    'У': 'y',
    'Ф': 'O',
    'Х': 'X',
    'Ц': 'U',
    'Ч': 'h',
    'Ш': 'W',
    'Щ': 'W',
    'Ъ': 'B',
    'Ы': 'X',
    'Ь': 'B',
    'Э': '3',
    'Ю': 'X',
    'Я': 'R',
    'а': 'a',
    'б': 'b',
    'в': 'a',
    'г': 'r',
    'д': 'y',
    'е': 'e',
    'ж': 'm',
    'з': 'e',
    'и': 'n',
    'й': 'n',
    'к': 'n',
    'л': 'n',
    'м': 'm',
    'н': 'n',
    'о': 'o',
    'п': 'n',
    'р': 'p',
    'с': 'c',
    'т': 'o',
    'у': 'y',
    'ф': 'b',
    'х': 'x',
    'ц': 'n',
    'ч': 'n',
    'ш': 'w',
    'щ': 'w',
    'ъ': 'a',
    'ы': 'm',
    'ь': 'a',
    'э': 'e',
    'ю': 'm',
    'я': 'r'
  };

  /**
   * This function adds new font metrics to default metricMap
   * It can also override existing metrics
   */
  function setFontMetrics(fontName, metrics) {
    fontMetricsData[fontName] = metrics;
  }
  /**
   * This function is a convenience function for looking up information in the
   * metricMap table. It takes a character as a string, and a font.
   *
   * Note: the `width` property may be undefined if fontMetricsData.js wasn't
   * built using `Make extended_metrics`.
   */

  function getCharacterMetrics(character, font, mode) {
    if (!fontMetricsData[font]) {
      throw new Error("Font metrics not found for font: " + font + ".");
    }

    var ch = character.charCodeAt(0);
    var metrics = fontMetricsData[font][ch];

    if (!metrics && character[0] in extraCharacterMap) {
      ch = extraCharacterMap[character[0]].charCodeAt(0);
      metrics = fontMetricsData[font][ch];
    }

    if (!metrics && mode === 'text') {
      // We don't typically have font metrics for Asian scripts.
      // But since we support them in text mode, we need to return
      // some sort of metrics.
      // So if the character is in a script we support but we
      // don't have metrics for it, just use the metrics for
      // the Latin capital letter M. This is close enough because
      // we (currently) only care about the height of the glyph
      // not its width.
      if (supportedCodepoint(ch)) {
        metrics = fontMetricsData[font][77]; // 77 is the charcode for 'M'
      }
    }

    if (metrics) {
      return {
        depth: metrics[0],
        height: metrics[1],
        italic: metrics[2],
        skew: metrics[3],
        width: metrics[4]
      };
    }
  }
  var fontMetricsBySizeIndex = {};
  /**
   * Get the font metrics for a given size.
   */

  function getGlobalMetrics(size) {
    var sizeIndex;

    if (size >= 5) {
      sizeIndex = 0;
    } else if (size >= 3) {
      sizeIndex = 1;
    } else {
      sizeIndex = 2;
    }

    if (!fontMetricsBySizeIndex[sizeIndex]) {
      var metrics = fontMetricsBySizeIndex[sizeIndex] = {
        cssEmPerMu: sigmasAndXis.quad[sizeIndex] / 18
      };

      for (var key in sigmasAndXis) {
        if (sigmasAndXis.hasOwnProperty(key)) {
          metrics[key] = sigmasAndXis[key][sizeIndex];
        }
      }
    }

    return fontMetricsBySizeIndex[sizeIndex];
  }

  /**
   * This file contains information about the options that the Parser carries
   * around with it while parsing. Data is held in an `Options` object, and when
   * recursing, a new `Options` object can be created with the `.with*` and
   * `.reset` functions.
   */
  var sizeStyleMap = [// Each element contains [textsize, scriptsize, scriptscriptsize].
  // The size mappings are taken from TeX with \normalsize=10pt.
  [1, 1, 1], // size1: [5, 5, 5]              \tiny
  [2, 1, 1], // size2: [6, 5, 5]
  [3, 1, 1], // size3: [7, 5, 5]              \scriptsize
  [4, 2, 1], // size4: [8, 6, 5]              \footnotesize
  [5, 2, 1], // size5: [9, 6, 5]              \small
  [6, 3, 1], // size6: [10, 7, 5]             \normalsize
  [7, 4, 2], // size7: [12, 8, 6]             \large
  [8, 6, 3], // size8: [14.4, 10, 7]          \Large
  [9, 7, 6], // size9: [17.28, 12, 10]        \LARGE
  [10, 8, 7], // size10: [20.74, 14.4, 12]     \huge
  [11, 10, 9] // size11: [24.88, 20.74, 17.28] \HUGE
  ];
  var sizeMultipliers = [// fontMetrics.js:getGlobalMetrics also uses size indexes, so if
  // you change size indexes, change that function.
  0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.2, 1.44, 1.728, 2.074, 2.488];

  var sizeAtStyle = function sizeAtStyle(size, style) {
    return style.size < 2 ? size : sizeStyleMap[size - 1][style.size - 1];
  }; // In these types, "" (empty string) means "no change".


  /**
   * This is the main options class. It contains the current style, size, color,
   * and font.
   *
   * Options objects should not be modified. To create a new Options with
   * different properties, call a `.having*` method.
   */
  class Options {
    // A font family applies to a group of fonts (i.e. SansSerif), while a font
    // represents a specific font (i.e. SansSerif Bold).
    // See: https://tex.stackexchange.com/questions/22350/difference-between-textrm-and-mathrm

    /**
     * The base size index.
     */
    constructor(data) {
      this.style = undefined;
      this.color = undefined;
      this.size = undefined;
      this.textSize = undefined;
      this.phantom = undefined;
      this.font = undefined;
      this.fontFamily = undefined;
      this.fontWeight = undefined;
      this.fontShape = undefined;
      this.sizeMultiplier = undefined;
      this.maxSize = undefined;
      this.minRuleThickness = undefined;
      this._fontMetrics = undefined;
      this.style = data.style;
      this.color = data.color;
      this.size = data.size || Options.BASESIZE;
      this.textSize = data.textSize || this.size;
      this.phantom = !!data.phantom;
      this.font = data.font || "";
      this.fontFamily = data.fontFamily || "";
      this.fontWeight = data.fontWeight || '';
      this.fontShape = data.fontShape || '';
      this.sizeMultiplier = sizeMultipliers[this.size - 1];
      this.maxSize = data.maxSize;
      this.minRuleThickness = data.minRuleThickness;
      this._fontMetrics = undefined;
    }
    /**
     * Returns a new options object with the same properties as "this".  Properties
     * from "extension" will be copied to the new options object.
     */


    extend(extension) {
      var data = {
        style: this.style,
        size: this.size,
        textSize: this.textSize,
        color: this.color,
        phantom: this.phantom,
        font: this.font,
        fontFamily: this.fontFamily,
        fontWeight: this.fontWeight,
        fontShape: this.fontShape,
        maxSize: this.maxSize,
        minRuleThickness: this.minRuleThickness
      };

      for (var key in extension) {
        if (extension.hasOwnProperty(key)) {
          data[key] = extension[key];
        }
      }

      return new Options(data);
    }
    /**
     * Return an options object with the given style. If `this.style === style`,
     * returns `this`.
     */


    havingStyle(style) {
      if (this.style === style) {
        return this;
      } else {
        return this.extend({
          style: style,
          size: sizeAtStyle(this.textSize, style)
        });
      }
    }
    /**
     * Return an options object with a cramped version of the current style. If
     * the current style is cramped, returns `this`.
     */


    havingCrampedStyle() {
      return this.havingStyle(this.style.cramp());
    }
    /**
     * Return an options object with the given size and in at least `\textstyle`.
     * Returns `this` if appropriate.
     */


    havingSize(size) {
      if (this.size === size && this.textSize === size) {
        return this;
      } else {
        return this.extend({
          style: this.style.text(),
          size: size,
          textSize: size,
          sizeMultiplier: sizeMultipliers[size - 1]
        });
      }
    }
    /**
     * Like `this.havingSize(BASESIZE).havingStyle(style)`. If `style` is omitted,
     * changes to at least `\textstyle`.
     */


    havingBaseStyle(style) {
      style = style || this.style.text();
      var wantSize = sizeAtStyle(Options.BASESIZE, style);

      if (this.size === wantSize && this.textSize === Options.BASESIZE && this.style === style) {
        return this;
      } else {
        return this.extend({
          style: style,
          size: wantSize
        });
      }
    }
    /**
     * Remove the effect of sizing changes such as \Huge.
     * Keep the effect of the current style, such as \scriptstyle.
     */


    havingBaseSizing() {
      var size;

      switch (this.style.id) {
        case 4:
        case 5:
          size = 3; // normalsize in scriptstyle

          break;

        case 6:
        case 7:
          size = 1; // normalsize in scriptscriptstyle

          break;

        default:
          size = 6;
        // normalsize in textstyle or displaystyle
      }

      return this.extend({
        style: this.style.text(),
        size: size
      });
    }
    /**
     * Create a new options object with the given color.
     */


    withColor(color) {
      return this.extend({
        color: color
      });
    }
    /**
     * Create a new options object with "phantom" set to true.
     */


    withPhantom() {
      return this.extend({
        phantom: true
      });
    }
    /**
     * Creates a new options object with the given math font or old text font.
     * @type {[type]}
     */


    withFont(font) {
      return this.extend({
        font
      });
    }
    /**
     * Create a new options objects with the given fontFamily.
     */


    withTextFontFamily(fontFamily) {
      return this.extend({
        fontFamily,
        font: ""
      });
    }
    /**
     * Creates a new options object with the given font weight
     */


    withTextFontWeight(fontWeight) {
      return this.extend({
        fontWeight,
        font: ""
      });
    }
    /**
     * Creates a new options object with the given font weight
     */


    withTextFontShape(fontShape) {
      return this.extend({
        fontShape,
        font: ""
      });
    }
    /**
     * Return the CSS sizing classes required to switch from enclosing options
     * `oldOptions` to `this`. Returns an array of classes.
     */


    sizingClasses(oldOptions) {
      if (oldOptions.size !== this.size) {
        return ["sizing", "reset-size" + oldOptions.size, "size" + this.size];
      } else {
        return [];
      }
    }
    /**
     * Return the CSS sizing classes required to switch to the base size. Like
     * `this.havingSize(BASESIZE).sizingClasses(this)`.
     */


    baseSizingClasses() {
      if (this.size !== Options.BASESIZE) {
        return ["sizing", "reset-size" + this.size, "size" + Options.BASESIZE];
      } else {
        return [];
      }
    }
    /**
     * Return the font metrics for this size.
     */


    fontMetrics() {
      if (!this._fontMetrics) {
        this._fontMetrics = getGlobalMetrics(this.size);
      }

      return this._fontMetrics;
    }
    /**
     * Gets the CSS color of the current options object
     */


    getColor() {
      if (this.phantom) {
        return "transparent";
      } else {
        return this.color;
      }
    }

  }

  Options.BASESIZE = 6;

  /**
   * This file does conversion between units.  In particular, it provides
   * calculateSize to convert other units into ems.
   */
  // Thus, multiplying a length by this number converts the length from units
  // into pts.  Dividing the result by ptPerEm gives the number of ems
  // *assuming* a font size of ptPerEm (normal size, normal style).

  var ptPerUnit = {
    // https://en.wikibooks.org/wiki/LaTeX/Lengths and
    // https://tex.stackexchange.com/a/8263
    "pt": 1,
    // TeX point
    "mm": 7227 / 2540,
    // millimeter
    "cm": 7227 / 254,
    // centimeter
    "in": 72.27,
    // inch
    "bp": 803 / 800,
    // big (PostScript) points
    "pc": 12,
    // pica
    "dd": 1238 / 1157,
    // didot
    "cc": 14856 / 1157,
    // cicero (12 didot)
    "nd": 685 / 642,
    // new didot
    "nc": 1370 / 107,
    // new cicero (12 new didot)
    "sp": 1 / 65536,
    // scaled point (TeX's internal smallest unit)
    // https://tex.stackexchange.com/a/41371
    "px": 803 / 800 // \pdfpxdimen defaults to 1 bp in pdfTeX and LuaTeX

  }; // Dictionary of relative units, for fast validity testing.

  var relativeUnit = {
    "ex": true,
    "em": true,
    "mu": true
  };

  /**
   * Determine whether the specified unit (either a string defining the unit
   * or a "size" parse node containing a unit field) is valid.
   */
  var validUnit = function validUnit(unit) {
    if (typeof unit !== "string") {
      unit = unit.unit;
    }

    return unit in ptPerUnit || unit in relativeUnit || unit === "ex";
  };
  /*
   * Convert a "size" parse node (with numeric "number" and string "unit" fields,
   * as parsed by functions.js argType "size") into a CSS em value for the
   * current style/scale.  `options` gives the current options.
   */

  var calculateSize = function calculateSize(sizeValue, options) {
    var scale;

    if (sizeValue.unit in ptPerUnit) {
      // Absolute units
      scale = ptPerUnit[sizeValue.unit] // Convert unit to pt
      / options.fontMetrics().ptPerEm // Convert pt to CSS em
      / options.sizeMultiplier; // Unscale to make absolute units
    } else if (sizeValue.unit === "mu") {
      // `mu` units scale with scriptstyle/scriptscriptstyle.
      scale = options.fontMetrics().cssEmPerMu;
    } else {
      // Other relative units always refer to the *textstyle* font
      // in the current size.
      var unitOptions;

      if (options.style.isTight()) {
        // isTight() means current style is script/scriptscript.
        unitOptions = options.havingStyle(options.style.text());
      } else {
        unitOptions = options;
      } // TODO: In TeX these units are relative to the quad of the current
      // *text* font, e.g. cmr10. KaTeX instead uses values from the
      // comparably-sized *Computer Modern symbol* font. At 10pt, these
      // match. At 7pt and 5pt, they differ: cmr7=1.138894, cmsy7=1.170641;
      // cmr5=1.361133, cmsy5=1.472241. Consider $\scriptsize a\kern1emb$.
      // TeX \showlists shows a kern of 1.13889 * fontsize;
      // KaTeX shows a kern of 1.171 * fontsize.


      if (sizeValue.unit === "ex") {
        scale = unitOptions.fontMetrics().xHeight;
      } else if (sizeValue.unit === "em") {
        scale = unitOptions.fontMetrics().quad;
      } else {
        throw new ParseError("Invalid unit: '" + sizeValue.unit + "'");
      }

      if (unitOptions !== options) {
        scale *= unitOptions.sizeMultiplier / options.sizeMultiplier;
      }
    }

    return Math.min(sizeValue.number * scale, options.maxSize);
  };
  /**
   * Round `n` to 4 decimal places, or to the nearest 1/10,000th em. See
   * https://github.com/KaTeX/KaTeX/pull/2460.
   */

  var makeEm = function makeEm(n) {
    return +n.toFixed(4) + "em";
  };

  /**
   * These objects store the data about the DOM nodes we create, as well as some
   * extra data. They can then be transformed into real DOM nodes with the
   * `toNode` function or HTML markup using `toMarkup`. They are useful for both
   * storing extra properties on the nodes, as well as providing a way to easily
   * work with the DOM.
   *
   * Similar functions for working with MathML nodes exist in mathMLTree.js.
   *
   * TODO: refactor `span` and `anchor` into common superclass when
   * target environments support class inheritance
   */

  /**
   * Create an HTML className based on a list of classes. In addition to joining
   * with spaces, we also remove empty classes.
   */
  var createClass = function createClass(classes) {
    return classes.filter(cls => cls).join(" ");
  };

  var initNode = function initNode(classes, options, style) {
    this.classes = classes || [];
    this.attributes = {};
    this.height = 0;
    this.depth = 0;
    this.maxFontSize = 0;
    this.style = style || {};

    if (options) {
      if (options.style.isTight()) {
        this.classes.push("mtight");
      }

      var color = options.getColor();

      if (color) {
        this.style.color = color;
      }
    }
  };
  /**
   * Convert into an HTML node
   */


  var toNode = function toNode(tagName) {
    var node = document.createElement(tagName); // Apply the class

    node.className = createClass(this.classes); // Apply inline styles

    for (var style in this.style) {
      if (this.style.hasOwnProperty(style)) {
        // $FlowFixMe Flow doesn't seem to understand span.style's type.
        node.style[style] = this.style[style];
      }
    } // Apply attributes


    for (var attr in this.attributes) {
      if (this.attributes.hasOwnProperty(attr)) {
        node.setAttribute(attr, this.attributes[attr]);
      }
    } // Append the children, also as HTML nodes


    for (var i = 0; i < this.children.length; i++) {
      node.appendChild(this.children[i].toNode());
    }

    return node;
  };
  /**
   * https://w3c.github.io/html-reference/syntax.html#syntax-attributes
   *
   * > Attribute Names must consist of one or more characters
   * other than the space characters, U+0000 NULL,
   * '"', "'", ">", "/", "=", the control characters,
   * and any characters that are not defined by Unicode.
   */


  var invalidAttributeNameRegex = /[\s"'>/=\x00-\x1f]/;
  /**
   * Convert into an HTML markup string
   */

  var toMarkup = function toMarkup(tagName) {
    var markup = "<" + tagName; // Add the class

    if (this.classes.length) {
      markup += " class=\"" + utils.escape(createClass(this.classes)) + "\"";
    }

    var styles = ""; // Add the styles, after hyphenation

    for (var style in this.style) {
      if (this.style.hasOwnProperty(style)) {
        styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
      }
    }

    if (styles) {
      markup += " style=\"" + utils.escape(styles) + "\"";
    } // Add the attributes


    for (var attr in this.attributes) {
      if (this.attributes.hasOwnProperty(attr)) {
        if (invalidAttributeNameRegex.test(attr)) {
          throw new ParseError("Invalid attribute name '" + attr + "'");
        }

        markup += " " + attr + "=\"" + utils.escape(this.attributes[attr]) + "\"";
      }
    }

    markup += ">"; // Add the markup of the children, also as markup

    for (var i = 0; i < this.children.length; i++) {
      markup += this.children[i].toMarkup();
    }

    markup += "</" + tagName + ">";
    return markup;
  }; // Making the type below exact with all optional fields doesn't work due to
  // - https://github.com/facebook/flow/issues/4582
  // - https://github.com/facebook/flow/issues/5688
  // However, since *all* fields are optional, $Shape<> works as suggested in 5688
  // above.
  // This type does not include all CSS properties. Additional properties should
  // be added as needed.


  /**
   * This node represents a span node, with a className, a list of children, and
   * an inline style. It also contains information about its height, depth, and
   * maxFontSize.
   *
   * Represents two types with different uses: SvgSpan to wrap an SVG and DomSpan
   * otherwise. This typesafety is important when HTML builders access a span's
   * children.
   */
  class Span {
    constructor(classes, children, options, style) {
      this.children = undefined;
      this.attributes = undefined;
      this.classes = undefined;
      this.height = undefined;
      this.depth = undefined;
      this.width = undefined;
      this.maxFontSize = undefined;
      this.style = undefined;
      initNode.call(this, classes, options, style);
      this.children = children || [];
    }
    /**
     * Sets an arbitrary attribute on the span. Warning: use this wisely. Not
     * all browsers support attributes the same, and having too many custom
     * attributes is probably bad.
     */


    setAttribute(attribute, value) {
      this.attributes[attribute] = value;
    }

    hasClass(className) {
      return utils.contains(this.classes, className);
    }

    toNode() {
      return toNode.call(this, "span");
    }

    toMarkup() {
      return toMarkup.call(this, "span");
    }

  }
  /**
   * This node represents an anchor (<a>) element with a hyperlink.  See `span`
   * for further details.
   */

  class Anchor {
    constructor(href, classes, children, options) {
      this.children = undefined;
      this.attributes = undefined;
      this.classes = undefined;
      this.height = undefined;
      this.depth = undefined;
      this.maxFontSize = undefined;
      this.style = undefined;
      initNode.call(this, classes, options);
      this.children = children || [];
      this.setAttribute('href', href);
    }

    setAttribute(attribute, value) {
      this.attributes[attribute] = value;
    }

    hasClass(className) {
      return utils.contains(this.classes, className);
    }

    toNode() {
      return toNode.call(this, "a");
    }

    toMarkup() {
      return toMarkup.call(this, "a");
    }

  }
  /**
   * This node represents an image embed (<img>) element.
   */

  class Img {
    constructor(src, alt, style) {
      this.src = undefined;
      this.alt = undefined;
      this.classes = undefined;
      this.height = undefined;
      this.depth = undefined;
      this.maxFontSize = undefined;
      this.style = undefined;
      this.alt = alt;
      this.src = src;
      this.classes = ["mord"];
      this.style = style;
    }

    hasClass(className) {
      return utils.contains(this.classes, className);
    }

    toNode() {
      var node = document.createElement("img");
      node.src = this.src;
      node.alt = this.alt;
      node.className = "mord"; // Apply inline styles

      for (var style in this.style) {
        if (this.style.hasOwnProperty(style)) {
          // $FlowFixMe
          node.style[style] = this.style[style];
        }
      }

      return node;
    }

    toMarkup() {
      var markup = "<img src=\"" + utils.escape(this.src) + "\"" + (" alt=\"" + utils.escape(this.alt) + "\""); // Add the styles, after hyphenation

      var styles = "";

      for (var style in this.style) {
        if (this.style.hasOwnProperty(style)) {
          styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
        }
      }

      if (styles) {
        markup += " style=\"" + utils.escape(styles) + "\"";
      }

      markup += "'/>";
      return markup;
    }

  }
  var iCombinations = {
    'î': '\u0131\u0302',
    'ï': '\u0131\u0308',
    'í': '\u0131\u0301',
    // 'ī': '\u0131\u0304', // enable when we add Extended Latin
    'ì': '\u0131\u0300'
  };
  /**
   * A symbol node contains information about a single symbol. It either renders
   * to a single text node, or a span with a single text node in it, depending on
   * whether it has CSS classes, styles, or needs italic correction.
   */

  class SymbolNode {
    constructor(text, height, depth, italic, skew, width, classes, style) {
      this.text = undefined;
      this.height = undefined;
      this.depth = undefined;
      this.italic = undefined;
      this.skew = undefined;
      this.width = undefined;
      this.maxFontSize = undefined;
      this.classes = undefined;
      this.style = undefined;
      this.text = text;
      this.height = height || 0;
      this.depth = depth || 0;
      this.italic = italic || 0;
      this.skew = skew || 0;
      this.width = width || 0;
      this.classes = classes || [];
      this.style = style || {};
      this.maxFontSize = 0; // Mark text from non-Latin scripts with specific classes so that we
      // can specify which fonts to use.  This allows us to render these
      // characters with a serif font in situations where the browser would
      // either default to a sans serif or render a placeholder character.
      // We use CSS class names like cjk_fallback, hangul_fallback and
      // brahmic_fallback. See ./unicodeScripts.js for the set of possible
      // script names

      var script = scriptFromCodepoint(this.text.charCodeAt(0));

      if (script) {
        this.classes.push(script + "_fallback");
      }

      if (/[îïíì]/.test(this.text)) {
        // add ī when we add Extended Latin
        this.text = iCombinations[this.text];
      }
    }

    hasClass(className) {
      return utils.contains(this.classes, className);
    }
    /**
     * Creates a text node or span from a symbol node. Note that a span is only
     * created if it is needed.
     */


    toNode() {
      var node = document.createTextNode(this.text);
      var span = null;

      if (this.italic > 0) {
        span = document.createElement("span");
        span.style.marginRight = makeEm(this.italic);
      }

      if (this.classes.length > 0) {
        span = span || document.createElement("span");
        span.className = createClass(this.classes);
      }

      for (var style in this.style) {
        if (this.style.hasOwnProperty(style)) {
          span = span || document.createElement("span"); // $FlowFixMe Flow doesn't seem to understand span.style's type.

          span.style[style] = this.style[style];
        }
      }

      if (span) {
        span.appendChild(node);
        return span;
      } else {
        return node;
      }
    }
    /**
     * Creates markup for a symbol node.
     */


    toMarkup() {
      // TODO(alpert): More duplication than I'd like from
      // span.prototype.toMarkup and symbolNode.prototype.toNode...
      var needsSpan = false;
      var markup = "<span";

      if (this.classes.length) {
        needsSpan = true;
        markup += " class=\"";
        markup += utils.escape(createClass(this.classes));
        markup += "\"";
      }

      var styles = "";

      if (this.italic > 0) {
        styles += "margin-right:" + this.italic + "em;";
      }

      for (var style in this.style) {
        if (this.style.hasOwnProperty(style)) {
          styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
        }
      }

      if (styles) {
        needsSpan = true;
        markup += " style=\"" + utils.escape(styles) + "\"";
      }

      var escaped = utils.escape(this.text);

      if (needsSpan) {
        markup += ">";
        markup += escaped;
        markup += "</span>";
        return markup;
      } else {
        return escaped;
      }
    }

  }
  /**
   * SVG nodes are used to render stretchy wide elements.
   */

  class SvgNode {
    constructor(children, attributes) {
      this.children = undefined;
      this.attributes = undefined;
      this.children = children || [];
      this.attributes = attributes || {};
    }

    toNode() {
      var svgNS = "http://www.w3.org/2000/svg";
      var node = document.createElementNS(svgNS, "svg"); // Apply attributes

      for (var attr in this.attributes) {
        if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
          node.setAttribute(attr, this.attributes[attr]);
        }
      }

      for (var i = 0; i < this.children.length; i++) {
        node.appendChild(this.children[i].toNode());
      }

      return node;
    }

    toMarkup() {
      var markup = "<svg xmlns=\"http://www.w3.org/2000/svg\""; // Apply attributes

      for (var attr in this.attributes) {
        if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
          markup += " " + attr + "=\"" + utils.escape(this.attributes[attr]) + "\"";
        }
      }

      markup += ">";

      for (var i = 0; i < this.children.length; i++) {
        markup += this.children[i].toMarkup();
      }

      markup += "</svg>";
      return markup;
    }

  }
  class PathNode {
    constructor(pathName, alternate) {
      this.pathName = undefined;
      this.alternate = undefined;
      this.pathName = pathName;
      this.alternate = alternate; // Used only for \sqrt, \phase, & tall delims
    }

    toNode() {
      var svgNS = "http://www.w3.org/2000/svg";
      var node = document.createElementNS(svgNS, "path");

      if (this.alternate) {
        node.setAttribute("d", this.alternate);
      } else {
        node.setAttribute("d", path[this.pathName]);
      }

      return node;
    }

    toMarkup() {
      if (this.alternate) {
        return "<path d=\"" + utils.escape(this.alternate) + "\"/>";
      } else {
        return "<path d=\"" + utils.escape(path[this.pathName]) + "\"/>";
      }
    }

  }
  class LineNode {
    constructor(attributes) {
      this.attributes = undefined;
      this.attributes = attributes || {};
    }

    toNode() {
      var svgNS = "http://www.w3.org/2000/svg";
      var node = document.createElementNS(svgNS, "line"); // Apply attributes

      for (var attr in this.attributes) {
        if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
          node.setAttribute(attr, this.attributes[attr]);
        }
      }

      return node;
    }

    toMarkup() {
      var markup = "<line";

      for (var attr in this.attributes) {
        if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
          markup += " " + attr + "=\"" + utils.escape(this.attributes[attr]) + "\"";
        }
      }

      markup += "/>";
      return markup;
    }

  }
  function assertSymbolDomNode(group) {
    if (group instanceof SymbolNode) {
      return group;
    } else {
      throw new Error("Expected symbolNode but got " + String(group) + ".");
    }
  }
  function assertSpan(group) {
    if (group instanceof Span) {
      return group;
    } else {
      throw new Error("Expected span<HtmlDomNode> but got " + String(group) + ".");
    }
  }

  /**
   * This file holds a list of all no-argument functions and single-character
   * symbols (like 'a' or ';').
   *
   * For each of the symbols, there are three properties they can have:
   * - font (required): the font to be used for this symbol. Either "main" (the
       normal font), or "ams" (the ams fonts).
   * - group (required): the ParseNode group type the symbol should have (i.e.
       "textord", "mathord", etc).
       See https://github.com/KaTeX/KaTeX/wiki/Examining-TeX#group-types
   * - replace: the character that this symbol or function should be
   *   replaced with (i.e. "\phi" has a replace value of "\u03d5", the phi
   *   character in the main font).
   *
   * The outermost map in the table indicates what mode the symbols should be
   * accepted in (e.g. "math" or "text").
   */
  // Some of these have a "-token" suffix since these are also used as `ParseNode`
  // types for raw text tokens, and we want to avoid conflicts with higher-level
  // `ParseNode` types. These `ParseNode`s are constructed within `Parser` by
  // looking up the `symbols` map.
  var ATOMS = {
    "bin": 1,
    "close": 1,
    "inner": 1,
    "open": 1,
    "punct": 1,
    "rel": 1
  };
  var NON_ATOMS = {
    "accent-token": 1,
    "mathord": 1,
    "op-token": 1,
    "spacing": 1,
    "textord": 1
  };
  var symbols = {
    "math": {},
    "text": {}
  };
  /** `acceptUnicodeChar = true` is only applicable if `replace` is set. */

  function defineSymbol(mode, font, group, replace, name, acceptUnicodeChar) {
    symbols[mode][name] = {
      font,
      group,
      replace
    };

    if (acceptUnicodeChar && replace) {
      symbols[mode][replace] = symbols[mode][name];
    }
  } // Some abbreviations for commonly used strings.
  // This helps minify the code, and also spotting typos using jshint.
  // modes:

  var math = "math";
  var text = "text"; // fonts:

  var main = "main";
  var ams = "ams"; // groups:

  var accent = "accent-token";
  var bin = "bin";
  var close = "close";
  var inner = "inner";
  var mathord = "mathord";
  var op = "op-token";
  var open = "open";
  var punct = "punct";
  var rel = "rel";
  var spacing = "spacing";
  var textord = "textord"; // Now comes the symbol table
  // Relation Symbols

  defineSymbol(math, main, rel, "\u2261", "\\equiv", true);
  defineSymbol(math, main, rel, "\u227a", "\\prec", true);
  defineSymbol(math, main, rel, "\u227b", "\\succ", true);
  defineSymbol(math, main, rel, "\u223c", "\\sim", true);
  defineSymbol(math, main, rel, "\u22a5", "\\perp");
  defineSymbol(math, main, rel, "\u2aaf", "\\preceq", true);
  defineSymbol(math, main, rel, "\u2ab0", "\\succeq", true);
  defineSymbol(math, main, rel, "\u2243", "\\simeq", true);
  defineSymbol(math, main, rel, "\u2223", "\\mid", true);
  defineSymbol(math, main, rel, "\u226a", "\\ll", true);
  defineSymbol(math, main, rel, "\u226b", "\\gg", true);
  defineSymbol(math, main, rel, "\u224d", "\\asymp", true);
  defineSymbol(math, main, rel, "\u2225", "\\parallel");
  defineSymbol(math, main, rel, "\u22c8", "\\bowtie", true);
  defineSymbol(math, main, rel, "\u2323", "\\smile", true);
  defineSymbol(math, main, rel, "\u2291", "\\sqsubseteq", true);
  defineSymbol(math, main, rel, "\u2292", "\\sqsupseteq", true);
  defineSymbol(math, main, rel, "\u2250", "\\doteq", true);
  defineSymbol(math, main, rel, "\u2322", "\\frown", true);
  defineSymbol(math, main, rel, "\u220b", "\\ni", true);
  defineSymbol(math, main, rel, "\u221d", "\\propto", true);
  defineSymbol(math, main, rel, "\u22a2", "\\vdash", true);
  defineSymbol(math, main, rel, "\u22a3", "\\dashv", true);
  defineSymbol(math, main, rel, "\u220b", "\\owns"); // Punctuation

  defineSymbol(math, main, punct, "\u002e", "\\ldotp");
  defineSymbol(math, main, punct, "\u22c5", "\\cdotp"); // Misc Symbols

  defineSymbol(math, main, textord, "\u0023", "\\#");
  defineSymbol(text, main, textord, "\u0023", "\\#");
  defineSymbol(math, main, textord, "\u0026", "\\&");
  defineSymbol(text, main, textord, "\u0026", "\\&");
  defineSymbol(math, main, textord, "\u2135", "\\aleph", true);
  defineSymbol(math, main, textord, "\u2200", "\\forall", true);
  defineSymbol(math, main, textord, "\u210f", "\\hbar", true);
  defineSymbol(math, main, textord, "\u2203", "\\exists", true);
  defineSymbol(math, main, textord, "\u2207", "\\nabla", true);
  defineSymbol(math, main, textord, "\u266d", "\\flat", true);
  defineSymbol(math, main, textord, "\u2113", "\\ell", true);
  defineSymbol(math, main, textord, "\u266e", "\\natural", true);
  defineSymbol(math, main, textord, "\u2663", "\\clubsuit", true);
  defineSymbol(math, main, textord, "\u2118", "\\wp", true);
  defineSymbol(math, main, textord, "\u266f", "\\sharp", true);
  defineSymbol(math, main, textord, "\u2662", "\\diamondsuit", true);
  defineSymbol(math, main, textord, "\u211c", "\\Re", true);
  defineSymbol(math, main, textord, "\u2661", "\\heartsuit", true);
  defineSymbol(math, main, textord, "\u2111", "\\Im", true);
  defineSymbol(math, main, textord, "\u2660", "\\spadesuit", true);
  defineSymbol(math, main, textord, "\u00a7", "\\S", true);
  defineSymbol(text, main, textord, "\u00a7", "\\S");
  defineSymbol(math, main, textord, "\u00b6", "\\P", true);
  defineSymbol(text, main, textord, "\u00b6", "\\P"); // Math and Text

  defineSymbol(math, main, textord, "\u2020", "\\dag");
  defineSymbol(text, main, textord, "\u2020", "\\dag");
  defineSymbol(text, main, textord, "\u2020", "\\textdagger");
  defineSymbol(math, main, textord, "\u2021", "\\ddag");
  defineSymbol(text, main, textord, "\u2021", "\\ddag");
  defineSymbol(text, main, textord, "\u2021", "\\textdaggerdbl"); // Large Delimiters

  defineSymbol(math, main, close, "\u23b1", "\\rmoustache", true);
  defineSymbol(math, main, open, "\u23b0", "\\lmoustache", true);
  defineSymbol(math, main, close, "\u27ef", "\\rgroup", true);
  defineSymbol(math, main, open, "\u27ee", "\\lgroup", true); // Binary Operators

  defineSymbol(math, main, bin, "\u2213", "\\mp", true);
  defineSymbol(math, main, bin, "\u2296", "\\ominus", true);
  defineSymbol(math, main, bin, "\u228e", "\\uplus", true);
  defineSymbol(math, main, bin, "\u2293", "\\sqcap", true);
  defineSymbol(math, main, bin, "\u2217", "\\ast");
  defineSymbol(math, main, bin, "\u2294", "\\sqcup", true);
  defineSymbol(math, main, bin, "\u25ef", "\\bigcirc", true);
  defineSymbol(math, main, bin, "\u2219", "\\bullet", true);
  defineSymbol(math, main, bin, "\u2021", "\\ddagger");
  defineSymbol(math, main, bin, "\u2240", "\\wr", true);
  defineSymbol(math, main, bin, "\u2a3f", "\\amalg");
  defineSymbol(math, main, bin, "\u0026", "\\And"); // from amsmath
  // Arrow Symbols

  defineSymbol(math, main, rel, "\u27f5", "\\longleftarrow", true);
  defineSymbol(math, main, rel, "\u21d0", "\\Leftarrow", true);
  defineSymbol(math, main, rel, "\u27f8", "\\Longleftarrow", true);
  defineSymbol(math, main, rel, "\u27f6", "\\longrightarrow", true);
  defineSymbol(math, main, rel, "\u21d2", "\\Rightarrow", true);
  defineSymbol(math, main, rel, "\u27f9", "\\Longrightarrow", true);
  defineSymbol(math, main, rel, "\u2194", "\\leftrightarrow", true);
  defineSymbol(math, main, rel, "\u27f7", "\\longleftrightarrow", true);
  defineSymbol(math, main, rel, "\u21d4", "\\Leftrightarrow", true);
  defineSymbol(math, main, rel, "\u27fa", "\\Longleftrightarrow", true);
  defineSymbol(math, main, rel, "\u21a6", "\\mapsto", true);
  defineSymbol(math, main, rel, "\u27fc", "\\longmapsto", true);
  defineSymbol(math, main, rel, "\u2197", "\\nearrow", true);
  defineSymbol(math, main, rel, "\u21a9", "\\hookleftarrow", true);
  defineSymbol(math, main, rel, "\u21aa", "\\hookrightarrow", true);
  defineSymbol(math, main, rel, "\u2198", "\\searrow", true);
  defineSymbol(math, main, rel, "\u21bc", "\\leftharpoonup", true);
  defineSymbol(math, main, rel, "\u21c0", "\\rightharpoonup", true);
  defineSymbol(math, main, rel, "\u2199", "\\swarrow", true);
  defineSymbol(math, main, rel, "\u21bd", "\\leftharpoondown", true);
  defineSymbol(math, main, rel, "\u21c1", "\\rightharpoondown", true);
  defineSymbol(math, main, rel, "\u2196", "\\nwarrow", true);
  defineSymbol(math, main, rel, "\u21cc", "\\rightleftharpoons", true); // AMS Negated Binary Relations

  defineSymbol(math, ams, rel, "\u226e", "\\nless", true); // Symbol names preceded by "@" each have a corresponding macro.

  defineSymbol(math, ams, rel, "\ue010", "\\@nleqslant");
  defineSymbol(math, ams, rel, "\ue011", "\\@nleqq");
  defineSymbol(math, ams, rel, "\u2a87", "\\lneq", true);
  defineSymbol(math, ams, rel, "\u2268", "\\lneqq", true);
  defineSymbol(math, ams, rel, "\ue00c", "\\@lvertneqq");
  defineSymbol(math, ams, rel, "\u22e6", "\\lnsim", true);
  defineSymbol(math, ams, rel, "\u2a89", "\\lnapprox", true);
  defineSymbol(math, ams, rel, "\u2280", "\\nprec", true); // unicode-math maps \u22e0 to \npreccurlyeq. We'll use the AMS synonym.

  defineSymbol(math, ams, rel, "\u22e0", "\\npreceq", true);
  defineSymbol(math, ams, rel, "\u22e8", "\\precnsim", true);
  defineSymbol(math, ams, rel, "\u2ab9", "\\precnapprox", true);
  defineSymbol(math, ams, rel, "\u2241", "\\nsim", true);
  defineSymbol(math, ams, rel, "\ue006", "\\@nshortmid");
  defineSymbol(math, ams, rel, "\u2224", "\\nmid", true);
  defineSymbol(math, ams, rel, "\u22ac", "\\nvdash", true);
  defineSymbol(math, ams, rel, "\u22ad", "\\nvDash", true);
  defineSymbol(math, ams, rel, "\u22ea", "\\ntriangleleft");
  defineSymbol(math, ams, rel, "\u22ec", "\\ntrianglelefteq", true);
  defineSymbol(math, ams, rel, "\u228a", "\\subsetneq", true);
  defineSymbol(math, ams, rel, "\ue01a", "\\@varsubsetneq");
  defineSymbol(math, ams, rel, "\u2acb", "\\subsetneqq", true);
  defineSymbol(math, ams, rel, "\ue017", "\\@varsubsetneqq");
  defineSymbol(math, ams, rel, "\u226f", "\\ngtr", true);
  defineSymbol(math, ams, rel, "\ue00f", "\\@ngeqslant");
  defineSymbol(math, ams, rel, "\ue00e", "\\@ngeqq");
  defineSymbol(math, ams, rel, "\u2a88", "\\gneq", true);
  defineSymbol(math, ams, rel, "\u2269", "\\gneqq", true);
  defineSymbol(math, ams, rel, "\ue00d", "\\@gvertneqq");
  defineSymbol(math, ams, rel, "\u22e7", "\\gnsim", true);
  defineSymbol(math, ams, rel, "\u2a8a", "\\gnapprox", true);
  defineSymbol(math, ams, rel, "\u2281", "\\nsucc", true); // unicode-math maps \u22e1 to \nsucccurlyeq. We'll use the AMS synonym.

  defineSymbol(math, ams, rel, "\u22e1", "\\nsucceq", true);
  defineSymbol(math, ams, rel, "\u22e9", "\\succnsim", true);
  defineSymbol(math, ams, rel, "\u2aba", "\\succnapprox", true); // unicode-math maps \u2246 to \simneqq. We'll use the AMS synonym.

  defineSymbol(math, ams, rel, "\u2246", "\\ncong", true);
  defineSymbol(math, ams, rel, "\ue007", "\\@nshortparallel");
  defineSymbol(math, ams, rel, "\u2226", "\\nparallel", true);
  defineSymbol(math, ams, rel, "\u22af", "\\nVDash", true);
  defineSymbol(math, ams, rel, "\u22eb", "\\ntriangleright");
  defineSymbol(math, ams, rel, "\u22ed", "\\ntrianglerighteq", true);
  defineSymbol(math, ams, rel, "\ue018", "\\@nsupseteqq");
  defineSymbol(math, ams, rel, "\u228b", "\\supsetneq", true);
  defineSymbol(math, ams, rel, "\ue01b", "\\@varsupsetneq");
  defineSymbol(math, ams, rel, "\u2acc", "\\supsetneqq", true);
  defineSymbol(math, ams, rel, "\ue019", "\\@varsupsetneqq");
  defineSymbol(math, ams, rel, "\u22ae", "\\nVdash", true);
  defineSymbol(math, ams, rel, "\u2ab5", "\\precneqq", true);
  defineSymbol(math, ams, rel, "\u2ab6", "\\succneqq", true);
  defineSymbol(math, ams, rel, "\ue016", "\\@nsubseteqq");
  defineSymbol(math, ams, bin, "\u22b4", "\\unlhd");
  defineSymbol(math, ams, bin, "\u22b5", "\\unrhd"); // AMS Negated Arrows

  defineSymbol(math, ams, rel, "\u219a", "\\nleftarrow", true);
  defineSymbol(math, ams, rel, "\u219b", "\\nrightarrow", true);
  defineSymbol(math, ams, rel, "\u21cd", "\\nLeftarrow", true);
  defineSymbol(math, ams, rel, "\u21cf", "\\nRightarrow", true);
  defineSymbol(math, ams, rel, "\u21ae", "\\nleftrightarrow", true);
  defineSymbol(math, ams, rel, "\u21ce", "\\nLeftrightarrow", true); // AMS Misc

  defineSymbol(math, ams, rel, "\u25b3", "\\vartriangle");
  defineSymbol(math, ams, textord, "\u210f", "\\hslash");
  defineSymbol(math, ams, textord, "\u25bd", "\\triangledown");
  defineSymbol(math, ams, textord, "\u25ca", "\\lozenge");
  defineSymbol(math, ams, textord, "\u24c8", "\\circledS");
  defineSymbol(math, ams, textord, "\u00ae", "\\circledR");
  defineSymbol(text, ams, textord, "\u00ae", "\\circledR");
  defineSymbol(math, ams, textord, "\u2221", "\\measuredangle", true);
  defineSymbol(math, ams, textord, "\u2204", "\\nexists");
  defineSymbol(math, ams, textord, "\u2127", "\\mho");
  defineSymbol(math, ams, textord, "\u2132", "\\Finv", true);
  defineSymbol(math, ams, textord, "\u2141", "\\Game", true);
  defineSymbol(math, ams, textord, "\u2035", "\\backprime");
  defineSymbol(math, ams, textord, "\u25b2", "\\blacktriangle");
  defineSymbol(math, ams, textord, "\u25bc", "\\blacktriangledown");
  defineSymbol(math, ams, textord, "\u25a0", "\\blacksquare");
  defineSymbol(math, ams, textord, "\u29eb", "\\blacklozenge");
  defineSymbol(math, ams, textord, "\u2605", "\\bigstar");
  defineSymbol(math, ams, textord, "\u2222", "\\sphericalangle", true);
  defineSymbol(math, ams, textord, "\u2201", "\\complement", true); // unicode-math maps U+F0 to \matheth. We map to AMS function \eth

  defineSymbol(math, ams, textord, "\u00f0", "\\eth", true);
  defineSymbol(text, main, textord, "\u00f0", "\u00f0");
  defineSymbol(math, ams, textord, "\u2571", "\\diagup");
  defineSymbol(math, ams, textord, "\u2572", "\\diagdown");
  defineSymbol(math, ams, textord, "\u25a1", "\\square");
  defineSymbol(math, ams, textord, "\u25a1", "\\Box");
  defineSymbol(math, ams, textord, "\u25ca", "\\Diamond"); // unicode-math maps U+A5 to \mathyen. We map to AMS function \yen

  defineSymbol(math, ams, textord, "\u00a5", "\\yen", true);
  defineSymbol(text, ams, textord, "\u00a5", "\\yen", true);
  defineSymbol(math, ams, textord, "\u2713", "\\checkmark", true);
  defineSymbol(text, ams, textord, "\u2713", "\\checkmark"); // AMS Hebrew

  defineSymbol(math, ams, textord, "\u2136", "\\beth", true);
  defineSymbol(math, ams, textord, "\u2138", "\\daleth", true);
  defineSymbol(math, ams, textord, "\u2137", "\\gimel", true); // AMS Greek

  defineSymbol(math, ams, textord, "\u03dd", "\\digamma", true);
  defineSymbol(math, ams, textord, "\u03f0", "\\varkappa"); // AMS Delimiters

  defineSymbol(math, ams, open, "\u250c", "\\@ulcorner", true);
  defineSymbol(math, ams, close, "\u2510", "\\@urcorner", true);
  defineSymbol(math, ams, open, "\u2514", "\\@llcorner", true);
  defineSymbol(math, ams, close, "\u2518", "\\@lrcorner", true); // AMS Binary Relations

  defineSymbol(math, ams, rel, "\u2266", "\\leqq", true);
  defineSymbol(math, ams, rel, "\u2a7d", "\\leqslant", true);
  defineSymbol(math, ams, rel, "\u2a95", "\\eqslantless", true);
  defineSymbol(math, ams, rel, "\u2272", "\\lesssim", true);
  defineSymbol(math, ams, rel, "\u2a85", "\\lessapprox", true);
  defineSymbol(math, ams, rel, "\u224a", "\\approxeq", true);
  defineSymbol(math, ams, bin, "\u22d6", "\\lessdot");
  defineSymbol(math, ams, rel, "\u22d8", "\\lll", true);
  defineSymbol(math, ams, rel, "\u2276", "\\lessgtr", true);
  defineSymbol(math, ams, rel, "\u22da", "\\lesseqgtr", true);
  defineSymbol(math, ams, rel, "\u2a8b", "\\lesseqqgtr", true);
  defineSymbol(math, ams, rel, "\u2251", "\\doteqdot");
  defineSymbol(math, ams, rel, "\u2253", "\\risingdotseq", true);
  defineSymbol(math, ams, rel, "\u2252", "\\fallingdotseq", true);
  defineSymbol(math, ams, rel, "\u223d", "\\backsim", true);
  defineSymbol(math, ams, rel, "\u22cd", "\\backsimeq", true);
  defineSymbol(math, ams, rel, "\u2ac5", "\\subseteqq", true);
  defineSymbol(math, ams, rel, "\u22d0", "\\Subset", true);
  defineSymbol(math, ams, rel, "\u228f", "\\sqsubset", true);
  defineSymbol(math, ams, rel, "\u227c", "\\preccurlyeq", true);
  defineSymbol(math, ams, rel, "\u22de", "\\curlyeqprec", true);
  defineSymbol(math, ams, rel, "\u227e", "\\precsim", true);
  defineSymbol(math, ams, rel, "\u2ab7", "\\precapprox", true);
  defineSymbol(math, ams, rel, "\u22b2", "\\vartriangleleft");
  defineSymbol(math, ams, rel, "\u22b4", "\\trianglelefteq");
  defineSymbol(math, ams, rel, "\u22a8", "\\vDash", true);
  defineSymbol(math, ams, rel, "\u22aa", "\\Vvdash", true);
  defineSymbol(math, ams, rel, "\u2323", "\\smallsmile");
  defineSymbol(math, ams, rel, "\u2322", "\\smallfrown");
  defineSymbol(math, ams, rel, "\u224f", "\\bumpeq", true);
  defineSymbol(math, ams, rel, "\u224e", "\\Bumpeq", true);
  defineSymbol(math, ams, rel, "\u2267", "\\geqq", true);
  defineSymbol(math, ams, rel, "\u2a7e", "\\geqslant", true);
  defineSymbol(math, ams, rel, "\u2a96", "\\eqslantgtr", true);
  defineSymbol(math, ams, rel, "\u2273", "\\gtrsim", true);
  defineSymbol(math, ams, rel, "\u2a86", "\\gtrapprox", true);
  defineSymbol(math, ams, bin, "\u22d7", "\\gtrdot");
  defineSymbol(math, ams, rel, "\u22d9", "\\ggg", true);
  defineSymbol(math, ams, rel, "\u2277", "\\gtrless", true);
  defineSymbol(math, ams, rel, "\u22db", "\\gtreqless", true);
  defineSymbol(math, ams, rel, "\u2a8c", "\\gtreqqless", true);
  defineSymbol(math, ams, rel, "\u2256", "\\eqcirc", true);
  defineSymbol(math, ams, rel, "\u2257", "\\circeq", true);
  defineSymbol(math, ams, rel, "\u225c", "\\triangleq", true);
  defineSymbol(math, ams, rel, "\u223c", "\\thicksim");
  defineSymbol(math, ams, rel, "\u2248", "\\thickapprox");
  defineSymbol(math, ams, rel, "\u2ac6", "\\supseteqq", true);
  defineSymbol(math, ams, rel, "\u22d1", "\\Supset", true);
  defineSymbol(math, ams, rel, "\u2290", "\\sqsupset", true);
  defineSymbol(math, ams, rel, "\u227d", "\\succcurlyeq", true);
  defineSymbol(math, ams, rel, "\u22df", "\\curlyeqsucc", true);
  defineSymbol(math, ams, rel, "\u227f", "\\succsim", true);
  defineSymbol(math, ams, rel, "\u2ab8", "\\succapprox", true);
  defineSymbol(math, ams, rel, "\u22b3", "\\vartriangleright");
  defineSymbol(math, ams, rel, "\u22b5", "\\trianglerighteq");
  defineSymbol(math, ams, rel, "\u22a9", "\\Vdash", true);
  defineSymbol(math, ams, rel, "\u2223", "\\shortmid");
  defineSymbol(math, ams, rel, "\u2225", "\\shortparallel");
  defineSymbol(math, ams, rel, "\u226c", "\\between", true);
  defineSymbol(math, ams, rel, "\u22d4", "\\pitchfork", true);
  defineSymbol(math, ams, rel, "\u221d", "\\varpropto");
  defineSymbol(math, ams, rel, "\u25c0", "\\blacktriangleleft"); // unicode-math says that \therefore is a mathord atom.
  // We kept the amssymb atom type, which is rel.

  defineSymbol(math, ams, rel, "\u2234", "\\therefore", true);
  defineSymbol(math, ams, rel, "\u220d", "\\backepsilon");
  defineSymbol(math, ams, rel, "\u25b6", "\\blacktriangleright"); // unicode-math says that \because is a mathord atom.
  // We kept the amssymb atom type, which is rel.

  defineSymbol(math, ams, rel, "\u2235", "\\because", true);
  defineSymbol(math, ams, rel, "\u22d8", "\\llless");
  defineSymbol(math, ams, rel, "\u22d9", "\\gggtr");
  defineSymbol(math, ams, bin, "\u22b2", "\\lhd");
  defineSymbol(math, ams, bin, "\u22b3", "\\rhd");
  defineSymbol(math, ams, rel, "\u2242", "\\eqsim", true);
  defineSymbol(math, main, rel, "\u22c8", "\\Join");
  defineSymbol(math, ams, rel, "\u2251", "\\Doteq", true); // AMS Binary Operators

  defineSymbol(math, ams, bin, "\u2214", "\\dotplus", true);
  defineSymbol(math, ams, bin, "\u2216", "\\smallsetminus");
  defineSymbol(math, ams, bin, "\u22d2", "\\Cap", true);
  defineSymbol(math, ams, bin, "\u22d3", "\\Cup", true);
  defineSymbol(math, ams, bin, "\u2a5e", "\\doublebarwedge", true);
  defineSymbol(math, ams, bin, "\u229f", "\\boxminus", true);
  defineSymbol(math, ams, bin, "\u229e", "\\boxplus", true);
  defineSymbol(math, ams, bin, "\u22c7", "\\divideontimes", true);
  defineSymbol(math, ams, bin, "\u22c9", "\\ltimes", true);
  defineSymbol(math, ams, bin, "\u22ca", "\\rtimes", true);
  defineSymbol(math, ams, bin, "\u22cb", "\\leftthreetimes", true);
  defineSymbol(math, ams, bin, "\u22cc", "\\rightthreetimes", true);
  defineSymbol(math, ams, bin, "\u22cf", "\\curlywedge", true);
  defineSymbol(math, ams, bin, "\u22ce", "\\curlyvee", true);
  defineSymbol(math, ams, bin, "\u229d", "\\circleddash", true);
  defineSymbol(math, ams, bin, "\u229b", "\\circledast", true);
  defineSymbol(math, ams, bin, "\u22c5", "\\centerdot");
  defineSymbol(math, ams, bin, "\u22ba", "\\intercal", true);
  defineSymbol(math, ams, bin, "\u22d2", "\\doublecap");
  defineSymbol(math, ams, bin, "\u22d3", "\\doublecup");
  defineSymbol(math, ams, bin, "\u22a0", "\\boxtimes", true); // AMS Arrows
  // Note: unicode-math maps \u21e2 to their own function \rightdasharrow.
  // We'll map it to AMS function \dashrightarrow. It produces the same atom.

  defineSymbol(math, ams, rel, "\u21e2", "\\dashrightarrow", true); // unicode-math maps \u21e0 to \leftdasharrow. We'll use the AMS synonym.

  defineSymbol(math, ams, rel, "\u21e0", "\\dashleftarrow", true);
  defineSymbol(math, ams, rel, "\u21c7", "\\leftleftarrows", true);
  defineSymbol(math, ams, rel, "\u21c6", "\\leftrightarrows", true);
  defineSymbol(math, ams, rel, "\u21da", "\\Lleftarrow", true);
  defineSymbol(math, ams, rel, "\u219e", "\\twoheadleftarrow", true);
  defineSymbol(math, ams, rel, "\u21a2", "\\leftarrowtail", true);
  defineSymbol(math, ams, rel, "\u21ab", "\\looparrowleft", true);
  defineSymbol(math, ams, rel, "\u21cb", "\\leftrightharpoons", true);
  defineSymbol(math, ams, rel, "\u21b6", "\\curvearrowleft", true); // unicode-math maps \u21ba to \acwopencirclearrow. We'll use the AMS synonym.

  defineSymbol(math, ams, rel, "\u21ba", "\\circlearrowleft", true);
  defineSymbol(math, ams, rel, "\u21b0", "\\Lsh", true);
  defineSymbol(math, ams, rel, "\u21c8", "\\upuparrows", true);
  defineSymbol(math, ams, rel, "\u21bf", "\\upharpoonleft", true);
  defineSymbol(math, ams, rel, "\u21c3", "\\downharpoonleft", true);
  defineSymbol(math, main, rel, "\u22b6", "\\origof", true); // not in font

  defineSymbol(math, main, rel, "\u22b7", "\\imageof", true); // not in font

  defineSymbol(math, ams, rel, "\u22b8", "\\multimap", true);
  defineSymbol(math, ams, rel, "\u21ad", "\\leftrightsquigarrow", true);
  defineSymbol(math, ams, rel, "\u21c9", "\\rightrightarrows", true);
  defineSymbol(math, ams, rel, "\u21c4", "\\rightleftarrows", true);
  defineSymbol(math, ams, rel, "\u21a0", "\\twoheadrightarrow", true);
  defineSymbol(math, ams, rel, "\u21a3", "\\rightarrowtail", true);
  defineSymbol(math, ams, rel, "\u21ac", "\\looparrowright", true);
  defineSymbol(math, ams, rel, "\u21b7", "\\curvearrowright", true); // unicode-math maps \u21bb to \cwopencirclearrow. We'll use the AMS synonym.

  defineSymbol(math, ams, rel, "\u21bb", "\\circlearrowright", true);
  defineSymbol(math, ams, rel, "\u21b1", "\\Rsh", true);
  defineSymbol(math, ams, rel, "\u21ca", "\\downdownarrows", true);
  defineSymbol(math, ams, rel, "\u21be", "\\upharpoonright", true);
  defineSymbol(math, ams, rel, "\u21c2", "\\downharpoonright", true);
  defineSymbol(math, ams, rel, "\u21dd", "\\rightsquigarrow", true);
  defineSymbol(math, ams, rel, "\u21dd", "\\leadsto");
  defineSymbol(math, ams, rel, "\u21db", "\\Rrightarrow", true);
  defineSymbol(math, ams, rel, "\u21be", "\\restriction");
  defineSymbol(math, main, textord, "\u2018", "`");
  defineSymbol(math, main, textord, "$", "\\$");
  defineSymbol(text, main, textord, "$", "\\$");
  defineSymbol(text, main, textord, "$", "\\textdollar");
  defineSymbol(math, main, textord, "%", "\\%");
  defineSymbol(text, main, textord, "%", "\\%");
  defineSymbol(math, main, textord, "_", "\\_");
  defineSymbol(text, main, textord, "_", "\\_");
  defineSymbol(text, main, textord, "_", "\\textunderscore");
  defineSymbol(math, main, textord, "\u2220", "\\angle", true);
  defineSymbol(math, main, textord, "\u221e", "\\infty", true);
  defineSymbol(math, main, textord, "\u2032", "\\prime");
  defineSymbol(math, main, textord, "\u25b3", "\\triangle");
  defineSymbol(math, main, textord, "\u0393", "\\Gamma", true);
  defineSymbol(math, main, textord, "\u0394", "\\Delta", true);
  defineSymbol(math, main, textord, "\u0398", "\\Theta", true);
  defineSymbol(math, main, textord, "\u039b", "\\Lambda", true);
  defineSymbol(math, main, textord, "\u039e", "\\Xi", true);
  defineSymbol(math, main, textord, "\u03a0", "\\Pi", true);
  defineSymbol(math, main, textord, "\u03a3", "\\Sigma", true);
  defineSymbol(math, main, textord, "\u03a5", "\\Upsilon", true);
  defineSymbol(math, main, textord, "\u03a6", "\\Phi", true);
  defineSymbol(math, main, textord, "\u03a8", "\\Psi", true);
  defineSymbol(math, main, textord, "\u03a9", "\\Omega", true);
  defineSymbol(math, main, textord, "A", "\u0391");
  defineSymbol(math, main, textord, "B", "\u0392");
  defineSymbol(math, main, textord, "E", "\u0395");
  defineSymbol(math, main, textord, "Z", "\u0396");
  defineSymbol(math, main, textord, "H", "\u0397");
  defineSymbol(math, main, textord, "I", "\u0399");
  defineSymbol(math, main, textord, "K", "\u039A");
  defineSymbol(math, main, textord, "M", "\u039C");
  defineSymbol(math, main, textord, "N", "\u039D");
  defineSymbol(math, main, textord, "O", "\u039F");
  defineSymbol(math, main, textord, "P", "\u03A1");
  defineSymbol(math, main, textord, "T", "\u03A4");
  defineSymbol(math, main, textord, "X", "\u03A7");
  defineSymbol(math, main, textord, "\u00ac", "\\neg", true);
  defineSymbol(math, main, textord, "\u00ac", "\\lnot");
  defineSymbol(math, main, textord, "\u22a4", "\\top");
  defineSymbol(math, main, textord, "\u22a5", "\\bot");
  defineSymbol(math, main, textord, "\u2205", "\\emptyset");
  defineSymbol(math, ams, textord, "\u2205", "\\varnothing");
  defineSymbol(math, main, mathord, "\u03b1", "\\alpha", true);
  defineSymbol(math, main, mathord, "\u03b2", "\\beta", true);
  defineSymbol(math, main, mathord, "\u03b3", "\\gamma", true);
  defineSymbol(math, main, mathord, "\u03b4", "\\delta", true);
  defineSymbol(math, main, mathord, "\u03f5", "\\epsilon", true);
  defineSymbol(math, main, mathord, "\u03b6", "\\zeta", true);
  defineSymbol(math, main, mathord, "\u03b7", "\\eta", true);
  defineSymbol(math, main, mathord, "\u03b8", "\\theta", true);
  defineSymbol(math, main, mathord, "\u03b9", "\\iota", true);
  defineSymbol(math, main, mathord, "\u03ba", "\\kappa", true);
  defineSymbol(math, main, mathord, "\u03bb", "\\lambda", true);
  defineSymbol(math, main, mathord, "\u03bc", "\\mu", true);
  defineSymbol(math, main, mathord, "\u03bd", "\\nu", true);
  defineSymbol(math, main, mathord, "\u03be", "\\xi", true);
  defineSymbol(math, main, mathord, "\u03bf", "\\omicron", true);
  defineSymbol(math, main, mathord, "\u03c0", "\\pi", true);
  defineSymbol(math, main, mathord, "\u03c1", "\\rho", true);
  defineSymbol(math, main, mathord, "\u03c3", "\\sigma", true);
  defineSymbol(math, main, mathord, "\u03c4", "\\tau", true);
  defineSymbol(math, main, mathord, "\u03c5", "\\upsilon", true);
  defineSymbol(math, main, mathord, "\u03d5", "\\phi", true);
  defineSymbol(math, main, mathord, "\u03c7", "\\chi", true);
  defineSymbol(math, main, mathord, "\u03c8", "\\psi", true);
  defineSymbol(math, main, mathord, "\u03c9", "\\omega", true);
  defineSymbol(math, main, mathord, "\u03b5", "\\varepsilon", true);
  defineSymbol(math, main, mathord, "\u03d1", "\\vartheta", true);
  defineSymbol(math, main, mathord, "\u03d6", "\\varpi", true);
  defineSymbol(math, main, mathord, "\u03f1", "\\varrho", true);
  defineSymbol(math, main, mathord, "\u03c2", "\\varsigma", true);
  defineSymbol(math, main, mathord, "\u03c6", "\\varphi", true);
  defineSymbol(math, main, bin, "\u2217", "*", true);
  defineSymbol(math, main, bin, "+", "+");
  defineSymbol(math, main, bin, "\u2212", "-", true);
  defineSymbol(math, main, bin, "\u22c5", "\\cdot", true);
  defineSymbol(math, main, bin, "\u2218", "\\circ", true);
  defineSymbol(math, main, bin, "\u00f7", "\\div", true);
  defineSymbol(math, main, bin, "\u00b1", "\\pm", true);
  defineSymbol(math, main, bin, "\u00d7", "\\times", true);
  defineSymbol(math, main, bin, "\u2229", "\\cap", true);
  defineSymbol(math, main, bin, "\u222a", "\\cup", true);
  defineSymbol(math, main, bin, "\u2216", "\\setminus", true);
  defineSymbol(math, main, bin, "\u2227", "\\land");
  defineSymbol(math, main, bin, "\u2228", "\\lor");
  defineSymbol(math, main, bin, "\u2227", "\\wedge", true);
  defineSymbol(math, main, bin, "\u2228", "\\vee", true);
  defineSymbol(math, main, textord, "\u221a", "\\surd");
  defineSymbol(math, main, open, "\u27e8", "\\langle", true);
  defineSymbol(math, main, open, "\u2223", "\\lvert");
  defineSymbol(math, main, open, "\u2225", "\\lVert");
  defineSymbol(math, main, close, "?", "?");
  defineSymbol(math, main, close, "!", "!");
  defineSymbol(math, main, close, "\u27e9", "\\rangle", true);
  defineSymbol(math, main, close, "\u2223", "\\rvert");
  defineSymbol(math, main, close, "\u2225", "\\rVert");
  defineSymbol(math, main, rel, "=", "=");
  defineSymbol(math, main, rel, ":", ":");
  defineSymbol(math, main, rel, "\u2248", "\\approx", true);
  defineSymbol(math, main, rel, "\u2245", "\\cong", true);
  defineSymbol(math, main, rel, "\u2265", "\\ge");
  defineSymbol(math, main, rel, "\u2265", "\\geq", true);
  defineSymbol(math, main, rel, "\u2190", "\\gets");
  defineSymbol(math, main, rel, ">", "\\gt", true);
  defineSymbol(math, main, rel, "\u2208", "\\in", true);
  defineSymbol(math, main, rel, "\ue020", "\\@not");
  defineSymbol(math, main, rel, "\u2282", "\\subset", true);
  defineSymbol(math, main, rel, "\u2283", "\\supset", true);
  defineSymbol(math, main, rel, "\u2286", "\\subseteq", true);
  defineSymbol(math, main, rel, "\u2287", "\\supseteq", true);
  defineSymbol(math, ams, rel, "\u2288", "\\nsubseteq", true);
  defineSymbol(math, ams, rel, "\u2289", "\\nsupseteq", true);
  defineSymbol(math, main, rel, "\u22a8", "\\models");
  defineSymbol(math, main, rel, "\u2190", "\\leftarrow", true);
  defineSymbol(math, main, rel, "\u2264", "\\le");
  defineSymbol(math, main, rel, "\u2264", "\\leq", true);
  defineSymbol(math, main, rel, "<", "\\lt", true);
  defineSymbol(math, main, rel, "\u2192", "\\rightarrow", true);
  defineSymbol(math, main, rel, "\u2192", "\\to");
  defineSymbol(math, ams, rel, "\u2271", "\\ngeq", true);
  defineSymbol(math, ams, rel, "\u2270", "\\nleq", true);
  defineSymbol(math, main, spacing, "\u00a0", "\\ ");
  defineSymbol(math, main, spacing, "\u00a0", "\\space"); // Ref: LaTeX Source 2e: \DeclareRobustCommand{\nobreakspace}{%

  defineSymbol(math, main, spacing, "\u00a0", "\\nobreakspace");
  defineSymbol(text, main, spacing, "\u00a0", "\\ ");
  defineSymbol(text, main, spacing, "\u00a0", " ");
  defineSymbol(text, main, spacing, "\u00a0", "\\space");
  defineSymbol(text, main, spacing, "\u00a0", "\\nobreakspace");
  defineSymbol(math, main, spacing, null, "\\nobreak");
  defineSymbol(math, main, spacing, null, "\\allowbreak");
  defineSymbol(math, main, punct, ",", ",");
  defineSymbol(math, main, punct, ";", ";");
  defineSymbol(math, ams, bin, "\u22bc", "\\barwedge", true);
  defineSymbol(math, ams, bin, "\u22bb", "\\veebar", true);
  defineSymbol(math, main, bin, "\u2299", "\\odot", true);
  defineSymbol(math, main, bin, "\u2295", "\\oplus", true);
  defineSymbol(math, main, bin, "\u2297", "\\otimes", true);
  defineSymbol(math, main, textord, "\u2202", "\\partial", true);
  defineSymbol(math, main, bin, "\u2298", "\\oslash", true);
  defineSymbol(math, ams, bin, "\u229a", "\\circledcirc", true);
  defineSymbol(math, ams, bin, "\u22a1", "\\boxdot", true);
  defineSymbol(math, main, bin, "\u25b3", "\\bigtriangleup");
  defineSymbol(math, main, bin, "\u25bd", "\\bigtriangledown");
  defineSymbol(math, main, bin, "\u2020", "\\dagger");
  defineSymbol(math, main, bin, "\u22c4", "\\diamond");
  defineSymbol(math, main, bin, "\u22c6", "\\star");
  defineSymbol(math, main, bin, "\u25c3", "\\triangleleft");
  defineSymbol(math, main, bin, "\u25b9", "\\triangleright");
  defineSymbol(math, main, open, "{", "\\{");
  defineSymbol(text, main, textord, "{", "\\{");
  defineSymbol(text, main, textord, "{", "\\textbraceleft");
  defineSymbol(math, main, close, "}", "\\}");
  defineSymbol(text, main, textord, "}", "\\}");
  defineSymbol(text, main, textord, "}", "\\textbraceright");
  defineSymbol(math, main, open, "{", "\\lbrace");
  defineSymbol(math, main, close, "}", "\\rbrace");
  defineSymbol(math, main, open, "[", "\\lbrack", true);
  defineSymbol(text, main, textord, "[", "\\lbrack", true);
  defineSymbol(math, main, close, "]", "\\rbrack", true);
  defineSymbol(text, main, textord, "]", "\\rbrack", true);
  defineSymbol(math, main, open, "(", "\\lparen", true);
  defineSymbol(math, main, close, ")", "\\rparen", true);
  defineSymbol(text, main, textord, "<", "\\textless", true); // in T1 fontenc

  defineSymbol(text, main, textord, ">", "\\textgreater", true); // in T1 fontenc

  defineSymbol(math, main, open, "\u230a", "\\lfloor", true);
  defineSymbol(math, main, close, "\u230b", "\\rfloor", true);
  defineSymbol(math, main, open, "\u2308", "\\lceil", true);
  defineSymbol(math, main, close, "\u2309", "\\rceil", true);
  defineSymbol(math, main, textord, "\\", "\\backslash");
  defineSymbol(math, main, textord, "\u2223", "|");
  defineSymbol(math, main, textord, "\u2223", "\\vert");
  defineSymbol(text, main, textord, "|", "\\textbar", true); // in T1 fontenc

  defineSymbol(math, main, textord, "\u2225", "\\|");
  defineSymbol(math, main, textord, "\u2225", "\\Vert");
  defineSymbol(text, main, textord, "\u2225", "\\textbardbl");
  defineSymbol(text, main, textord, "~", "\\textasciitilde");
  defineSymbol(text, main, textord, "\\", "\\textbackslash");
  defineSymbol(text, main, textord, "^", "\\textasciicircum");
  defineSymbol(math, main, rel, "\u2191", "\\uparrow", true);
  defineSymbol(math, main, rel, "\u21d1", "\\Uparrow", true);
  defineSymbol(math, main, rel, "\u2193", "\\downarrow", true);
  defineSymbol(math, main, rel, "\u21d3", "\\Downarrow", true);
  defineSymbol(math, main, rel, "\u2195", "\\updownarrow", true);
  defineSymbol(math, main, rel, "\u21d5", "\\Updownarrow", true);
  defineSymbol(math, main, op, "\u2210", "\\coprod");
  defineSymbol(math, main, op, "\u22c1", "\\bigvee");
  defineSymbol(math, main, op, "\u22c0", "\\bigwedge");
  defineSymbol(math, main, op, "\u2a04", "\\biguplus");
  defineSymbol(math, main, op, "\u22c2", "\\bigcap");
  defineSymbol(math, main, op, "\u22c3", "\\bigcup");
  defineSymbol(math, main, op, "\u222b", "\\int");
  defineSymbol(math, main, op, "\u222b", "\\intop");
  defineSymbol(math, main, op, "\u222c", "\\iint");
  defineSymbol(math, main, op, "\u222d", "\\iiint");
  defineSymbol(math, main, op, "\u220f", "\\prod");
  defineSymbol(math, main, op, "\u2211", "\\sum");
  defineSymbol(math, main, op, "\u2a02", "\\bigotimes");
  defineSymbol(math, main, op, "\u2a01", "\\bigoplus");
  defineSymbol(math, main, op, "\u2a00", "\\bigodot");
  defineSymbol(math, main, op, "\u222e", "\\oint");
  defineSymbol(math, main, op, "\u222f", "\\oiint");
  defineSymbol(math, main, op, "\u2230", "\\oiiint");
  defineSymbol(math, main, op, "\u2a06", "\\bigsqcup");
  defineSymbol(math, main, op, "\u222b", "\\smallint");
  defineSymbol(text, main, inner, "\u2026", "\\textellipsis");
  defineSymbol(math, main, inner, "\u2026", "\\mathellipsis");
  defineSymbol(text, main, inner, "\u2026", "\\ldots", true);
  defineSymbol(math, main, inner, "\u2026", "\\ldots", true);
  defineSymbol(math, main, inner, "\u22ef", "\\@cdots", true);
  defineSymbol(math, main, inner, "\u22f1", "\\ddots", true); // \vdots is a macro that uses one of these two symbols (with made-up names):

  defineSymbol(math, main, textord, "\u22ee", "\\varvdots");
  defineSymbol(text, main, textord, "\u22ee", "\\varvdots");
  defineSymbol(math, main, accent, "\u02ca", "\\acute");
  defineSymbol(math, main, accent, "\u02cb", "\\grave");
  defineSymbol(math, main, accent, "\u00a8", "\\ddot");
  defineSymbol(math, main, accent, "\u007e", "\\tilde");
  defineSymbol(math, main, accent, "\u02c9", "\\bar");
  defineSymbol(math, main, accent, "\u02d8", "\\breve");
  defineSymbol(math, main, accent, "\u02c7", "\\check");
  defineSymbol(math, main, accent, "\u005e", "\\hat");
  defineSymbol(math, main, accent, "\u20d7", "\\vec");
  defineSymbol(math, main, accent, "\u02d9", "\\dot");
  defineSymbol(math, main, accent, "\u02da", "\\mathring"); // \imath and \jmath should be invariant to \mathrm, \mathbf, etc., so use PUA

  defineSymbol(math, main, mathord, "\ue131", "\\@imath");
  defineSymbol(math, main, mathord, "\ue237", "\\@jmath");
  defineSymbol(math, main, textord, "\u0131", "\u0131");
  defineSymbol(math, main, textord, "\u0237", "\u0237");
  defineSymbol(text, main, textord, "\u0131", "\\i", true);
  defineSymbol(text, main, textord, "\u0237", "\\j", true);
  defineSymbol(text, main, textord, "\u00df", "\\ss", true);
  defineSymbol(text, main, textord, "\u00e6", "\\ae", true);
  defineSymbol(text, main, textord, "\u0153", "\\oe", true);
  defineSymbol(text, main, textord, "\u00f8", "\\o", true);
  defineSymbol(text, main, textord, "\u00c6", "\\AE", true);
  defineSymbol(text, main, textord, "\u0152", "\\OE", true);
  defineSymbol(text, main, textord, "\u00d8", "\\O", true);
  defineSymbol(text, main, accent, "\u02ca", "\\'"); // acute

  defineSymbol(text, main, accent, "\u02cb", "\\`"); // grave

  defineSymbol(text, main, accent, "\u02c6", "\\^"); // circumflex

  defineSymbol(text, main, accent, "\u02dc", "\\~"); // tilde

  defineSymbol(text, main, accent, "\u02c9", "\\="); // macron

  defineSymbol(text, main, accent, "\u02d8", "\\u"); // breve

  defineSymbol(text, main, accent, "\u02d9", "\\."); // dot above

  defineSymbol(text, main, accent, "\u00b8", "\\c"); // cedilla

  defineSymbol(text, main, accent, "\u02da", "\\r"); // ring above

  defineSymbol(text, main, accent, "\u02c7", "\\v"); // caron

  defineSymbol(text, main, accent, "\u00a8", '\\"'); // diaresis

  defineSymbol(text, main, accent, "\u02dd", "\\H"); // double acute

  defineSymbol(text, main, accent, "\u25ef", "\\textcircled"); // \bigcirc glyph
  // These ligatures are detected and created in Parser.js's `formLigatures`.

  var ligatures = {
    "--": true,
    "---": true,
    "``": true,
    "''": true
  };
  defineSymbol(text, main, textord, "\u2013", "--", true);
  defineSymbol(text, main, textord, "\u2013", "\\textendash");
  defineSymbol(text, main, textord, "\u2014", "---", true);
  defineSymbol(text, main, textord, "\u2014", "\\textemdash");
  defineSymbol(text, main, textord, "\u2018", "`", true);
  defineSymbol(text, main, textord, "\u2018", "\\textquoteleft");
  defineSymbol(text, main, textord, "\u2019", "'", true);
  defineSymbol(text, main, textord, "\u2019", "\\textquoteright");
  defineSymbol(text, main, textord, "\u201c", "``", true);
  defineSymbol(text, main, textord, "\u201c", "\\textquotedblleft");
  defineSymbol(text, main, textord, "\u201d", "''", true);
  defineSymbol(text, main, textord, "\u201d", "\\textquotedblright"); //  \degree from gensymb package

  defineSymbol(math, main, textord, "\u00b0", "\\degree", true);
  defineSymbol(text, main, textord, "\u00b0", "\\degree"); // \textdegree from inputenc package

  defineSymbol(text, main, textord, "\u00b0", "\\textdegree", true); // TODO: In LaTeX, \pounds can generate a different character in text and math
  // mode, but among our fonts, only Main-Regular defines this character "163".

  defineSymbol(math, main, textord, "\u00a3", "\\pounds");
  defineSymbol(math, main, textord, "\u00a3", "\\mathsterling", true);
  defineSymbol(text, main, textord, "\u00a3", "\\pounds");
  defineSymbol(text, main, textord, "\u00a3", "\\textsterling", true);
  defineSymbol(math, ams, textord, "\u2720", "\\maltese");
  defineSymbol(text, ams, textord, "\u2720", "\\maltese"); // There are lots of symbols which are the same, so we add them in afterwards.
  // All of these are textords in math mode

  var mathTextSymbols = "0123456789/@.\"";

  for (var i = 0; i < mathTextSymbols.length; i++) {
    var ch = mathTextSymbols.charAt(i);
    defineSymbol(math, main, textord, ch, ch);
  } // All of these are textords in text mode


  var textSymbols = "0123456789!@*()-=+\";:?/.,";

  for (var _i = 0; _i < textSymbols.length; _i++) {
    var _ch = textSymbols.charAt(_i);

    defineSymbol(text, main, textord, _ch, _ch);
  } // All of these are textords in text mode, and mathords in math mode


  var letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

  for (var _i2 = 0; _i2 < letters.length; _i2++) {
    var _ch2 = letters.charAt(_i2);

    defineSymbol(math, main, mathord, _ch2, _ch2);
    defineSymbol(text, main, textord, _ch2, _ch2);
  } // Blackboard bold and script letters in Unicode range


  defineSymbol(math, ams, textord, "C", "\u2102"); // blackboard bold

  defineSymbol(text, ams, textord, "C", "\u2102");
  defineSymbol(math, ams, textord, "H", "\u210D");
  defineSymbol(text, ams, textord, "H", "\u210D");
  defineSymbol(math, ams, textord, "N", "\u2115");
  defineSymbol(text, ams, textord, "N", "\u2115");
  defineSymbol(math, ams, textord, "P", "\u2119");
  defineSymbol(text, ams, textord, "P", "\u2119");
  defineSymbol(math, ams, textord, "Q", "\u211A");
  defineSymbol(text, ams, textord, "Q", "\u211A");
  defineSymbol(math, ams, textord, "R", "\u211D");
  defineSymbol(text, ams, textord, "R", "\u211D");
  defineSymbol(math, ams, textord, "Z", "\u2124");
  defineSymbol(text, ams, textord, "Z", "\u2124");
  defineSymbol(math, main, mathord, "h", "\u210E"); // italic h, Planck constant

  defineSymbol(text, main, mathord, "h", "\u210E"); // The next loop loads wide (surrogate pair) characters.
  // We support some letters in the Unicode range U+1D400 to U+1D7FF,
  // Mathematical Alphanumeric Symbols.
  // Some editors do not deal well with wide characters. So don't write the
  // string into this file. Instead, create the string from the surrogate pair.

  var wideChar = "";

  for (var _i3 = 0; _i3 < letters.length; _i3++) {
    var _ch3 = letters.charAt(_i3); // The hex numbers in the next line are a surrogate pair.
    // 0xD835 is the high surrogate for all letters in the range we support.
    // 0xDC00 is the low surrogate for bold A.


    wideChar = String.fromCharCode(0xD835, 0xDC00 + _i3); // A-Z a-z bold

    defineSymbol(math, main, mathord, _ch3, wideChar);
    defineSymbol(text, main, textord, _ch3, wideChar);
    wideChar = String.fromCharCode(0xD835, 0xDC34 + _i3); // A-Z a-z italic

    defineSymbol(math, main, mathord, _ch3, wideChar);
    defineSymbol(text, main, textord, _ch3, wideChar);
    wideChar = String.fromCharCode(0xD835, 0xDC68 + _i3); // A-Z a-z bold italic

    defineSymbol(math, main, mathord, _ch3, wideChar);
    defineSymbol(text, main, textord, _ch3, wideChar);
    wideChar = String.fromCharCode(0xD835, 0xDD04 + _i3); // A-Z a-z Fraktur

    defineSymbol(math, main, mathord, _ch3, wideChar);
    defineSymbol(text, main, textord, _ch3, wideChar);
    wideChar = String.fromCharCode(0xD835, 0xDD6C + _i3); // A-Z a-z bold Fraktur

    defineSymbol(math, main, mathord, _ch3, wideChar);
    defineSymbol(text, main, textord, _ch3, wideChar);
    wideChar = String.fromCharCode(0xD835, 0xDDA0 + _i3); // A-Z a-z sans-serif

    defineSymbol(math, main, mathord, _ch3, wideChar);
    defineSymbol(text, main, textord, _ch3, wideChar);
    wideChar = String.fromCharCode(0xD835, 0xDDD4 + _i3); // A-Z a-z sans bold

    defineSymbol(math, main, mathord, _ch3, wideChar);
    defineSymbol(text, main, textord, _ch3, wideChar);
    wideChar = String.fromCharCode(0xD835, 0xDE08 + _i3); // A-Z a-z sans italic

    defineSymbol(math, main, mathord, _ch3, wideChar);
    defineSymbol(text, main, textord, _ch3, wideChar);
    wideChar = String.fromCharCode(0xD835, 0xDE70 + _i3); // A-Z a-z monospace

    defineSymbol(math, main, mathord, _ch3, wideChar);
    defineSymbol(text, main, textord, _ch3, wideChar);

    if (_i3 < 26) {
      // KaTeX fonts have only capital letters for blackboard bold and script.
      // See exception for k below.
      wideChar = String.fromCharCode(0xD835, 0xDD38 + _i3); // A-Z double struck

      defineSymbol(math, main, mathord, _ch3, wideChar);
      defineSymbol(text, main, textord, _ch3, wideChar);
      wideChar = String.fromCharCode(0xD835, 0xDC9C + _i3); // A-Z script

      defineSymbol(math, main, mathord, _ch3, wideChar);
      defineSymbol(text, main, textord, _ch3, wideChar);
    } // TODO: Add bold script when it is supported by a KaTeX font.

  } // "k" is the only double struck lower case letter in the KaTeX fonts.


  wideChar = String.fromCharCode(0xD835, 0xDD5C); // k double struck

  defineSymbol(math, main, mathord, "k", wideChar);
  defineSymbol(text, main, textord, "k", wideChar); // Next, some wide character numerals

  for (var _i4 = 0; _i4 < 10; _i4++) {
    var _ch4 = _i4.toString();

    wideChar = String.fromCharCode(0xD835, 0xDFCE + _i4); // 0-9 bold

    defineSymbol(math, main, mathord, _ch4, wideChar);
    defineSymbol(text, main, textord, _ch4, wideChar);
    wideChar = String.fromCharCode(0xD835, 0xDFE2 + _i4); // 0-9 sans serif

    defineSymbol(math, main, mathord, _ch4, wideChar);
    defineSymbol(text, main, textord, _ch4, wideChar);
    wideChar = String.fromCharCode(0xD835, 0xDFEC + _i4); // 0-9 bold sans

    defineSymbol(math, main, mathord, _ch4, wideChar);
    defineSymbol(text, main, textord, _ch4, wideChar);
    wideChar = String.fromCharCode(0xD835, 0xDFF6 + _i4); // 0-9 monospace

    defineSymbol(math, main, mathord, _ch4, wideChar);
    defineSymbol(text, main, textord, _ch4, wideChar);
  } // We add these Latin-1 letters as symbols for backwards-compatibility,
  // but they are not actually in the font, nor are they supported by the
  // Unicode accent mechanism, so they fall back to Times font and look ugly.
  // TODO(edemaine): Fix this.


  var extraLatin = "\u00d0\u00de\u00fe";

  for (var _i5 = 0; _i5 < extraLatin.length; _i5++) {
    var _ch5 = extraLatin.charAt(_i5);

    defineSymbol(math, main, mathord, _ch5, _ch5);
    defineSymbol(text, main, textord, _ch5, _ch5);
  }

  /**
   * This file provides support for Unicode range U+1D400 to U+1D7FF,
   * Mathematical Alphanumeric Symbols.
   *
   * Function wideCharacterFont takes a wide character as input and returns
   * the font information necessary to render it properly.
   */
  /**
   * Data below is from https://www.unicode.org/charts/PDF/U1D400.pdf
   * That document sorts characters into groups by font type, say bold or italic.
   *
   * In the arrays below, each subarray consists three elements:
   *      * The CSS class of that group when in math mode.
   *      * The CSS class of that group when in text mode.
   *      * The font name, so that KaTeX can get font metrics.
   */

  var wideLatinLetterData = [["mathbf", "textbf", "Main-Bold"], // A-Z bold upright
  ["mathbf", "textbf", "Main-Bold"], // a-z bold upright
  ["mathnormal", "textit", "Math-Italic"], // A-Z italic
  ["mathnormal", "textit", "Math-Italic"], // a-z italic
  ["boldsymbol", "boldsymbol", "Main-BoldItalic"], // A-Z bold italic
  ["boldsymbol", "boldsymbol", "Main-BoldItalic"], // a-z bold italic
  // Map fancy A-Z letters to script, not calligraphic.
  // This aligns with unicode-math and math fonts (except Cambria Math).
  ["mathscr", "textscr", "Script-Regular"], // A-Z script
  ["", "", ""], // a-z script.  No font
  ["", "", ""], // A-Z bold script. No font
  ["", "", ""], // a-z bold script. No font
  ["mathfrak", "textfrak", "Fraktur-Regular"], // A-Z Fraktur
  ["mathfrak", "textfrak", "Fraktur-Regular"], // a-z Fraktur
  ["mathbb", "textbb", "AMS-Regular"], // A-Z double-struck
  ["mathbb", "textbb", "AMS-Regular"], // k double-struck
  // Note that we are using a bold font, but font metrics for regular Fraktur.
  ["mathboldfrak", "textboldfrak", "Fraktur-Regular"], // A-Z bold Fraktur
  ["mathboldfrak", "textboldfrak", "Fraktur-Regular"], // a-z bold Fraktur
  ["mathsf", "textsf", "SansSerif-Regular"], // A-Z sans-serif
  ["mathsf", "textsf", "SansSerif-Regular"], // a-z sans-serif
  ["mathboldsf", "textboldsf", "SansSerif-Bold"], // A-Z bold sans-serif
  ["mathboldsf", "textboldsf", "SansSerif-Bold"], // a-z bold sans-serif
  ["mathitsf", "textitsf", "SansSerif-Italic"], // A-Z italic sans-serif
  ["mathitsf", "textitsf", "SansSerif-Italic"], // a-z italic sans-serif
  ["", "", ""], // A-Z bold italic sans. No font
  ["", "", ""], // a-z bold italic sans. No font
  ["mathtt", "texttt", "Typewriter-Regular"], // A-Z monospace
  ["mathtt", "texttt", "Typewriter-Regular"] // a-z monospace
  ];
  var wideNumeralData = [["mathbf", "textbf", "Main-Bold"], // 0-9 bold
  ["", "", ""], // 0-9 double-struck. No KaTeX font.
  ["mathsf", "textsf", "SansSerif-Regular"], // 0-9 sans-serif
  ["mathboldsf", "textboldsf", "SansSerif-Bold"], // 0-9 bold sans-serif
  ["mathtt", "texttt", "Typewriter-Regular"] // 0-9 monospace
  ];
  var wideCharacterFont = function wideCharacterFont(wideChar, mode) {
    // IE doesn't support codePointAt(). So work with the surrogate pair.
    var H = wideChar.charCodeAt(0); // high surrogate

    var L = wideChar.charCodeAt(1); // low surrogate

    var codePoint = (H - 0xD800) * 0x400 + (L - 0xDC00) + 0x10000;
    var j = mode === "math" ? 0 : 1; // column index for CSS class.

    if (0x1D400 <= codePoint && codePoint < 0x1D6A4) {
      // wideLatinLetterData contains exactly 26 chars on each row.
      // So we can calculate the relevant row. No traverse necessary.
      var i = Math.floor((codePoint - 0x1D400) / 26);
      return [wideLatinLetterData[i][2], wideLatinLetterData[i][j]];
    } else if (0x1D7CE <= codePoint && codePoint <= 0x1D7FF) {
      // Numerals, ten per row.
      var _i = Math.floor((codePoint - 0x1D7CE) / 10);

      return [wideNumeralData[_i][2], wideNumeralData[_i][j]];
    } else if (codePoint === 0x1D6A5 || codePoint === 0x1D6A6) {
      // dotless i or j
      return [wideLatinLetterData[0][2], wideLatinLetterData[0][j]];
    } else if (0x1D6A6 < codePoint && codePoint < 0x1D7CE) {
      // Greek letters. Not supported, yet.
      return ["", ""];
    } else {
      // We don't support any wide characters outside 1D400–1D7FF.
      throw new ParseError("Unsupported character: " + wideChar);
    }
  };

  /* eslint no-console:0 */

  /**
   * Looks up the given symbol in fontMetrics, after applying any symbol
   * replacements defined in symbol.js
   */
  var lookupSymbol = function lookupSymbol(value, // TODO(#963): Use a union type for this.
  fontName, mode) {
    // Replace the value with its replaced value from symbol.js
    if (symbols[mode][value] && symbols[mode][value].replace) {
      value = symbols[mode][value].replace;
    }

    return {
      value: value,
      metrics: getCharacterMetrics(value, fontName, mode)
    };
  };
  /**
   * Makes a symbolNode after translation via the list of symbols in symbols.js.
   * Correctly pulls out metrics for the character, and optionally takes a list of
   * classes to be attached to the node.
   *
   * TODO: make argument order closer to makeSpan
   * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which
   * should if present come first in `classes`.
   * TODO(#953): Make `options` mandatory and always pass it in.
   */


  var makeSymbol = function makeSymbol(value, fontName, mode, options, classes) {
    var lookup = lookupSymbol(value, fontName, mode);
    var metrics = lookup.metrics;
    value = lookup.value;
    var symbolNode;

    if (metrics) {
      var italic = metrics.italic;

      if (mode === "text" || options && options.font === "mathit") {
        italic = 0;
      }

      symbolNode = new SymbolNode(value, metrics.height, metrics.depth, italic, metrics.skew, metrics.width, classes);
    } else {
      // TODO(emily): Figure out a good way to only print this in development
      typeof console !== "undefined" && console.warn("No character metrics " + ("for '" + value + "' in style '" + fontName + "' and mode '" + mode + "'"));
      symbolNode = new SymbolNode(value, 0, 0, 0, 0, 0, classes);
    }

    if (options) {
      symbolNode.maxFontSize = options.sizeMultiplier;

      if (options.style.isTight()) {
        symbolNode.classes.push("mtight");
      }

      var color = options.getColor();

      if (color) {
        symbolNode.style.color = color;
      }
    }

    return symbolNode;
  };
  /**
   * Makes a symbol in Main-Regular or AMS-Regular.
   * Used for rel, bin, open, close, inner, and punct.
   */


  var mathsym = function mathsym(value, mode, options, classes) {
    if (classes === undefined) {
      classes = [];
    }

    // Decide what font to render the symbol in by its entry in the symbols
    // table.
    // Have a special case for when the value = \ because the \ is used as a
    // textord in unsupported command errors but cannot be parsed as a regular
    // text ordinal and is therefore not present as a symbol in the symbols
    // table for text, as well as a special case for boldsymbol because it
    // can be used for bold + and -
    if (options.font === "boldsymbol" && lookupSymbol(value, "Main-Bold", mode).metrics) {
      return makeSymbol(value, "Main-Bold", mode, options, classes.concat(["mathbf"]));
    } else if (value === "\\" || symbols[mode][value].font === "main") {
      return makeSymbol(value, "Main-Regular", mode, options, classes);
    } else {
      return makeSymbol(value, "AMS-Regular", mode, options, classes.concat(["amsrm"]));
    }
  };
  /**
   * Determines which of the two font names (Main-Bold and Math-BoldItalic) and
   * corresponding style tags (mathbf or boldsymbol) to use for font "boldsymbol",
   * depending on the symbol.  Use this function instead of fontMap for font
   * "boldsymbol".
   */


  var boldsymbol = function boldsymbol(value, mode, options, classes, type) {
    if (type !== "textord" && lookupSymbol(value, "Math-BoldItalic", mode).metrics) {
      return {
        fontName: "Math-BoldItalic",
        fontClass: "boldsymbol"
      };
    } else {
      // Some glyphs do not exist in Math-BoldItalic so we need to use
      // Main-Bold instead.
      return {
        fontName: "Main-Bold",
        fontClass: "mathbf"
      };
    }
  };
  /**
   * Makes either a mathord or textord in the correct font and color.
   */


  var makeOrd = function makeOrd(group, options, type) {
    var mode = group.mode;
    var text = group.text;
    var classes = ["mord"]; // Math mode or Old font (i.e. \rm)

    var isFont = mode === "math" || mode === "text" && options.font;
    var fontOrFamily = isFont ? options.font : options.fontFamily;
    var wideFontName = "";
    var wideFontClass = "";

    if (text.charCodeAt(0) === 0xD835) {
      [wideFontName, wideFontClass] = wideCharacterFont(text, mode);
    }

    if (wideFontName.length > 0) {
      // surrogate pairs get special treatment
      return makeSymbol(text, wideFontName, mode, options, classes.concat(wideFontClass));
    } else if (fontOrFamily) {
      var fontName;
      var fontClasses;

      if (fontOrFamily === "boldsymbol") {
        var fontData = boldsymbol(text, mode, options, classes, type);
        fontName = fontData.fontName;
        fontClasses = [fontData.fontClass];
      } else if (isFont) {
        fontName = fontMap[fontOrFamily].fontName;
        fontClasses = [fontOrFamily];
      } else {
        fontName = retrieveTextFontName(fontOrFamily, options.fontWeight, options.fontShape);
        fontClasses = [fontOrFamily, options.fontWeight, options.fontShape];
      }

      if (lookupSymbol(text, fontName, mode).metrics) {
        return makeSymbol(text, fontName, mode, options, classes.concat(fontClasses));
      } else if (ligatures.hasOwnProperty(text) && fontName.slice(0, 10) === "Typewriter") {
        // Deconstruct ligatures in monospace fonts (\texttt, \tt).
        var parts = [];

        for (var i = 0; i < text.length; i++) {
          parts.push(makeSymbol(text[i], fontName, mode, options, classes.concat(fontClasses)));
        }

        return makeFragment(parts);
      }
    } // Makes a symbol in the default font for mathords and textords.


    if (type === "mathord") {
      return makeSymbol(text, "Math-Italic", mode, options, classes.concat(["mathnormal"]));
    } else if (type === "textord") {
      var font = symbols[mode][text] && symbols[mode][text].font;

      if (font === "ams") {
        var _fontName = retrieveTextFontName("amsrm", options.fontWeight, options.fontShape);

        return makeSymbol(text, _fontName, mode, options, classes.concat("amsrm", options.fontWeight, options.fontShape));
      } else if (font === "main" || !font) {
        var _fontName2 = retrieveTextFontName("textrm", options.fontWeight, options.fontShape);

        return makeSymbol(text, _fontName2, mode, options, classes.concat(options.fontWeight, options.fontShape));
      } else {
        // fonts added by plugins
        var _fontName3 = retrieveTextFontName(font, options.fontWeight, options.fontShape); // We add font name as a css class


        return makeSymbol(text, _fontName3, mode, options, classes.concat(_fontName3, options.fontWeight, options.fontShape));
      }
    } else {
      throw new Error("unexpected type: " + type + " in makeOrd");
    }
  };
  /**
   * Returns true if subsequent symbolNodes have the same classes, skew, maxFont,
   * and styles.
   */


  var canCombine = (prev, next) => {
    if (createClass(prev.classes) !== createClass(next.classes) || prev.skew !== next.skew || prev.maxFontSize !== next.maxFontSize) {
      return false;
    } // If prev and next both are just "mbin"s or "mord"s we don't combine them
    // so that the proper spacing can be preserved.


    if (prev.classes.length === 1) {
      var cls = prev.classes[0];

      if (cls === "mbin" || cls === "mord") {
        return false;
      }
    }

    for (var style in prev.style) {
      if (prev.style.hasOwnProperty(style) && prev.style[style] !== next.style[style]) {
        return false;
      }
    }

    for (var _style in next.style) {
      if (next.style.hasOwnProperty(_style) && prev.style[_style] !== next.style[_style]) {
        return false;
      }
    }

    return true;
  };
  /**
   * Combine consecutive domTree.symbolNodes into a single symbolNode.
   * Note: this function mutates the argument.
   */


  var tryCombineChars = chars => {
    for (var i = 0; i < chars.length - 1; i++) {
      var prev = chars[i];
      var next = chars[i + 1];

      if (prev instanceof SymbolNode && next instanceof SymbolNode && canCombine(prev, next)) {
        prev.text += next.text;
        prev.height = Math.max(prev.height, next.height);
        prev.depth = Math.max(prev.depth, next.depth); // Use the last character's italic correction since we use
        // it to add padding to the right of the span created from
        // the combined characters.

        prev.italic = next.italic;
        chars.splice(i + 1, 1);
        i--;
      }
    }

    return chars;
  };
  /**
   * Calculate the height, depth, and maxFontSize of an element based on its
   * children.
   */


  var sizeElementFromChildren = function sizeElementFromChildren(elem) {
    var height = 0;
    var depth = 0;
    var maxFontSize = 0;

    for (var i = 0; i < elem.children.length; i++) {
      var child = elem.children[i];

      if (child.height > height) {
        height = child.height;
      }

      if (child.depth > depth) {
        depth = child.depth;
      }

      if (child.maxFontSize > maxFontSize) {
        maxFontSize = child.maxFontSize;
      }
    }

    elem.height = height;
    elem.depth = depth;
    elem.maxFontSize = maxFontSize;
  };
  /**
   * Makes a span with the given list of classes, list of children, and options.
   *
   * TODO(#953): Ensure that `options` is always provided (currently some call
   * sites don't pass it) and make the type below mandatory.
   * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which
   * should if present come first in `classes`.
   */


  var makeSpan$2 = function makeSpan(classes, children, options, style) {
    var span = new Span(classes, children, options, style);
    sizeElementFromChildren(span);
    return span;
  }; // SVG one is simpler -- doesn't require height, depth, max-font setting.
  // This is also a separate method for typesafety.


  var makeSvgSpan = (classes, children, options, style) => new Span(classes, children, options, style);

  var makeLineSpan = function makeLineSpan(className, options, thickness) {
    var line = makeSpan$2([className], [], options);
    line.height = Math.max(thickness || options.fontMetrics().defaultRuleThickness, options.minRuleThickness);
    line.style.borderBottomWidth = makeEm(line.height);
    line.maxFontSize = 1.0;
    return line;
  };
  /**
   * Makes an anchor with the given href, list of classes, list of children,
   * and options.
   */


  var makeAnchor = function makeAnchor(href, classes, children, options) {
    var anchor = new Anchor(href, classes, children, options);
    sizeElementFromChildren(anchor);
    return anchor;
  };
  /**
   * Makes a document fragment with the given list of children.
   */


  var makeFragment = function makeFragment(children) {
    var fragment = new DocumentFragment(children);
    sizeElementFromChildren(fragment);
    return fragment;
  };
  /**
   * Wraps group in a span if it's a document fragment, allowing to apply classes
   * and styles
   */


  var wrapFragment = function wrapFragment(group, options) {
    if (group instanceof DocumentFragment) {
      return makeSpan$2([], [group], options);
    }

    return group;
  }; // These are exact object types to catch typos in the names of the optional fields.


  // Computes the updated `children` list and the overall depth.
  //
  // This helper function for makeVList makes it easier to enforce type safety by
  // allowing early exits (returns) in the logic.
  var getVListChildrenAndDepth = function getVListChildrenAndDepth(params) {
    if (params.positionType === "individualShift") {
      var oldChildren = params.children;
      var children = [oldChildren[0]]; // Add in kerns to the list of params.children to get each element to be
      // shifted to the correct specified shift

      var _depth = -oldChildren[0].shift - oldChildren[0].elem.depth;

      var currPos = _depth;

      for (var i = 1; i < oldChildren.length; i++) {
        var diff = -oldChildren[i].shift - currPos - oldChildren[i].elem.depth;
        var size = diff - (oldChildren[i - 1].elem.height + oldChildren[i - 1].elem.depth);
        currPos = currPos + diff;
        children.push({
          type: "kern",
          size
        });
        children.push(oldChildren[i]);
      }

      return {
        children,
        depth: _depth
      };
    }

    var depth;

    if (params.positionType === "top") {
      // We always start at the bottom, so calculate the bottom by adding up
      // all the sizes
      var bottom = params.positionData;

      for (var _i = 0; _i < params.children.length; _i++) {
        var child = params.children[_i];
        bottom -= child.type === "kern" ? child.size : child.elem.height + child.elem.depth;
      }

      depth = bottom;
    } else if (params.positionType === "bottom") {
      depth = -params.positionData;
    } else {
      var firstChild = params.children[0];

      if (firstChild.type !== "elem") {
        throw new Error('First child must have type "elem".');
      }

      if (params.positionType === "shift") {
        depth = -firstChild.elem.depth - params.positionData;
      } else if (params.positionType === "firstBaseline") {
        depth = -firstChild.elem.depth;
      } else {
        throw new Error("Invalid positionType " + params.positionType + ".");
      }
    }

    return {
      children: params.children,
      depth
    };
  };
  /**
   * Makes a vertical list by stacking elements and kerns on top of each other.
   * Allows for many different ways of specifying the positioning method.
   *
   * See VListParam documentation above.
   */


  var makeVList = function makeVList(params, options) {
    var {
      children,
      depth
    } = getVListChildrenAndDepth(params); // Create a strut that is taller than any list item. The strut is added to
    // each item, where it will determine the item's baseline. Since it has
    // `overflow:hidden`, the strut's top edge will sit on the item's line box's
    // top edge and the strut's bottom edge will sit on the item's baseline,
    // with no additional line-height spacing. This allows the item baseline to
    // be positioned precisely without worrying about font ascent and
    // line-height.

    var pstrutSize = 0;

    for (var i = 0; i < children.length; i++) {
      var child = children[i];

      if (child.type === "elem") {
        var elem = child.elem;
        pstrutSize = Math.max(pstrutSize, elem.maxFontSize, elem.height);
      }
    }

    pstrutSize += 2;
    var pstrut = makeSpan$2(["pstrut"], []);
    pstrut.style.height = makeEm(pstrutSize); // Create a new list of actual children at the correct offsets

    var realChildren = [];
    var minPos = depth;
    var maxPos = depth;
    var currPos = depth;

    for (var _i2 = 0; _i2 < children.length; _i2++) {
      var _child = children[_i2];

      if (_child.type === "kern") {
        currPos += _child.size;
      } else {
        var _elem = _child.elem;
        var classes = _child.wrapperClasses || [];
        var style = _child.wrapperStyle || {};
        var childWrap = makeSpan$2(classes, [pstrut, _elem], undefined, style);
        childWrap.style.top = makeEm(-pstrutSize - currPos - _elem.depth);

        if (_child.marginLeft) {
          childWrap.style.marginLeft = _child.marginLeft;
        }

        if (_child.marginRight) {
          childWrap.style.marginRight = _child.marginRight;
        }

        realChildren.push(childWrap);
        currPos += _elem.height + _elem.depth;
      }

      minPos = Math.min(minPos, currPos);
      maxPos = Math.max(maxPos, currPos);
    } // The vlist contents go in a table-cell with `vertical-align:bottom`.
    // This cell's bottom edge will determine the containing table's baseline
    // without overly expanding the containing line-box.


    var vlist = makeSpan$2(["vlist"], realChildren);
    vlist.style.height = makeEm(maxPos); // A second row is used if necessary to represent the vlist's depth.

    var rows;

    if (minPos < 0) {
      // We will define depth in an empty span with display: table-cell.
      // It should render with the height that we define. But Chrome, in
      // contenteditable mode only, treats that span as if it contains some
      // text content. And that min-height over-rides our desired height.
      // So we put another empty span inside the depth strut span.
      var emptySpan = makeSpan$2([], []);
      var depthStrut = makeSpan$2(["vlist"], [emptySpan]);
      depthStrut.style.height = makeEm(-minPos); // Safari wants the first row to have inline content; otherwise it
      // puts the bottom of the *second* row on the baseline.

      var topStrut = makeSpan$2(["vlist-s"], [new SymbolNode("\u200b")]);
      rows = [makeSpan$2(["vlist-r"], [vlist, topStrut]), makeSpan$2(["vlist-r"], [depthStrut])];
    } else {
      rows = [makeSpan$2(["vlist-r"], [vlist])];
    }

    var vtable = makeSpan$2(["vlist-t"], rows);

    if (rows.length === 2) {
      vtable.classes.push("vlist-t2");
    }

    vtable.height = maxPos;
    vtable.depth = -minPos;
    return vtable;
  }; // Glue is a concept from TeX which is a flexible space between elements in
  // either a vertical or horizontal list. In KaTeX, at least for now, it's
  // static space between elements in a horizontal layout.


  var makeGlue = (measurement, options) => {
    // Make an empty span for the space
    var rule = makeSpan$2(["mspace"], [], options);
    var size = calculateSize(measurement, options);
    rule.style.marginRight = makeEm(size);
    return rule;
  }; // Takes font options, and returns the appropriate fontLookup name


  var retrieveTextFontName = function retrieveTextFontName(fontFamily, fontWeight, fontShape) {
    var baseFontName = "";

    switch (fontFamily) {
      case "amsrm":
        baseFontName = "AMS";
        break;

      case "textrm":
        baseFontName = "Main";
        break;

      case "textsf":
        baseFontName = "SansSerif";
        break;

      case "texttt":
        baseFontName = "Typewriter";
        break;

      default:
        baseFontName = fontFamily;
      // use fonts added by a plugin
    }

    var fontStylesName;

    if (fontWeight === "textbf" && fontShape === "textit") {
      fontStylesName = "BoldItalic";
    } else if (fontWeight === "textbf") {
      fontStylesName = "Bold";
    } else if (fontWeight === "textit") {
      fontStylesName = "Italic";
    } else {
      fontStylesName = "Regular";
    }

    return baseFontName + "-" + fontStylesName;
  };
  /**
   * Maps TeX font commands to objects containing:
   * - variant: string used for "mathvariant" attribute in buildMathML.js
   * - fontName: the "style" parameter to fontMetrics.getCharacterMetrics
   */
  // A map between tex font commands an MathML mathvariant attribute values


  var fontMap = {
    // styles
    "mathbf": {
      variant: "bold",
      fontName: "Main-Bold"
    },
    "mathrm": {
      variant: "normal",
      fontName: "Main-Regular"
    },
    "textit": {
      variant: "italic",
      fontName: "Main-Italic"
    },
    "mathit": {
      variant: "italic",
      fontName: "Main-Italic"
    },
    "mathnormal": {
      variant: "italic",
      fontName: "Math-Italic"
    },
    "mathsfit": {
      variant: "sans-serif-italic",
      fontName: "SansSerif-Italic"
    },
    // "boldsymbol" is missing because they require the use of multiple fonts:
    // Math-BoldItalic and Main-Bold.  This is handled by a special case in
    // makeOrd which ends up calling boldsymbol.
    // families
    "mathbb": {
      variant: "double-struck",
      fontName: "AMS-Regular"
    },
    "mathcal": {
      variant: "script",
      fontName: "Caligraphic-Regular"
    },
    "mathfrak": {
      variant: "fraktur",
      fontName: "Fraktur-Regular"
    },
    "mathscr": {
      variant: "script",
      fontName: "Script-Regular"
    },
    "mathsf": {
      variant: "sans-serif",
      fontName: "SansSerif-Regular"
    },
    "mathtt": {
      variant: "monospace",
      fontName: "Typewriter-Regular"
    }
  };
  var svgData = {
    //   path, width, height
    vec: ["vec", 0.471, 0.714],
    // values from the font glyph
    oiintSize1: ["oiintSize1", 0.957, 0.499],
    // oval to overlay the integrand
    oiintSize2: ["oiintSize2", 1.472, 0.659],
    oiiintSize1: ["oiiintSize1", 1.304, 0.499],
    oiiintSize2: ["oiiintSize2", 1.98, 0.659]
  };

  var staticSvg = function staticSvg(value, options) {
    // Create a span with inline SVG for the element.
    var [pathName, width, height] = svgData[value];
    var path = new PathNode(pathName);
    var svgNode = new SvgNode([path], {
      "width": makeEm(width),
      "height": makeEm(height),
      // Override CSS rule `.katex svg { width: 100% }`
      "style": "width:" + makeEm(width),
      "viewBox": "0 0 " + 1000 * width + " " + 1000 * height,
      "preserveAspectRatio": "xMinYMin"
    });
    var span = makeSvgSpan(["overlay"], [svgNode], options);
    span.height = height;
    span.style.height = makeEm(height);
    span.style.width = makeEm(width);
    return span;
  };

  var buildCommon = {
    fontMap,
    makeSymbol,
    mathsym,
    makeSpan: makeSpan$2,
    makeSvgSpan,
    makeLineSpan,
    makeAnchor,
    makeFragment,
    wrapFragment,
    makeVList,
    makeOrd,
    makeGlue,
    staticSvg,
    svgData,
    tryCombineChars
  };

  /**
   * Describes spaces between different classes of atoms.
   */
  var thinspace = {
    number: 3,
    unit: "mu"
  };
  var mediumspace = {
    number: 4,
    unit: "mu"
  };
  var thickspace = {
    number: 5,
    unit: "mu"
  }; // Making the type below exact with all optional fields doesn't work due to
  // - https://github.com/facebook/flow/issues/4582
  // - https://github.com/facebook/flow/issues/5688
  // However, since *all* fields are optional, $Shape<> works as suggested in 5688
  // above.

  // Spacing relationships for display and text styles
  var spacings = {
    mord: {
      mop: thinspace,
      mbin: mediumspace,
      mrel: thickspace,
      minner: thinspace
    },
    mop: {
      mord: thinspace,
      mop: thinspace,
      mrel: thickspace,
      minner: thinspace
    },
    mbin: {
      mord: mediumspace,
      mop: mediumspace,
      mopen: mediumspace,
      minner: mediumspace
    },
    mrel: {
      mord: thickspace,
      mop: thickspace,
      mopen: thickspace,
      minner: thickspace
    },
    mopen: {},
    mclose: {
      mop: thinspace,
      mbin: mediumspace,
      mrel: thickspace,
      minner: thinspace
    },
    mpunct: {
      mord: thinspace,
      mop: thinspace,
      mrel: thickspace,
      mopen: thinspace,
      mclose: thinspace,
      mpunct: thinspace,
      minner: thinspace
    },
    minner: {
      mord: thinspace,
      mop: thinspace,
      mbin: mediumspace,
      mrel: thickspace,
      mopen: thinspace,
      mpunct: thinspace,
      minner: thinspace
    }
  }; // Spacing relationships for script and scriptscript styles

  var tightSpacings = {
    mord: {
      mop: thinspace
    },
    mop: {
      mord: thinspace,
      mop: thinspace
    },
    mbin: {},
    mrel: {},
    mopen: {},
    mclose: {
      mop: thinspace
    },
    mpunct: {},
    minner: {
      mop: thinspace
    }
  };

  /** Context provided to function handlers for error messages. */
  // Note: reverse the order of the return type union will cause a flow error.
  // See https://github.com/facebook/flow/issues/3663.
  // More general version of `HtmlBuilder` for nodes (e.g. \sum, accent types)
  // whose presence impacts super/subscripting. In this case, ParseNode<"supsub">
  // delegates its HTML building to the HtmlBuilder corresponding to these nodes.

  /**
   * Final function spec for use at parse time.
   * This is almost identical to `FunctionPropSpec`, except it
   * 1. includes the function handler, and
   * 2. requires all arguments except argTypes.
   * It is generated by `defineFunction()` below.
   */

  /**
   * All registered functions.
   * `functions.js` just exports this same dictionary again and makes it public.
   * `Parser.js` requires this dictionary.
   */
  var _functions = {};
  /**
   * All HTML builders. Should be only used in the `define*` and the `build*ML`
   * functions.
   */

  var _htmlGroupBuilders = {};
  /**
   * All MathML builders. Should be only used in the `define*` and the `build*ML`
   * functions.
   */

  var _mathmlGroupBuilders = {};
  function defineFunction(_ref) {
    var {
      type,
      names,
      props,
      handler,
      htmlBuilder,
      mathmlBuilder
    } = _ref;
    // Set default values of functions
    var data = {
      type,
      numArgs: props.numArgs,
      argTypes: props.argTypes,
      allowedInArgument: !!props.allowedInArgument,
      allowedInText: !!props.allowedInText,
      allowedInMath: props.allowedInMath === undefined ? true : props.allowedInMath,
      numOptionalArgs: props.numOptionalArgs || 0,
      infix: !!props.infix,
      primitive: !!props.primitive,
      handler: handler
    };

    for (var i = 0; i < names.length; ++i) {
      _functions[names[i]] = data;
    }

    if (type) {
      if (htmlBuilder) {
        _htmlGroupBuilders[type] = htmlBuilder;
      }

      if (mathmlBuilder) {
        _mathmlGroupBuilders[type] = mathmlBuilder;
      }
    }
  }
  /**
   * Use this to register only the HTML and MathML builders for a function (e.g.
   * if the function's ParseNode is generated in Parser.js rather than via a
   * stand-alone handler provided to `defineFunction`).
   */

  function defineFunctionBuilders(_ref2) {
    var {
      type,
      htmlBuilder,
      mathmlBuilder
    } = _ref2;
    defineFunction({
      type,
      names: [],
      props: {
        numArgs: 0
      },

      handler() {
        throw new Error('Should never be called.');
      },

      htmlBuilder,
      mathmlBuilder
    });
  }
  var normalizeArgument = function normalizeArgument(arg) {
    return arg.type === "ordgroup" && arg.body.length === 1 ? arg.body[0] : arg;
  }; // Since the corresponding buildHTML/buildMathML function expects a
  // list of elements, we normalize for different kinds of arguments

  var ordargument = function ordargument(arg) {
    return arg.type === "ordgroup" ? arg.body : [arg];
  };

  /**
   * This file does the main work of building a domTree structure from a parse
   * tree. The entry point is the `buildHTML` function, which takes a parse tree.
   * Then, the buildExpression, buildGroup, and various groupBuilders functions
   * are called, to produce a final HTML tree.
   */
  var makeSpan$1 = buildCommon.makeSpan; // Binary atoms (first class `mbin`) change into ordinary atoms (`mord`)
  // depending on their surroundings. See TeXbook pg. 442-446, Rules 5 and 6,
  // and the text before Rule 19.

  var binLeftCanceller = ["leftmost", "mbin", "mopen", "mrel", "mop", "mpunct"];
  var binRightCanceller = ["rightmost", "mrel", "mclose", "mpunct"];
  var styleMap$1 = {
    "display": Style$1.DISPLAY,
    "text": Style$1.TEXT,
    "script": Style$1.SCRIPT,
    "scriptscript": Style$1.SCRIPTSCRIPT
  };
  var DomEnum = {
    mord: "mord",
    mop: "mop",
    mbin: "mbin",
    mrel: "mrel",
    mopen: "mopen",
    mclose: "mclose",
    mpunct: "mpunct",
    minner: "minner"
  };

  /**
   * Take a list of nodes, build them in order, and return a list of the built
   * nodes. documentFragments are flattened into their contents, so the
   * returned list contains no fragments. `isRealGroup` is true if `expression`
   * is a real group (no atoms will be added on either side), as opposed to
   * a partial group (e.g. one created by \color). `surrounding` is an array
   * consisting type of nodes that will be added to the left and right.
   */
  var buildExpression$1 = function buildExpression(expression, options, isRealGroup, surrounding) {
    if (surrounding === undefined) {
      surrounding = [null, null];
    }

    // Parse expressions into `groups`.
    var groups = [];

    for (var i = 0; i < expression.length; i++) {
      var output = buildGroup$1(expression[i], options);

      if (output instanceof DocumentFragment) {
        var children = output.children;
        groups.push(...children);
      } else {
        groups.push(output);
      }
    } // Combine consecutive domTree.symbolNodes into a single symbolNode.


    buildCommon.tryCombineChars(groups); // If `expression` is a partial group, let the parent handle spacings
    // to avoid processing groups multiple times.

    if (!isRealGroup) {
      return groups;
    }

    var glueOptions = options;

    if (expression.length === 1) {
      var node = expression[0];

      if (node.type === "sizing") {
        glueOptions = options.havingSize(node.size);
      } else if (node.type === "styling") {
        glueOptions = options.havingStyle(styleMap$1[node.style]);
      }
    } // Dummy spans for determining spacings between surrounding atoms.
    // If `expression` has no atoms on the left or right, class "leftmost"
    // or "rightmost", respectively, is used to indicate it.


    var dummyPrev = makeSpan$1([surrounding[0] || "leftmost"], [], options);
    var dummyNext = makeSpan$1([surrounding[1] || "rightmost"], [], options); // TODO: These code assumes that a node's math class is the first element
    // of its `classes` array. A later cleanup should ensure this, for
    // instance by changing the signature of `makeSpan`.
    // Before determining what spaces to insert, perform bin cancellation.
    // Binary operators change to ordinary symbols in some contexts.

    var isRoot = isRealGroup === "root";
    traverseNonSpaceNodes(groups, (node, prev) => {
      var prevType = prev.classes[0];
      var type = node.classes[0];

      if (prevType === "mbin" && utils.contains(binRightCanceller, type)) {
        prev.classes[0] = "mord";
      } else if (type === "mbin" && utils.contains(binLeftCanceller, prevType)) {
        node.classes[0] = "mord";
      }
    }, {
      node: dummyPrev
    }, dummyNext, isRoot);
    traverseNonSpaceNodes(groups, (node, prev) => {
      var prevType = getTypeOfDomTree(prev);
      var type = getTypeOfDomTree(node); // 'mtight' indicates that the node is script or scriptscript style.

      var space = prevType && type ? node.hasClass("mtight") ? tightSpacings[prevType][type] : spacings[prevType][type] : null;

      if (space) {
        // Insert glue (spacing) after the `prev`.
        return buildCommon.makeGlue(space, glueOptions);
      }
    }, {
      node: dummyPrev
    }, dummyNext, isRoot);
    return groups;
  }; // Depth-first traverse non-space `nodes`, calling `callback` with the current and
  // previous node as arguments, optionally returning a node to insert after the
  // previous node. `prev` is an object with the previous node and `insertAfter`
  // function to insert after it. `next` is a node that will be added to the right.
  // Used for bin cancellation and inserting spacings.

  var traverseNonSpaceNodes = function traverseNonSpaceNodes(nodes, callback, prev, next, isRoot) {
    if (next) {
      // temporarily append the right node, if exists
      nodes.push(next);
    }

    var i = 0;

    for (; i < nodes.length; i++) {
      var node = nodes[i];
      var partialGroup = checkPartialGroup(node);

      if (partialGroup) {
        // Recursive DFS
        // $FlowFixMe: make nodes a $ReadOnlyArray by returning a new array
        traverseNonSpaceNodes(partialGroup.children, callback, prev, null, isRoot);
        continue;
      } // Ignore explicit spaces (e.g., \;, \,) when determining what implicit
      // spacing should go between atoms of different classes


      var nonspace = !node.hasClass("mspace");

      if (nonspace) {
        var result = callback(node, prev.node);

        if (result) {
          if (prev.insertAfter) {
            prev.insertAfter(result);
          } else {
            // insert at front
            nodes.unshift(result);
            i++;
          }
        }
      }

      if (nonspace) {
        prev.node = node;
      } else if (isRoot && node.hasClass("newline")) {
        prev.node = makeSpan$1(["leftmost"]); // treat like beginning of line
      }

      prev.insertAfter = (index => n => {
        nodes.splice(index + 1, 0, n);
        i++;
      })(i);
    }

    if (next) {
      nodes.pop();
    }
  }; // Check if given node is a partial group, i.e., does not affect spacing around.


  var checkPartialGroup = function checkPartialGroup(node) {
    if (node instanceof DocumentFragment || node instanceof Anchor || node instanceof Span && node.hasClass("enclosing")) {
      return node;
    }

    return null;
  }; // Return the outermost node of a domTree.


  var getOutermostNode = function getOutermostNode(node, side) {
    var partialGroup = checkPartialGroup(node);

    if (partialGroup) {
      var children = partialGroup.children;

      if (children.length) {
        if (side === "right") {
          return getOutermostNode(children[children.length - 1], "right");
        } else if (side === "left") {
          return getOutermostNode(children[0], "left");
        }
      }
    }

    return node;
  }; // Return math atom class (mclass) of a domTree.
  // If `side` is given, it will get the type of the outermost node at given side.


  var getTypeOfDomTree = function getTypeOfDomTree(node, side) {
    if (!node) {
      return null;
    }

    if (side) {
      node = getOutermostNode(node, side);
    } // This makes a lot of assumptions as to where the type of atom
    // appears.  We should do a better job of enforcing this.


    return DomEnum[node.classes[0]] || null;
  };
  var makeNullDelimiter = function makeNullDelimiter(options, classes) {
    var moreClasses = ["nulldelimiter"].concat(options.baseSizingClasses());
    return makeSpan$1(classes.concat(moreClasses));
  };
  /**
   * buildGroup is the function that takes a group and calls the correct groupType
   * function for it. It also handles the interaction of size and style changes
   * between parents and children.
   */

  var buildGroup$1 = function buildGroup(group, options, baseOptions) {
    if (!group) {
      return makeSpan$1();
    }

    if (_htmlGroupBuilders[group.type]) {
      // Call the groupBuilders function
      // $FlowFixMe
      var groupNode = _htmlGroupBuilders[group.type](group, options); // If the size changed between the parent and the current group, account
      // for that size difference.

      if (baseOptions && options.size !== baseOptions.size) {
        groupNode = makeSpan$1(options.sizingClasses(baseOptions), [groupNode], options);
        var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier;
        groupNode.height *= multiplier;
        groupNode.depth *= multiplier;
      }

      return groupNode;
    } else {
      throw new ParseError("Got group of unknown type: '" + group.type + "'");
    }
  };
  /**
   * Combine an array of HTML DOM nodes (e.g., the output of `buildExpression`)
   * into an unbreakable HTML node of class .base, with proper struts to
   * guarantee correct vertical extent.  `buildHTML` calls this repeatedly to
   * make up the entire expression as a sequence of unbreakable units.
   */

  function buildHTMLUnbreakable(children, options) {
    // Compute height and depth of this chunk.
    var body = makeSpan$1(["base"], children, options); // Add strut, which ensures that the top of the HTML element falls at
    // the height of the expression, and the bottom of the HTML element
    // falls at the depth of the expression.

    var strut = makeSpan$1(["strut"]);
    strut.style.height = makeEm(body.height + body.depth);

    if (body.depth) {
      strut.style.verticalAlign = makeEm(-body.depth);
    }

    body.children.unshift(strut);
    return body;
  }
  /**
   * Take an entire parse tree, and build it into an appropriate set of HTML
   * nodes.
   */


  function buildHTML(tree, options) {
    // Strip off outer tag wrapper for processing below.
    var tag = null;

    if (tree.length === 1 && tree[0].type === "tag") {
      tag = tree[0].tag;
      tree = tree[0].body;
    } // Build the expression contained in the tree


    var expression = buildExpression$1(tree, options, "root");
    var eqnNum;

    if (expression.length === 2 && expression[1].hasClass("tag")) {
      // An environment with automatic equation numbers, e.g. {gather}.
      eqnNum = expression.pop();
    }

    var children = []; // Create one base node for each chunk between potential line breaks.
    // The TeXBook [p.173] says "A formula will be broken only after a
    // relation symbol like $=$ or $<$ or $\rightarrow$, or after a binary
    // operation symbol like $+$ or $-$ or $\times$, where the relation or
    // binary operation is on the ``outer level'' of the formula (i.e., not
    // enclosed in {...} and not part of an \over construction)."

    var parts = [];

    for (var i = 0; i < expression.length; i++) {
      parts.push(expression[i]);

      if (expression[i].hasClass("mbin") || expression[i].hasClass("mrel") || expression[i].hasClass("allowbreak")) {
        // Put any post-operator glue on same line as operator.
        // Watch for \nobreak along the way, and stop at \newline.
        var nobreak = false;

        while (i < expression.length - 1 && expression[i + 1].hasClass("mspace") && !expression[i + 1].hasClass("newline")) {
          i++;
          parts.push(expression[i]);

          if (expression[i].hasClass("nobreak")) {
            nobreak = true;
          }
        } // Don't allow break if \nobreak among the post-operator glue.


        if (!nobreak) {
          children.push(buildHTMLUnbreakable(parts, options));
          parts = [];
        }
      } else if (expression[i].hasClass("newline")) {
        // Write the line except the newline
        parts.pop();

        if (parts.length > 0) {
          children.push(buildHTMLUnbreakable(parts, options));
          parts = [];
        } // Put the newline at the top level


        children.push(expression[i]);
      }
    }

    if (parts.length > 0) {
      children.push(buildHTMLUnbreakable(parts, options));
    } // Now, if there was a tag, build it too and append it as a final child.


    var tagChild;

    if (tag) {
      tagChild = buildHTMLUnbreakable(buildExpression$1(tag, options, true));
      tagChild.classes = ["tag"];
      children.push(tagChild);
    } else if (eqnNum) {
      children.push(eqnNum);
    }

    var htmlNode = makeSpan$1(["katex-html"], children);
    htmlNode.setAttribute("aria-hidden", "true"); // Adjust the strut of the tag to be the maximum height of all children
    // (the height of the enclosing htmlNode) for proper vertical alignment.

    if (tagChild) {
      var strut = tagChild.children[0];
      strut.style.height = makeEm(htmlNode.height + htmlNode.depth);

      if (htmlNode.depth) {
        strut.style.verticalAlign = makeEm(-htmlNode.depth);
      }
    }

    return htmlNode;
  }

  /**
   * These objects store data about MathML nodes. This is the MathML equivalent
   * of the types in domTree.js. Since MathML handles its own rendering, and
   * since we're mainly using MathML to improve accessibility, we don't manage
   * any of the styling state that the plain DOM nodes do.
   *
   * The `toNode` and `toMarkup` functions work similarly to how they do in
   * domTree.js, creating namespaced DOM nodes and HTML text markup respectively.
   */
  function newDocumentFragment(children) {
    return new DocumentFragment(children);
  }
  /**
   * This node represents a general purpose MathML node of any type. The
   * constructor requires the type of node to create (for example, `"mo"` or
   * `"mspace"`, corresponding to `<mo>` and `<mspace>` tags).
   */

  class MathNode {
    constructor(type, children, classes) {
      this.type = undefined;
      this.attributes = undefined;
      this.children = undefined;
      this.classes = undefined;
      this.type = type;
      this.attributes = {};
      this.children = children || [];
      this.classes = classes || [];
    }
    /**
     * Sets an attribute on a MathML node. MathML depends on attributes to convey a
     * semantic content, so this is used heavily.
     */


    setAttribute(name, value) {
      this.attributes[name] = value;
    }
    /**
     * Gets an attribute on a MathML node.
     */


    getAttribute(name) {
      return this.attributes[name];
    }
    /**
     * Converts the math node into a MathML-namespaced DOM element.
     */


    toNode() {
      var node = document.createElementNS("http://www.w3.org/1998/Math/MathML", this.type);

      for (var attr in this.attributes) {
        if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
          node.setAttribute(attr, this.attributes[attr]);
        }
      }

      if (this.classes.length > 0) {
        node.className = createClass(this.classes);
      }

      for (var i = 0; i < this.children.length; i++) {
        // Combine multiple TextNodes into one TextNode, to prevent
        // screen readers from reading each as a separate word [#3995]
        if (this.children[i] instanceof TextNode && this.children[i + 1] instanceof TextNode) {
          var text = this.children[i].toText() + this.children[++i].toText();

          while (this.children[i + 1] instanceof TextNode) {
            text += this.children[++i].toText();
          }

          node.appendChild(new TextNode(text).toNode());
        } else {
          node.appendChild(this.children[i].toNode());
        }
      }

      return node;
    }
    /**
     * Converts the math node into an HTML markup string.
     */


    toMarkup() {
      var markup = "<" + this.type; // Add the attributes

      for (var attr in this.attributes) {
        if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
          markup += " " + attr + "=\"";
          markup += utils.escape(this.attributes[attr]);
          markup += "\"";
        }
      }

      if (this.classes.length > 0) {
        markup += " class =\"" + utils.escape(createClass(this.classes)) + "\"";
      }

      markup += ">";

      for (var i = 0; i < this.children.length; i++) {
        markup += this.children[i].toMarkup();
      }

      markup += "</" + this.type + ">";
      return markup;
    }
    /**
     * Converts the math node into a string, similar to innerText, but escaped.
     */


    toText() {
      return this.children.map(child => child.toText()).join("");
    }

  }
  /**
   * This node represents a piece of text.
   */

  class TextNode {
    constructor(text) {
      this.text = undefined;
      this.text = text;
    }
    /**
     * Converts the text node into a DOM text node.
     */


    toNode() {
      return document.createTextNode(this.text);
    }
    /**
     * Converts the text node into escaped HTML markup
     * (representing the text itself).
     */


    toMarkup() {
      return utils.escape(this.toText());
    }
    /**
     * Converts the text node into a string
     * (representing the text itself).
     */


    toText() {
      return this.text;
    }

  }
  /**
   * This node represents a space, but may render as <mspace.../> or as text,
   * depending on the width.
   */

  class SpaceNode {
    /**
     * Create a Space node with width given in CSS ems.
     */
    constructor(width) {
      this.width = undefined;
      this.character = undefined;
      this.width = width; // See https://www.w3.org/TR/2000/WD-MathML2-20000328/chapter6.html
      // for a table of space-like characters.  We use Unicode
      // representations instead of &LongNames; as it's not clear how to
      // make the latter via document.createTextNode.

      if (width >= 0.05555 && width <= 0.05556) {
        this.character = "\u200a"; // &VeryThinSpace;
      } else if (width >= 0.1666 && width <= 0.1667) {
        this.character = "\u2009"; // &ThinSpace;
      } else if (width >= 0.2222 && width <= 0.2223) {
        this.character = "\u2005"; // &MediumSpace;
      } else if (width >= 0.2777 && width <= 0.2778) {
        this.character = "\u2005\u200a"; // &ThickSpace;
      } else if (width >= -0.05556 && width <= -0.05555) {
        this.character = "\u200a\u2063"; // &NegativeVeryThinSpace;
      } else if (width >= -0.1667 && width <= -0.1666) {
        this.character = "\u2009\u2063"; // &NegativeThinSpace;
      } else if (width >= -0.2223 && width <= -0.2222) {
        this.character = "\u205f\u2063"; // &NegativeMediumSpace;
      } else if (width >= -0.2778 && width <= -0.2777) {
        this.character = "\u2005\u2063"; // &NegativeThickSpace;
      } else {
        this.character = null;
      }
    }
    /**
     * Converts the math node into a MathML-namespaced DOM element.
     */


    toNode() {
      if (this.character) {
        return document.createTextNode(this.character);
      } else {
        var node = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mspace");
        node.setAttribute("width", makeEm(this.width));
        return node;
      }
    }
    /**
     * Converts the math node into an HTML markup string.
     */


    toMarkup() {
      if (this.character) {
        return "<mtext>" + this.character + "</mtext>";
      } else {
        return "<mspace width=\"" + makeEm(this.width) + "\"/>";
      }
    }
    /**
     * Converts the math node into a string, similar to innerText.
     */


    toText() {
      if (this.character) {
        return this.character;
      } else {
        return " ";
      }
    }

  }

  var mathMLTree = {
    MathNode,
    TextNode,
    SpaceNode,
    newDocumentFragment
  };

  /**
   * This file converts a parse tree into a corresponding MathML tree. The main
   * entry point is the `buildMathML` function, which takes a parse tree from the
   * parser.
   */

  /**
   * Takes a symbol and converts it into a MathML text node after performing
   * optional replacement from symbols.js.
   */
  var makeText = function makeText(text, mode, options) {
    if (symbols[mode][text] && symbols[mode][text].replace && text.charCodeAt(0) !== 0xD835 && !(ligatures.hasOwnProperty(text) && options && (options.fontFamily && options.fontFamily.slice(4, 6) === "tt" || options.font && options.font.slice(4, 6) === "tt"))) {
      text = symbols[mode][text].replace;
    }

    return new mathMLTree.TextNode(text);
  };
  /**
   * Wrap the given array of nodes in an <mrow> node if needed, i.e.,
   * unless the array has length 1.  Always returns a single node.
   */

  var makeRow = function makeRow(body) {
    if (body.length === 1) {
      return body[0];
    } else {
      return new mathMLTree.MathNode("mrow", body);
    }
  };
  /**
   * Returns the math variant as a string or null if none is required.
   */

  var getVariant = function getVariant(group, options) {
    // Handle \text... font specifiers as best we can.
    // MathML has a limited list of allowable mathvariant specifiers; see
    // https://www.w3.org/TR/MathML3/chapter3.html#presm.commatt
    if (options.fontFamily === "texttt") {
      return "monospace";
    } else if (options.fontFamily === "textsf") {
      if (options.fontShape === "textit" && options.fontWeight === "textbf") {
        return "sans-serif-bold-italic";
      } else if (options.fontShape === "textit") {
        return "sans-serif-italic";
      } else if (options.fontWeight === "textbf") {
        return "bold-sans-serif";
      } else {
        return "sans-serif";
      }
    } else if (options.fontShape === "textit" && options.fontWeight === "textbf") {
      return "bold-italic";
    } else if (options.fontShape === "textit") {
      return "italic";
    } else if (options.fontWeight === "textbf") {
      return "bold";
    }

    var font = options.font;

    if (!font || font === "mathnormal") {
      return null;
    }

    var mode = group.mode;

    if (font === "mathit") {
      return "italic";
    } else if (font === "boldsymbol") {
      return group.type === "textord" ? "bold" : "bold-italic";
    } else if (font === "mathbf") {
      return "bold";
    } else if (font === "mathbb") {
      return "double-struck";
    } else if (font === "mathsfit") {
      return "sans-serif-italic";
    } else if (font === "mathfrak") {
      return "fraktur";
    } else if (font === "mathscr" || font === "mathcal") {
      // MathML makes no distinction between script and calligraphic
      return "script";
    } else if (font === "mathsf") {
      return "sans-serif";
    } else if (font === "mathtt") {
      return "monospace";
    }

    var text = group.text;

    if (utils.contains(["\\imath", "\\jmath"], text)) {
      return null;
    }

    if (symbols[mode][text] && symbols[mode][text].replace) {
      text = symbols[mode][text].replace;
    }

    var fontName = buildCommon.fontMap[font].fontName;

    if (getCharacterMetrics(text, fontName, mode)) {
      return buildCommon.fontMap[font].variant;
    }

    return null;
  };
  /**
   * Check for <mi>.</mi> which is how a dot renders in MathML,
   * or <mo separator="true" lspace="0em" rspace="0em">,</mo>
   * which is how a braced comma {,} renders in MathML
   */

  function isNumberPunctuation(group) {
    if (!group) {
      return false;
    }

    if (group.type === 'mi' && group.children.length === 1) {
      var child = group.children[0];
      return child instanceof TextNode && child.text === '.';
    } else if (group.type === 'mo' && group.children.length === 1 && group.getAttribute('separator') === 'true' && group.getAttribute('lspace') === '0em' && group.getAttribute('rspace') === '0em') {
      var _child = group.children[0];
      return _child instanceof TextNode && _child.text === ',';
    } else {
      return false;
    }
  }
  /**
   * Takes a list of nodes, builds them, and returns a list of the generated
   * MathML nodes.  Also combine consecutive <mtext> outputs into a single
   * <mtext> tag.
   */


  var buildExpression = function buildExpression(expression, options, isOrdgroup) {
    if (expression.length === 1) {
      var group = buildGroup(expression[0], options);

      if (isOrdgroup && group instanceof MathNode && group.type === "mo") {
        // When TeX writers want to suppress spacing on an operator,
        // they often put the operator by itself inside braces.
        group.setAttribute("lspace", "0em");
        group.setAttribute("rspace", "0em");
      }

      return [group];
    }

    var groups = [];
    var lastGroup;

    for (var i = 0; i < expression.length; i++) {
      var _group = buildGroup(expression[i], options);

      if (_group instanceof MathNode && lastGroup instanceof MathNode) {
        // Concatenate adjacent <mtext>s
        if (_group.type === 'mtext' && lastGroup.type === 'mtext' && _group.getAttribute('mathvariant') === lastGroup.getAttribute('mathvariant')) {
          lastGroup.children.push(..._group.children);
          continue; // Concatenate adjacent <mn>s
        } else if (_group.type === 'mn' && lastGroup.type === 'mn') {
          lastGroup.children.push(..._group.children);
          continue; // Concatenate <mn>...</mn> followed by <mi>.</mi>
        } else if (isNumberPunctuation(_group) && lastGroup.type === 'mn') {
          lastGroup.children.push(..._group.children);
          continue; // Concatenate <mi>.</mi> followed by <mn>...</mn>
        } else if (_group.type === 'mn' && isNumberPunctuation(lastGroup)) {
          _group.children = [...lastGroup.children, ..._group.children];
          groups.pop(); // Put preceding <mn>...</mn> or <mi>.</mi> inside base of
          // <msup><mn>...base...</mn>...exponent...</msup> (or <msub>)
        } else if ((_group.type === 'msup' || _group.type === 'msub') && _group.children.length >= 1 && (lastGroup.type === 'mn' || isNumberPunctuation(lastGroup))) {
          var base = _group.children[0];

          if (base instanceof MathNode && base.type === 'mn') {
            base.children = [...lastGroup.children, ...base.children];
            groups.pop();
          } // \not

        } else if (lastGroup.type === 'mi' && lastGroup.children.length === 1) {
          var lastChild = lastGroup.children[0];

          if (lastChild instanceof TextNode && lastChild.text === '\u0338' && (_group.type === 'mo' || _group.type === 'mi' || _group.type === 'mn')) {
            var child = _group.children[0];

            if (child instanceof TextNode && child.text.length > 0) {
              // Overlay with combining character long solidus
              child.text = child.text.slice(0, 1) + "\u0338" + child.text.slice(1);
              groups.pop();
            }
          }
        }
      }

      groups.push(_group);
      lastGroup = _group;
    }

    return groups;
  };
  /**
   * Equivalent to buildExpression, but wraps the elements in an <mrow>
   * if there's more than one.  Returns a single node instead of an array.
   */

  var buildExpressionRow = function buildExpressionRow(expression, options, isOrdgroup) {
    return makeRow(buildExpression(expression, options, isOrdgroup));
  };
  /**
   * Takes a group from the parser and calls the appropriate groupBuilders function
   * on it to produce a MathML node.
   */

  var buildGroup = function buildGroup(group, options) {
    if (!group) {
      return new mathMLTree.MathNode("mrow");
    }

    if (_mathmlGroupBuilders[group.type]) {
      // Call the groupBuilders function
      // $FlowFixMe
      var result = _mathmlGroupBuilders[group.type](group, options); // $FlowFixMe

      return result;
    } else {
      throw new ParseError("Got group of unknown type: '" + group.type + "'");
    }
  };
  /**
   * Takes a full parse tree and settings and builds a MathML representation of
   * it. In particular, we put the elements from building the parse tree into a
   * <semantics> tag so we can also include that TeX source as an annotation.
   *
   * Note that we actually return a domTree element with a `<math>` inside it so
   * we can do appropriate styling.
   */

  function buildMathML(tree, texExpression, options, isDisplayMode, forMathmlOnly) {
    var expression = buildExpression(tree, options); // TODO: Make a pass thru the MathML similar to buildHTML.traverseNonSpaceNodes
    // and add spacing nodes. This is necessary only adjacent to math operators
    // like \sin or \lim or to subsup elements that contain math operators.
    // MathML takes care of the other spacing issues.
    // Wrap up the expression in an mrow so it is presented in the semantics
    // tag correctly, unless it's a single <mrow> or <mtable>.

    var wrapper;

    if (expression.length === 1 && expression[0] instanceof MathNode && utils.contains(["mrow", "mtable"], expression[0].type)) {
      wrapper = expression[0];
    } else {
      wrapper = new mathMLTree.MathNode("mrow", expression);
    } // Build a TeX annotation of the source


    var annotation = new mathMLTree.MathNode("annotation", [new mathMLTree.TextNode(texExpression)]);
    annotation.setAttribute("encoding", "application/x-tex");
    var semantics = new mathMLTree.MathNode("semantics", [wrapper, annotation]);
    var math = new mathMLTree.MathNode("math", [semantics]);
    math.setAttribute("xmlns", "http://www.w3.org/1998/Math/MathML");

    if (isDisplayMode) {
      math.setAttribute("display", "block");
    } // You can't style <math> nodes, so we wrap the node in a span.
    // NOTE: The span class is not typed to have <math> nodes as children, and
    // we don't want to make the children type more generic since the children
    // of span are expected to have more fields in `buildHtml` contexts.


    var wrapperClass = forMathmlOnly ? "katex" : "katex-mathml"; // $FlowFixMe

    return buildCommon.makeSpan([wrapperClass], [math]);
  }

  var optionsFromSettings = function optionsFromSettings(settings) {
    return new Options({
      style: settings.displayMode ? Style$1.DISPLAY : Style$1.TEXT,
      maxSize: settings.maxSize,
      minRuleThickness: settings.minRuleThickness
    });
  };

  var displayWrap = function displayWrap(node, settings) {
    if (settings.displayMode) {
      var classes = ["katex-display"];

      if (settings.leqno) {
        classes.push("leqno");
      }

      if (settings.fleqn) {
        classes.push("fleqn");
      }

      node = buildCommon.makeSpan(classes, [node]);
    }

    return node;
  };

  var buildTree = function buildTree(tree, expression, settings) {
    var options = optionsFromSettings(settings);
    var katexNode;

    if (settings.output === "mathml") {
      return buildMathML(tree, expression, options, settings.displayMode, true);
    } else if (settings.output === "html") {
      var htmlNode = buildHTML(tree, options);
      katexNode = buildCommon.makeSpan(["katex"], [htmlNode]);
    } else {
      var mathMLNode = buildMathML(tree, expression, options, settings.displayMode, false);

      var _htmlNode = buildHTML(tree, options);

      katexNode = buildCommon.makeSpan(["katex"], [mathMLNode, _htmlNode]);
    }

    return displayWrap(katexNode, settings);
  };
  var buildHTMLTree = function buildHTMLTree(tree, expression, settings) {
    var options = optionsFromSettings(settings);
    var htmlNode = buildHTML(tree, options);
    var katexNode = buildCommon.makeSpan(["katex"], [htmlNode]);
    return displayWrap(katexNode, settings);
  };

  /**
   * This file provides support to buildMathML.js and buildHTML.js
   * for stretchy wide elements rendered from SVG files
   * and other CSS trickery.
   */
  var stretchyCodePoint = {
    widehat: "^",
    widecheck: "ˇ",
    widetilde: "~",
    utilde: "~",
    overleftarrow: "\u2190",
    underleftarrow: "\u2190",
    xleftarrow: "\u2190",
    overrightarrow: "\u2192",
    underrightarrow: "\u2192",
    xrightarrow: "\u2192",
    underbrace: "\u23df",
    overbrace: "\u23de",
    overgroup: "\u23e0",
    undergroup: "\u23e1",
    overleftrightarrow: "\u2194",
    underleftrightarrow: "\u2194",
    xleftrightarrow: "\u2194",
    Overrightarrow: "\u21d2",
    xRightarrow: "\u21d2",
    overleftharpoon: "\u21bc",
    xleftharpoonup: "\u21bc",
    overrightharpoon: "\u21c0",
    xrightharpoonup: "\u21c0",
    xLeftarrow: "\u21d0",
    xLeftrightarrow: "\u21d4",
    xhookleftarrow: "\u21a9",
    xhookrightarrow: "\u21aa",
    xmapsto: "\u21a6",
    xrightharpoondown: "\u21c1",
    xleftharpoondown: "\u21bd",
    xrightleftharpoons: "\u21cc",
    xleftrightharpoons: "\u21cb",
    xtwoheadleftarrow: "\u219e",
    xtwoheadrightarrow: "\u21a0",
    xlongequal: "=",
    xtofrom: "\u21c4",
    xrightleftarrows: "\u21c4",
    xrightequilibrium: "\u21cc",
    // Not a perfect match.
    xleftequilibrium: "\u21cb",
    // None better available.
    "\\cdrightarrow": "\u2192",
    "\\cdleftarrow": "\u2190",
    "\\cdlongequal": "="
  };

  var mathMLnode = function mathMLnode(label) {
    var node = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(stretchyCodePoint[label.replace(/^\\/, '')])]);
    node.setAttribute("stretchy", "true");
    return node;
  }; // Many of the KaTeX SVG images have been adapted from glyphs in KaTeX fonts.
  // Copyright (c) 2009-2010, Design Science, Inc. (<www.mathjax.org>)
  // Copyright (c) 2014-2017 Khan Academy (<www.khanacademy.org>)
  // Licensed under the SIL Open Font License, Version 1.1.
  // See \nhttp://scripts.sil.org/OFL
  // Very Long SVGs
  //    Many of the KaTeX stretchy wide elements use a long SVG image and an
  //    overflow: hidden tactic to achieve a stretchy image while avoiding
  //    distortion of arrowheads or brace corners.
  //    The SVG typically contains a very long (400 em) arrow.
  //    The SVG is in a container span that has overflow: hidden, so the span
  //    acts like a window that exposes only part of the  SVG.
  //    The SVG always has a longer, thinner aspect ratio than the container span.
  //    After the SVG fills 100% of the height of the container span,
  //    there is a long arrow shaft left over. That left-over shaft is not shown.
  //    Instead, it is sliced off because the span's CSS has overflow: hidden.
  //    Thus, the reader sees an arrow that matches the subject matter width
  //    without distortion.
  //    Some functions, such as \cancel, need to vary their aspect ratio. These
  //    functions do not get the overflow SVG treatment.
  // Second Brush Stroke
  //    Low resolution monitors struggle to display images in fine detail.
  //    So browsers apply anti-aliasing. A long straight arrow shaft therefore
  //    will sometimes appear as if it has a blurred edge.
  //    To mitigate this, these SVG files contain a second "brush-stroke" on the
  //    arrow shafts. That is, a second long thin rectangular SVG path has been
  //    written directly on top of each arrow shaft. This reinforcement causes
  //    some of the screen pixels to display as black instead of the anti-aliased
  //    gray pixel that a  single path would generate. So we get arrow shafts
  //    whose edges appear to be sharper.
  // In the katexImagesData object just below, the dimensions all
  // correspond to path geometry inside the relevant SVG.
  // For example, \overrightarrow uses the same arrowhead as glyph U+2192
  // from the KaTeX Main font. The scaling factor is 1000.
  // That is, inside the font, that arrowhead is 522 units tall, which
  // corresponds to 0.522 em inside the document.


  var katexImagesData = {
    //   path(s), minWidth, height, align
    overrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
    overleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
    underrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
    underleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
    xrightarrow: [["rightarrow"], 1.469, 522, "xMaxYMin"],
    "\\cdrightarrow": [["rightarrow"], 3.0, 522, "xMaxYMin"],
    // CD minwwidth2.5pc
    xleftarrow: [["leftarrow"], 1.469, 522, "xMinYMin"],
    "\\cdleftarrow": [["leftarrow"], 3.0, 522, "xMinYMin"],
    Overrightarrow: [["doublerightarrow"], 0.888, 560, "xMaxYMin"],
    xRightarrow: [["doublerightarrow"], 1.526, 560, "xMaxYMin"],
    xLeftarrow: [["doubleleftarrow"], 1.526, 560, "xMinYMin"],
    overleftharpoon: [["leftharpoon"], 0.888, 522, "xMinYMin"],
    xleftharpoonup: [["leftharpoon"], 0.888, 522, "xMinYMin"],
    xleftharpoondown: [["leftharpoondown"], 0.888, 522, "xMinYMin"],
    overrightharpoon: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
    xrightharpoonup: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
    xrightharpoondown: [["rightharpoondown"], 0.888, 522, "xMaxYMin"],
    xlongequal: [["longequal"], 0.888, 334, "xMinYMin"],
    "\\cdlongequal": [["longequal"], 3.0, 334, "xMinYMin"],
    xtwoheadleftarrow: [["twoheadleftarrow"], 0.888, 334, "xMinYMin"],
    xtwoheadrightarrow: [["twoheadrightarrow"], 0.888, 334, "xMaxYMin"],
    overleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
    overbrace: [["leftbrace", "midbrace", "rightbrace"], 1.6, 548],
    underbrace: [["leftbraceunder", "midbraceunder", "rightbraceunder"], 1.6, 548],
    underleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
    xleftrightarrow: [["leftarrow", "rightarrow"], 1.75, 522],
    xLeftrightarrow: [["doubleleftarrow", "doublerightarrow"], 1.75, 560],
    xrightleftharpoons: [["leftharpoondownplus", "rightharpoonplus"], 1.75, 716],
    xleftrightharpoons: [["leftharpoonplus", "rightharpoondownplus"], 1.75, 716],
    xhookleftarrow: [["leftarrow", "righthook"], 1.08, 522],
    xhookrightarrow: [["lefthook", "rightarrow"], 1.08, 522],
    overlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
    underlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
    overgroup: [["leftgroup", "rightgroup"], 0.888, 342],
    undergroup: [["leftgroupunder", "rightgroupunder"], 0.888, 342],
    xmapsto: [["leftmapsto", "rightarrow"], 1.5, 522],
    xtofrom: [["leftToFrom", "rightToFrom"], 1.75, 528],
    // The next three arrows are from the mhchem package.
    // In mhchem.sty, min-length is 2.0em. But these arrows might appear in the
    // document as \xrightarrow or \xrightleftharpoons. Those have
    // min-length = 1.75em, so we set min-length on these next three to match.
    xrightleftarrows: [["baraboveleftarrow", "rightarrowabovebar"], 1.75, 901],
    xrightequilibrium: [["baraboveshortleftharpoon", "rightharpoonaboveshortbar"], 1.75, 716],
    xleftequilibrium: [["shortbaraboveleftharpoon", "shortrightharpoonabovebar"], 1.75, 716]
  };

  var groupLength = function groupLength(arg) {
    if (arg.type === "ordgroup") {
      return arg.body.length;
    } else {
      return 1;
    }
  };

  var svgSpan = function svgSpan(group, options) {
    // Create a span with inline SVG for the element.
    function buildSvgSpan_() {
      var viewBoxWidth = 400000; // default

      var label = group.label.slice(1);

      if (utils.contains(["widehat", "widecheck", "widetilde", "utilde"], label)) {
        // Each type in the `if` statement corresponds to one of the ParseNode
        // types below. This narrowing is required to access `grp.base`.
        // $FlowFixMe
        var grp = group; // There are four SVG images available for each function.
        // Choose a taller image when there are more characters.

        var numChars = groupLength(grp.base);
        var viewBoxHeight;
        var pathName;

        var _height;

        if (numChars > 5) {
          if (label === "widehat" || label === "widecheck") {
            viewBoxHeight = 420;
            viewBoxWidth = 2364;
            _height = 0.42;
            pathName = label + "4";
          } else {
            viewBoxHeight = 312;
            viewBoxWidth = 2340;
            _height = 0.34;
            pathName = "tilde4";
          }
        } else {
          var imgIndex = [1, 1, 2, 2, 3, 3][numChars];

          if (label === "widehat" || label === "widecheck") {
            viewBoxWidth = [0, 1062, 2364, 2364, 2364][imgIndex];
            viewBoxHeight = [0, 239, 300, 360, 420][imgIndex];
            _height = [0, 0.24, 0.3, 0.3, 0.36, 0.42][imgIndex];
            pathName = label + imgIndex;
          } else {
            viewBoxWidth = [0, 600, 1033, 2339, 2340][imgIndex];
            viewBoxHeight = [0, 260, 286, 306, 312][imgIndex];
            _height = [0, 0.26, 0.286, 0.3, 0.306, 0.34][imgIndex];
            pathName = "tilde" + imgIndex;
          }
        }

        var path = new PathNode(pathName);
        var svgNode = new SvgNode([path], {
          "width": "100%",
          "height": makeEm(_height),
          "viewBox": "0 0 " + viewBoxWidth + " " + viewBoxHeight,
          "preserveAspectRatio": "none"
        });
        return {
          span: buildCommon.makeSvgSpan([], [svgNode], options),
          minWidth: 0,
          height: _height
        };
      } else {
        var spans = [];
        var data = katexImagesData[label];
        var [paths, _minWidth, _viewBoxHeight] = data;

        var _height2 = _viewBoxHeight / 1000;

        var numSvgChildren = paths.length;
        var widthClasses;
        var aligns;

        if (numSvgChildren === 1) {
          // $FlowFixMe: All these cases must be of the 4-tuple type.
          var align1 = data[3];
          widthClasses = ["hide-tail"];
          aligns = [align1];
        } else if (numSvgChildren === 2) {
          widthClasses = ["halfarrow-left", "halfarrow-right"];
          aligns = ["xMinYMin", "xMaxYMin"];
        } else if (numSvgChildren === 3) {
          widthClasses = ["brace-left", "brace-center", "brace-right"];
          aligns = ["xMinYMin", "xMidYMin", "xMaxYMin"];
        } else {
          throw new Error("Correct katexImagesData or update code here to support\n                    " + numSvgChildren + " children.");
        }

        for (var i = 0; i < numSvgChildren; i++) {
          var _path = new PathNode(paths[i]);

          var _svgNode = new SvgNode([_path], {
            "width": "400em",
            "height": makeEm(_height2),
            "viewBox": "0 0 " + viewBoxWidth + " " + _viewBoxHeight,
            "preserveAspectRatio": aligns[i] + " slice"
          });

          var _span = buildCommon.makeSvgSpan([widthClasses[i]], [_svgNode], options);

          if (numSvgChildren === 1) {
            return {
              span: _span,
              minWidth: _minWidth,
              height: _height2
            };
          } else {
            _span.style.height = makeEm(_height2);
            spans.push(_span);
          }
        }

        return {
          span: buildCommon.makeSpan(["stretchy"], spans, options),
          minWidth: _minWidth,
          height: _height2
        };
      }
    } // buildSvgSpan_()


    var {
      span,
      minWidth,
      height
    } = buildSvgSpan_(); // Note that we are returning span.depth = 0.
    // Any adjustments relative to the baseline must be done in buildHTML.

    span.height = height;
    span.style.height = makeEm(height);

    if (minWidth > 0) {
      span.style.minWidth = makeEm(minWidth);
    }

    return span;
  };

  var encloseSpan = function encloseSpan(inner, label, topPad, bottomPad, options) {
    // Return an image span for \cancel, \bcancel, \xcancel, \fbox, or \angl
    var img;
    var totalHeight = inner.height + inner.depth + topPad + bottomPad;

    if (/fbox|color|angl/.test(label)) {
      img = buildCommon.makeSpan(["stretchy", label], [], options);

      if (label === "fbox") {
        var color = options.color && options.getColor();

        if (color) {
          img.style.borderColor = color;
        }
      }
    } else {
      // \cancel, \bcancel, or \xcancel
      // Since \cancel's SVG is inline and it omits the viewBox attribute,
      // its stroke-width will not vary with span area.
      var lines = [];

      if (/^[bx]cancel$/.test(label)) {
        lines.push(new LineNode({
          "x1": "0",
          "y1": "0",
          "x2": "100%",
          "y2": "100%",
          "stroke-width": "0.046em"
        }));
      }

      if (/^x?cancel$/.test(label)) {
        lines.push(new LineNode({
          "x1": "0",
          "y1": "100%",
          "x2": "100%",
          "y2": "0",
          "stroke-width": "0.046em"
        }));
      }

      var svgNode = new SvgNode(lines, {
        "width": "100%",
        "height": makeEm(totalHeight)
      });
      img = buildCommon.makeSvgSpan([], [svgNode], options);
    }

    img.height = totalHeight;
    img.style.height = makeEm(totalHeight);
    return img;
  };

  var stretchy = {
    encloseSpan,
    mathMLnode,
    svgSpan
  };

  /**
   * Asserts that the node is of the given type and returns it with stricter
   * typing. Throws if the node's type does not match.
   */
  function assertNodeType(node, type) {
    if (!node || node.type !== type) {
      throw new Error("Expected node of type " + type + ", but got " + (node ? "node of type " + node.type : String(node)));
    } // $FlowFixMe, >=0.125


    return node;
  }
  /**
   * Returns the node more strictly typed iff it is of the given type. Otherwise,
   * returns null.
   */

  function assertSymbolNodeType(node) {
    var typedNode = checkSymbolNodeType(node);

    if (!typedNode) {
      throw new Error("Expected node of symbol group type, but got " + (node ? "node of type " + node.type : String(node)));
    }

    return typedNode;
  }
  /**
   * Returns the node more strictly typed iff it is of the given type. Otherwise,
   * returns null.
   */

  function checkSymbolNodeType(node) {
    if (node && (node.type === "atom" || NON_ATOMS.hasOwnProperty(node.type))) {
      // $FlowFixMe
      return node;
    }

    return null;
  }

  // NOTE: Unlike most `htmlBuilder`s, this one handles not only "accent", but
  // also "supsub" since an accent can affect super/subscripting.
  var htmlBuilder$a = (grp, options) => {
    // Accents are handled in the TeXbook pg. 443, rule 12.
    var base;
    var group;
    var supSubGroup;

    if (grp && grp.type === "supsub") {
      // If our base is a character box, and we have superscripts and
      // subscripts, the supsub will defer to us. In particular, we want
      // to attach the superscripts and subscripts to the inner body (so
      // that the position of the superscripts and subscripts won't be
      // affected by the height of the accent). We accomplish this by
      // sticking the base of the accent into the base of the supsub, and
      // rendering that, while keeping track of where the accent is.
      // The real accent group is the base of the supsub group
      group = assertNodeType(grp.base, "accent"); // The character box is the base of the accent group

      base = group.base; // Stick the character box into the base of the supsub group

      grp.base = base; // Rerender the supsub group with its new base, and store that
      // result.

      supSubGroup = assertSpan(buildGroup$1(grp, options)); // reset original base

      grp.base = group;
    } else {
      group = assertNodeType(grp, "accent");
      base = group.base;
    } // Build the base group


    var body = buildGroup$1(base, options.havingCrampedStyle()); // Does the accent need to shift for the skew of a character?

    var mustShift = group.isShifty && utils.isCharacterBox(base); // Calculate the skew of the accent. This is based on the line "If the
    // nucleus is not a single character, let s = 0; otherwise set s to the
    // kern amount for the nucleus followed by the \skewchar of its font."
    // Note that our skew metrics are just the kern between each character
    // and the skewchar.

    var skew = 0;

    if (mustShift) {
      // If the base is a character box, then we want the skew of the
      // innermost character. To do that, we find the innermost character:
      var baseChar = utils.getBaseElem(base); // Then, we render its group to get the symbol inside it

      var baseGroup = buildGroup$1(baseChar, options.havingCrampedStyle()); // Finally, we pull the skew off of the symbol.

      skew = assertSymbolDomNode(baseGroup).skew; // Note that we now throw away baseGroup, because the layers we
      // removed with getBaseElem might contain things like \color which
      // we can't get rid of.
      // TODO(emily): Find a better way to get the skew
    }

    var accentBelow = group.label === "\\c"; // calculate the amount of space between the body and the accent

    var clearance = accentBelow ? body.height + body.depth : Math.min(body.height, options.fontMetrics().xHeight); // Build the accent

    var accentBody;

    if (!group.isStretchy) {
      var accent;
      var width;

      if (group.label === "\\vec") {
        // Before version 0.9, \vec used the combining font glyph U+20D7.
        // But browsers, especially Safari, are not consistent in how they
        // render combining characters when not preceded by a character.
        // So now we use an SVG.
        // If Safari reforms, we should consider reverting to the glyph.
        accent = buildCommon.staticSvg("vec", options);
        width = buildCommon.svgData.vec[1];
      } else {
        accent = buildCommon.makeOrd({
          mode: group.mode,
          text: group.label
        }, options, "textord");
        accent = assertSymbolDomNode(accent); // Remove the italic correction of the accent, because it only serves to
        // shift the accent over to a place we don't want.

        accent.italic = 0;
        width = accent.width;

        if (accentBelow) {
          clearance += accent.depth;
        }
      }

      accentBody = buildCommon.makeSpan(["accent-body"], [accent]); // "Full" accents expand the width of the resulting symbol to be
      // at least the width of the accent, and overlap directly onto the
      // character without any vertical offset.

      var accentFull = group.label === "\\textcircled";

      if (accentFull) {
        accentBody.classes.push('accent-full');
        clearance = body.height;
      } // Shift the accent over by the skew.


      var left = skew; // CSS defines `.katex .accent .accent-body:not(.accent-full) { width: 0 }`
      // so that the accent doesn't contribute to the bounding box.
      // We need to shift the character by its width (effectively half
      // its width) to compensate.

      if (!accentFull) {
        left -= width / 2;
      }

      accentBody.style.left = makeEm(left); // \textcircled uses the \bigcirc glyph, so it needs some
      // vertical adjustment to match LaTeX.

      if (group.label === "\\textcircled") {
        accentBody.style.top = ".2em";
      }

      accentBody = buildCommon.makeVList({
        positionType: "firstBaseline",
        children: [{
          type: "elem",
          elem: body
        }, {
          type: "kern",
          size: -clearance
        }, {
          type: "elem",
          elem: accentBody
        }]
      }, options);
    } else {
      accentBody = stretchy.svgSpan(group, options);
      accentBody = buildCommon.makeVList({
        positionType: "firstBaseline",
        children: [{
          type: "elem",
          elem: body
        }, {
          type: "elem",
          elem: accentBody,
          wrapperClasses: ["svg-align"],
          wrapperStyle: skew > 0 ? {
            width: "calc(100% - " + makeEm(2 * skew) + ")",
            marginLeft: makeEm(2 * skew)
          } : undefined
        }]
      }, options);
    }

    var accentWrap = buildCommon.makeSpan(["mord", "accent"], [accentBody], options);

    if (supSubGroup) {
      // Here, we replace the "base" child of the supsub with our newly
      // generated accent.
      supSubGroup.children[0] = accentWrap; // Since we don't rerun the height calculation after replacing the
      // accent, we manually recalculate height.

      supSubGroup.height = Math.max(accentWrap.height, supSubGroup.height); // Accents should always be ords, even when their innards are not.

      supSubGroup.classes[0] = "mord";
      return supSubGroup;
    } else {
      return accentWrap;
    }
  };

  var mathmlBuilder$9 = (group, options) => {
    var accentNode = group.isStretchy ? stretchy.mathMLnode(group.label) : new mathMLTree.MathNode("mo", [makeText(group.label, group.mode)]);
    var node = new mathMLTree.MathNode("mover", [buildGroup(group.base, options), accentNode]);
    node.setAttribute("accent", "true");
    return node;
  };

  var NON_STRETCHY_ACCENT_REGEX = new RegExp(["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring"].map(accent => "\\" + accent).join("|")); // Accents

  defineFunction({
    type: "accent",
    names: ["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring", "\\widecheck", "\\widehat", "\\widetilde", "\\overrightarrow", "\\overleftarrow", "\\Overrightarrow", "\\overleftrightarrow", "\\overgroup", "\\overlinesegment", "\\overleftharpoon", "\\overrightharpoon"],
    props: {
      numArgs: 1
    },
    handler: (context, args) => {
      var base = normalizeArgument(args[0]);
      var isStretchy = !NON_STRETCHY_ACCENT_REGEX.test(context.funcName);
      var isShifty = !isStretchy || context.funcName === "\\widehat" || context.funcName === "\\widetilde" || context.funcName === "\\widecheck";
      return {
        type: "accent",
        mode: context.parser.mode,
        label: context.funcName,
        isStretchy: isStretchy,
        isShifty: isShifty,
        base: base
      };
    },
    htmlBuilder: htmlBuilder$a,
    mathmlBuilder: mathmlBuilder$9
  }); // Text-mode accents

  defineFunction({
    type: "accent",
    names: ["\\'", "\\`", "\\^", "\\~", "\\=", "\\u", "\\.", '\\"', "\\c", "\\r", "\\H", "\\v", "\\textcircled"],
    props: {
      numArgs: 1,
      allowedInText: true,
      allowedInMath: true,
      // unless in strict mode
      argTypes: ["primitive"]
    },
    handler: (context, args) => {
      var base = args[0];
      var mode = context.parser.mode;

      if (mode === "math") {
        context.parser.settings.reportNonstrict("mathVsTextAccents", "LaTeX's accent " + context.funcName + " works only in text mode");
        mode = "text";
      }

      return {
        type: "accent",
        mode: mode,
        label: context.funcName,
        isStretchy: false,
        isShifty: true,
        base: base
      };
    },
    htmlBuilder: htmlBuilder$a,
    mathmlBuilder: mathmlBuilder$9
  });

  // Horizontal overlap functions
  defineFunction({
    type: "accentUnder",
    names: ["\\underleftarrow", "\\underrightarrow", "\\underleftrightarrow", "\\undergroup", "\\underlinesegment", "\\utilde"],
    props: {
      numArgs: 1
    },
    handler: (_ref, args) => {
      var {
        parser,
        funcName
      } = _ref;
      var base = args[0];
      return {
        type: "accentUnder",
        mode: parser.mode,
        label: funcName,
        base: base
      };
    },
    htmlBuilder: (group, options) => {
      // Treat under accents much like underlines.
      var innerGroup = buildGroup$1(group.base, options);
      var accentBody = stretchy.svgSpan(group, options);
      var kern = group.label === "\\utilde" ? 0.12 : 0; // Generate the vlist, with the appropriate kerns

      var vlist = buildCommon.makeVList({
        positionType: "top",
        positionData: innerGroup.height,
        children: [{
          type: "elem",
          elem: accentBody,
          wrapperClasses: ["svg-align"]
        }, {
          type: "kern",
          size: kern
        }, {
          type: "elem",
          elem: innerGroup
        }]
      }, options);
      return buildCommon.makeSpan(["mord", "accentunder"], [vlist], options);
    },
    mathmlBuilder: (group, options) => {
      var accentNode = stretchy.mathMLnode(group.label);
      var node = new mathMLTree.MathNode("munder", [buildGroup(group.base, options), accentNode]);
      node.setAttribute("accentunder", "true");
      return node;
    }
  });

  // Helper function
  var paddedNode = group => {
    var node = new mathMLTree.MathNode("mpadded", group ? [group] : []);
    node.setAttribute("width", "+0.6em");
    node.setAttribute("lspace", "0.3em");
    return node;
  }; // Stretchy arrows with an optional argument


  defineFunction({
    type: "xArrow",
    names: ["\\xleftarrow", "\\xrightarrow", "\\xLeftarrow", "\\xRightarrow", "\\xleftrightarrow", "\\xLeftrightarrow", "\\xhookleftarrow", "\\xhookrightarrow", "\\xmapsto", "\\xrightharpoondown", "\\xrightharpoonup", "\\xleftharpoondown", "\\xleftharpoonup", "\\xrightleftharpoons", "\\xleftrightharpoons", "\\xlongequal", "\\xtwoheadrightarrow", "\\xtwoheadleftarrow", "\\xtofrom", // The next 3 functions are here to support the mhchem extension.
    // Direct use of these functions is discouraged and may break someday.
    "\\xrightleftarrows", "\\xrightequilibrium", "\\xleftequilibrium", // The next 3 functions are here only to support the {CD} environment.
    "\\\\cdrightarrow", "\\\\cdleftarrow", "\\\\cdlongequal"],
    props: {
      numArgs: 1,
      numOptionalArgs: 1
    },

    handler(_ref, args, optArgs) {
      var {
        parser,
        funcName
      } = _ref;
      return {
        type: "xArrow",
        mode: parser.mode,
        label: funcName,
        body: args[0],
        below: optArgs[0]
      };
    },

    // Flow is unable to correctly infer the type of `group`, even though it's
    // unambiguously determined from the passed-in `type` above.
    htmlBuilder(group, options) {
      var style = options.style; // Build the argument groups in the appropriate style.
      // Ref: amsmath.dtx:   \hbox{$\scriptstyle\mkern#3mu{#6}\mkern#4mu$}%
      // Some groups can return document fragments.  Handle those by wrapping
      // them in a span.

      var newOptions = options.havingStyle(style.sup());
      var upperGroup = buildCommon.wrapFragment(buildGroup$1(group.body, newOptions, options), options);
      var arrowPrefix = group.label.slice(0, 2) === "\\x" ? "x" : "cd";
      upperGroup.classes.push(arrowPrefix + "-arrow-pad");
      var lowerGroup;

      if (group.below) {
        // Build the lower group
        newOptions = options.havingStyle(style.sub());
        lowerGroup = buildCommon.wrapFragment(buildGroup$1(group.below, newOptions, options), options);
        lowerGroup.classes.push(arrowPrefix + "-arrow-pad");
      }

      var arrowBody = stretchy.svgSpan(group, options); // Re shift: Note that stretchy.svgSpan returned arrowBody.depth = 0.
      // The point we want on the math axis is at 0.5 * arrowBody.height.

      var arrowShift = -options.fontMetrics().axisHeight + 0.5 * arrowBody.height; // 2 mu kern. Ref: amsmath.dtx: #7\if0#2\else\mkern#2mu\fi

      var upperShift = -options.fontMetrics().axisHeight - 0.5 * arrowBody.height - 0.111; // 0.111 em = 2 mu

      if (upperGroup.depth > 0.25 || group.label === "\\xleftequilibrium") {
        upperShift -= upperGroup.depth; // shift up if depth encroaches
      } // Generate the vlist


      var vlist;

      if (lowerGroup) {
        var lowerShift = -options.fontMetrics().axisHeight + lowerGroup.height + 0.5 * arrowBody.height + 0.111;
        vlist = buildCommon.makeVList({
          positionType: "individualShift",
          children: [{
            type: "elem",
            elem: upperGroup,
            shift: upperShift
          }, {
            type: "elem",
            elem: arrowBody,
            shift: arrowShift
          }, {
            type: "elem",
            elem: lowerGroup,
            shift: lowerShift
          }]
        }, options);
      } else {
        vlist = buildCommon.makeVList({
          positionType: "individualShift",
          children: [{
            type: "elem",
            elem: upperGroup,
            shift: upperShift
          }, {
            type: "elem",
            elem: arrowBody,
            shift: arrowShift
          }]
        }, options);
      } // $FlowFixMe: Replace this with passing "svg-align" into makeVList.


      vlist.children[0].children[0].children[1].classes.push("svg-align");
      return buildCommon.makeSpan(["mrel", "x-arrow"], [vlist], options);
    },

    mathmlBuilder(group, options) {
      var arrowNode = stretchy.mathMLnode(group.label);
      arrowNode.setAttribute("minsize", group.label.charAt(0) === "x" ? "1.75em" : "3.0em");
      var node;

      if (group.body) {
        var upperNode = paddedNode(buildGroup(group.body, options));

        if (group.below) {
          var lowerNode = paddedNode(buildGroup(group.below, options));
          node = new mathMLTree.MathNode("munderover", [arrowNode, lowerNode, upperNode]);
        } else {
          node = new mathMLTree.MathNode("mover", [arrowNode, upperNode]);
        }
      } else if (group.below) {
        var _lowerNode = paddedNode(buildGroup(group.below, options));

        node = new mathMLTree.MathNode("munder", [arrowNode, _lowerNode]);
      } else {
        // This should never happen.
        // Parser.js throws an error if there is no argument.
        node = paddedNode();
        node = new mathMLTree.MathNode("mover", [arrowNode, node]);
      }

      return node;
    }

  });

  var makeSpan = buildCommon.makeSpan;

  function htmlBuilder$9(group, options) {
    var elements = buildExpression$1(group.body, options, true);
    return makeSpan([group.mclass], elements, options);
  }

  function mathmlBuilder$8(group, options) {
    var node;
    var inner = buildExpression(group.body, options);

    if (group.mclass === "minner") {
      node = new mathMLTree.MathNode("mpadded", inner);
    } else if (group.mclass === "mord") {
      if (group.isCharacterBox) {
        node = inner[0];
        node.type = "mi";
      } else {
        node = new mathMLTree.MathNode("mi", inner);
      }
    } else {
      if (group.isCharacterBox) {
        node = inner[0];
        node.type = "mo";
      } else {
        node = new mathMLTree.MathNode("mo", inner);
      } // Set spacing based on what is the most likely adjacent atom type.
      // See TeXbook p170.


      if (group.mclass === "mbin") {
        node.attributes.lspace = "0.22em"; // medium space

        node.attributes.rspace = "0.22em";
      } else if (group.mclass === "mpunct") {
        node.attributes.lspace = "0em";
        node.attributes.rspace = "0.17em"; // thinspace
      } else if (group.mclass === "mopen" || group.mclass === "mclose") {
        node.attributes.lspace = "0em";
        node.attributes.rspace = "0em";
      } else if (group.mclass === "minner") {
        node.attributes.lspace = "0.0556em"; // 1 mu is the most likely option

        node.attributes.width = "+0.1111em";
      } // MathML <mo> default space is 5/18 em, so <mrel> needs no action.
      // Ref: https://developer.mozilla.org/en-US/docs/Web/MathML/Element/mo

    }

    return node;
  } // Math class commands except \mathop


  defineFunction({
    type: "mclass",
    names: ["\\mathord", "\\mathbin", "\\mathrel", "\\mathopen", "\\mathclose", "\\mathpunct", "\\mathinner"],
    props: {
      numArgs: 1,
      primitive: true
    },

    handler(_ref, args) {
      var {
        parser,
        funcName
      } = _ref;
      var body = args[0];
      return {
        type: "mclass",
        mode: parser.mode,
        mclass: "m" + funcName.slice(5),
        // TODO(kevinb): don't prefix with 'm'
        body: ordargument(body),
        isCharacterBox: utils.isCharacterBox(body)
      };
    },

    htmlBuilder: htmlBuilder$9,
    mathmlBuilder: mathmlBuilder$8
  });
  var binrelClass = arg => {
    // \binrel@ spacing varies with (bin|rel|ord) of the atom in the argument.
    // (by rendering separately and with {}s before and after, and measuring
    // the change in spacing).  We'll do roughly the same by detecting the
    // atom type directly.
    var atom = arg.type === "ordgroup" && arg.body.length ? arg.body[0] : arg;

    if (atom.type === "atom" && (atom.family === "bin" || atom.family === "rel")) {
      return "m" + atom.family;
    } else {
      return "mord";
    }
  }; // \@binrel{x}{y} renders like y but as mbin/mrel/mord if x is mbin/mrel/mord.
  // This is equivalent to \binrel@{x}\binrel@@{y} in AMSTeX.

  defineFunction({
    type: "mclass",
    names: ["\\@binrel"],
    props: {
      numArgs: 2
    },

    handler(_ref2, args) {
      var {
        parser
      } = _ref2;
      return {
        type: "mclass",
        mode: parser.mode,
        mclass: binrelClass(args[0]),
        body: ordargument(args[1]),
        isCharacterBox: utils.isCharacterBox(args[1])
      };
    }

  }); // Build a relation or stacked op by placing one symbol on top of another

  defineFunction({
    type: "mclass",
    names: ["\\stackrel", "\\overset", "\\underset"],
    props: {
      numArgs: 2
    },

    handler(_ref3, args) {
      var {
        parser,
        funcName
      } = _ref3;
      var baseArg = args[1];
      var shiftedArg = args[0];
      var mclass;

      if (funcName !== "\\stackrel") {
        // LaTeX applies \binrel spacing to \overset and \underset.
        mclass = binrelClass(baseArg);
      } else {
        mclass = "mrel"; // for \stackrel
      }

      var baseOp = {
        type: "op",
        mode: baseArg.mode,
        limits: true,
        alwaysHandleSupSub: true,
        parentIsSupSub: false,
        symbol: false,
        suppressBaseShift: funcName !== "\\stackrel",
        body: ordargument(baseArg)
      };
      var supsub = {
        type: "supsub",
        mode: shiftedArg.mode,
        base: baseOp,
        sup: funcName === "\\underset" ? null : shiftedArg,
        sub: funcName === "\\underset" ? shiftedArg : null
      };
      return {
        type: "mclass",
        mode: parser.mode,
        mclass,
        body: [supsub],
        isCharacterBox: utils.isCharacterBox(supsub)
      };
    },

    htmlBuilder: htmlBuilder$9,
    mathmlBuilder: mathmlBuilder$8
  });

  // \pmb is a simulation of bold font.
  // The version of \pmb in ambsy.sty works by typesetting three copies
  // with small offsets. We use CSS text-shadow.
  // It's a hack. Not as good as a real bold font. Better than nothing.
  defineFunction({
    type: "pmb",
    names: ["\\pmb"],
    props: {
      numArgs: 1,
      allowedInText: true
    },

    handler(_ref, args) {
      var {
        parser
      } = _ref;
      return {
        type: "pmb",
        mode: parser.mode,
        mclass: binrelClass(args[0]),
        body: ordargument(args[0])
      };
    },

    htmlBuilder(group, options) {
      var elements = buildExpression$1(group.body, options, true);
      var node = buildCommon.makeSpan([group.mclass], elements, options);
      node.style.textShadow = "0.02em 0.01em 0.04px";
      return node;
    },

    mathmlBuilder(group, style) {
      var inner = buildExpression(group.body, style); // Wrap with an <mstyle> element.

      var node = new mathMLTree.MathNode("mstyle", inner);
      node.setAttribute("style", "text-shadow: 0.02em 0.01em 0.04px");
      return node;
    }

  });

  var cdArrowFunctionName = {
    ">": "\\\\cdrightarrow",
    "<": "\\\\cdleftarrow",
    "=": "\\\\cdlongequal",
    "A": "\\uparrow",
    "V": "\\downarrow",
    "|": "\\Vert",
    ".": "no arrow"
  };

  var newCell = () => {
    // Create an empty cell, to be filled below with parse nodes.
    // The parseTree from this module must be constructed like the
    // one created by parseArray(), so an empty CD cell must
    // be a ParseNode<"styling">. And CD is always displaystyle.
    // So these values are fixed and flow can do implicit typing.
    return {
      type: "styling",
      body: [],
      mode: "math",
      style: "display"
    };
  };

  var isStartOfArrow = node => {
    return node.type === "textord" && node.text === "@";
  };

  var isLabelEnd = (node, endChar) => {
    return (node.type === "mathord" || node.type === "atom") && node.text === endChar;
  };

  function cdArrow(arrowChar, labels, parser) {
    // Return a parse tree of an arrow and its labels.
    // This acts in a way similar to a macro expansion.
    var funcName = cdArrowFunctionName[arrowChar];

    switch (funcName) {
      case "\\\\cdrightarrow":
      case "\\\\cdleftarrow":
        return parser.callFunction(funcName, [labels[0]], [labels[1]]);

      case "\\uparrow":
      case "\\downarrow":
        {
          var leftLabel = parser.callFunction("\\\\cdleft", [labels[0]], []);
          var bareArrow = {
            type: "atom",
            text: funcName,
            mode: "math",
            family: "rel"
          };
          var sizedArrow = parser.callFunction("\\Big", [bareArrow], []);
          var rightLabel = parser.callFunction("\\\\cdright", [labels[1]], []);
          var arrowGroup = {
            type: "ordgroup",
            mode: "math",
            body: [leftLabel, sizedArrow, rightLabel]
          };
          return parser.callFunction("\\\\cdparent", [arrowGroup], []);
        }

      case "\\\\cdlongequal":
        return parser.callFunction("\\\\cdlongequal", [], []);

      case "\\Vert":
        {
          var arrow = {
            type: "textord",
            text: "\\Vert",
            mode: "math"
          };
          return parser.callFunction("\\Big", [arrow], []);
        }

      default:
        return {
          type: "textord",
          text: " ",
          mode: "math"
        };
    }
  }

  function parseCD(parser) {
    // Get the array's parse nodes with \\ temporarily mapped to \cr.
    var parsedRows = [];
    parser.gullet.beginGroup();
    parser.gullet.macros.set("\\cr", "\\\\\\relax");
    parser.gullet.beginGroup();

    while (true) {
      // eslint-disable-line no-constant-condition
      // Get the parse nodes for the next row.
      parsedRows.push(parser.parseExpression(false, "\\\\"));
      parser.gullet.endGroup();
      parser.gullet.beginGroup();
      var next = parser.fetch().text;

      if (next === "&" || next === "\\\\") {
        parser.consume();
      } else if (next === "\\end") {
        if (parsedRows[parsedRows.length - 1].length === 0) {
          parsedRows.pop(); // final row ended in \\
        }

        break;
      } else {
        throw new ParseError("Expected \\\\ or \\cr or \\end", parser.nextToken);
      }
    }

    var row = [];
    var body = [row]; // Loop thru the parse nodes. Collect them into cells and arrows.

    for (var i = 0; i < parsedRows.length; i++) {
      // Start a new row.
      var rowNodes = parsedRows[i]; // Create the first cell.

      var cell = newCell();

      for (var j = 0; j < rowNodes.length; j++) {
        if (!isStartOfArrow(rowNodes[j])) {
          // If a parseNode is not an arrow, it goes into a cell.
          cell.body.push(rowNodes[j]);
        } else {
          // Parse node j is an "@", the start of an arrow.
          // Before starting on the arrow, push the cell into `row`.
          row.push(cell); // Now collect parseNodes into an arrow.
          // The character after "@" defines the arrow type.

          j += 1;
          var arrowChar = assertSymbolNodeType(rowNodes[j]).text; // Create two empty label nodes. We may or may not use them.

          var labels = new Array(2);
          labels[0] = {
            type: "ordgroup",
            mode: "math",
            body: []
          };
          labels[1] = {
            type: "ordgroup",
            mode: "math",
            body: []
          }; // Process the arrow.

          if ("=|.".indexOf(arrowChar) > -1) ; else if ("<>AV".indexOf(arrowChar) > -1) {
            // Four arrows, `@>>>`, `@<<<`, `@AAA`, and `@VVV`, each take
            // two optional labels. E.g. the right-point arrow syntax is
            // really:  @>{optional label}>{optional label}>
            // Collect parseNodes into labels.
            for (var labelNum = 0; labelNum < 2; labelNum++) {
              var inLabel = true;

              for (var k = j + 1; k < rowNodes.length; k++) {
                if (isLabelEnd(rowNodes[k], arrowChar)) {
                  inLabel = false;
                  j = k;
                  break;
                }

                if (isStartOfArrow(rowNodes[k])) {
                  throw new ParseError("Missing a " + arrowChar + " character to complete a CD arrow.", rowNodes[k]);
                }

                labels[labelNum].body.push(rowNodes[k]);
              }

              if (inLabel) {
                // isLabelEnd never returned a true.
                throw new ParseError("Missing a " + arrowChar + " character to complete a CD arrow.", rowNodes[j]);
              }
            }
          } else {
            throw new ParseError("Expected one of \"<>AV=|.\" after @", rowNodes[j]);
          } // Now join the arrow to its labels.


          var arrow = cdArrow(arrowChar, labels, parser); // Wrap the arrow in  ParseNode<"styling">.
          // This is done to match parseArray() behavior.

          var wrappedArrow = {
            type: "styling",
            body: [arrow],
            mode: "math",
            style: "display" // CD is always displaystyle.

          };
          row.push(wrappedArrow); // In CD's syntax, cells are implicit. That is, everything that
          // is not an arrow gets collected into a cell. So create an empty
          // cell now. It will collect upcoming parseNodes.

          cell = newCell();
        }
      }

      if (i % 2 === 0) {
        // Even-numbered rows consist of: cell, arrow, cell, arrow, ... cell
        // The last cell is not yet pushed into `row`, so:
        row.push(cell);
      } else {
        // Odd-numbered rows consist of: vert arrow, empty cell, ... vert arrow
        // Remove the empty cell that was placed at the beginning of `row`.
        row.shift();
      }

      row = [];
      body.push(row);
    } // End row group


    parser.gullet.endGroup(); // End array group defining \\

    parser.gullet.endGroup(); // define column separation.

    var cols = new Array(body[0].length).fill({
      type: "align",
      align: "c",
      pregap: 0.25,
      // CD package sets \enskip between columns.
      postgap: 0.25 // So pre and post each get half an \enskip, i.e. 0.25em.

    });
    return {
      type: "array",
      mode: "math",
      body,
      arraystretch: 1,
      addJot: true,
      rowGaps: [null],
      cols,
      colSeparationType: "CD",
      hLinesBeforeRow: new Array(body.length + 1).fill([])
    };
  } // The functions below are not available for general use.
  // They are here only for internal use by the {CD} environment in placing labels
  // next to vertical arrows.
  // We don't need any such functions for horizontal arrows because we can reuse
  // the functionality that already exists for extensible arrows.

  defineFunction({
    type: "cdlabel",
    names: ["\\\\cdleft", "\\\\cdright"],
    props: {
      numArgs: 1
    },

    handler(_ref, args) {
      var {
        parser,
        funcName
      } = _ref;
      return {
        type: "cdlabel",
        mode: parser.mode,
        side: funcName.slice(4),
        label: args[0]
      };
    },

    htmlBuilder(group, options) {
      var newOptions = options.havingStyle(options.style.sup());
      var label = buildCommon.wrapFragment(buildGroup$1(group.label, newOptions, options), options);
      label.classes.push("cd-label-" + group.side);
      label.style.bottom = makeEm(0.8 - label.depth); // Zero out label height & depth, so vertical align of arrow is set
      // by the arrow height, not by the label.

      label.height = 0;
      label.depth = 0;
      return label;
    },

    mathmlBuilder(group, options) {
      var label = new mathMLTree.MathNode("mrow", [buildGroup(group.label, options)]);
      label = new mathMLTree.MathNode("mpadded", [label]);
      label.setAttribute("width", "0");

      if (group.side === "left") {
        label.setAttribute("lspace", "-1width");
      } // We have to guess at vertical alignment. We know the arrow is 1.8em tall,
      // But we don't know the height or depth of the label.


      label.setAttribute("voffset", "0.7em");
      label = new mathMLTree.MathNode("mstyle", [label]);
      label.setAttribute("displaystyle", "false");
      label.setAttribute("scriptlevel", "1");
      return label;
    }

  });
  defineFunction({
    type: "cdlabelparent",
    names: ["\\\\cdparent"],
    props: {
      numArgs: 1
    },

    handler(_ref2, args) {
      var {
        parser
      } = _ref2;
      return {
        type: "cdlabelparent",
        mode: parser.mode,
        fragment: args[0]
      };
    },

    htmlBuilder(group, options) {
      // Wrap the vertical arrow and its labels.
      // The parent gets position: relative. The child gets position: absolute.
      // So CSS can locate the label correctly.
      var parent = buildCommon.wrapFragment(buildGroup$1(group.fragment, options), options);
      parent.classes.push("cd-vert-arrow");
      return parent;
    },

    mathmlBuilder(group, options) {
      return new mathMLTree.MathNode("mrow", [buildGroup(group.fragment, options)]);
    }

  });

  // {123} and converts into symbol with code 123.  It is used by the *macro*
  // \char defined in macros.js.

  defineFunction({
    type: "textord",
    names: ["\\@char"],
    props: {
      numArgs: 1,
      allowedInText: true
    },

    handler(_ref, args) {
      var {
        parser
      } = _ref;
      var arg = assertNodeType(args[0], "ordgroup");
      var group = arg.body;
      var number = "";

      for (var i = 0; i < group.length; i++) {
        var node = assertNodeType(group[i], "textord");
        number += node.text;
      }

      var code = parseInt(number);
      var text;

      if (isNaN(code)) {
        throw new ParseError("\\@char has non-numeric argument " + number); // If we drop IE support, the following code could be replaced with
        // text = String.fromCodePoint(code)
      } else if (code < 0 || code >= 0x10ffff) {
        throw new ParseError("\\@char with invalid code point " + number);
      } else if (code <= 0xffff) {
        text = String.fromCharCode(code);
      } else {
        // Astral code point; split into surrogate halves
        code -= 0x10000;
        text = String.fromCharCode((code >> 10) + 0xd800, (code & 0x3ff) + 0xdc00);
      }

      return {
        type: "textord",
        mode: parser.mode,
        text: text
      };
    }

  });

  var htmlBuilder$8 = (group, options) => {
    var elements = buildExpression$1(group.body, options.withColor(group.color), false); // \color isn't supposed to affect the type of the elements it contains.
    // To accomplish this, we wrap the results in a fragment, so the inner
    // elements will be able to directly interact with their neighbors. For
    // example, `\color{red}{2 +} 3` has the same spacing as `2 + 3`

    return buildCommon.makeFragment(elements);
  };

  var mathmlBuilder$7 = (group, options) => {
    var inner = buildExpression(group.body, options.withColor(group.color));
    var node = new mathMLTree.MathNode("mstyle", inner);
    node.setAttribute("mathcolor", group.color);
    return node;
  };

  defineFunction({
    type: "color",
    names: ["\\textcolor"],
    props: {
      numArgs: 2,
      allowedInText: true,
      argTypes: ["color", "original"]
    },

    handler(_ref, args) {
      var {
        parser
      } = _ref;
      var color = assertNodeType(args[0], "color-token").color;
      var body = args[1];
      return {
        type: "color",
        mode: parser.mode,
        color,
        body: ordargument(body)
      };
    },

    htmlBuilder: htmlBuilder$8,
    mathmlBuilder: mathmlBuilder$7
  });
  defineFunction({
    type: "color",
    names: ["\\color"],
    props: {
      numArgs: 1,
      allowedInText: true,
      argTypes: ["color"]
    },

    handler(_ref2, args) {
      var {
        parser,
        breakOnTokenText
      } = _ref2;
      var color = assertNodeType(args[0], "color-token").color; // Set macro \current@color in current namespace to store the current
      // color, mimicking the behavior of color.sty.
      // This is currently used just to correctly color a \right
      // that follows a \color command.

      parser.gullet.macros.set("\\current@color", color); // Parse out the implicit body that should be colored.

      var body = parser.parseExpression(true, breakOnTokenText);
      return {
        type: "color",
        mode: parser.mode,
        color,
        body
      };
    },

    htmlBuilder: htmlBuilder$8,
    mathmlBuilder: mathmlBuilder$7
  });

  // Row breaks within tabular environments, and line breaks at top level

  defineFunction({
    type: "cr",
    names: ["\\\\"],
    props: {
      numArgs: 0,
      numOptionalArgs: 0,
      allowedInText: true
    },

    handler(_ref, args, optArgs) {
      var {
        parser
      } = _ref;
      var size = parser.gullet.future().text === "[" ? parser.parseSizeGroup(true) : null;
      var newLine = !parser.settings.displayMode || !parser.settings.useStrictBehavior("newLineInDisplayMode", "In LaTeX, \\\\ or \\newline " + "does nothing in display mode");
      return {
        type: "cr",
        mode: parser.mode,
        newLine,
        size: size && assertNodeType(size, "size").value
      };
    },

    // The following builders are called only at the top level,
    // not within tabular/array environments.
    htmlBuilder(group, options) {
      var span = buildCommon.makeSpan(["mspace"], [], options);

      if (group.newLine) {
        span.classes.push("newline");

        if (group.size) {
          span.style.marginTop = makeEm(calculateSize(group.size, options));
        }
      }

      return span;
    },

    mathmlBuilder(group, options) {
      var node = new mathMLTree.MathNode("mspace");

      if (group.newLine) {
        node.setAttribute("linebreak", "newline");

        if (group.size) {
          node.setAttribute("height", makeEm(calculateSize(group.size, options)));
        }
      }

      return node;
    }

  });

  var globalMap = {
    "\\global": "\\global",
    "\\long": "\\\\globallong",
    "\\\\globallong": "\\\\globallong",
    "\\def": "\\gdef",
    "\\gdef": "\\gdef",
    "\\edef": "\\xdef",
    "\\xdef": "\\xdef",
    "\\let": "\\\\globallet",
    "\\futurelet": "\\\\globalfuture"
  };

  var checkControlSequence = tok => {
    var name = tok.text;

    if (/^(?:[\\{}$&#^_]|EOF)$/.test(name)) {
      throw new ParseError("Expected a control sequence", tok);
    }

    return name;
  };

  var getRHS = parser => {
    var tok = parser.gullet.popToken();

    if (tok.text === "=") {
      // consume optional equals
      tok = parser.gullet.popToken();

      if (tok.text === " ") {
        // consume one optional space
        tok = parser.gullet.popToken();
      }
    }

    return tok;
  };

  var letCommand = (parser, name, tok, global) => {
    var macro = parser.gullet.macros.get(tok.text);

    if (macro == null) {
      // don't expand it later even if a macro with the same name is defined
      // e.g., \let\foo=\frac \def\frac{\relax} \frac12
      tok.noexpand = true;
      macro = {
        tokens: [tok],
        numArgs: 0,
        // reproduce the same behavior in expansion
        unexpandable: !parser.gullet.isExpandable(tok.text)
      };
    }

    parser.gullet.macros.set(name, macro, global);
  }; // <assignment> -> <non-macro assignment>|<macro assignment>
  // <non-macro assignment> -> <simple assignment>|\global<non-macro assignment>
  // <macro assignment> -> <definition>|<prefix><macro assignment>
  // <prefix> -> \global|\long|\outer


  defineFunction({
    type: "internal",
    names: ["\\global", "\\long", "\\\\globallong" // can’t be entered directly
    ],
    props: {
      numArgs: 0,
      allowedInText: true
    },

    handler(_ref) {
      var {
        parser,
        funcName
      } = _ref;
      parser.consumeSpaces();
      var token = parser.fetch();

      if (globalMap[token.text]) {
        // KaTeX doesn't have \par, so ignore \long
        if (funcName === "\\global" || funcName === "\\\\globallong") {
          token.text = globalMap[token.text];
        }

        return assertNodeType(parser.parseFunction(), "internal");
      }

      throw new ParseError("Invalid token after macro prefix", token);
    }

  }); // Basic support for macro definitions: \def, \gdef, \edef, \xdef
  // <definition> -> <def><control sequence><definition text>
  // <def> -> \def|\gdef|\edef|\xdef
  // <definition text> -> <parameter text><left brace><balanced text><right brace>

  defineFunction({
    type: "internal",
    names: ["\\def", "\\gdef", "\\edef", "\\xdef"],
    props: {
      numArgs: 0,
      allowedInText: true,
      primitive: true
    },

    handler(_ref2) {
      var {
        parser,
        funcName
      } = _ref2;
      var tok = parser.gullet.popToken();
      var name = tok.text;

      if (/^(?:[\\{}$&#^_]|EOF)$/.test(name)) {
        throw new ParseError("Expected a control sequence", tok);
      }

      var numArgs = 0;
      var insert;
      var delimiters = [[]]; // <parameter text> contains no braces

      while (parser.gullet.future().text !== "{") {
        tok = parser.gullet.popToken();

        if (tok.text === "#") {
          // If the very last character of the <parameter text> is #, so that
          // this # is immediately followed by {, TeX will behave as if the {
          // had been inserted at the right end of both the parameter text
          // and the replacement text.
          if (parser.gullet.future().text === "{") {
            insert = parser.gullet.future();
            delimiters[numArgs].push("{");
            break;
          } // A parameter, the first appearance of # must be followed by 1,
          // the next by 2, and so on; up to nine #’s are allowed


          tok = parser.gullet.popToken();

          if (!/^[1-9]$/.test(tok.text)) {
            throw new ParseError("Invalid argument number \"" + tok.text + "\"");
          }

          if (parseInt(tok.text) !== numArgs + 1) {
            throw new ParseError("Argument number \"" + tok.text + "\" out of order");
          }

          numArgs++;
          delimiters.push([]);
        } else if (tok.text === "EOF") {
          throw new ParseError("Expected a macro definition");
        } else {
          delimiters[numArgs].push(tok.text);
        }
      } // replacement text, enclosed in '{' and '}' and properly nested


      var {
        tokens
      } = parser.gullet.consumeArg();

      if (insert) {
        tokens.unshift(insert);
      }

      if (funcName === "\\edef" || funcName === "\\xdef") {
        tokens = parser.gullet.expandTokens(tokens);
        tokens.reverse(); // to fit in with stack order
      } // Final arg is the expansion of the macro


      parser.gullet.macros.set(name, {
        tokens,
        numArgs,
        delimiters
      }, funcName === globalMap[funcName]);
      return {
        type: "internal",
        mode: parser.mode
      };
    }

  }); // <simple assignment> -> <let assignment>
  // <let assignment> -> \futurelet<control sequence><token><token>
  //     | \let<control sequence><equals><one optional space><token>
  // <equals> -> <optional spaces>|<optional spaces>=

  defineFunction({
    type: "internal",
    names: ["\\let", "\\\\globallet" // can’t be entered directly
    ],
    props: {
      numArgs: 0,
      allowedInText: true,
      primitive: true
    },

    handler(_ref3) {
      var {
        parser,
        funcName
      } = _ref3;
      var name = checkControlSequence(parser.gullet.popToken());
      parser.gullet.consumeSpaces();
      var tok = getRHS(parser);
      letCommand(parser, name, tok, funcName === "\\\\globallet");
      return {
        type: "internal",
        mode: parser.mode
      };
    }

  }); // ref: https://www.tug.org/TUGboat/tb09-3/tb22bechtolsheim.pdf

  defineFunction({
    type: "internal",
    names: ["\\futurelet", "\\\\globalfuture" // can’t be entered directly
    ],
    props: {
      numArgs: 0,
      allowedInText: true,
      primitive: true
    },

    handler(_ref4) {
      var {
        parser,
        funcName
      } = _ref4;
      var name = checkControlSequence(parser.gullet.popToken());
      var middle = parser.gullet.popToken();
      var tok = parser.gullet.popToken();
      letCommand(parser, name, tok, funcName === "\\\\globalfuture");
      parser.gullet.pushToken(tok);
      parser.gullet.pushToken(middle);
      return {
        type: "internal",
        mode: parser.mode
      };
    }

  });

  /**
   * This file deals with creating delimiters of various sizes. The TeXbook
   * discusses these routines on page 441-442, in the "Another subroutine sets box
   * x to a specified variable delimiter" paragraph.
   *
   * There are three main routines here. `makeSmallDelim` makes a delimiter in the
   * normal font, but in either text, script, or scriptscript style.
   * `makeLargeDelim` makes a delimiter in textstyle, but in one of the Size1,
   * Size2, Size3, or Size4 fonts. `makeStackedDelim` makes a delimiter out of
   * smaller pieces that are stacked on top of one another.
   *
   * The functions take a parameter `center`, which determines if the delimiter
   * should be centered around the axis.
   *
   * Then, there are three exposed functions. `sizedDelim` makes a delimiter in
   * one of the given sizes. This is used for things like `\bigl`.
   * `customSizedDelim` makes a delimiter with a given total height+depth. It is
   * called in places like `\sqrt`. `leftRightDelim` makes an appropriate
   * delimiter which surrounds an expression of a given height an depth. It is
   * used in `\left` and `\right`.
   */

  /**
   * Get the metrics for a given symbol and font, after transformation (i.e.
   * after following replacement from symbols.js)
   */
  var getMetrics = function getMetrics(symbol, font, mode) {
    var replace = symbols.math[symbol] && symbols.math[symbol].replace;
    var metrics = getCharacterMetrics(replace || symbol, font, mode);

    if (!metrics) {
      throw new Error("Unsupported symbol " + symbol + " and font size " + font + ".");
    }

    return metrics;
  };
  /**
   * Puts a delimiter span in a given style, and adds appropriate height, depth,
   * and maxFontSizes.
   */


  var styleWrap = function styleWrap(delim, toStyle, options, classes) {
    var newOptions = options.havingBaseStyle(toStyle);
    var span = buildCommon.makeSpan(classes.concat(newOptions.sizingClasses(options)), [delim], options);
    var delimSizeMultiplier = newOptions.sizeMultiplier / options.sizeMultiplier;
    span.height *= delimSizeMultiplier;
    span.depth *= delimSizeMultiplier;
    span.maxFontSize = newOptions.sizeMultiplier;
    return span;
  };

  var centerSpan = function centerSpan(span, options, style) {
    var newOptions = options.havingBaseStyle(style);
    var shift = (1 - options.sizeMultiplier / newOptions.sizeMultiplier) * options.fontMetrics().axisHeight;
    span.classes.push("delimcenter");
    span.style.top = makeEm(shift);
    span.height -= shift;
    span.depth += shift;
  };
  /**
   * Makes a small delimiter. This is a delimiter that comes in the Main-Regular
   * font, but is restyled to either be in textstyle, scriptstyle, or
   * scriptscriptstyle.
   */


  var makeSmallDelim = function makeSmallDelim(delim, style, center, options, mode, classes) {
    var text = buildCommon.makeSymbol(delim, "Main-Regular", mode, options);
    var span = styleWrap(text, style, options, classes);

    if (center) {
      centerSpan(span, options, style);
    }

    return span;
  };
  /**
   * Builds a symbol in the given font size (note size is an integer)
   */


  var mathrmSize = function mathrmSize(value, size, mode, options) {
    return buildCommon.makeSymbol(value, "Size" + size + "-Regular", mode, options);
  };
  /**
   * Makes a large delimiter. This is a delimiter that comes in the Size1, Size2,
   * Size3, or Size4 fonts. It is always rendered in textstyle.
   */


  var makeLargeDelim = function makeLargeDelim(delim, size, center, options, mode, classes) {
    var inner = mathrmSize(delim, size, mode, options);
    var span = styleWrap(buildCommon.makeSpan(["delimsizing", "size" + size], [inner], options), Style$1.TEXT, options, classes);

    if (center) {
      centerSpan(span, options, Style$1.TEXT);
    }

    return span;
  };
  /**
   * Make a span from a font glyph with the given offset and in the given font.
   * This is used in makeStackedDelim to make the stacking pieces for the delimiter.
   */


  var makeGlyphSpan = function makeGlyphSpan(symbol, font, mode) {
    var sizeClass; // Apply the correct CSS class to choose the right font.

    if (font === "Size1-Regular") {
      sizeClass = "delim-size1";
    } else
      /* if (font === "Size4-Regular") */
      {
        sizeClass = "delim-size4";
      }

    var corner = buildCommon.makeSpan(["delimsizinginner", sizeClass], [buildCommon.makeSpan([], [buildCommon.makeSymbol(symbol, font, mode)])]); // Since this will be passed into `makeVList` in the end, wrap the element
    // in the appropriate tag that VList uses.

    return {
      type: "elem",
      elem: corner
    };
  };

  var makeInner = function makeInner(ch, height, options) {
    // Create a span with inline SVG for the inner part of a tall stacked delimiter.
    var width = fontMetricsData['Size4-Regular'][ch.charCodeAt(0)] ? fontMetricsData['Size4-Regular'][ch.charCodeAt(0)][4] : fontMetricsData['Size1-Regular'][ch.charCodeAt(0)][4];
    var path = new PathNode("inner", innerPath(ch, Math.round(1000 * height)));
    var svgNode = new SvgNode([path], {
      "width": makeEm(width),
      "height": makeEm(height),
      // Override CSS rule `.katex svg { width: 100% }`
      "style": "width:" + makeEm(width),
      "viewBox": "0 0 " + 1000 * width + " " + Math.round(1000 * height),
      "preserveAspectRatio": "xMinYMin"
    });
    var span = buildCommon.makeSvgSpan([], [svgNode], options);
    span.height = height;
    span.style.height = makeEm(height);
    span.style.width = makeEm(width);
    return {
      type: "elem",
      elem: span
    };
  }; // Helpers for makeStackedDelim


  var lapInEms = 0.008;
  var lap = {
    type: "kern",
    size: -1 * lapInEms
  };
  var verts = ["|", "\\lvert", "\\rvert", "\\vert"];
  var doubleVerts = ["\\|", "\\lVert", "\\rVert", "\\Vert"];
  /**
   * Make a stacked delimiter out of a given delimiter, with the total height at
   * least `heightTotal`. This routine is mentioned on page 442 of the TeXbook.
   */

  var makeStackedDelim = function makeStackedDelim(delim, heightTotal, center, options, mode, classes) {
    // There are four parts, the top, an optional middle, a repeated part, and a
    // bottom.
    var top;
    var middle;
    var repeat;
    var bottom;
    var svgLabel = "";
    var viewBoxWidth = 0;
    top = repeat = bottom = delim;
    middle = null; // Also keep track of what font the delimiters are in

    var font = "Size1-Regular"; // We set the parts and font based on the symbol. Note that we use
    // '\u23d0' instead of '|' and '\u2016' instead of '\\|' for the
    // repeats of the arrows

    if (delim === "\\uparrow") {
      repeat = bottom = "\u23d0";
    } else if (delim === "\\Uparrow") {
      repeat = bottom = "\u2016";
    } else if (delim === "\\downarrow") {
      top = repeat = "\u23d0";
    } else if (delim === "\\Downarrow") {
      top = repeat = "\u2016";
    } else if (delim === "\\updownarrow") {
      top = "\\uparrow";
      repeat = "\u23d0";
      bottom = "\\downarrow";
    } else if (delim === "\\Updownarrow") {
      top = "\\Uparrow";
      repeat = "\u2016";
      bottom = "\\Downarrow";
    } else if (utils.contains(verts, delim)) {
      repeat = "\u2223";
      svgLabel = "vert";
      viewBoxWidth = 333;
    } else if (utils.contains(doubleVerts, delim)) {
      repeat = "\u2225";
      svgLabel = "doublevert";
      viewBoxWidth = 556;
    } else if (delim === "[" || delim === "\\lbrack") {
      top = "\u23a1";
      repeat = "\u23a2";
      bottom = "\u23a3";
      font = "Size4-Regular";
      svgLabel = "lbrack";
      viewBoxWidth = 667;
    } else if (delim === "]" || delim === "\\rbrack") {
      top = "\u23a4";
      repeat = "\u23a5";
      bottom = "\u23a6";
      font = "Size4-Regular";
      svgLabel = "rbrack";
      viewBoxWidth = 667;
    } else if (delim === "\\lfloor" || delim === "\u230a") {
      repeat = top = "\u23a2";
      bottom = "\u23a3";
      font = "Size4-Regular";
      svgLabel = "lfloor";
      viewBoxWidth = 667;
    } else if (delim === "\\lceil" || delim === "\u2308") {
      top = "\u23a1";
      repeat = bottom = "\u23a2";
      font = "Size4-Regular";
      svgLabel = "lceil";
      viewBoxWidth = 667;
    } else if (delim === "\\rfloor" || delim === "\u230b") {
      repeat = top = "\u23a5";
      bottom = "\u23a6";
      font = "Size4-Regular";
      svgLabel = "rfloor";
      viewBoxWidth = 667;
    } else if (delim === "\\rceil" || delim === "\u2309") {
      top = "\u23a4";
      repeat = bottom = "\u23a5";
      font = "Size4-Regular";
      svgLabel = "rceil";
      viewBoxWidth = 667;
    } else if (delim === "(" || delim === "\\lparen") {
      top = "\u239b";
      repeat = "\u239c";
      bottom = "\u239d";
      font = "Size4-Regular";
      svgLabel = "lparen";
      viewBoxWidth = 875;
    } else if (delim === ")" || delim === "\\rparen") {
      top = "\u239e";
      repeat = "\u239f";
      bottom = "\u23a0";
      font = "Size4-Regular";
      svgLabel = "rparen";
      viewBoxWidth = 875;
    } else if (delim === "\\{" || delim === "\\lbrace") {
      top = "\u23a7";
      middle = "\u23a8";
      bottom = "\u23a9";
      repeat = "\u23aa";
      font = "Size4-Regular";
    } else if (delim === "\\}" || delim === "\\rbrace") {
      top = "\u23ab";
      middle = "\u23ac";
      bottom = "\u23ad";
      repeat = "\u23aa";
      font = "Size4-Regular";
    } else if (delim === "\\lgroup" || delim === "\u27ee") {
      top = "\u23a7";
      bottom = "\u23a9";
      repeat = "\u23aa";
      font = "Size4-Regular";
    } else if (delim === "\\rgroup" || delim === "\u27ef") {
      top = "\u23ab";
      bottom = "\u23ad";
      repeat = "\u23aa";
      font = "Size4-Regular";
    } else if (delim === "\\lmoustache" || delim === "\u23b0") {
      top = "\u23a7";
      bottom = "\u23ad";
      repeat = "\u23aa";
      font = "Size4-Regular";
    } else if (delim === "\\rmoustache" || delim === "\u23b1") {
      top = "\u23ab";
      bottom = "\u23a9";
      repeat = "\u23aa";
      font = "Size4-Regular";
    } // Get the metrics of the four sections


    var topMetrics = getMetrics(top, font, mode);
    var topHeightTotal = topMetrics.height + topMetrics.depth;
    var repeatMetrics = getMetrics(repeat, font, mode);
    var repeatHeightTotal = repeatMetrics.height + repeatMetrics.depth;
    var bottomMetrics = getMetrics(bottom, font, mode);
    var bottomHeightTotal = bottomMetrics.height + bottomMetrics.depth;
    var middleHeightTotal = 0;
    var middleFactor = 1;

    if (middle !== null) {
      var middleMetrics = getMetrics(middle, font, mode);
      middleHeightTotal = middleMetrics.height + middleMetrics.depth;
      middleFactor = 2; // repeat symmetrically above and below middle
    } // Calculate the minimal height that the delimiter can have.
    // It is at least the size of the top, bottom, and optional middle combined.


    var minHeight = topHeightTotal + bottomHeightTotal + middleHeightTotal; // Compute the number of copies of the repeat symbol we will need

    var repeatCount = Math.max(0, Math.ceil((heightTotal - minHeight) / (middleFactor * repeatHeightTotal))); // Compute the total height of the delimiter including all the symbols

    var realHeightTotal = minHeight + repeatCount * middleFactor * repeatHeightTotal; // The center of the delimiter is placed at the center of the axis. Note
    // that in this context, "center" means that the delimiter should be
    // centered around the axis in the current style, while normally it is
    // centered around the axis in textstyle.

    var axisHeight = options.fontMetrics().axisHeight;

    if (center) {
      axisHeight *= options.sizeMultiplier;
    } // Calculate the depth


    var depth = realHeightTotal / 2 - axisHeight; // Now, we start building the pieces that will go into the vlist
    // Keep a list of the pieces of the stacked delimiter

    var stack = [];

    if (svgLabel.length > 0) {
      // Instead of stacking glyphs, create a single SVG.
      // This evades browser problems with imprecise positioning of spans.
      var midHeight = realHeightTotal - topHeightTotal - bottomHeightTotal;
      var viewBoxHeight = Math.round(realHeightTotal * 1000);
      var pathStr = tallDelim(svgLabel, Math.round(midHeight * 1000));
      var path = new PathNode(svgLabel, pathStr);
      var width = (viewBoxWidth / 1000).toFixed(3) + "em";
      var height = (viewBoxHeight / 1000).toFixed(3) + "em";
      var svg = new SvgNode([path], {
        "width": width,
        "height": height,
        "viewBox": "0 0 " + viewBoxWidth + " " + viewBoxHeight
      });
      var wrapper = buildCommon.makeSvgSpan([], [svg], options);
      wrapper.height = viewBoxHeight / 1000;
      wrapper.style.width = width;
      wrapper.style.height = height;
      stack.push({
        type: "elem",
        elem: wrapper
      });
    } else {
      // Stack glyphs
      // Start by adding the bottom symbol
      stack.push(makeGlyphSpan(bottom, font, mode));
      stack.push(lap); // overlap

      if (middle === null) {
        // The middle section will be an SVG. Make it an extra 0.016em tall.
        // We'll overlap by 0.008em at top and bottom.
        var innerHeight = realHeightTotal - topHeightTotal - bottomHeightTotal + 2 * lapInEms;
        stack.push(makeInner(repeat, innerHeight, options));
      } else {
        // When there is a middle bit, we need the middle part and two repeated
        // sections
        var _innerHeight = (realHeightTotal - topHeightTotal - bottomHeightTotal - middleHeightTotal) / 2 + 2 * lapInEms;

        stack.push(makeInner(repeat, _innerHeight, options)); // Now insert the middle of the brace.

        stack.push(lap);
        stack.push(makeGlyphSpan(middle, font, mode));
        stack.push(lap);
        stack.push(makeInner(repeat, _innerHeight, options));
      } // Add the top symbol


      stack.push(lap);
      stack.push(makeGlyphSpan(top, font, mode));
    } // Finally, build the vlist


    var newOptions = options.havingBaseStyle(Style$1.TEXT);
    var inner = buildCommon.makeVList({
      positionType: "bottom",
      positionData: depth,
      children: stack
    }, newOptions);
    return styleWrap(buildCommon.makeSpan(["delimsizing", "mult"], [inner], newOptions), Style$1.TEXT, options, classes);
  }; // All surds have 0.08em padding above the vinculum inside the SVG.
  // That keeps browser span height rounding error from pinching the line.


  var vbPad = 80; // padding above the surd, measured inside the viewBox.

  var emPad = 0.08; // padding, in ems, measured in the document.

  var sqrtSvg = function sqrtSvg(sqrtName, height, viewBoxHeight, extraVinculum, options) {
    var path = sqrtPath(sqrtName, extraVinculum, viewBoxHeight);
    var pathNode = new PathNode(sqrtName, path);
    var svg = new SvgNode([pathNode], {
      // Note: 1000:1 ratio of viewBox to document em width.
      "width": "400em",
      "height": makeEm(height),
      "viewBox": "0 0 400000 " + viewBoxHeight,
      "preserveAspectRatio": "xMinYMin slice"
    });
    return buildCommon.makeSvgSpan(["hide-tail"], [svg], options);
  };
  /**
   * Make a sqrt image of the given height,
   */


  var makeSqrtImage = function makeSqrtImage(height, options) {
    // Define a newOptions that removes the effect of size changes such as \Huge.
    // We don't pick different a height surd for \Huge. For it, we scale up.
    var newOptions = options.havingBaseSizing(); // Pick the desired surd glyph from a sequence of surds.

    var delim = traverseSequence("\\surd", height * newOptions.sizeMultiplier, stackLargeDelimiterSequence, newOptions);
    var sizeMultiplier = newOptions.sizeMultiplier; // default
    // The standard sqrt SVGs each have a 0.04em thick vinculum.
    // If Settings.minRuleThickness is larger than that, we add extraVinculum.

    var extraVinculum = Math.max(0, options.minRuleThickness - options.fontMetrics().sqrtRuleThickness); // Create a span containing an SVG image of a sqrt symbol.

    var span;
    var spanHeight = 0;
    var texHeight = 0;
    var viewBoxHeight = 0;
    var advanceWidth; // We create viewBoxes with 80 units of "padding" above each surd.
    // Then browser rounding error on the parent span height will not
    // encroach on the ink of the vinculum. But that padding is not
    // included in the TeX-like `height` used for calculation of
    // vertical alignment. So texHeight = span.height < span.style.height.

    if (delim.type === "small") {
      // Get an SVG that is derived from glyph U+221A in font KaTeX-Main.
      // 1000 unit normal glyph height.
      viewBoxHeight = 1000 + 1000 * extraVinculum + vbPad;

      if (height < 1.0) {
        sizeMultiplier = 1.0; // mimic a \textfont radical
      } else if (height < 1.4) {
        sizeMultiplier = 0.7; // mimic a \scriptfont radical
      }

      spanHeight = (1.0 + extraVinculum + emPad) / sizeMultiplier;
      texHeight = (1.00 + extraVinculum) / sizeMultiplier;
      span = sqrtSvg("sqrtMain", spanHeight, viewBoxHeight, extraVinculum, options);
      span.style.minWidth = "0.853em";
      advanceWidth = 0.833 / sizeMultiplier; // from the font.
    } else if (delim.type === "large") {
      // These SVGs come from fonts: KaTeX_Size1, _Size2, etc.
      viewBoxHeight = (1000 + vbPad) * sizeToMaxHeight[delim.size];
      texHeight = (sizeToMaxHeight[delim.size] + extraVinculum) / sizeMultiplier;
      spanHeight = (sizeToMaxHeight[delim.size] + extraVinculum + emPad) / sizeMultiplier;
      span = sqrtSvg("sqrtSize" + delim.size, spanHeight, viewBoxHeight, extraVinculum, options);
      span.style.minWidth = "1.02em";
      advanceWidth = 1.0 / sizeMultiplier; // 1.0 from the font.
    } else {
      // Tall sqrt. In TeX, this would be stacked using multiple glyphs.
      // We'll use a single SVG to accomplish the same thing.
      spanHeight = height + extraVinculum + emPad;
      texHeight = height + extraVinculum;
      viewBoxHeight = Math.floor(1000 * height + extraVinculum) + vbPad;
      span = sqrtSvg("sqrtTall", spanHeight, viewBoxHeight, extraVinculum, options);
      span.style.minWidth = "0.742em";
      advanceWidth = 1.056;
    }

    span.height = texHeight;
    span.style.height = makeEm(spanHeight);
    return {
      span,
      advanceWidth,
      // Calculate the actual line width.
      // This actually should depend on the chosen font -- e.g. \boldmath
      // should use the thicker surd symbols from e.g. KaTeX_Main-Bold, and
      // have thicker rules.
      ruleWidth: (options.fontMetrics().sqrtRuleThickness + extraVinculum) * sizeMultiplier
    };
  }; // There are three kinds of delimiters, delimiters that stack when they become
  // too large


  var stackLargeDelimiters = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "\u230a", "\u230b", "\\lceil", "\\rceil", "\u2308", "\u2309", "\\surd"]; // delimiters that always stack

  var stackAlwaysDelimiters = ["\\uparrow", "\\downarrow", "\\updownarrow", "\\Uparrow", "\\Downarrow", "\\Updownarrow", "|", "\\|", "\\vert", "\\Vert", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "\u27ee", "\u27ef", "\\lmoustache", "\\rmoustache", "\u23b0", "\u23b1"]; // and delimiters that never stack

  var stackNeverDelimiters = ["<", ">", "\\langle", "\\rangle", "/", "\\backslash", "\\lt", "\\gt"]; // Metrics of the different sizes. Found by looking at TeX's output of
  // $\bigl| // \Bigl| \biggl| \Biggl| \showlists$
  // Used to create stacked delimiters of appropriate sizes in makeSizedDelim.

  var sizeToMaxHeight = [0, 1.2, 1.8, 2.4, 3.0];
  /**
   * Used to create a delimiter of a specific size, where `size` is 1, 2, 3, or 4.
   */

  var makeSizedDelim = function makeSizedDelim(delim, size, options, mode, classes) {
    // < and > turn into \langle and \rangle in delimiters
    if (delim === "<" || delim === "\\lt" || delim === "\u27e8") {
      delim = "\\langle";
    } else if (delim === ">" || delim === "\\gt" || delim === "\u27e9") {
      delim = "\\rangle";
    } // Sized delimiters are never centered.


    if (utils.contains(stackLargeDelimiters, delim) || utils.contains(stackNeverDelimiters, delim)) {
      return makeLargeDelim(delim, size, false, options, mode, classes);
    } else if (utils.contains(stackAlwaysDelimiters, delim)) {
      return makeStackedDelim(delim, sizeToMaxHeight[size], false, options, mode, classes);
    } else {
      throw new ParseError("Illegal delimiter: '" + delim + "'");
    }
  };
  /**
   * There are three different sequences of delimiter sizes that the delimiters
   * follow depending on the kind of delimiter. This is used when creating custom
   * sized delimiters to decide whether to create a small, large, or stacked
   * delimiter.
   *
   * In real TeX, these sequences aren't explicitly defined, but are instead
   * defined inside the font metrics. Since there are only three sequences that
   * are possible for the delimiters that TeX defines, it is easier to just encode
   * them explicitly here.
   */


  // Delimiters that never stack try small delimiters and large delimiters only
  var stackNeverDelimiterSequence = [{
    type: "small",
    style: Style$1.SCRIPTSCRIPT
  }, {
    type: "small",
    style: Style$1.SCRIPT
  }, {
    type: "small",
    style: Style$1.TEXT
  }, {
    type: "large",
    size: 1
  }, {
    type: "large",
    size: 2
  }, {
    type: "large",
    size: 3
  }, {
    type: "large",
    size: 4
  }]; // Delimiters that always stack try the small delimiters first, then stack

  var stackAlwaysDelimiterSequence = [{
    type: "small",
    style: Style$1.SCRIPTSCRIPT
  }, {
    type: "small",
    style: Style$1.SCRIPT
  }, {
    type: "small",
    style: Style$1.TEXT
  }, {
    type: "stack"
  }]; // Delimiters that stack when large try the small and then large delimiters, and
  // stack afterwards

  var stackLargeDelimiterSequence = [{
    type: "small",
    style: Style$1.SCRIPTSCRIPT
  }, {
    type: "small",
    style: Style$1.SCRIPT
  }, {
    type: "small",
    style: Style$1.TEXT
  }, {
    type: "large",
    size: 1
  }, {
    type: "large",
    size: 2
  }, {
    type: "large",
    size: 3
  }, {
    type: "large",
    size: 4
  }, {
    type: "stack"
  }];
  /**
   * Get the font used in a delimiter based on what kind of delimiter it is.
   * TODO(#963) Use more specific font family return type once that is introduced.
   */

  var delimTypeToFont = function delimTypeToFont(type) {
    if (type.type === "small") {
      return "Main-Regular";
    } else if (type.type === "large") {
      return "Size" + type.size + "-Regular";
    } else if (type.type === "stack") {
      return "Size4-Regular";
    } else {
      throw new Error("Add support for delim type '" + type.type + "' here.");
    }
  };
  /**
   * Traverse a sequence of types of delimiters to decide what kind of delimiter
   * should be used to create a delimiter of the given height+depth.
   */


  var traverseSequence = function traverseSequence(delim, height, sequence, options) {
    // Here, we choose the index we should start at in the sequences. In smaller
    // sizes (which correspond to larger numbers in style.size) we start earlier
    // in the sequence. Thus, scriptscript starts at index 3-3=0, script starts
    // at index 3-2=1, text starts at 3-1=2, and display starts at min(2,3-0)=2
    var start = Math.min(2, 3 - options.style.size);

    for (var i = start; i < sequence.length; i++) {
      if (sequence[i].type === "stack") {
        // This is always the last delimiter, so we just break the loop now.
        break;
      }

      var metrics = getMetrics(delim, delimTypeToFont(sequence[i]), "math");
      var heightDepth = metrics.height + metrics.depth; // Small delimiters are scaled down versions of the same font, so we
      // account for the style change size.

      if (sequence[i].type === "small") {
        var newOptions = options.havingBaseStyle(sequence[i].style);
        heightDepth *= newOptions.sizeMultiplier;
      } // Check if the delimiter at this size works for the given height.


      if (heightDepth > height) {
        return sequence[i];
      }
    } // If we reached the end of the sequence, return the last sequence element.


    return sequence[sequence.length - 1];
  };
  /**
   * Make a delimiter of a given height+depth, with optional centering. Here, we
   * traverse the sequences, and create a delimiter that the sequence tells us to.
   */


  var makeCustomSizedDelim = function makeCustomSizedDelim(delim, height, center, options, mode, classes) {
    if (delim === "<" || delim === "\\lt" || delim === "\u27e8") {
      delim = "\\langle";
    } else if (delim === ">" || delim === "\\gt" || delim === "\u27e9") {
      delim = "\\rangle";
    } // Decide what sequence to use


    var sequence;

    if (utils.contains(stackNeverDelimiters, delim)) {
      sequence = stackNeverDelimiterSequence;
    } else if (utils.contains(stackLargeDelimiters, delim)) {
      sequence = stackLargeDelimiterSequence;
    } else {
      sequence = stackAlwaysDelimiterSequence;
    } // Look through the sequence


    var delimType = traverseSequence(delim, height, sequence, options); // Get the delimiter from font glyphs.
    // Depending on the sequence element we decided on, call the
    // appropriate function.

    if (delimType.type === "small") {
      return makeSmallDelim(delim, delimType.style, center, options, mode, classes);
    } else if (delimType.type === "large") {
      return makeLargeDelim(delim, delimType.size, center, options, mode, classes);
    } else
      /* if (delimType.type === "stack") */
      {
        return makeStackedDelim(delim, height, center, options, mode, classes);
      }
  };
  /**
   * Make a delimiter for use with `\left` and `\right`, given a height and depth
   * of an expression that the delimiters surround.
   */


  var makeLeftRightDelim = function makeLeftRightDelim(delim, height, depth, options, mode, classes) {
    // We always center \left/\right delimiters, so the axis is always shifted
    var axisHeight = options.fontMetrics().axisHeight * options.sizeMultiplier; // Taken from TeX source, tex.web, function make_left_right

    var delimiterFactor = 901;
    var delimiterExtend = 5.0 / options.fontMetrics().ptPerEm;
    var maxDistFromAxis = Math.max(height - axisHeight, depth + axisHeight);
    var totalHeight = Math.max( // In real TeX, calculations are done using integral values which are
    // 65536 per pt, or 655360 per em. So, the division here truncates in
    // TeX but doesn't here, producing different results. If we wanted to
    // exactly match TeX's calculation, we could do
    //   Math.floor(655360 * maxDistFromAxis / 500) *
    //    delimiterFactor / 655360
    // (To see the difference, compare
    //    x^{x^{\left(\rule{0.1em}{0.68em}\right)}}
    // in TeX and KaTeX)
    maxDistFromAxis / 500 * delimiterFactor, 2 * maxDistFromAxis - delimiterExtend); // Finally, we defer to `makeCustomSizedDelim` with our calculated total
    // height

    return makeCustomSizedDelim(delim, totalHeight, true, options, mode, classes);
  };

  var delimiter = {
    sqrtImage: makeSqrtImage,
    sizedDelim: makeSizedDelim,
    sizeToMaxHeight: sizeToMaxHeight,
    customSizedDelim: makeCustomSizedDelim,
    leftRightDelim: makeLeftRightDelim
  };

  // Extra data needed for the delimiter handler down below
  var delimiterSizes = {
    "\\bigl": {
      mclass: "mopen",
      size: 1
    },
    "\\Bigl": {
      mclass: "mopen",
      size: 2
    },
    "\\biggl": {
      mclass: "mopen",
      size: 3
    },
    "\\Biggl": {
      mclass: "mopen",
      size: 4
    },
    "\\bigr": {
      mclass: "mclose",
      size: 1
    },
    "\\Bigr": {
      mclass: "mclose",
      size: 2
    },
    "\\biggr": {
      mclass: "mclose",
      size: 3
    },
    "\\Biggr": {
      mclass: "mclose",
      size: 4
    },
    "\\bigm": {
      mclass: "mrel",
      size: 1
    },
    "\\Bigm": {
      mclass: "mrel",
      size: 2
    },
    "\\biggm": {
      mclass: "mrel",
      size: 3
    },
    "\\Biggm": {
      mclass: "mrel",
      size: 4
    },
    "\\big": {
      mclass: "mord",
      size: 1
    },
    "\\Big": {
      mclass: "mord",
      size: 2
    },
    "\\bigg": {
      mclass: "mord",
      size: 3
    },
    "\\Bigg": {
      mclass: "mord",
      size: 4
    }
  };
  var delimiters = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "\u230a", "\u230b", "\\lceil", "\\rceil", "\u2308", "\u2309", "<", ">", "\\langle", "\u27e8", "\\rangle", "\u27e9", "\\lt", "\\gt", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "\u27ee", "\u27ef", "\\lmoustache", "\\rmoustache", "\u23b0", "\u23b1", "/", "\\backslash", "|", "\\vert", "\\|", "\\Vert", "\\uparrow", "\\Uparrow", "\\downarrow", "\\Downarrow", "\\updownarrow", "\\Updownarrow", "."];

  // Delimiter functions
  function checkDelimiter(delim, context) {
    var symDelim = checkSymbolNodeType(delim);

    if (symDelim && utils.contains(delimiters, symDelim.text)) {
      return symDelim;
    } else if (symDelim) {
      throw new ParseError("Invalid delimiter '" + symDelim.text + "' after '" + context.funcName + "'", delim);
    } else {
      throw new ParseError("Invalid delimiter type '" + delim.type + "'", delim);
    }
  }

  defineFunction({
    type: "delimsizing",
    names: ["\\bigl", "\\Bigl", "\\biggl", "\\Biggl", "\\bigr", "\\Bigr", "\\biggr", "\\Biggr", "\\bigm", "\\Bigm", "\\biggm", "\\Biggm", "\\big", "\\Big", "\\bigg", "\\Bigg"],
    props: {
      numArgs: 1,
      argTypes: ["primitive"]
    },
    handler: (context, args) => {
      var delim = checkDelimiter(args[0], context);
      return {
        type: "delimsizing",
        mode: context.parser.mode,
        size: delimiterSizes[context.funcName].size,
        mclass: delimiterSizes[context.funcName].mclass,
        delim: delim.text
      };
    },
    htmlBuilder: (group, options) => {
      if (group.delim === ".") {
        // Empty delimiters still count as elements, even though they don't
        // show anything.
        return buildCommon.makeSpan([group.mclass]);
      } // Use delimiter.sizedDelim to generate the delimiter.


      return delimiter.sizedDelim(group.delim, group.size, options, group.mode, [group.mclass]);
    },
    mathmlBuilder: group => {
      var children = [];

      if (group.delim !== ".") {
        children.push(makeText(group.delim, group.mode));
      }

      var node = new mathMLTree.MathNode("mo", children);

      if (group.mclass === "mopen" || group.mclass === "mclose") {
        // Only some of the delimsizing functions act as fences, and they
        // return "mopen" or "mclose" mclass.
        node.setAttribute("fence", "true");
      } else {
        // Explicitly disable fencing if it's not a fence, to override the
        // defaults.
        node.setAttribute("fence", "false");
      }

      node.setAttribute("stretchy", "true");
      var size = makeEm(delimiter.sizeToMaxHeight[group.size]);
      node.setAttribute("minsize", size);
      node.setAttribute("maxsize", size);
      return node;
    }
  });

  function assertParsed(group) {
    if (!group.body) {
      throw new Error("Bug: The leftright ParseNode wasn't fully parsed.");
    }
  }

  defineFunction({
    type: "leftright-right",
    names: ["\\right"],
    props: {
      numArgs: 1,
      primitive: true
    },
    handler: (context, args) => {
      // \left case below triggers parsing of \right in
      //   `const right = parser.parseFunction();`
      // uses this return value.
      var color = context.parser.gullet.macros.get("\\current@color");

      if (color && typeof color !== "string") {
        throw new ParseError("\\current@color set to non-string in \\right");
      }

      return {
        type: "leftright-right",
        mode: context.parser.mode,
        delim: checkDelimiter(args[0], context).text,
        color // undefined if not set via \color

      };
    }
  });
  defineFunction({
    type: "leftright",
    names: ["\\left"],
    props: {
      numArgs: 1,
      primitive: true
    },
    handler: (context, args) => {
      var delim = checkDelimiter(args[0], context);
      var parser = context.parser; // Parse out the implicit body

      ++parser.leftrightDepth; // parseExpression stops before '\\right'

      var body = parser.parseExpression(false);
      --parser.leftrightDepth; // Check the next token

      parser.expect("\\right", false);
      var right = assertNodeType(parser.parseFunction(), "leftright-right");
      return {
        type: "leftright",
        mode: parser.mode,
        body,
        left: delim.text,
        right: right.delim,
        rightColor: right.color
      };
    },
    htmlBuilder: (group, options) => {
      assertParsed(group); // Build the inner expression

      var inner = buildExpression$1(group.body, options, true, ["mopen", "mclose"]);
      var innerHeight = 0;
      var innerDepth = 0;
      var hadMiddle = false; // Calculate its height and depth

      for (var i = 0; i < inner.length; i++) {
        // Property `isMiddle` not defined on `span`. See comment in
        // "middle"'s htmlBuilder.
        // $FlowFixMe
        if (inner[i].isMiddle) {
          hadMiddle = true;
        } else {
          innerHeight = Math.max(inner[i].height, innerHeight);
          innerDepth = Math.max(inner[i].depth, innerDepth);
        }
      } // The size of delimiters is the same, regardless of what style we are
      // in. Thus, to correctly calculate the size of delimiter we need around
      // a group, we scale down the inner size based on the size.


      innerHeight *= options.sizeMultiplier;
      innerDepth *= options.sizeMultiplier;
      var leftDelim;

      if (group.left === ".") {
        // Empty delimiters in \left and \right make null delimiter spaces.
        leftDelim = makeNullDelimiter(options, ["mopen"]);
      } else {
        // Otherwise, use leftRightDelim to generate the correct sized
        // delimiter.
        leftDelim = delimiter.leftRightDelim(group.left, innerHeight, innerDepth, options, group.mode, ["mopen"]);
      } // Add it to the beginning of the expression


      inner.unshift(leftDelim); // Handle middle delimiters

      if (hadMiddle) {
        for (var _i = 1; _i < inner.length; _i++) {
          var middleDelim = inner[_i]; // Property `isMiddle` not defined on `span`. See comment in
          // "middle"'s htmlBuilder.
          // $FlowFixMe

          var isMiddle = middleDelim.isMiddle;

          if (isMiddle) {
            // Apply the options that were active when \middle was called
            inner[_i] = delimiter.leftRightDelim(isMiddle.delim, innerHeight, innerDepth, isMiddle.options, group.mode, []);
          }
        }
      }

      var rightDelim; // Same for the right delimiter, but using color specified by \color

      if (group.right === ".") {
        rightDelim = makeNullDelimiter(options, ["mclose"]);
      } else {
        var colorOptions = group.rightColor ? options.withColor(group.rightColor) : options;
        rightDelim = delimiter.leftRightDelim(group.right, innerHeight, innerDepth, colorOptions, group.mode, ["mclose"]);
      } // Add it to the end of the expression.


      inner.push(rightDelim);
      return buildCommon.makeSpan(["minner"], inner, options);
    },
    mathmlBuilder: (group, options) => {
      assertParsed(group);
      var inner = buildExpression(group.body, options);

      if (group.left !== ".") {
        var leftNode = new mathMLTree.MathNode("mo", [makeText(group.left, group.mode)]);
        leftNode.setAttribute("fence", "true");
        inner.unshift(leftNode);
      }

      if (group.right !== ".") {
        var rightNode = new mathMLTree.MathNode("mo", [makeText(group.right, group.mode)]);
        rightNode.setAttribute("fence", "true");

        if (group.rightColor) {
          rightNode.setAttribute("mathcolor", group.rightColor);
        }

        inner.push(rightNode);
      }

      return makeRow(inner);
    }
  });
  defineFunction({
    type: "middle",
    names: ["\\middle"],
    props: {
      numArgs: 1,
      primitive: true
    },
    handler: (context, args) => {
      var delim = checkDelimiter(args[0], context);

      if (!context.parser.leftrightDepth) {
        throw new ParseError("\\middle without preceding \\left", delim);
      }

      return {
        type: "middle",
        mode: context.parser.mode,
        delim: delim.text
      };
    },
    htmlBuilder: (group, options) => {
      var middleDelim;

      if (group.delim === ".") {
        middleDelim = makeNullDelimiter(options, []);
      } else {
        middleDelim = delimiter.sizedDelim(group.delim, 1, options, group.mode, []);
        var isMiddle = {
          delim: group.delim,
          options
        }; // Property `isMiddle` not defined on `span`. It is only used in
        // this file above.
        // TODO: Fix this violation of the `span` type and possibly rename
        // things since `isMiddle` sounds like a boolean, but is a struct.
        // $FlowFixMe

        middleDelim.isMiddle = isMiddle;
      }

      return middleDelim;
    },
    mathmlBuilder: (group, options) => {
      // A Firefox \middle will stretch a character vertically only if it
      // is in the fence part of the operator dictionary at:
      // https://www.w3.org/TR/MathML3/appendixc.html.
      // So we need to avoid U+2223 and use plain "|" instead.
      var textNode = group.delim === "\\vert" || group.delim === "|" ? makeText("|", "text") : makeText(group.delim, group.mode);
      var middleNode = new mathMLTree.MathNode("mo", [textNode]);
      middleNode.setAttribute("fence", "true"); // MathML gives 5/18em spacing to each <mo> element.
      // \middle should get delimiter spacing instead.

      middleNode.setAttribute("lspace", "0.05em");
      middleNode.setAttribute("rspace", "0.05em");
      return middleNode;
    }
  });

  var htmlBuilder$7 = (group, options) => {
    // \cancel, \bcancel, \xcancel, \sout, \fbox, \colorbox, \fcolorbox, \phase
    // Some groups can return document fragments.  Handle those by wrapping
    // them in a span.
    var inner = buildCommon.wrapFragment(buildGroup$1(group.body, options), options);
    var label = group.label.slice(1);
    var scale = options.sizeMultiplier;
    var img;
    var imgShift = 0; // In the LaTeX cancel package, line geometry is slightly different
    // depending on whether the subject is wider than it is tall, or vice versa.
    // We don't know the width of a group, so as a proxy, we test if
    // the subject is a single character. This captures most of the
    // subjects that should get the "tall" treatment.

    var isSingleChar = utils.isCharacterBox(group.body);

    if (label === "sout") {
      img = buildCommon.makeSpan(["stretchy", "sout"]);
      img.height = options.fontMetrics().defaultRuleThickness / scale;
      imgShift = -0.5 * options.fontMetrics().xHeight;
    } else if (label === "phase") {
      // Set a couple of dimensions from the steinmetz package.
      var lineWeight = calculateSize({
        number: 0.6,
        unit: "pt"
      }, options);
      var clearance = calculateSize({
        number: 0.35,
        unit: "ex"
      }, options); // Prevent size changes like \Huge from affecting line thickness

      var newOptions = options.havingBaseSizing();
      scale = scale / newOptions.sizeMultiplier;
      var angleHeight = inner.height + inner.depth + lineWeight + clearance; // Reserve a left pad for the angle.

      inner.style.paddingLeft = makeEm(angleHeight / 2 + lineWeight); // Create an SVG

      var viewBoxHeight = Math.floor(1000 * angleHeight * scale);
      var path = phasePath(viewBoxHeight);
      var svgNode = new SvgNode([new PathNode("phase", path)], {
        "width": "400em",
        "height": makeEm(viewBoxHeight / 1000),
        "viewBox": "0 0 400000 " + viewBoxHeight,
        "preserveAspectRatio": "xMinYMin slice"
      }); // Wrap it in a span with overflow: hidden.

      img = buildCommon.makeSvgSpan(["hide-tail"], [svgNode], options);
      img.style.height = makeEm(angleHeight);
      imgShift = inner.depth + lineWeight + clearance;
    } else {
      // Add horizontal padding
      if (/cancel/.test(label)) {
        if (!isSingleChar) {
          inner.classes.push("cancel-pad");
        }
      } else if (label === "angl") {
        inner.classes.push("anglpad");
      } else {
        inner.classes.push("boxpad");
      } // Add vertical padding


      var topPad = 0;
      var bottomPad = 0;
      var ruleThickness = 0; // ref: cancel package: \advance\totalheight2\p@ % "+2"

      if (/box/.test(label)) {
        ruleThickness = Math.max(options.fontMetrics().fboxrule, // default
        options.minRuleThickness // User override.
        );
        topPad = options.fontMetrics().fboxsep + (label === "colorbox" ? 0 : ruleThickness);
        bottomPad = topPad;
      } else if (label === "angl") {
        ruleThickness = Math.max(options.fontMetrics().defaultRuleThickness, options.minRuleThickness);
        topPad = 4 * ruleThickness; // gap = 3 × line, plus the line itself.

        bottomPad = Math.max(0, 0.25 - inner.depth);
      } else {
        topPad = isSingleChar ? 0.2 : 0;
        bottomPad = topPad;
      }

      img = stretchy.encloseSpan(inner, label, topPad, bottomPad, options);

      if (/fbox|boxed|fcolorbox/.test(label)) {
        img.style.borderStyle = "solid";
        img.style.borderWidth = makeEm(ruleThickness);
      } else if (label === "angl" && ruleThickness !== 0.049) {
        img.style.borderTopWidth = makeEm(ruleThickness);
        img.style.borderRightWidth = makeEm(ruleThickness);
      }

      imgShift = inner.depth + bottomPad;

      if (group.backgroundColor) {
        img.style.backgroundColor = group.backgroundColor;

        if (group.borderColor) {
          img.style.borderColor = group.borderColor;
        }
      }
    }

    var vlist;

    if (group.backgroundColor) {
      vlist = buildCommon.makeVList({
        positionType: "individualShift",
        children: [// Put the color background behind inner;
        {
          type: "elem",
          elem: img,
          shift: imgShift
        }, {
          type: "elem",
          elem: inner,
          shift: 0
        }]
      }, options);
    } else {
      var classes = /cancel|phase/.test(label) ? ["svg-align"] : [];
      vlist = buildCommon.makeVList({
        positionType: "individualShift",
        children: [// Write the \cancel stroke on top of inner.
        {
          type: "elem",
          elem: inner,
          shift: 0
        }, {
          type: "elem",
          elem: img,
          shift: imgShift,
          wrapperClasses: classes
        }]
      }, options);
    }

    if (/cancel/.test(label)) {
      // The cancel package documentation says that cancel lines add their height
      // to the expression, but tests show that isn't how it actually works.
      vlist.height = inner.height;
      vlist.depth = inner.depth;
    }

    if (/cancel/.test(label) && !isSingleChar) {
      // cancel does not create horiz space for its line extension.
      return buildCommon.makeSpan(["mord", "cancel-lap"], [vlist], options);
    } else {
      return buildCommon.makeSpan(["mord"], [vlist], options);
    }
  };

  var mathmlBuilder$6 = (group, options) => {
    var fboxsep = 0;
    var node = new mathMLTree.MathNode(group.label.indexOf("colorbox") > -1 ? "mpadded" : "menclose", [buildGroup(group.body, options)]);

    switch (group.label) {
      case "\\cancel":
        node.setAttribute("notation", "updiagonalstrike");
        break;

      case "\\bcancel":
        node.setAttribute("notation", "downdiagonalstrike");
        break;

      case "\\phase":
        node.setAttribute("notation", "phasorangle");
        break;

      case "\\sout":
        node.setAttribute("notation", "horizontalstrike");
        break;

      case "\\fbox":
        node.setAttribute("notation", "box");
        break;

      case "\\angl":
        node.setAttribute("notation", "actuarial");
        break;

      case "\\fcolorbox":
      case "\\colorbox":
        // <menclose> doesn't have a good notation option. So use <mpadded>
        // instead. Set some attributes that come included with <menclose>.
        fboxsep = options.fontMetrics().fboxsep * options.fontMetrics().ptPerEm;
        node.setAttribute("width", "+" + 2 * fboxsep + "pt");
        node.setAttribute("height", "+" + 2 * fboxsep + "pt");
        node.setAttribute("lspace", fboxsep + "pt"); //

        node.setAttribute("voffset", fboxsep + "pt");

        if (group.label === "\\fcolorbox") {
          var thk = Math.max(options.fontMetrics().fboxrule, // default
          options.minRuleThickness // user override
          );
          node.setAttribute("style", "border: " + thk + "em solid " + String(group.borderColor));
        }

        break;

      case "\\xcancel":
        node.setAttribute("notation", "updiagonalstrike downdiagonalstrike");
        break;
    }

    if (group.backgroundColor) {
      node.setAttribute("mathbackground", group.backgroundColor);
    }

    return node;
  };

  defineFunction({
    type: "enclose",
    names: ["\\colorbox"],
    props: {
      numArgs: 2,
      allowedInText: true,
      argTypes: ["color", "text"]
    },

    handler(_ref, args, optArgs) {
      var {
        parser,
        funcName
      } = _ref;
      var color = assertNodeType(args[0], "color-token").color;
      var body = args[1];
      return {
        type: "enclose",
        mode: parser.mode,
        label: funcName,
        backgroundColor: color,
        body
      };
    },

    htmlBuilder: htmlBuilder$7,
    mathmlBuilder: mathmlBuilder$6
  });
  defineFunction({
    type: "enclose",
    names: ["\\fcolorbox"],
    props: {
      numArgs: 3,
      allowedInText: true,
      argTypes: ["color", "color", "text"]
    },

    handler(_ref2, args, optArgs) {
      var {
        parser,
        funcName
      } = _ref2;
      var borderColor = assertNodeType(args[0], "color-token").color;
      var backgroundColor = assertNodeType(args[1], "color-token").color;
      var body = args[2];
      return {
        type: "enclose",
        mode: parser.mode,
        label: funcName,
        backgroundColor,
        borderColor,
        body
      };
    },

    htmlBuilder: htmlBuilder$7,
    mathmlBuilder: mathmlBuilder$6
  });
  defineFunction({
    type: "enclose",
    names: ["\\fbox"],
    props: {
      numArgs: 1,
      argTypes: ["hbox"],
      allowedInText: true
    },

    handler(_ref3, args) {
      var {
        parser
      } = _ref3;
      return {
        type: "enclose",
        mode: parser.mode,
        label: "\\fbox",
        body: args[0]
      };
    }

  });
  defineFunction({
    type: "enclose",
    names: ["\\cancel", "\\bcancel", "\\xcancel", "\\sout", "\\phase"],
    props: {
      numArgs: 1
    },

    handler(_ref4, args) {
      var {
        parser,
        funcName
      } = _ref4;
      var body = args[0];
      return {
        type: "enclose",
        mode: parser.mode,
        label: funcName,
        body
      };
    },

    htmlBuilder: htmlBuilder$7,
    mathmlBuilder: mathmlBuilder$6
  });
  defineFunction({
    type: "enclose",
    names: ["\\angl"],
    props: {
      numArgs: 1,
      argTypes: ["hbox"],
      allowedInText: false
    },

    handler(_ref5, args) {
      var {
        parser
      } = _ref5;
      return {
        type: "enclose",
        mode: parser.mode,
        label: "\\angl",
        body: args[0]
      };
    }

  });

  /**
   * All registered environments.
   * `environments.js` exports this same dictionary again and makes it public.
   * `Parser.js` requires this dictionary via `environments.js`.
   */
  var _environments = {};
  function defineEnvironment(_ref) {
    var {
      type,
      names,
      props,
      handler,
      htmlBuilder,
      mathmlBuilder
    } = _ref;
    // Set default values of environments.
    var data = {
      type,
      numArgs: props.numArgs || 0,
      allowedInText: false,
      numOptionalArgs: 0,
      handler
    };

    for (var i = 0; i < names.length; ++i) {
      // TODO: The value type of _environments should be a type union of all
      // possible `EnvSpec<>` possibilities instead of `EnvSpec<*>`, which is
      // an existential type.
      _environments[names[i]] = data;
    }

    if (htmlBuilder) {
      _htmlGroupBuilders[type] = htmlBuilder;
    }

    if (mathmlBuilder) {
      _mathmlGroupBuilders[type] = mathmlBuilder;
    }
  }

  /**
   * All registered global/built-in macros.
   * `macros.js` exports this same dictionary again and makes it public.
   * `Parser.js` requires this dictionary via `macros.js`.
   */
  var _macros = {}; // This function might one day accept an additional argument and do more things.

  function defineMacro(name, body) {
    _macros[name] = body;
  }

  // Helper functions
  function getHLines(parser) {
    // Return an array. The array length = number of hlines.
    // Each element in the array tells if the line is dashed.
    var hlineInfo = [];
    parser.consumeSpaces();
    var nxt = parser.fetch().text;

    if (nxt === "\\relax") {
      // \relax is an artifact of the \cr macro below
      parser.consume();
      parser.consumeSpaces();
      nxt = parser.fetch().text;
    }

    while (nxt === "\\hline" || nxt === "\\hdashline") {
      parser.consume();
      hlineInfo.push(nxt === "\\hdashline");
      parser.consumeSpaces();
      nxt = parser.fetch().text;
    }

    return hlineInfo;
  }

  var validateAmsEnvironmentContext = context => {
    var settings = context.parser.settings;

    if (!settings.displayMode) {
      throw new ParseError("{" + context.envName + "} can be used only in" + " display mode.");
    }
  }; // autoTag (an argument to parseArray) can be one of three values:
  // * undefined: Regular (not-top-level) array; no tags on each row
  // * true: Automatic equation numbering, overridable by \tag
  // * false: Tags allowed on each row, but no automatic numbering
  // This function *doesn't* work with the "split" environment name.


  function getAutoTag(name) {
    if (name.indexOf("ed") === -1) {
      return name.indexOf("*") === -1;
    } // return undefined;

  }
  /**
   * Parse the body of the environment, with rows delimited by \\ and
   * columns delimited by &, and create a nested list in row-major order
   * with one group per cell.  If given an optional argument style
   * ("text", "display", etc.), then each cell is cast into that style.
   */


  function parseArray(parser, _ref, style) {
    var {
      hskipBeforeAndAfter,
      addJot,
      cols,
      arraystretch,
      colSeparationType,
      autoTag,
      singleRow,
      emptySingleRow,
      maxNumCols,
      leqno
    } = _ref;
    parser.gullet.beginGroup();

    if (!singleRow) {
      // \cr is equivalent to \\ without the optional size argument (see below)
      // TODO: provide helpful error when \cr is used outside array environment
      parser.gullet.macros.set("\\cr", "\\\\\\relax");
    } // Get current arraystretch if it's not set by the environment


    if (!arraystretch) {
      var stretch = parser.gullet.expandMacroAsText("\\arraystretch");

      if (stretch == null) {
        // Default \arraystretch from lttab.dtx
        arraystretch = 1;
      } else {
        arraystretch = parseFloat(stretch);

        if (!arraystretch || arraystretch < 0) {
          throw new ParseError("Invalid \\arraystretch: " + stretch);
        }
      }
    } // Start group for first cell


    parser.gullet.beginGroup();
    var row = [];
    var body = [row];
    var rowGaps = [];
    var hLinesBeforeRow = [];
    var tags = autoTag != null ? [] : undefined; // amsmath uses \global\@eqnswtrue and \global\@eqnswfalse to represent
    // whether this row should have an equation number.  Simulate this with
    // a \@eqnsw macro set to 1 or 0.

    function beginRow() {
      if (autoTag) {
        parser.gullet.macros.set("\\@eqnsw", "1", true);
      }
    }

    function endRow() {
      if (tags) {
        if (parser.gullet.macros.get("\\df@tag")) {
          tags.push(parser.subparse([new Token("\\df@tag")]));
          parser.gullet.macros.set("\\df@tag", undefined, true);
        } else {
          tags.push(Boolean(autoTag) && parser.gullet.macros.get("\\@eqnsw") === "1");
        }
      }
    }

    beginRow(); // Test for \hline at the top of the array.

    hLinesBeforeRow.push(getHLines(parser));

    while (true) {
      // eslint-disable-line no-constant-condition
      // Parse each cell in its own group (namespace)
      var cell = parser.parseExpression(false, singleRow ? "\\end" : "\\\\");
      parser.gullet.endGroup();
      parser.gullet.beginGroup();
      cell = {
        type: "ordgroup",
        mode: parser.mode,
        body: cell
      };

      if (style) {
        cell = {
          type: "styling",
          mode: parser.mode,
          style,
          body: [cell]
        };
      }

      row.push(cell);
      var next = parser.fetch().text;

      if (next === "&") {
        if (maxNumCols && row.length === maxNumCols) {
          if (singleRow || colSeparationType) {
            // {equation} or {split}
            throw new ParseError("Too many tab characters: &", parser.nextToken);
          } else {
            // {array} environment
            parser.settings.reportNonstrict("textEnv", "Too few columns " + "specified in the {array} column argument.");
          }
        }

        parser.consume();
      } else if (next === "\\end") {
        endRow(); // Arrays terminate newlines with `\crcr` which consumes a `\cr` if
        // the last line is empty.  However, AMS environments keep the
        // empty row if it's the only one.
        // NOTE: Currently, `cell` is the last item added into `row`.

        if (row.length === 1 && cell.type === "styling" && cell.body[0].body.length === 0 && (body.length > 1 || !emptySingleRow)) {
          body.pop();
        }

        if (hLinesBeforeRow.length < body.length + 1) {
          hLinesBeforeRow.push([]);
        }

        break;
      } else if (next === "\\\\") {
        parser.consume();
        var size = undefined; // \def\Let@{\let\\\math@cr}
        // \def\math@cr{...\math@cr@}
        // \def\math@cr@{\new@ifnextchar[\math@cr@@{\math@cr@@[\z@]}}
        // \def\math@cr@@[#1]{...\math@cr@@@...}
        // \def\math@cr@@@{\cr}

        if (parser.gullet.future().text !== " ") {
          size = parser.parseSizeGroup(true);
        }

        rowGaps.push(size ? size.value : null);
        endRow(); // check for \hline(s) following the row separator

        hLinesBeforeRow.push(getHLines(parser));
        row = [];
        body.push(row);
        beginRow();
      } else {
        throw new ParseError("Expected & or \\\\ or \\cr or \\end", parser.nextToken);
      }
    } // End cell group


    parser.gullet.endGroup(); // End array group defining \cr

    parser.gullet.endGroup();
    return {
      type: "array",
      mode: parser.mode,
      addJot,
      arraystretch,
      body,
      cols,
      rowGaps,
      hskipBeforeAndAfter,
      hLinesBeforeRow,
      colSeparationType,
      tags,
      leqno
    };
  } // Decides on a style for cells in an array according to whether the given
  // environment name starts with the letter 'd'.


  function dCellStyle(envName) {
    if (envName.slice(0, 1) === "d") {
      return "display";
    } else {
      return "text";
    }
  }

  var htmlBuilder$6 = function htmlBuilder(group, options) {
    var r;
    var c;
    var nr = group.body.length;
    var hLinesBeforeRow = group.hLinesBeforeRow;
    var nc = 0;
    var body = new Array(nr);
    var hlines = [];
    var ruleThickness = Math.max( // From LaTeX \showthe\arrayrulewidth. Equals 0.04 em.
    options.fontMetrics().arrayRuleWidth, options.minRuleThickness // User override.
    ); // Horizontal spacing

    var pt = 1 / options.fontMetrics().ptPerEm;
    var arraycolsep = 5 * pt; // default value, i.e. \arraycolsep in article.cls

    if (group.colSeparationType && group.colSeparationType === "small") {
      // We're in a {smallmatrix}. Default column space is \thickspace,
      // i.e. 5/18em = 0.2778em, per amsmath.dtx for {smallmatrix}.
      // But that needs adjustment because LaTeX applies \scriptstyle to the
      // entire array, including the colspace, but this function applies
      // \scriptstyle only inside each element.
      var localMultiplier = options.havingStyle(Style$1.SCRIPT).sizeMultiplier;
      arraycolsep = 0.2778 * (localMultiplier / options.sizeMultiplier);
    } // Vertical spacing


    var baselineskip = group.colSeparationType === "CD" ? calculateSize({
      number: 3,
      unit: "ex"
    }, options) : 12 * pt; // see size10.clo
    // Default \jot from ltmath.dtx
    // TODO(edemaine): allow overriding \jot via \setlength (#687)

    var jot = 3 * pt;
    var arrayskip = group.arraystretch * baselineskip;
    var arstrutHeight = 0.7 * arrayskip; // \strutbox in ltfsstrc.dtx and

    var arstrutDepth = 0.3 * arrayskip; // \@arstrutbox in lttab.dtx

    var totalHeight = 0; // Set a position for \hline(s) at the top of the array, if any.

    function setHLinePos(hlinesInGap) {
      for (var i = 0; i < hlinesInGap.length; ++i) {
        if (i > 0) {
          totalHeight += 0.25;
        }

        hlines.push({
          pos: totalHeight,
          isDashed: hlinesInGap[i]
        });
      }
    }

    setHLinePos(hLinesBeforeRow[0]);

    for (r = 0; r < group.body.length; ++r) {
      var inrow = group.body[r];
      var height = arstrutHeight; // \@array adds an \@arstrut

      var depth = arstrutDepth; // to each tow (via the template)

      if (nc < inrow.length) {
        nc = inrow.length;
      }

      var outrow = new Array(inrow.length);

      for (c = 0; c < inrow.length; ++c) {
        var elt = buildGroup$1(inrow[c], options);

        if (depth < elt.depth) {
          depth = elt.depth;
        }

        if (height < elt.height) {
          height = elt.height;
        }

        outrow[c] = elt;
      }

      var rowGap = group.rowGaps[r];
      var gap = 0;

      if (rowGap) {
        gap = calculateSize(rowGap, options);

        if (gap > 0) {
          // \@argarraycr
          gap += arstrutDepth;

          if (depth < gap) {
            depth = gap; // \@xargarraycr
          }

          gap = 0;
        }
      } // In AMS multiline environments such as aligned and gathered, rows
      // correspond to lines that have additional \jot added to the
      // \baselineskip via \openup.


      if (group.addJot) {
        depth += jot;
      }

      outrow.height = height;
      outrow.depth = depth;
      totalHeight += height;
      outrow.pos = totalHeight;
      totalHeight += depth + gap; // \@yargarraycr

      body[r] = outrow; // Set a position for \hline(s), if any.

      setHLinePos(hLinesBeforeRow[r + 1]);
    }

    var offset = totalHeight / 2 + options.fontMetrics().axisHeight;
    var colDescriptions = group.cols || [];
    var cols = [];
    var colSep;
    var colDescrNum;
    var tagSpans = [];

    if (group.tags && group.tags.some(tag => tag)) {
      // An environment with manual tags and/or automatic equation numbers.
      // Create node(s), the latter of which trigger CSS counter increment.
      for (r = 0; r < nr; ++r) {
        var rw = body[r];
        var shift = rw.pos - offset;
        var tag = group.tags[r];
        var tagSpan = undefined;

        if (tag === true) {
          // automatic numbering
          tagSpan = buildCommon.makeSpan(["eqn-num"], [], options);
        } else if (tag === false) {
          // \nonumber/\notag or starred environment
          tagSpan = buildCommon.makeSpan([], [], options);
        } else {
          // manual \tag
          tagSpan = buildCommon.makeSpan([], buildExpression$1(tag, options, true), options);
        }

        tagSpan.depth = rw.depth;
        tagSpan.height = rw.height;
        tagSpans.push({
          type: "elem",
          elem: tagSpan,
          shift
        });
      }
    }

    for (c = 0, colDescrNum = 0; // Continue while either there are more columns or more column
    // descriptions, so trailing separators don't get lost.
    c < nc || colDescrNum < colDescriptions.length; ++c, ++colDescrNum) {
      var colDescr = colDescriptions[colDescrNum] || {};
      var firstSeparator = true;

      while (colDescr.type === "separator") {
        // If there is more than one separator in a row, add a space
        // between them.
        if (!firstSeparator) {
          colSep = buildCommon.makeSpan(["arraycolsep"], []);
          colSep.style.width = makeEm(options.fontMetrics().doubleRuleSep);
          cols.push(colSep);
        }

        if (colDescr.separator === "|" || colDescr.separator === ":") {
          var lineType = colDescr.separator === "|" ? "solid" : "dashed";
          var separator = buildCommon.makeSpan(["vertical-separator"], [], options);
          separator.style.height = makeEm(totalHeight);
          separator.style.borderRightWidth = makeEm(ruleThickness);
          separator.style.borderRightStyle = lineType;
          separator.style.margin = "0 " + makeEm(-ruleThickness / 2);

          var _shift = totalHeight - offset;

          if (_shift) {
            separator.style.verticalAlign = makeEm(-_shift);
          }

          cols.push(separator);
        } else {
          throw new ParseError("Invalid separator type: " + colDescr.separator);
        }

        colDescrNum++;
        colDescr = colDescriptions[colDescrNum] || {};
        firstSeparator = false;
      }

      if (c >= nc) {
        continue;
      }

      var sepwidth = undefined;

      if (c > 0 || group.hskipBeforeAndAfter) {
        sepwidth = utils.deflt(colDescr.pregap, arraycolsep);

        if (sepwidth !== 0) {
          colSep = buildCommon.makeSpan(["arraycolsep"], []);
          colSep.style.width = makeEm(sepwidth);
          cols.push(colSep);
        }
      }

      var col = [];

      for (r = 0; r < nr; ++r) {
        var row = body[r];
        var elem = row[c];

        if (!elem) {
          continue;
        }

        var _shift2 = row.pos - offset;

        elem.depth = row.depth;
        elem.height = row.height;
        col.push({
          type: "elem",
          elem: elem,
          shift: _shift2
        });
      }

      col = buildCommon.makeVList({
        positionType: "individualShift",
        children: col
      }, options);
      col = buildCommon.makeSpan(["col-align-" + (colDescr.align || "c")], [col]);
      cols.push(col);

      if (c < nc - 1 || group.hskipBeforeAndAfter) {
        sepwidth = utils.deflt(colDescr.postgap, arraycolsep);

        if (sepwidth !== 0) {
          colSep = buildCommon.makeSpan(["arraycolsep"], []);
          colSep.style.width = makeEm(sepwidth);
          cols.push(colSep);
        }
      }
    }

    body = buildCommon.makeSpan(["mtable"], cols); // Add \hline(s), if any.

    if (hlines.length > 0) {
      var line = buildCommon.makeLineSpan("hline", options, ruleThickness);
      var dashes = buildCommon.makeLineSpan("hdashline", options, ruleThickness);
      var vListElems = [{
        type: "elem",
        elem: body,
        shift: 0
      }];

      while (hlines.length > 0) {
        var hline = hlines.pop();
        var lineShift = hline.pos - offset;

        if (hline.isDashed) {
          vListElems.push({
            type: "elem",
            elem: dashes,
            shift: lineShift
          });
        } else {
          vListElems.push({
            type: "elem",
            elem: line,
            shift: lineShift
          });
        }
      }

      body = buildCommon.makeVList({
        positionType: "individualShift",
        children: vListElems
      }, options);
    }

    if (tagSpans.length === 0) {
      return buildCommon.makeSpan(["mord"], [body], options);
    } else {
      var eqnNumCol = buildCommon.makeVList({
        positionType: "individualShift",
        children: tagSpans
      }, options);
      eqnNumCol = buildCommon.makeSpan(["tag"], [eqnNumCol], options);
      return buildCommon.makeFragment([body, eqnNumCol]);
    }
  };

  var alignMap = {
    c: "center ",
    l: "left ",
    r: "right "
  };

  var mathmlBuilder$5 = function mathmlBuilder(group, options) {
    var tbl = [];
    var glue = new mathMLTree.MathNode("mtd", [], ["mtr-glue"]);
    var tag = new mathMLTree.MathNode("mtd", [], ["mml-eqn-num"]);

    for (var i = 0; i < group.body.length; i++) {
      var rw = group.body[i];
      var row = [];

      for (var j = 0; j < rw.length; j++) {
        row.push(new mathMLTree.MathNode("mtd", [buildGroup(rw[j], options)]));
      }

      if (group.tags && group.tags[i]) {
        row.unshift(glue);
        row.push(glue);

        if (group.leqno) {
          row.unshift(tag);
        } else {
          row.push(tag);
        }
      }

      tbl.push(new mathMLTree.MathNode("mtr", row));
    }

    var table = new mathMLTree.MathNode("mtable", tbl); // Set column alignment, row spacing, column spacing, and
    // array lines by setting attributes on the table element.
    // Set the row spacing. In MathML, we specify a gap distance.
    // We do not use rowGap[] because MathML automatically increases
    // cell height with the height/depth of the element content.
    // LaTeX \arraystretch multiplies the row baseline-to-baseline distance.
    // We simulate this by adding (arraystretch - 1)em to the gap. This
    // does a reasonable job of adjusting arrays containing 1 em tall content.
    // The 0.16 and 0.09 values are found empirically. They produce an array
    // similar to LaTeX and in which content does not interfere with \hlines.

    var gap = group.arraystretch === 0.5 ? 0.1 // {smallmatrix}, {subarray}
    : 0.16 + group.arraystretch - 1 + (group.addJot ? 0.09 : 0);
    table.setAttribute("rowspacing", makeEm(gap)); // MathML table lines go only between cells.
    // To place a line on an edge we'll use <menclose>, if necessary.

    var menclose = "";
    var align = "";

    if (group.cols && group.cols.length > 0) {
      // Find column alignment, column spacing, and  vertical lines.
      var cols = group.cols;
      var columnLines = "";
      var prevTypeWasAlign = false;
      var iStart = 0;
      var iEnd = cols.length;

      if (cols[0].type === "separator") {
        menclose += "top ";
        iStart = 1;
      }

      if (cols[cols.length - 1].type === "separator") {
        menclose += "bottom ";
        iEnd -= 1;
      }

      for (var _i = iStart; _i < iEnd; _i++) {
        if (cols[_i].type === "align") {
          align += alignMap[cols[_i].align];

          if (prevTypeWasAlign) {
            columnLines += "none ";
          }

          prevTypeWasAlign = true;
        } else if (cols[_i].type === "separator") {
          // MathML accepts only single lines between cells.
          // So we read only the first of consecutive separators.
          if (prevTypeWasAlign) {
            columnLines += cols[_i].separator === "|" ? "solid " : "dashed ";
            prevTypeWasAlign = false;
          }
        }
      }

      table.setAttribute("columnalign", align.trim());

      if (/[sd]/.test(columnLines)) {
        table.setAttribute("columnlines", columnLines.trim());
      }
    } // Set column spacing.


    if (group.colSeparationType === "align") {
      var _cols = group.cols || [];

      var spacing = "";

      for (var _i2 = 1; _i2 < _cols.length; _i2++) {
        spacing += _i2 % 2 ? "0em " : "1em ";
      }

      table.setAttribute("columnspacing", spacing.trim());
    } else if (group.colSeparationType === "alignat" || group.colSeparationType === "gather") {
      table.setAttribute("columnspacing", "0em");
    } else if (group.colSeparationType === "small") {
      table.setAttribute("columnspacing", "0.2778em");
    } else if (group.colSeparationType === "CD") {
      table.setAttribute("columnspacing", "0.5em");
    } else {
      table.setAttribute("columnspacing", "1em");
    } // Address \hline and \hdashline


    var rowLines = "";
    var hlines = group.hLinesBeforeRow;
    menclose += hlines[0].length > 0 ? "left " : "";
    menclose += hlines[hlines.length - 1].length > 0 ? "right " : "";

    for (var _i3 = 1; _i3 < hlines.length - 1; _i3++) {
      rowLines += hlines[_i3].length === 0 ? "none " // MathML accepts only a single line between rows. Read one element.
      : hlines[_i3][0] ? "dashed " : "solid ";
    }

    if (/[sd]/.test(rowLines)) {
      table.setAttribute("rowlines", rowLines.trim());
    }

    if (menclose !== "") {
      table = new mathMLTree.MathNode("menclose", [table]);
      table.setAttribute("notation", menclose.trim());
    }

    if (group.arraystretch && group.arraystretch < 1) {
      // A small array. Wrap in scriptstyle so row gap is not too large.
      table = new mathMLTree.MathNode("mstyle", [table]);
      table.setAttribute("scriptlevel", "1");
    }

    return table;
  }; // Convenience function for align, align*, aligned, alignat, alignat*, alignedat.


  var alignedHandler = function alignedHandler(context, args) {
    if (context.envName.indexOf("ed") === -1) {
      validateAmsEnvironmentContext(context);
    }

    var cols = [];
    var separationType = context.envName.indexOf("at") > -1 ? "alignat" : "align";
    var isSplit = context.envName === "split";
    var res = parseArray(context.parser, {
      cols,
      addJot: true,
      autoTag: isSplit ? undefined : getAutoTag(context.envName),
      emptySingleRow: true,
      colSeparationType: separationType,
      maxNumCols: isSplit ? 2 : undefined,
      leqno: context.parser.settings.leqno
    }, "display"); // Determining number of columns.
    // 1. If the first argument is given, we use it as a number of columns,
    //    and makes sure that each row doesn't exceed that number.
    // 2. Otherwise, just count number of columns = maximum number
    //    of cells in each row ("aligned" mode -- isAligned will be true).
    //
    // At the same time, prepend empty group {} at beginning of every second
    // cell in each row (starting with second cell) so that operators become
    // binary.  This behavior is implemented in amsmath's \start@aligned.

    var numMaths;
    var numCols = 0;
    var emptyGroup = {
      type: "ordgroup",
      mode: context.mode,
      body: []
    };

    if (args[0] && args[0].type === "ordgroup") {
      var arg0 = "";

      for (var i = 0; i < args[0].body.length; i++) {
        var textord = assertNodeType(args[0].body[i], "textord");
        arg0 += textord.text;
      }

      numMaths = Number(arg0);
      numCols = numMaths * 2;
    }

    var isAligned = !numCols;
    res.body.forEach(function (row) {
      for (var _i4 = 1; _i4 < row.length; _i4 += 2) {
        // Modify ordgroup node within styling node
        var styling = assertNodeType(row[_i4], "styling");
        var ordgroup = assertNodeType(styling.body[0], "ordgroup");
        ordgroup.body.unshift(emptyGroup);
      }

      if (!isAligned) {
        // Case 1
        var curMaths = row.length / 2;

        if (numMaths < curMaths) {
          throw new ParseError("Too many math in a row: " + ("expected " + numMaths + ", but got " + curMaths), row[0]);
        }
      } else if (numCols < row.length) {
        // Case 2
        numCols = row.length;
      }
    }); // Adjusting alignment.
    // In aligned mode, we add one \qquad between columns;
    // otherwise we add nothing.

    for (var _i5 = 0; _i5 < numCols; ++_i5) {
      var align = "r";
      var pregap = 0;

      if (_i5 % 2 === 1) {
        align = "l";
      } else if (_i5 > 0 && isAligned) {
        // "aligned" mode.
        pregap = 1; // add one \quad
      }

      cols[_i5] = {
        type: "align",
        align: align,
        pregap: pregap,
        postgap: 0
      };
    }

    res.colSeparationType = isAligned ? "align" : "alignat";
    return res;
  }; // Arrays are part of LaTeX, defined in lttab.dtx so its documentation
  // is part of the source2e.pdf file of LaTeX2e source documentation.
  // {darray} is an {array} environment where cells are set in \displaystyle,
  // as defined in nccmath.sty.


  defineEnvironment({
    type: "array",
    names: ["array", "darray"],
    props: {
      numArgs: 1
    },

    handler(context, args) {
      // Since no types are specified above, the two possibilities are
      // - The argument is wrapped in {} or [], in which case Parser's
      //   parseGroup() returns an "ordgroup" wrapping some symbol node.
      // - The argument is a bare symbol node.
      var symNode = checkSymbolNodeType(args[0]);
      var colalign = symNode ? [args[0]] : assertNodeType(args[0], "ordgroup").body;
      var cols = colalign.map(function (nde) {
        var node = assertSymbolNodeType(nde);
        var ca = node.text;

        if ("lcr".indexOf(ca) !== -1) {
          return {
            type: "align",
            align: ca
          };
        } else if (ca === "|") {
          return {
            type: "separator",
            separator: "|"
          };
        } else if (ca === ":") {
          return {
            type: "separator",
            separator: ":"
          };
        }

        throw new ParseError("Unknown column alignment: " + ca, nde);
      });
      var res = {
        cols,
        hskipBeforeAndAfter: true,
        // \@preamble in lttab.dtx
        maxNumCols: cols.length
      };
      return parseArray(context.parser, res, dCellStyle(context.envName));
    },

    htmlBuilder: htmlBuilder$6,
    mathmlBuilder: mathmlBuilder$5
  }); // The matrix environments of amsmath builds on the array environment
  // of LaTeX, which is discussed above.
  // The mathtools package adds starred versions of the same environments.
  // These have an optional argument to choose left|center|right justification.

  defineEnvironment({
    type: "array",
    names: ["matrix", "pmatrix", "bmatrix", "Bmatrix", "vmatrix", "Vmatrix", "matrix*", "pmatrix*", "bmatrix*", "Bmatrix*", "vmatrix*", "Vmatrix*"],
    props: {
      numArgs: 0
    },

    handler(context) {
      var delimiters = {
        "matrix": null,
        "pmatrix": ["(", ")"],
        "bmatrix": ["[", "]"],
        "Bmatrix": ["\\{", "\\}"],
        "vmatrix": ["|", "|"],
        "Vmatrix": ["\\Vert", "\\Vert"]
      }[context.envName.replace("*", "")]; // \hskip -\arraycolsep in amsmath

      var colAlign = "c";
      var payload = {
        hskipBeforeAndAfter: false,
        cols: [{
          type: "align",
          align: colAlign
        }]
      };

      if (context.envName.charAt(context.envName.length - 1) === "*") {
        // It's one of the mathtools starred functions.
        // Parse the optional alignment argument.
        var parser = context.parser;
        parser.consumeSpaces();

        if (parser.fetch().text === "[") {
          parser.consume();
          parser.consumeSpaces();
          colAlign = parser.fetch().text;

          if ("lcr".indexOf(colAlign) === -1) {
            throw new ParseError("Expected l or c or r", parser.nextToken);
          }

          parser.consume();
          parser.consumeSpaces();
          parser.expect("]");
          parser.consume();
          payload.cols = [{
            type: "align",
            align: colAlign
          }];
        }
      }

      var res = parseArray(context.parser, payload, dCellStyle(context.envName)); // Populate cols with the correct number of column alignment specs.

      var numCols = Math.max(0, ...res.body.map(row => row.length));
      res.cols = new Array(numCols).fill({
        type: "align",
        align: colAlign
      });
      return delimiters ? {
        type: "leftright",
        mode: context.mode,
        body: [res],
        left: delimiters[0],
        right: delimiters[1],
        rightColor: undefined // \right uninfluenced by \color in array

      } : res;
    },

    htmlBuilder: htmlBuilder$6,
    mathmlBuilder: mathmlBuilder$5
  });
  defineEnvironment({
    type: "array",
    names: ["smallmatrix"],
    props: {
      numArgs: 0
    },

    handler(context) {
      var payload = {
        arraystretch: 0.5
      };
      var res = parseArray(context.parser, payload, "script");
      res.colSeparationType = "small";
      return res;
    },

    htmlBuilder: htmlBuilder$6,
    mathmlBuilder: mathmlBuilder$5
  });
  defineEnvironment({
    type: "array",
    names: ["subarray"],
    props: {
      numArgs: 1
    },

    handler(context, args) {
      // Parsing of {subarray} is similar to {array}
      var symNode = checkSymbolNodeType(args[0]);
      var colalign = symNode ? [args[0]] : assertNodeType(args[0], "ordgroup").body;
      var cols = colalign.map(function (nde) {
        var node = assertSymbolNodeType(nde);
        var ca = node.text; // {subarray} only recognizes "l" & "c"

        if ("lc".indexOf(ca) !== -1) {
          return {
            type: "align",
            align: ca
          };
        }

        throw new ParseError("Unknown column alignment: " + ca, nde);
      });

      if (cols.length > 1) {
        throw new ParseError("{subarray} can contain only one column");
      }

      var res = {
        cols,
        hskipBeforeAndAfter: false,
        arraystretch: 0.5
      };
      res = parseArray(context.parser, res, "script");

      if (res.body.length > 0 && res.body[0].length > 1) {
        throw new ParseError("{subarray} can contain only one column");
      }

      return res;
    },

    htmlBuilder: htmlBuilder$6,
    mathmlBuilder: mathmlBuilder$5
  }); // A cases environment (in amsmath.sty) is almost equivalent to
  // \def\arraystretch{1.2}%
  // \left\{\begin{array}{@{}l@{\quad}l@{}} … \end{array}\right.
  // {dcases} is a {cases} environment where cells are set in \displaystyle,
  // as defined in mathtools.sty.
  // {rcases} is another mathtools environment. It's brace is on the right side.

  defineEnvironment({
    type: "array",
    names: ["cases", "dcases", "rcases", "drcases"],
    props: {
      numArgs: 0
    },

    handler(context) {
      var payload = {
        arraystretch: 1.2,
        cols: [{
          type: "align",
          align: "l",
          pregap: 0,
          // TODO(kevinb) get the current style.
          // For now we use the metrics for TEXT style which is what we were
          // doing before.  Before attempting to get the current style we
          // should look at TeX's behavior especially for \over and matrices.
          postgap: 1.0
          /* 1em quad */

        }, {
          type: "align",
          align: "l",
          pregap: 0,
          postgap: 0
        }]
      };
      var res = parseArray(context.parser, payload, dCellStyle(context.envName));
      return {
        type: "leftright",
        mode: context.mode,
        body: [res],
        left: context.envName.indexOf("r") > -1 ? "." : "\\{",
        right: context.envName.indexOf("r") > -1 ? "\\}" : ".",
        rightColor: undefined
      };
    },

    htmlBuilder: htmlBuilder$6,
    mathmlBuilder: mathmlBuilder$5
  }); // In the align environment, one uses ampersands, &, to specify number of
  // columns in each row, and to locate spacing between each column.
  // align gets automatic numbering. align* and aligned do not.
  // The alignedat environment can be used in math mode.
  // Note that we assume \nomallineskiplimit to be zero,
  // so that \strut@ is the same as \strut.

  defineEnvironment({
    type: "array",
    names: ["align", "align*", "aligned", "split"],
    props: {
      numArgs: 0
    },
    handler: alignedHandler,
    htmlBuilder: htmlBuilder$6,
    mathmlBuilder: mathmlBuilder$5
  }); // A gathered environment is like an array environment with one centered
  // column, but where rows are considered lines so get \jot line spacing
  // and contents are set in \displaystyle.

  defineEnvironment({
    type: "array",
    names: ["gathered", "gather", "gather*"],
    props: {
      numArgs: 0
    },

    handler(context) {
      if (utils.contains(["gather", "gather*"], context.envName)) {
        validateAmsEnvironmentContext(context);
      }

      var res = {
        cols: [{
          type: "align",
          align: "c"
        }],
        addJot: true,
        colSeparationType: "gather",
        autoTag: getAutoTag(context.envName),
        emptySingleRow: true,
        leqno: context.parser.settings.leqno
      };
      return parseArray(context.parser, res, "display");
    },

    htmlBuilder: htmlBuilder$6,
    mathmlBuilder: mathmlBuilder$5
  }); // alignat environment is like an align environment, but one must explicitly
  // specify maximum number of columns in each row, and can adjust spacing between
  // each columns.

  defineEnvironment({
    type: "array",
    names: ["alignat", "alignat*", "alignedat"],
    props: {
      numArgs: 1
    },
    handler: alignedHandler,
    htmlBuilder: htmlBuilder$6,
    mathmlBuilder: mathmlBuilder$5
  });
  defineEnvironment({
    type: "array",
    names: ["equation", "equation*"],
    props: {
      numArgs: 0
    },

    handler(context) {
      validateAmsEnvironmentContext(context);
      var res = {
        autoTag: getAutoTag(context.envName),
        emptySingleRow: true,
        singleRow: true,
        maxNumCols: 1,
        leqno: context.parser.settings.leqno
      };
      return parseArray(context.parser, res, "display");
    },

    htmlBuilder: htmlBuilder$6,
    mathmlBuilder: mathmlBuilder$5
  });
  defineEnvironment({
    type: "array",
    names: ["CD"],
    props: {
      numArgs: 0
    },

    handler(context) {
      validateAmsEnvironmentContext(context);
      return parseCD(context.parser);
    },

    htmlBuilder: htmlBuilder$6,
    mathmlBuilder: mathmlBuilder$5
  });
  defineMacro("\\nonumber", "\\gdef\\@eqnsw{0}");
  defineMacro("\\notag", "\\nonumber"); // Catch \hline outside array environment

  defineFunction({
    type: "text",
    // Doesn't matter what this is.
    names: ["\\hline", "\\hdashline"],
    props: {
      numArgs: 0,
      allowedInText: true,
      allowedInMath: true
    },

    handler(context, args) {
      throw new ParseError(context.funcName + " valid only within array environment");
    }

  });

  var environments = _environments;

  // defineEnvironment definitions.

  defineFunction({
    type: "environment",
    names: ["\\begin", "\\end"],
    props: {
      numArgs: 1,
      argTypes: ["text"]
    },

    handler(_ref, args) {
      var {
        parser,
        funcName
      } = _ref;
      var nameGroup = args[0];

      if (nameGroup.type !== "ordgroup") {
        throw new ParseError("Invalid environment name", nameGroup);
      }

      var envName = "";

      for (var i = 0; i < nameGroup.body.length; ++i) {
        envName += assertNodeType(nameGroup.body[i], "textord").text;
      }

      if (funcName === "\\begin") {
        // begin...end is similar to left...right
        if (!environments.hasOwnProperty(envName)) {
          throw new ParseError("No such environment: " + envName, nameGroup);
        } // Build the environment object. Arguments and other information will
        // be made available to the begin and end methods using properties.


        var env = environments[envName];
        var {
          args: _args,
          optArgs
        } = parser.parseArguments("\\begin{" + envName + "}", env);
        var context = {
          mode: parser.mode,
          envName,
          parser
        };
        var result = env.handler(context, _args, optArgs);
        parser.expect("\\end", false);
        var endNameToken = parser.nextToken;
        var end = assertNodeType(parser.parseFunction(), "environment");

        if (end.name !== envName) {
          throw new ParseError("Mismatch: \\begin{" + envName + "} matched by \\end{" + end.name + "}", endNameToken);
        } // $FlowFixMe, "environment" handler returns an environment ParseNode


        return result;
      }

      return {
        type: "environment",
        mode: parser.mode,
        name: envName,
        nameGroup
      };
    }

  });

  // TODO(kevinb): implement \\sl and \\sc

  var htmlBuilder$5 = (group, options) => {
    var font = group.font;
    var newOptions = options.withFont(font);
    return buildGroup$1(group.body, newOptions);
  };

  var mathmlBuilder$4 = (group, options) => {
    var font = group.font;
    var newOptions = options.withFont(font);
    return buildGroup(group.body, newOptions);
  };

  var fontAliases = {
    "\\Bbb": "\\mathbb",
    "\\bold": "\\mathbf",
    "\\frak": "\\mathfrak",
    "\\bm": "\\boldsymbol"
  };
  defineFunction({
    type: "font",
    names: [// styles, except \boldsymbol defined below
    "\\mathrm", "\\mathit", "\\mathbf", "\\mathnormal", "\\mathsfit", // families
    "\\mathbb", "\\mathcal", "\\mathfrak", "\\mathscr", "\\mathsf", "\\mathtt", // aliases, except \bm defined below
    "\\Bbb", "\\bold", "\\frak"],
    props: {
      numArgs: 1,
      allowedInArgument: true
    },
    handler: (_ref, args) => {
      var {
        parser,
        funcName
      } = _ref;
      var body = normalizeArgument(args[0]);
      var func = funcName;

      if (func in fontAliases) {
        func = fontAliases[func];
      }

      return {
        type: "font",
        mode: parser.mode,
        font: func.slice(1),
        body
      };
    },
    htmlBuilder: htmlBuilder$5,
    mathmlBuilder: mathmlBuilder$4
  });
  defineFunction({
    type: "mclass",
    names: ["\\boldsymbol", "\\bm"],
    props: {
      numArgs: 1
    },
    handler: (_ref2, args) => {
      var {
        parser
      } = _ref2;
      var body = args[0];
      var isCharacterBox = utils.isCharacterBox(body); // amsbsy.sty's \boldsymbol uses \binrel spacing to inherit the
      // argument's bin|rel|ord status

      return {
        type: "mclass",
        mode: parser.mode,
        mclass: binrelClass(body),
        body: [{
          type: "font",
          mode: parser.mode,
          font: "boldsymbol",
          body
        }],
        isCharacterBox: isCharacterBox
      };
    }
  }); // Old font changing functions

  defineFunction({
    type: "font",
    names: ["\\rm", "\\sf", "\\tt", "\\bf", "\\it", "\\cal"],
    props: {
      numArgs: 0,
      allowedInText: true
    },
    handler: (_ref3, args) => {
      var {
        parser,
        funcName,
        breakOnTokenText
      } = _ref3;
      var {
        mode
      } = parser;
      var body = parser.parseExpression(true, breakOnTokenText);
      var style = "math" + funcName.slice(1);
      return {
        type: "font",
        mode: mode,
        font: style,
        body: {
          type: "ordgroup",
          mode: parser.mode,
          body
        }
      };
    },
    htmlBuilder: htmlBuilder$5,
    mathmlBuilder: mathmlBuilder$4
  });

  var adjustStyle = (size, originalStyle) => {
    // Figure out what style this fraction should be in based on the
    // function used
    var style = originalStyle;

    if (size === "display") {
      // Get display style as a default.
      // If incoming style is sub/sup, use style.text() to get correct size.
      style = style.id >= Style$1.SCRIPT.id ? style.text() : Style$1.DISPLAY;
    } else if (size === "text" && style.size === Style$1.DISPLAY.size) {
      // We're in a \tfrac but incoming style is displaystyle, so:
      style = Style$1.TEXT;
    } else if (size === "script") {
      style = Style$1.SCRIPT;
    } else if (size === "scriptscript") {
      style = Style$1.SCRIPTSCRIPT;
    }

    return style;
  };

  var htmlBuilder$4 = (group, options) => {
    // Fractions are handled in the TeXbook on pages 444-445, rules 15(a-e).
    var style = adjustStyle(group.size, options.style);
    var nstyle = style.fracNum();
    var dstyle = style.fracDen();
    var newOptions;
    newOptions = options.havingStyle(nstyle);
    var numerm = buildGroup$1(group.numer, newOptions, options);

    if (group.continued) {
      // \cfrac inserts a \strut into the numerator.
      // Get \strut dimensions from TeXbook page 353.
      var hStrut = 8.5 / options.fontMetrics().ptPerEm;
      var dStrut = 3.5 / options.fontMetrics().ptPerEm;
      numerm.height = numerm.height < hStrut ? hStrut : numerm.height;
      numerm.depth = numerm.depth < dStrut ? dStrut : numerm.depth;
    }

    newOptions = options.havingStyle(dstyle);
    var denomm = buildGroup$1(group.denom, newOptions, options);
    var rule;
    var ruleWidth;
    var ruleSpacing;

    if (group.hasBarLine) {
      if (group.barSize) {
        ruleWidth = calculateSize(group.barSize, options);
        rule = buildCommon.makeLineSpan("frac-line", options, ruleWidth);
      } else {
        rule = buildCommon.makeLineSpan("frac-line", options);
      }

      ruleWidth = rule.height;
      ruleSpacing = rule.height;
    } else {
      rule = null;
      ruleWidth = 0;
      ruleSpacing = options.fontMetrics().defaultRuleThickness;
    } // Rule 15b


    var numShift;
    var clearance;
    var denomShift;

    if (style.size === Style$1.DISPLAY.size || group.size === "display") {
      numShift = options.fontMetrics().num1;

      if (ruleWidth > 0) {
        clearance = 3 * ruleSpacing;
      } else {
        clearance = 7 * ruleSpacing;
      }

      denomShift = options.fontMetrics().denom1;
    } else {
      if (ruleWidth > 0) {
        numShift = options.fontMetrics().num2;
        clearance = ruleSpacing;
      } else {
        numShift = options.fontMetrics().num3;
        clearance = 3 * ruleSpacing;
      }

      denomShift = options.fontMetrics().denom2;
    }

    var frac;

    if (!rule) {
      // Rule 15c
      var candidateClearance = numShift - numerm.depth - (denomm.height - denomShift);

      if (candidateClearance < clearance) {
        numShift += 0.5 * (clearance - candidateClearance);
        denomShift += 0.5 * (clearance - candidateClearance);
      }

      frac = buildCommon.makeVList({
        positionType: "individualShift",
        children: [{
          type: "elem",
          elem: denomm,
          shift: denomShift
        }, {
          type: "elem",
          elem: numerm,
          shift: -numShift
        }]
      }, options);
    } else {
      // Rule 15d
      var axisHeight = options.fontMetrics().axisHeight;

      if (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth) < clearance) {
        numShift += clearance - (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth));
      }

      if (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift) < clearance) {
        denomShift += clearance - (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift));
      }

      var midShift = -(axisHeight - 0.5 * ruleWidth);
      frac = buildCommon.makeVList({
        positionType: "individualShift",
        children: [{
          type: "elem",
          elem: denomm,
          shift: denomShift
        }, {
          type: "elem",
          elem: rule,
          shift: midShift
        }, {
          type: "elem",
          elem: numerm,
          shift: -numShift
        }]
      }, options);
    } // Since we manually change the style sometimes (with \dfrac or \tfrac),
    // account for the possible size change here.


    newOptions = options.havingStyle(style);
    frac.height *= newOptions.sizeMultiplier / options.sizeMultiplier;
    frac.depth *= newOptions.sizeMultiplier / options.sizeMultiplier; // Rule 15e

    var delimSize;

    if (style.size === Style$1.DISPLAY.size) {
      delimSize = options.fontMetrics().delim1;
    } else if (style.size === Style$1.SCRIPTSCRIPT.size) {
      delimSize = options.havingStyle(Style$1.SCRIPT).fontMetrics().delim2;
    } else {
      delimSize = options.fontMetrics().delim2;
    }

    var leftDelim;
    var rightDelim;

    if (group.leftDelim == null) {
      leftDelim = makeNullDelimiter(options, ["mopen"]);
    } else {
      leftDelim = delimiter.customSizedDelim(group.leftDelim, delimSize, true, options.havingStyle(style), group.mode, ["mopen"]);
    }

    if (group.continued) {
      rightDelim = buildCommon.makeSpan([]); // zero width for \cfrac
    } else if (group.rightDelim == null) {
      rightDelim = makeNullDelimiter(options, ["mclose"]);
    } else {
      rightDelim = delimiter.customSizedDelim(group.rightDelim, delimSize, true, options.havingStyle(style), group.mode, ["mclose"]);
    }

    return buildCommon.makeSpan(["mord"].concat(newOptions.sizingClasses(options)), [leftDelim, buildCommon.makeSpan(["mfrac"], [frac]), rightDelim], options);
  };

  var mathmlBuilder$3 = (group, options) => {
    var node = new mathMLTree.MathNode("mfrac", [buildGroup(group.numer, options), buildGroup(group.denom, options)]);

    if (!group.hasBarLine) {
      node.setAttribute("linethickness", "0px");
    } else if (group.barSize) {
      var ruleWidth = calculateSize(group.barSize, options);
      node.setAttribute("linethickness", makeEm(ruleWidth));
    }

    var style = adjustStyle(group.size, options.style);

    if (style.size !== options.style.size) {
      node = new mathMLTree.MathNode("mstyle", [node]);
      var isDisplay = style.size === Style$1.DISPLAY.size ? "true" : "false";
      node.setAttribute("displaystyle", isDisplay);
      node.setAttribute("scriptlevel", "0");
    }

    if (group.leftDelim != null || group.rightDelim != null) {
      var withDelims = [];

      if (group.leftDelim != null) {
        var leftOp = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(group.leftDelim.replace("\\", ""))]);
        leftOp.setAttribute("fence", "true");
        withDelims.push(leftOp);
      }

      withDelims.push(node);

      if (group.rightDelim != null) {
        var rightOp = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(group.rightDelim.replace("\\", ""))]);
        rightOp.setAttribute("fence", "true");
        withDelims.push(rightOp);
      }

      return makeRow(withDelims);
    }

    return node;
  };

  defineFunction({
    type: "genfrac",
    names: ["\\dfrac", "\\frac", "\\tfrac", "\\dbinom", "\\binom", "\\tbinom", "\\\\atopfrac", // can’t be entered directly
    "\\\\bracefrac", "\\\\brackfrac" // ditto
    ],
    props: {
      numArgs: 2,
      allowedInArgument: true
    },
    handler: (_ref, args) => {
      var {
        parser,
        funcName
      } = _ref;
      var numer = args[0];
      var denom = args[1];
      var hasBarLine;
      var leftDelim = null;
      var rightDelim = null;
      var size = "auto";

      switch (funcName) {
        case "\\dfrac":
        case "\\frac":
        case "\\tfrac":
          hasBarLine = true;
          break;

        case "\\\\atopfrac":
          hasBarLine = false;
          break;

        case "\\dbinom":
        case "\\binom":
        case "\\tbinom":
          hasBarLine = false;
          leftDelim = "(";
          rightDelim = ")";
          break;

        case "\\\\bracefrac":
          hasBarLine = false;
          leftDelim = "\\{";
          rightDelim = "\\}";
          break;

        case "\\\\brackfrac":
          hasBarLine = false;
          leftDelim = "[";
          rightDelim = "]";
          break;

        default:
          throw new Error("Unrecognized genfrac command");
      }

      switch (funcName) {
        case "\\dfrac":
        case "\\dbinom":
          size = "display";
          break;

        case "\\tfrac":
        case "\\tbinom":
          size = "text";
          break;
      }

      return {
        type: "genfrac",
        mode: parser.mode,
        continued: false,
        numer,
        denom,
        hasBarLine,
        leftDelim,
        rightDelim,
        size,
        barSize: null
      };
    },
    htmlBuilder: htmlBuilder$4,
    mathmlBuilder: mathmlBuilder$3
  });
  defineFunction({
    type: "genfrac",
    names: ["\\cfrac"],
    props: {
      numArgs: 2
    },
    handler: (_ref2, args) => {
      var {
        parser,
        funcName
      } = _ref2;
      var numer = args[0];
      var denom = args[1];
      return {
        type: "genfrac",
        mode: parser.mode,
        continued: true,
        numer,
        denom,
        hasBarLine: true,
        leftDelim: null,
        rightDelim: null,
        size: "display",
        barSize: null
      };
    }
  }); // Infix generalized fractions -- these are not rendered directly, but replaced
  // immediately by one of the variants above.

  defineFunction({
    type: "infix",
    names: ["\\over", "\\choose", "\\atop", "\\brace", "\\brack"],
    props: {
      numArgs: 0,
      infix: true
    },

    handler(_ref3) {
      var {
        parser,
        funcName,
        token
      } = _ref3;
      var replaceWith;

      switch (funcName) {
        case "\\over":
          replaceWith = "\\frac";
          break;

        case "\\choose":
          replaceWith = "\\binom";
          break;

        case "\\atop":
          replaceWith = "\\\\atopfrac";
          break;

        case "\\brace":
          replaceWith = "\\\\bracefrac";
          break;

        case "\\brack":
          replaceWith = "\\\\brackfrac";
          break;

        default:
          throw new Error("Unrecognized infix genfrac command");
      }

      return {
        type: "infix",
        mode: parser.mode,
        replaceWith,
        token
      };
    }

  });
  var stylArray = ["display", "text", "script", "scriptscript"];

  var delimFromValue = function delimFromValue(delimString) {
    var delim = null;

    if (delimString.length > 0) {
      delim = delimString;
      delim = delim === "." ? null : delim;
    }

    return delim;
  };

  defineFunction({
    type: "genfrac",
    names: ["\\genfrac"],
    props: {
      numArgs: 6,
      allowedInArgument: true,
      argTypes: ["math", "math", "size", "text", "math", "math"]
    },

    handler(_ref4, args) {
      var {
        parser
      } = _ref4;
      var numer = args[4];
      var denom = args[5]; // Look into the parse nodes to get the desired delimiters.

      var leftNode = normalizeArgument(args[0]);
      var leftDelim = leftNode.type === "atom" && leftNode.family === "open" ? delimFromValue(leftNode.text) : null;
      var rightNode = normalizeArgument(args[1]);
      var rightDelim = rightNode.type === "atom" && rightNode.family === "close" ? delimFromValue(rightNode.text) : null;
      var barNode = assertNodeType(args[2], "size");
      var hasBarLine;
      var barSize = null;

      if (barNode.isBlank) {
        // \genfrac acts differently than \above.
        // \genfrac treats an empty size group as a signal to use a
        // standard bar size. \above would see size = 0 and omit the bar.
        hasBarLine = true;
      } else {
        barSize = barNode.value;
        hasBarLine = barSize.number > 0;
      } // Find out if we want displaystyle, textstyle, etc.


      var size = "auto";
      var styl = args[3];

      if (styl.type === "ordgroup") {
        if (styl.body.length > 0) {
          var textOrd = assertNodeType(styl.body[0], "textord");
          size = stylArray[Number(textOrd.text)];
        }
      } else {
        styl = assertNodeType(styl, "textord");
        size = stylArray[Number(styl.text)];
      }

      return {
        type: "genfrac",
        mode: parser.mode,
        numer,
        denom,
        continued: false,
        hasBarLine,
        barSize,
        leftDelim,
        rightDelim,
        size
      };
    },

    htmlBuilder: htmlBuilder$4,
    mathmlBuilder: mathmlBuilder$3
  }); // \above is an infix fraction that also defines a fraction bar size.

  defineFunction({
    type: "infix",
    names: ["\\above"],
    props: {
      numArgs: 1,
      argTypes: ["size"],
      infix: true
    },

    handler(_ref5, args) {
      var {
        parser,
        funcName,
        token
      } = _ref5;
      return {
        type: "infix",
        mode: parser.mode,
        replaceWith: "\\\\abovefrac",
        size: assertNodeType(args[0], "size").value,
        token
      };
    }

  });
  defineFunction({
    type: "genfrac",
    names: ["\\\\abovefrac"],
    props: {
      numArgs: 3,
      argTypes: ["math", "size", "math"]
    },
    handler: (_ref6, args) => {
      var {
        parser,
        funcName
      } = _ref6;
      var numer = args[0];
      var barSize = assert(assertNodeType(args[1], "infix").size);
      var denom = args[2];
      var hasBarLine = barSize.number > 0;
      return {
        type: "genfrac",
        mode: parser.mode,
        numer,
        denom,
        continued: false,
        hasBarLine,
        barSize,
        leftDelim: null,
        rightDelim: null,
        size: "auto"
      };
    },
    htmlBuilder: htmlBuilder$4,
    mathmlBuilder: mathmlBuilder$3
  });

  // NOTE: Unlike most `htmlBuilder`s, this one handles not only "horizBrace", but
  // also "supsub" since an over/underbrace can affect super/subscripting.
  var htmlBuilder$3 = (grp, options) => {
    var style = options.style; // Pull out the `ParseNode<"horizBrace">` if `grp` is a "supsub" node.

    var supSubGroup;
    var group;

    if (grp.type === "supsub") {
      // Ref: LaTeX source2e: }}}}\limits}
      // i.e. LaTeX treats the brace similar to an op and passes it
      // with \limits, so we need to assign supsub style.
      supSubGroup = grp.sup ? buildGroup$1(grp.sup, options.havingStyle(style.sup()), options) : buildGroup$1(grp.sub, options.havingStyle(style.sub()), options);
      group = assertNodeType(grp.base, "horizBrace");
    } else {
      group = assertNodeType(grp, "horizBrace");
    } // Build the base group


    var body = buildGroup$1(group.base, options.havingBaseStyle(Style$1.DISPLAY)); // Create the stretchy element

    var braceBody = stretchy.svgSpan(group, options); // Generate the vlist, with the appropriate kerns        ┏━━━━━━━━┓
    // This first vlist contains the content and the brace:   equation

    var vlist;

    if (group.isOver) {
      vlist = buildCommon.makeVList({
        positionType: "firstBaseline",
        children: [{
          type: "elem",
          elem: body
        }, {
          type: "kern",
          size: 0.1
        }, {
          type: "elem",
          elem: braceBody
        }]
      }, options); // $FlowFixMe: Replace this with passing "svg-align" into makeVList.

      vlist.children[0].children[0].children[1].classes.push("svg-align");
    } else {
      vlist = buildCommon.makeVList({
        positionType: "bottom",
        positionData: body.depth + 0.1 + braceBody.height,
        children: [{
          type: "elem",
          elem: braceBody
        }, {
          type: "kern",
          size: 0.1
        }, {
          type: "elem",
          elem: body
        }]
      }, options); // $FlowFixMe: Replace this with passing "svg-align" into makeVList.

      vlist.children[0].children[0].children[0].classes.push("svg-align");
    }

    if (supSubGroup) {
      // To write the supsub, wrap the first vlist in another vlist:
      // They can't all go in the same vlist, because the note might be
      // wider than the equation. We want the equation to control the
      // brace width.
      //      note          long note           long note
      //   ┏━━━━━━━━┓   or    ┏━━━┓     not    ┏━━━━━━━━━┓
      //    equation           eqn                 eqn
      var vSpan = buildCommon.makeSpan(["mord", group.isOver ? "mover" : "munder"], [vlist], options);

      if (group.isOver) {
        vlist = buildCommon.makeVList({
          positionType: "firstBaseline",
          children: [{
            type: "elem",
            elem: vSpan
          }, {
            type: "kern",
            size: 0.2
          }, {
            type: "elem",
            elem: supSubGroup
          }]
        }, options);
      } else {
        vlist = buildCommon.makeVList({
          positionType: "bottom",
          positionData: vSpan.depth + 0.2 + supSubGroup.height + supSubGroup.depth,
          children: [{
            type: "elem",
            elem: supSubGroup
          }, {
            type: "kern",
            size: 0.2
          }, {
            type: "elem",
            elem: vSpan
          }]
        }, options);
      }
    }

    return buildCommon.makeSpan(["mord", group.isOver ? "mover" : "munder"], [vlist], options);
  };

  var mathmlBuilder$2 = (group, options) => {
    var accentNode = stretchy.mathMLnode(group.label);
    return new mathMLTree.MathNode(group.isOver ? "mover" : "munder", [buildGroup(group.base, options), accentNode]);
  }; // Horizontal stretchy braces


  defineFunction({
    type: "horizBrace",
    names: ["\\overbrace", "\\underbrace"],
    props: {
      numArgs: 1
    },

    handler(_ref, args) {
      var {
        parser,
        funcName
      } = _ref;
      return {
        type: "horizBrace",
        mode: parser.mode,
        label: funcName,
        isOver: /^\\over/.test(funcName),
        base: args[0]
      };
    },

    htmlBuilder: htmlBuilder$3,
    mathmlBuilder: mathmlBuilder$2
  });

  defineFunction({
    type: "href",
    names: ["\\href"],
    props: {
      numArgs: 2,
      argTypes: ["url", "original"],
      allowedInText: true
    },
    handler: (_ref, args) => {
      var {
        parser
      } = _ref;
      var body = args[1];
      var href = assertNodeType(args[0], "url").url;

      if (!parser.settings.isTrusted({
        command: "\\href",
        url: href
      })) {
        return parser.formatUnsupportedCmd("\\href");
      }

      return {
        type: "href",
        mode: parser.mode,
        href,
        body: ordargument(body)
      };
    },
    htmlBuilder: (group, options) => {
      var elements = buildExpression$1(group.body, options, false);
      return buildCommon.makeAnchor(group.href, [], elements, options);
    },
    mathmlBuilder: (group, options) => {
      var math = buildExpressionRow(group.body, options);

      if (!(math instanceof MathNode)) {
        math = new MathNode("mrow", [math]);
      }

      math.setAttribute("href", group.href);
      return math;
    }
  });
  defineFunction({
    type: "href",
    names: ["\\url"],
    props: {
      numArgs: 1,
      argTypes: ["url"],
      allowedInText: true
    },
    handler: (_ref2, args) => {
      var {
        parser
      } = _ref2;
      var href = assertNodeType(args[0], "url").url;

      if (!parser.settings.isTrusted({
        command: "\\url",
        url: href
      })) {
        return parser.formatUnsupportedCmd("\\url");
      }

      var chars = [];

      for (var i = 0; i < href.length; i++) {
        var c = href[i];

        if (c === "~") {
          c = "\\textasciitilde";
        }

        chars.push({
          type: "textord",
          mode: "text",
          text: c
        });
      }

      var body = {
        type: "text",
        mode: parser.mode,
        font: "\\texttt",
        body: chars
      };
      return {
        type: "href",
        mode: parser.mode,
        href,
        body: ordargument(body)
      };
    }
  });

  // In LaTeX, \vcenter can act only on a box, as in
  // \vcenter{\hbox{$\frac{a+b}{\dfrac{c}{d}}$}}
  // This function by itself doesn't do anything but prevent a soft line break.

  defineFunction({
    type: "hbox",
    names: ["\\hbox"],
    props: {
      numArgs: 1,
      argTypes: ["text"],
      allowedInText: true,
      primitive: true
    },

    handler(_ref, args) {
      var {
        parser
      } = _ref;
      return {
        type: "hbox",
        mode: parser.mode,
        body: ordargument(args[0])
      };
    },

    htmlBuilder(group, options) {
      var elements = buildExpression$1(group.body, options, false);
      return buildCommon.makeFragment(elements);
    },

    mathmlBuilder(group, options) {
      return new mathMLTree.MathNode("mrow", buildExpression(group.body, options));
    }

  });

  defineFunction({
    type: "html",
    names: ["\\htmlClass", "\\htmlId", "\\htmlStyle", "\\htmlData"],
    props: {
      numArgs: 2,
      argTypes: ["raw", "original"],
      allowedInText: true
    },
    handler: (_ref, args) => {
      var {
        parser,
        funcName,
        token
      } = _ref;
      var value = assertNodeType(args[0], "raw").string;
      var body = args[1];

      if (parser.settings.strict) {
        parser.settings.reportNonstrict("htmlExtension", "HTML extension is disabled on strict mode");
      }

      var trustContext;
      var attributes = {};

      switch (funcName) {
        case "\\htmlClass":
          attributes.class = value;
          trustContext = {
            command: "\\htmlClass",
            class: value
          };
          break;

        case "\\htmlId":
          attributes.id = value;
          trustContext = {
            command: "\\htmlId",
            id: value
          };
          break;

        case "\\htmlStyle":
          attributes.style = value;
          trustContext = {
            command: "\\htmlStyle",
            style: value
          };
          break;

        case "\\htmlData":
          {
            var data = value.split(",");

            for (var i = 0; i < data.length; i++) {
              var keyVal = data[i].split("=");

              if (keyVal.length !== 2) {
                throw new ParseError("Error parsing key-value for \\htmlData");
              }

              attributes["data-" + keyVal[0].trim()] = keyVal[1].trim();
            }

            trustContext = {
              command: "\\htmlData",
              attributes
            };
            break;
          }

        default:
          throw new Error("Unrecognized html command");
      }

      if (!parser.settings.isTrusted(trustContext)) {
        return parser.formatUnsupportedCmd(funcName);
      }

      return {
        type: "html",
        mode: parser.mode,
        attributes,
        body: ordargument(body)
      };
    },
    htmlBuilder: (group, options) => {
      var elements = buildExpression$1(group.body, options, false);
      var classes = ["enclosing"];

      if (group.attributes.class) {
        classes.push(...group.attributes.class.trim().split(/\s+/));
      }

      var span = buildCommon.makeSpan(classes, elements, options);

      for (var attr in group.attributes) {
        if (attr !== "class" && group.attributes.hasOwnProperty(attr)) {
          span.setAttribute(attr, group.attributes[attr]);
        }
      }

      return span;
    },
    mathmlBuilder: (group, options) => {
      return buildExpressionRow(group.body, options);
    }
  });

  defineFunction({
    type: "htmlmathml",
    names: ["\\html@mathml"],
    props: {
      numArgs: 2,
      allowedInText: true
    },
    handler: (_ref, args) => {
      var {
        parser
      } = _ref;
      return {
        type: "htmlmathml",
        mode: parser.mode,
        html: ordargument(args[0]),
        mathml: ordargument(args[1])
      };
    },
    htmlBuilder: (group, options) => {
      var elements = buildExpression$1(group.html, options, false);
      return buildCommon.makeFragment(elements);
    },
    mathmlBuilder: (group, options) => {
      return buildExpressionRow(group.mathml, options);
    }
  });

  var sizeData = function sizeData(str) {
    if (/^[-+]? *(\d+(\.\d*)?|\.\d+)$/.test(str)) {
      // str is a number with no unit specified.
      // default unit is bp, per graphix package.
      return {
        number: +str,
        unit: "bp"
      };
    } else {
      var match = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(str);

      if (!match) {
        throw new ParseError("Invalid size: '" + str + "' in \\includegraphics");
      }

      var data = {
        number: +(match[1] + match[2]),
        // sign + magnitude, cast to number
        unit: match[3]
      };

      if (!validUnit(data)) {
        throw new ParseError("Invalid unit: '" + data.unit + "' in \\includegraphics.");
      }

      return data;
    }
  };

  defineFunction({
    type: "includegraphics",
    names: ["\\includegraphics"],
    props: {
      numArgs: 1,
      numOptionalArgs: 1,
      argTypes: ["raw", "url"],
      allowedInText: false
    },
    handler: (_ref, args, optArgs) => {
      var {
        parser
      } = _ref;
      var width = {
        number: 0,
        unit: "em"
      };
      var height = {
        number: 0.9,
        unit: "em"
      }; // sorta character sized.

      var totalheight = {
        number: 0,
        unit: "em"
      };
      var alt = "";

      if (optArgs[0]) {
        var attributeStr = assertNodeType(optArgs[0], "raw").string; // Parser.js does not parse key/value pairs. We get a string.

        var attributes = attributeStr.split(",");

        for (var i = 0; i < attributes.length; i++) {
          var keyVal = attributes[i].split("=");

          if (keyVal.length === 2) {
            var str = keyVal[1].trim();

            switch (keyVal[0].trim()) {
              case "alt":
                alt = str;
                break;

              case "width":
                width = sizeData(str);
                break;

              case "height":
                height = sizeData(str);
                break;

              case "totalheight":
                totalheight = sizeData(str);
                break;

              default:
                throw new ParseError("Invalid key: '" + keyVal[0] + "' in \\includegraphics.");
            }
          }
        }
      }

      var src = assertNodeType(args[0], "url").url;

      if (alt === "") {
        // No alt given. Use the file name. Strip away the path.
        alt = src;
        alt = alt.replace(/^.*[\\/]/, '');
        alt = alt.substring(0, alt.lastIndexOf('.'));
      }

      if (!parser.settings.isTrusted({
        command: "\\includegraphics",
        url: src
      })) {
        return parser.formatUnsupportedCmd("\\includegraphics");
      }

      return {
        type: "includegraphics",
        mode: parser.mode,
        alt: alt,
        width: width,
        height: height,
        totalheight: totalheight,
        src: src
      };
    },
    htmlBuilder: (group, options) => {
      var height = calculateSize(group.height, options);
      var depth = 0;

      if (group.totalheight.number > 0) {
        depth = calculateSize(group.totalheight, options) - height;
      }

      var width = 0;

      if (group.width.number > 0) {
        width = calculateSize(group.width, options);
      }

      var style = {
        height: makeEm(height + depth)
      };

      if (width > 0) {
        style.width = makeEm(width);
      }

      if (depth > 0) {
        style.verticalAlign = makeEm(-depth);
      }

      var node = new Img(group.src, group.alt, style);
      node.height = height;
      node.depth = depth;
      return node;
    },
    mathmlBuilder: (group, options) => {
      var node = new mathMLTree.MathNode("mglyph", []);
      node.setAttribute("alt", group.alt);
      var height = calculateSize(group.height, options);
      var depth = 0;

      if (group.totalheight.number > 0) {
        depth = calculateSize(group.totalheight, options) - height;
        node.setAttribute("valign", makeEm(-depth));
      }

      node.setAttribute("height", makeEm(height + depth));

      if (group.width.number > 0) {
        var width = calculateSize(group.width, options);
        node.setAttribute("width", makeEm(width));
      }

      node.setAttribute("src", group.src);
      return node;
    }
  });

  // Horizontal spacing commands

  defineFunction({
    type: "kern",
    names: ["\\kern", "\\mkern", "\\hskip", "\\mskip"],
    props: {
      numArgs: 1,
      argTypes: ["size"],
      primitive: true,
      allowedInText: true
    },

    handler(_ref, args) {
      var {
        parser,
        funcName
      } = _ref;
      var size = assertNodeType(args[0], "size");

      if (parser.settings.strict) {
        var mathFunction = funcName[1] === 'm'; // \mkern, \mskip

        var muUnit = size.value.unit === 'mu';

        if (mathFunction) {
          if (!muUnit) {
            parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " supports only mu units, " + ("not " + size.value.unit + " units"));
          }

          if (parser.mode !== "math") {
            parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " works only in math mode");
          }
        } else {
          // !mathFunction
          if (muUnit) {
            parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " doesn't support mu units");
          }
        }
      }

      return {
        type: "kern",
        mode: parser.mode,
        dimension: size.value
      };
    },

    htmlBuilder(group, options) {
      return buildCommon.makeGlue(group.dimension, options);
    },

    mathmlBuilder(group, options) {
      var dimension = calculateSize(group.dimension, options);
      return new mathMLTree.SpaceNode(dimension);
    }

  });

  // Horizontal overlap functions
  defineFunction({
    type: "lap",
    names: ["\\mathllap", "\\mathrlap", "\\mathclap"],
    props: {
      numArgs: 1,
      allowedInText: true
    },
    handler: (_ref, args) => {
      var {
        parser,
        funcName
      } = _ref;
      var body = args[0];
      return {
        type: "lap",
        mode: parser.mode,
        alignment: funcName.slice(5),
        body
      };
    },
    htmlBuilder: (group, options) => {
      // mathllap, mathrlap, mathclap
      var inner;

      if (group.alignment === "clap") {
        // ref: https://www.math.lsu.edu/~aperlis/publications/mathclap/
        inner = buildCommon.makeSpan([], [buildGroup$1(group.body, options)]); // wrap, since CSS will center a .clap > .inner > span

        inner = buildCommon.makeSpan(["inner"], [inner], options);
      } else {
        inner = buildCommon.makeSpan(["inner"], [buildGroup$1(group.body, options)]);
      }

      var fix = buildCommon.makeSpan(["fix"], []);
      var node = buildCommon.makeSpan([group.alignment], [inner, fix], options); // At this point, we have correctly set horizontal alignment of the
      // two items involved in the lap.
      // Next, use a strut to set the height of the HTML bounding box.
      // Otherwise, a tall argument may be misplaced.
      // This code resolved issue #1153

      var strut = buildCommon.makeSpan(["strut"]);
      strut.style.height = makeEm(node.height + node.depth);

      if (node.depth) {
        strut.style.verticalAlign = makeEm(-node.depth);
      }

      node.children.unshift(strut); // Next, prevent vertical misplacement when next to something tall.
      // This code resolves issue #1234

      node = buildCommon.makeSpan(["thinbox"], [node], options);
      return buildCommon.makeSpan(["mord", "vbox"], [node], options);
    },
    mathmlBuilder: (group, options) => {
      // mathllap, mathrlap, mathclap
      var node = new mathMLTree.MathNode("mpadded", [buildGroup(group.body, options)]);

      if (group.alignment !== "rlap") {
        var offset = group.alignment === "llap" ? "-1" : "-0.5";
        node.setAttribute("lspace", offset + "width");
      }

      node.setAttribute("width", "0px");
      return node;
    }
  });

  defineFunction({
    type: "styling",
    names: ["\\(", "$"],
    props: {
      numArgs: 0,
      allowedInText: true,
      allowedInMath: false
    },

    handler(_ref, args) {
      var {
        funcName,
        parser
      } = _ref;
      var outerMode = parser.mode;
      parser.switchMode("math");
      var close = funcName === "\\(" ? "\\)" : "$";
      var body = parser.parseExpression(false, close);
      parser.expect(close);
      parser.switchMode(outerMode);
      return {
        type: "styling",
        mode: parser.mode,
        style: "text",
        body
      };
    }

  }); // Check for extra closing math delimiters

  defineFunction({
    type: "text",
    // Doesn't matter what this is.
    names: ["\\)", "\\]"],
    props: {
      numArgs: 0,
      allowedInText: true,
      allowedInMath: false
    },

    handler(context, args) {
      throw new ParseError("Mismatched " + context.funcName);
    }

  });

  var chooseMathStyle = (group, options) => {
    switch (options.style.size) {
      case Style$1.DISPLAY.size:
        return group.display;

      case Style$1.TEXT.size:
        return group.text;

      case Style$1.SCRIPT.size:
        return group.script;

      case Style$1.SCRIPTSCRIPT.size:
        return group.scriptscript;

      default:
        return group.text;
    }
  };

  defineFunction({
    type: "mathchoice",
    names: ["\\mathchoice"],
    props: {
      numArgs: 4,
      primitive: true
    },
    handler: (_ref, args) => {
      var {
        parser
      } = _ref;
      return {
        type: "mathchoice",
        mode: parser.mode,
        display: ordargument(args[0]),
        text: ordargument(args[1]),
        script: ordargument(args[2]),
        scriptscript: ordargument(args[3])
      };
    },
    htmlBuilder: (group, options) => {
      var body = chooseMathStyle(group, options);
      var elements = buildExpression$1(body, options, false);
      return buildCommon.makeFragment(elements);
    },
    mathmlBuilder: (group, options) => {
      var body = chooseMathStyle(group, options);
      return buildExpressionRow(body, options);
    }
  });

  var assembleSupSub = (base, supGroup, subGroup, options, style, slant, baseShift) => {
    base = buildCommon.makeSpan([], [base]);
    var subIsSingleCharacter = subGroup && utils.isCharacterBox(subGroup);
    var sub;
    var sup; // We manually have to handle the superscripts and subscripts. This,
    // aside from the kern calculations, is copied from supsub.

    if (supGroup) {
      var elem = buildGroup$1(supGroup, options.havingStyle(style.sup()), options);
      sup = {
        elem,
        kern: Math.max(options.fontMetrics().bigOpSpacing1, options.fontMetrics().bigOpSpacing3 - elem.depth)
      };
    }

    if (subGroup) {
      var _elem = buildGroup$1(subGroup, options.havingStyle(style.sub()), options);

      sub = {
        elem: _elem,
        kern: Math.max(options.fontMetrics().bigOpSpacing2, options.fontMetrics().bigOpSpacing4 - _elem.height)
      };
    } // Build the final group as a vlist of the possible subscript, base,
    // and possible superscript.


    var finalGroup;

    if (sup && sub) {
      var bottom = options.fontMetrics().bigOpSpacing5 + sub.elem.height + sub.elem.depth + sub.kern + base.depth + baseShift;
      finalGroup = buildCommon.makeVList({
        positionType: "bottom",
        positionData: bottom,
        children: [{
          type: "kern",
          size: options.fontMetrics().bigOpSpacing5
        }, {
          type: "elem",
          elem: sub.elem,
          marginLeft: makeEm(-slant)
        }, {
          type: "kern",
          size: sub.kern
        }, {
          type: "elem",
          elem: base
        }, {
          type: "kern",
          size: sup.kern
        }, {
          type: "elem",
          elem: sup.elem,
          marginLeft: makeEm(slant)
        }, {
          type: "kern",
          size: options.fontMetrics().bigOpSpacing5
        }]
      }, options);
    } else if (sub) {
      var top = base.height - baseShift; // Shift the limits by the slant of the symbol. Note
      // that we are supposed to shift the limits by 1/2 of the slant,
      // but since we are centering the limits adding a full slant of
      // margin will shift by 1/2 that.

      finalGroup = buildCommon.makeVList({
        positionType: "top",
        positionData: top,
        children: [{
          type: "kern",
          size: options.fontMetrics().bigOpSpacing5
        }, {
          type: "elem",
          elem: sub.elem,
          marginLeft: makeEm(-slant)
        }, {
          type: "kern",
          size: sub.kern
        }, {
          type: "elem",
          elem: base
        }]
      }, options);
    } else if (sup) {
      var _bottom = base.depth + baseShift;

      finalGroup = buildCommon.makeVList({
        positionType: "bottom",
        positionData: _bottom,
        children: [{
          type: "elem",
          elem: base
        }, {
          type: "kern",
          size: sup.kern
        }, {
          type: "elem",
          elem: sup.elem,
          marginLeft: makeEm(slant)
        }, {
          type: "kern",
          size: options.fontMetrics().bigOpSpacing5
        }]
      }, options);
    } else {
      // This case probably shouldn't occur (this would mean the
      // supsub was sending us a group with no superscript or
      // subscript) but be safe.
      return base;
    }

    var parts = [finalGroup];

    if (sub && slant !== 0 && !subIsSingleCharacter) {
      // A negative margin-left was applied to the lower limit.
      // Avoid an overlap by placing a spacer on the left on the group.
      var spacer = buildCommon.makeSpan(["mspace"], [], options);
      spacer.style.marginRight = makeEm(slant);
      parts.unshift(spacer);
    }

    return buildCommon.makeSpan(["mop", "op-limits"], parts, options);
  };

  // Limits, symbols
  // Most operators have a large successor symbol, but these don't.
  var noSuccessor = ["\\smallint"]; // NOTE: Unlike most `htmlBuilder`s, this one handles not only "op", but also
  // "supsub" since some of them (like \int) can affect super/subscripting.

  var htmlBuilder$2 = (grp, options) => {
    // Operators are handled in the TeXbook pg. 443-444, rule 13(a).
    var supGroup;
    var subGroup;
    var hasLimits = false;
    var group;

    if (grp.type === "supsub") {
      // If we have limits, supsub will pass us its group to handle. Pull
      // out the superscript and subscript and set the group to the op in
      // its base.
      supGroup = grp.sup;
      subGroup = grp.sub;
      group = assertNodeType(grp.base, "op");
      hasLimits = true;
    } else {
      group = assertNodeType(grp, "op");
    }

    var style = options.style;
    var large = false;

    if (style.size === Style$1.DISPLAY.size && group.symbol && !utils.contains(noSuccessor, group.name)) {
      // Most symbol operators get larger in displaystyle (rule 13)
      large = true;
    }

    var base;

    if (group.symbol) {
      // If this is a symbol, create the symbol.
      var fontName = large ? "Size2-Regular" : "Size1-Regular";
      var stash = "";

      if (group.name === "\\oiint" || group.name === "\\oiiint") {
        // No font glyphs yet, so use a glyph w/o the oval.
        // TODO: When font glyphs are available, delete this code.
        stash = group.name.slice(1);
        group.name = stash === "oiint" ? "\\iint" : "\\iiint";
      }

      base = buildCommon.makeSymbol(group.name, fontName, "math", options, ["mop", "op-symbol", large ? "large-op" : "small-op"]);

      if (stash.length > 0) {
        // We're in \oiint or \oiiint. Overlay the oval.
        // TODO: When font glyphs are available, delete this code.
        var italic = base.italic;
        var oval = buildCommon.staticSvg(stash + "Size" + (large ? "2" : "1"), options);
        base = buildCommon.makeVList({
          positionType: "individualShift",
          children: [{
            type: "elem",
            elem: base,
            shift: 0
          }, {
            type: "elem",
            elem: oval,
            shift: large ? 0.08 : 0
          }]
        }, options);
        group.name = "\\" + stash;
        base.classes.unshift("mop"); // $FlowFixMe

        base.italic = italic;
      }
    } else if (group.body) {
      // If this is a list, compose that list.
      var inner = buildExpression$1(group.body, options, true);

      if (inner.length === 1 && inner[0] instanceof SymbolNode) {
        base = inner[0];
        base.classes[0] = "mop"; // replace old mclass
      } else {
        base = buildCommon.makeSpan(["mop"], inner, options);
      }
    } else {
      // Otherwise, this is a text operator. Build the text from the
      // operator's name.
      var output = [];

      for (var i = 1; i < group.name.length; i++) {
        output.push(buildCommon.mathsym(group.name[i], group.mode, options));
      }

      base = buildCommon.makeSpan(["mop"], output, options);
    } // If content of op is a single symbol, shift it vertically.


    var baseShift = 0;
    var slant = 0;

    if ((base instanceof SymbolNode || group.name === "\\oiint" || group.name === "\\oiiint") && !group.suppressBaseShift) {
      // We suppress the shift of the base of \overset and \underset. Otherwise,
      // shift the symbol so its center lies on the axis (rule 13). It
      // appears that our fonts have the centers of the symbols already
      // almost on the axis, so these numbers are very small. Note we
      // don't actually apply this here, but instead it is used either in
      // the vlist creation or separately when there are no limits.
      baseShift = (base.height - base.depth) / 2 - options.fontMetrics().axisHeight; // The slant of the symbol is just its italic correction.
      // $FlowFixMe

      slant = base.italic;
    }

    if (hasLimits) {
      return assembleSupSub(base, supGroup, subGroup, options, style, slant, baseShift);
    } else {
      if (baseShift) {
        base.style.position = "relative";
        base.style.top = makeEm(baseShift);
      }

      return base;
    }
  };

  var mathmlBuilder$1 = (group, options) => {
    var node;

    if (group.symbol) {
      // This is a symbol. Just add the symbol.
      node = new MathNode("mo", [makeText(group.name, group.mode)]);

      if (utils.contains(noSuccessor, group.name)) {
        node.setAttribute("largeop", "false");
      }
    } else if (group.body) {
      // This is an operator with children. Add them.
      node = new MathNode("mo", buildExpression(group.body, options));
    } else {
      // This is a text operator. Add all of the characters from the
      // operator's name.
      node = new MathNode("mi", [new TextNode(group.name.slice(1))]); // Append an <mo>&ApplyFunction;</mo>.
      // ref: https://www.w3.org/TR/REC-MathML/chap3_2.html#sec3.2.4

      var operator = new MathNode("mo", [makeText("\u2061", "text")]);

      if (group.parentIsSupSub) {
        node = new MathNode("mrow", [node, operator]);
      } else {
        node = newDocumentFragment([node, operator]);
      }
    }

    return node;
  };

  var singleCharBigOps = {
    "\u220F": "\\prod",
    "\u2210": "\\coprod",
    "\u2211": "\\sum",
    "\u22c0": "\\bigwedge",
    "\u22c1": "\\bigvee",
    "\u22c2": "\\bigcap",
    "\u22c3": "\\bigcup",
    "\u2a00": "\\bigodot",
    "\u2a01": "\\bigoplus",
    "\u2a02": "\\bigotimes",
    "\u2a04": "\\biguplus",
    "\u2a06": "\\bigsqcup"
  };
  defineFunction({
    type: "op",
    names: ["\\coprod", "\\bigvee", "\\bigwedge", "\\biguplus", "\\bigcap", "\\bigcup", "\\intop", "\\prod", "\\sum", "\\bigotimes", "\\bigoplus", "\\bigodot", "\\bigsqcup", "\\smallint", "\u220F", "\u2210", "\u2211", "\u22c0", "\u22c1", "\u22c2", "\u22c3", "\u2a00", "\u2a01", "\u2a02", "\u2a04", "\u2a06"],
    props: {
      numArgs: 0
    },
    handler: (_ref, args) => {
      var {
        parser,
        funcName
      } = _ref;
      var fName = funcName;

      if (fName.length === 1) {
        fName = singleCharBigOps[fName];
      }

      return {
        type: "op",
        mode: parser.mode,
        limits: true,
        parentIsSupSub: false,
        symbol: true,
        name: fName
      };
    },
    htmlBuilder: htmlBuilder$2,
    mathmlBuilder: mathmlBuilder$1
  }); // Note: calling defineFunction with a type that's already been defined only
  // works because the same htmlBuilder and mathmlBuilder are being used.

  defineFunction({
    type: "op",
    names: ["\\mathop"],
    props: {
      numArgs: 1,
      primitive: true
    },
    handler: (_ref2, args) => {
      var {
        parser
      } = _ref2;
      var body = args[0];
      return {
        type: "op",
        mode: parser.mode,
        limits: false,
        parentIsSupSub: false,
        symbol: false,
        body: ordargument(body)
      };
    },
    htmlBuilder: htmlBuilder$2,
    mathmlBuilder: mathmlBuilder$1
  }); // There are 2 flags for operators; whether they produce limits in
  // displaystyle, and whether they are symbols and should grow in
  // displaystyle. These four groups cover the four possible choices.

  var singleCharIntegrals = {
    "\u222b": "\\int",
    "\u222c": "\\iint",
    "\u222d": "\\iiint",
    "\u222e": "\\oint",
    "\u222f": "\\oiint",
    "\u2230": "\\oiiint"
  }; // No limits, not symbols

  defineFunction({
    type: "op",
    names: ["\\arcsin", "\\arccos", "\\arctan", "\\arctg", "\\arcctg", "\\arg", "\\ch", "\\cos", "\\cosec", "\\cosh", "\\cot", "\\cotg", "\\coth", "\\csc", "\\ctg", "\\cth", "\\deg", "\\dim", "\\exp", "\\hom", "\\ker", "\\lg", "\\ln", "\\log", "\\sec", "\\sin", "\\sinh", "\\sh", "\\tan", "\\tanh", "\\tg", "\\th"],
    props: {
      numArgs: 0
    },

    handler(_ref3) {
      var {
        parser,
        funcName
      } = _ref3;
      return {
        type: "op",
        mode: parser.mode,
        limits: false,
        parentIsSupSub: false,
        symbol: false,
        name: funcName
      };
    },

    htmlBuilder: htmlBuilder$2,
    mathmlBuilder: mathmlBuilder$1
  }); // Limits, not symbols

  defineFunction({
    type: "op",
    names: ["\\det", "\\gcd", "\\inf", "\\lim", "\\max", "\\min", "\\Pr", "\\sup"],
    props: {
      numArgs: 0
    },

    handler(_ref4) {
      var {
        parser,
        funcName
      } = _ref4;
      return {
        type: "op",
        mode: parser.mode,
        limits: true,
        parentIsSupSub: false,
        symbol: false,
        name: funcName
      };
    },

    htmlBuilder: htmlBuilder$2,
    mathmlBuilder: mathmlBuilder$1
  }); // No limits, symbols

  defineFunction({
    type: "op",
    names: ["\\int", "\\iint", "\\iiint", "\\oint", "\\oiint", "\\oiiint", "\u222b", "\u222c", "\u222d", "\u222e", "\u222f", "\u2230"],
    props: {
      numArgs: 0
    },

    handler(_ref5) {
      var {
        parser,
        funcName
      } = _ref5;
      var fName = funcName;

      if (fName.length === 1) {
        fName = singleCharIntegrals[fName];
      }

      return {
        type: "op",
        mode: parser.mode,
        limits: false,
        parentIsSupSub: false,
        symbol: true,
        name: fName
      };
    },

    htmlBuilder: htmlBuilder$2,
    mathmlBuilder: mathmlBuilder$1
  });

  // NOTE: Unlike most `htmlBuilder`s, this one handles not only
  // "operatorname", but also  "supsub" since \operatorname* can
  // affect super/subscripting.
  var htmlBuilder$1 = (grp, options) => {
    // Operators are handled in the TeXbook pg. 443-444, rule 13(a).
    var supGroup;
    var subGroup;
    var hasLimits = false;
    var group;

    if (grp.type === "supsub") {
      // If we have limits, supsub will pass us its group to handle. Pull
      // out the superscript and subscript and set the group to the op in
      // its base.
      supGroup = grp.sup;
      subGroup = grp.sub;
      group = assertNodeType(grp.base, "operatorname");
      hasLimits = true;
    } else {
      group = assertNodeType(grp, "operatorname");
    }

    var base;

    if (group.body.length > 0) {
      var body = group.body.map(child => {
        // $FlowFixMe: Check if the node has a string `text` property.
        var childText = child.text;

        if (typeof childText === "string") {
          return {
            type: "textord",
            mode: child.mode,
            text: childText
          };
        } else {
          return child;
        }
      }); // Consolidate function names into symbol characters.

      var expression = buildExpression$1(body, options.withFont("mathrm"), true);

      for (var i = 0; i < expression.length; i++) {
        var child = expression[i];

        if (child instanceof SymbolNode) {
          // Per amsopn package,
          // change minus to hyphen and \ast to asterisk
          child.text = child.text.replace(/\u2212/, "-").replace(/\u2217/, "*");
        }
      }

      base = buildCommon.makeSpan(["mop"], expression, options);
    } else {
      base = buildCommon.makeSpan(["mop"], [], options);
    }

    if (hasLimits) {
      return assembleSupSub(base, supGroup, subGroup, options, options.style, 0, 0);
    } else {
      return base;
    }
  };

  var mathmlBuilder = (group, options) => {
    // The steps taken here are similar to the html version.
    var expression = buildExpression(group.body, options.withFont("mathrm")); // Is expression a string or has it something like a fraction?

    var isAllString = true; // default

    for (var i = 0; i < expression.length; i++) {
      var node = expression[i];

      if (node instanceof mathMLTree.SpaceNode) ; else if (node instanceof mathMLTree.MathNode) {
        switch (node.type) {
          case "mi":
          case "mn":
          case "ms":
          case "mspace":
          case "mtext":
            break;
          // Do nothing yet.

          case "mo":
            {
              var child = node.children[0];

              if (node.children.length === 1 && child instanceof mathMLTree.TextNode) {
                child.text = child.text.replace(/\u2212/, "-").replace(/\u2217/, "*");
              } else {
                isAllString = false;
              }

              break;
            }

          default:
            isAllString = false;
        }
      } else {
        isAllString = false;
      }
    }

    if (isAllString) {
      // Write a single TextNode instead of multiple nested tags.
      var word = expression.map(node => node.toText()).join("");
      expression = [new mathMLTree.TextNode(word)];
    }

    var identifier = new mathMLTree.MathNode("mi", expression);
    identifier.setAttribute("mathvariant", "normal"); // \u2061 is the same as &ApplyFunction;
    // ref: https://www.w3schools.com/charsets/ref_html_entities_a.asp

    var operator = new mathMLTree.MathNode("mo", [makeText("\u2061", "text")]);

    if (group.parentIsSupSub) {
      return new mathMLTree.MathNode("mrow", [identifier, operator]);
    } else {
      return mathMLTree.newDocumentFragment([identifier, operator]);
    }
  }; // \operatorname
  // amsopn.dtx: \mathop{#1\kern\z@\operator@font#3}\newmcodes@


  defineFunction({
    type: "operatorname",
    names: ["\\operatorname@", "\\operatornamewithlimits"],
    props: {
      numArgs: 1
    },
    handler: (_ref, args) => {
      var {
        parser,
        funcName
      } = _ref;
      var body = args[0];
      return {
        type: "operatorname",
        mode: parser.mode,
        body: ordargument(body),
        alwaysHandleSupSub: funcName === "\\operatornamewithlimits",
        limits: false,
        parentIsSupSub: false
      };
    },
    htmlBuilder: htmlBuilder$1,
    mathmlBuilder
  });
  defineMacro("\\operatorname", "\\@ifstar\\operatornamewithlimits\\operatorname@");

  defineFunctionBuilders({
    type: "ordgroup",

    htmlBuilder(group, options) {
      if (group.semisimple) {
        return buildCommon.makeFragment(buildExpression$1(group.body, options, false));
      }

      return buildCommon.makeSpan(["mord"], buildExpression$1(group.body, options, true), options);
    },

    mathmlBuilder(group, options) {
      return buildExpressionRow(group.body, options, true);
    }

  });

  defineFunction({
    type: "overline",
    names: ["\\overline"],
    props: {
      numArgs: 1
    },

    handler(_ref, args) {
      var {
        parser
      } = _ref;
      var body = args[0];
      return {
        type: "overline",
        mode: parser.mode,
        body
      };
    },

    htmlBuilder(group, options) {
      // Overlines are handled in the TeXbook pg 443, Rule 9.
      // Build the inner group in the cramped style.
      var innerGroup = buildGroup$1(group.body, options.havingCrampedStyle()); // Create the line above the body

      var line = buildCommon.makeLineSpan("overline-line", options); // Generate the vlist, with the appropriate kerns

      var defaultRuleThickness = options.fontMetrics().defaultRuleThickness;
      var vlist = buildCommon.makeVList({
        positionType: "firstBaseline",
        children: [{
          type: "elem",
          elem: innerGroup
        }, {
          type: "kern",
          size: 3 * defaultRuleThickness
        }, {
          type: "elem",
          elem: line
        }, {
          type: "kern",
          size: defaultRuleThickness
        }]
      }, options);
      return buildCommon.makeSpan(["mord", "overline"], [vlist], options);
    },

    mathmlBuilder(group, options) {
      var operator = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode("\u203e")]);
      operator.setAttribute("stretchy", "true");
      var node = new mathMLTree.MathNode("mover", [buildGroup(group.body, options), operator]);
      node.setAttribute("accent", "true");
      return node;
    }

  });

  defineFunction({
    type: "phantom",
    names: ["\\phantom"],
    props: {
      numArgs: 1,
      allowedInText: true
    },
    handler: (_ref, args) => {
      var {
        parser
      } = _ref;
      var body = args[0];
      return {
        type: "phantom",
        mode: parser.mode,
        body: ordargument(body)
      };
    },
    htmlBuilder: (group, options) => {
      var elements = buildExpression$1(group.body, options.withPhantom(), false); // \phantom isn't supposed to affect the elements it contains.
      // See "color" for more details.

      return buildCommon.makeFragment(elements);
    },
    mathmlBuilder: (group, options) => {
      var inner = buildExpression(group.body, options);
      return new mathMLTree.MathNode("mphantom", inner);
    }
  });
  defineFunction({
    type: "hphantom",
    names: ["\\hphantom"],
    props: {
      numArgs: 1,
      allowedInText: true
    },
    handler: (_ref2, args) => {
      var {
        parser
      } = _ref2;
      var body = args[0];
      return {
        type: "hphantom",
        mode: parser.mode,
        body
      };
    },
    htmlBuilder: (group, options) => {
      var node = buildCommon.makeSpan([], [buildGroup$1(group.body, options.withPhantom())]);
      node.height = 0;
      node.depth = 0;

      if (node.children) {
        for (var i = 0; i < node.children.length; i++) {
          node.children[i].height = 0;
          node.children[i].depth = 0;
        }
      } // See smash for comment re: use of makeVList


      node = buildCommon.makeVList({
        positionType: "firstBaseline",
        children: [{
          type: "elem",
          elem: node
        }]
      }, options); // For spacing, TeX treats \smash as a math group (same spacing as ord).

      return buildCommon.makeSpan(["mord"], [node], options);
    },
    mathmlBuilder: (group, options) => {
      var inner = buildExpression(ordargument(group.body), options);
      var phantom = new mathMLTree.MathNode("mphantom", inner);
      var node = new mathMLTree.MathNode("mpadded", [phantom]);
      node.setAttribute("height", "0px");
      node.setAttribute("depth", "0px");
      return node;
    }
  });
  defineFunction({
    type: "vphantom",
    names: ["\\vphantom"],
    props: {
      numArgs: 1,
      allowedInText: true
    },
    handler: (_ref3, args) => {
      var {
        parser
      } = _ref3;
      var body = args[0];
      return {
        type: "vphantom",
        mode: parser.mode,
        body
      };
    },
    htmlBuilder: (group, options) => {
      var inner = buildCommon.makeSpan(["inner"], [buildGroup$1(group.body, options.withPhantom())]);
      var fix = buildCommon.makeSpan(["fix"], []);
      return buildCommon.makeSpan(["mord", "rlap"], [inner, fix], options);
    },
    mathmlBuilder: (group, options) => {
      var inner = buildExpression(ordargument(group.body), options);
      var phantom = new mathMLTree.MathNode("mphantom", inner);
      var node = new mathMLTree.MathNode("mpadded", [phantom]);
      node.setAttribute("width", "0px");
      return node;
    }
  });

  defineFunction({
    type: "raisebox",
    names: ["\\raisebox"],
    props: {
      numArgs: 2,
      argTypes: ["size", "hbox"],
      allowedInText: true
    },

    handler(_ref, args) {
      var {
        parser
      } = _ref;
      var amount = assertNodeType(args[0], "size").value;
      var body = args[1];
      return {
        type: "raisebox",
        mode: parser.mode,
        dy: amount,
        body
      };
    },

    htmlBuilder(group, options) {
      var body = buildGroup$1(group.body, options);
      var dy = calculateSize(group.dy, options);
      return buildCommon.makeVList({
        positionType: "shift",
        positionData: -dy,
        children: [{
          type: "elem",
          elem: body
        }]
      }, options);
    },

    mathmlBuilder(group, options) {
      var node = new mathMLTree.MathNode("mpadded", [buildGroup(group.body, options)]);
      var dy = group.dy.number + group.dy.unit;
      node.setAttribute("voffset", dy);
      return node;
    }

  });

  defineFunction({
    type: "internal",
    names: ["\\relax"],
    props: {
      numArgs: 0,
      allowedInText: true
    },

    handler(_ref) {
      var {
        parser
      } = _ref;
      return {
        type: "internal",
        mode: parser.mode
      };
    }

  });

  defineFunction({
    type: "rule",
    names: ["\\rule"],
    props: {
      numArgs: 2,
      numOptionalArgs: 1,
      allowedInText: true,
      allowedInMath: true,
      argTypes: ["size", "size", "size"]
    },

    handler(_ref, args, optArgs) {
      var {
        parser
      } = _ref;
      var shift = optArgs[0];
      var width = assertNodeType(args[0], "size");
      var height = assertNodeType(args[1], "size");
      return {
        type: "rule",
        mode: parser.mode,
        shift: shift && assertNodeType(shift, "size").value,
        width: width.value,
        height: height.value
      };
    },

    htmlBuilder(group, options) {
      // Make an empty span for the rule
      var rule = buildCommon.makeSpan(["mord", "rule"], [], options); // Calculate the shift, width, and height of the rule, and account for units

      var width = calculateSize(group.width, options);
      var height = calculateSize(group.height, options);
      var shift = group.shift ? calculateSize(group.shift, options) : 0; // Style the rule to the right size

      rule.style.borderRightWidth = makeEm(width);
      rule.style.borderTopWidth = makeEm(height);
      rule.style.bottom = makeEm(shift); // Record the height and width

      rule.width = width;
      rule.height = height + shift;
      rule.depth = -shift; // Font size is the number large enough that the browser will
      // reserve at least `absHeight` space above the baseline.
      // The 1.125 factor was empirically determined

      rule.maxFontSize = height * 1.125 * options.sizeMultiplier;
      return rule;
    },

    mathmlBuilder(group, options) {
      var width = calculateSize(group.width, options);
      var height = calculateSize(group.height, options);
      var shift = group.shift ? calculateSize(group.shift, options) : 0;
      var color = options.color && options.getColor() || "black";
      var rule = new mathMLTree.MathNode("mspace");
      rule.setAttribute("mathbackground", color);
      rule.setAttribute("width", makeEm(width));
      rule.setAttribute("height", makeEm(height));
      var wrapper = new mathMLTree.MathNode("mpadded", [rule]);

      if (shift >= 0) {
        wrapper.setAttribute("height", makeEm(shift));
      } else {
        wrapper.setAttribute("height", makeEm(shift));
        wrapper.setAttribute("depth", makeEm(-shift));
      }

      wrapper.setAttribute("voffset", makeEm(shift));
      return wrapper;
    }

  });

  function sizingGroup(value, options, baseOptions) {
    var inner = buildExpression$1(value, options, false);
    var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier; // Add size-resetting classes to the inner list and set maxFontSize
    // manually. Handle nested size changes.

    for (var i = 0; i < inner.length; i++) {
      var pos = inner[i].classes.indexOf("sizing");

      if (pos < 0) {
        Array.prototype.push.apply(inner[i].classes, options.sizingClasses(baseOptions));
      } else if (inner[i].classes[pos + 1] === "reset-size" + options.size) {
        // This is a nested size change: e.g., inner[i] is the "b" in
        // `\Huge a \small b`. Override the old size (the `reset-` class)
        // but not the new size.
        inner[i].classes[pos + 1] = "reset-size" + baseOptions.size;
      }

      inner[i].height *= multiplier;
      inner[i].depth *= multiplier;
    }

    return buildCommon.makeFragment(inner);
  }
  var sizeFuncs = ["\\tiny", "\\sixptsize", "\\scriptsize", "\\footnotesize", "\\small", "\\normalsize", "\\large", "\\Large", "\\LARGE", "\\huge", "\\Huge"];
  var htmlBuilder = (group, options) => {
    // Handle sizing operators like \Huge. Real TeX doesn't actually allow
    // these functions inside of math expressions, so we do some special
    // handling.
    var newOptions = options.havingSize(group.size);
    return sizingGroup(group.body, newOptions, options);
  };
  defineFunction({
    type: "sizing",
    names: sizeFuncs,
    props: {
      numArgs: 0,
      allowedInText: true
    },
    handler: (_ref, args) => {
      var {
        breakOnTokenText,
        funcName,
        parser
      } = _ref;
      var body = parser.parseExpression(false, breakOnTokenText);
      return {
        type: "sizing",
        mode: parser.mode,
        // Figure out what size to use based on the list of functions above
        size: sizeFuncs.indexOf(funcName) + 1,
        body
      };
    },
    htmlBuilder,
    mathmlBuilder: (group, options) => {
      var newOptions = options.havingSize(group.size);
      var inner = buildExpression(group.body, newOptions);
      var node = new mathMLTree.MathNode("mstyle", inner); // TODO(emily): This doesn't produce the correct size for nested size
      // changes, because we don't keep state of what style we're currently
      // in, so we can't reset the size to normal before changing it.  Now
      // that we're passing an options parameter we should be able to fix
      // this.

      node.setAttribute("mathsize", makeEm(newOptions.sizeMultiplier));
      return node;
    }
  });

  // smash, with optional [tb], as in AMS
  defineFunction({
    type: "smash",
    names: ["\\smash"],
    props: {
      numArgs: 1,
      numOptionalArgs: 1,
      allowedInText: true
    },
    handler: (_ref, args, optArgs) => {
      var {
        parser
      } = _ref;
      var smashHeight = false;
      var smashDepth = false;
      var tbArg = optArgs[0] && assertNodeType(optArgs[0], "ordgroup");

      if (tbArg) {
        // Optional [tb] argument is engaged.
        // ref: amsmath: \renewcommand{\smash}[1][tb]{%
        //               def\mb@t{\ht}\def\mb@b{\dp}\def\mb@tb{\ht\z@\z@\dp}%
        var letter = "";

        for (var i = 0; i < tbArg.body.length; ++i) {
          var node = tbArg.body[i]; // $FlowFixMe: Not every node type has a `text` property.

          letter = node.text;

          if (letter === "t") {
            smashHeight = true;
          } else if (letter === "b") {
            smashDepth = true;
          } else {
            smashHeight = false;
            smashDepth = false;
            break;
          }
        }
      } else {
        smashHeight = true;
        smashDepth = true;
      }

      var body = args[0];
      return {
        type: "smash",
        mode: parser.mode,
        body,
        smashHeight,
        smashDepth
      };
    },
    htmlBuilder: (group, options) => {
      var node = buildCommon.makeSpan([], [buildGroup$1(group.body, options)]);

      if (!group.smashHeight && !group.smashDepth) {
        return node;
      }

      if (group.smashHeight) {
        node.height = 0; // In order to influence makeVList, we have to reset the children.

        if (node.children) {
          for (var i = 0; i < node.children.length; i++) {
            node.children[i].height = 0;
          }
        }
      }

      if (group.smashDepth) {
        node.depth = 0;

        if (node.children) {
          for (var _i = 0; _i < node.children.length; _i++) {
            node.children[_i].depth = 0;
          }
        }
      } // At this point, we've reset the TeX-like height and depth values.
      // But the span still has an HTML line height.
      // makeVList applies "display: table-cell", which prevents the browser
      // from acting on that line height. So we'll call makeVList now.


      var smashedNode = buildCommon.makeVList({
        positionType: "firstBaseline",
        children: [{
          type: "elem",
          elem: node
        }]
      }, options); // For spacing, TeX treats \hphantom as a math group (same spacing as ord).

      return buildCommon.makeSpan(["mord"], [smashedNode], options);
    },
    mathmlBuilder: (group, options) => {
      var node = new mathMLTree.MathNode("mpadded", [buildGroup(group.body, options)]);

      if (group.smashHeight) {
        node.setAttribute("height", "0px");
      }

      if (group.smashDepth) {
        node.setAttribute("depth", "0px");
      }

      return node;
    }
  });

  defineFunction({
    type: "sqrt",
    names: ["\\sqrt"],
    props: {
      numArgs: 1,
      numOptionalArgs: 1
    },

    handler(_ref, args, optArgs) {
      var {
        parser
      } = _ref;
      var index = optArgs[0];
      var body = args[0];
      return {
        type: "sqrt",
        mode: parser.mode,
        body,
        index
      };
    },

    htmlBuilder(group, options) {
      // Square roots are handled in the TeXbook pg. 443, Rule 11.
      // First, we do the same steps as in overline to build the inner group
      // and line
      var inner = buildGroup$1(group.body, options.havingCrampedStyle());

      if (inner.height === 0) {
        // Render a small surd.
        inner.height = options.fontMetrics().xHeight;
      } // Some groups can return document fragments.  Handle those by wrapping
      // them in a span.


      inner = buildCommon.wrapFragment(inner, options); // Calculate the minimum size for the \surd delimiter

      var metrics = options.fontMetrics();
      var theta = metrics.defaultRuleThickness;
      var phi = theta;

      if (options.style.id < Style$1.TEXT.id) {
        phi = options.fontMetrics().xHeight;
      } // Calculate the clearance between the body and line


      var lineClearance = theta + phi / 4;
      var minDelimiterHeight = inner.height + inner.depth + lineClearance + theta; // Create a sqrt SVG of the required minimum size

      var {
        span: img,
        ruleWidth,
        advanceWidth
      } = delimiter.sqrtImage(minDelimiterHeight, options);
      var delimDepth = img.height - ruleWidth; // Adjust the clearance based on the delimiter size

      if (delimDepth > inner.height + inner.depth + lineClearance) {
        lineClearance = (lineClearance + delimDepth - inner.height - inner.depth) / 2;
      } // Shift the sqrt image


      var imgShift = img.height - inner.height - lineClearance - ruleWidth;
      inner.style.paddingLeft = makeEm(advanceWidth); // Overlay the image and the argument.

      var body = buildCommon.makeVList({
        positionType: "firstBaseline",
        children: [{
          type: "elem",
          elem: inner,
          wrapperClasses: ["svg-align"]
        }, {
          type: "kern",
          size: -(inner.height + imgShift)
        }, {
          type: "elem",
          elem: img
        }, {
          type: "kern",
          size: ruleWidth
        }]
      }, options);

      if (!group.index) {
        return buildCommon.makeSpan(["mord", "sqrt"], [body], options);
      } else {
        // Handle the optional root index
        // The index is always in scriptscript style
        var newOptions = options.havingStyle(Style$1.SCRIPTSCRIPT);
        var rootm = buildGroup$1(group.index, newOptions, options); // The amount the index is shifted by. This is taken from the TeX
        // source, in the definition of `\r@@t`.

        var toShift = 0.6 * (body.height - body.depth); // Build a VList with the superscript shifted up correctly

        var rootVList = buildCommon.makeVList({
          positionType: "shift",
          positionData: -toShift,
          children: [{
            type: "elem",
            elem: rootm
          }]
        }, options); // Add a class surrounding it so we can add on the appropriate
        // kerning

        var rootVListWrap = buildCommon.makeSpan(["root"], [rootVList]);
        return buildCommon.makeSpan(["mord", "sqrt"], [rootVListWrap, body], options);
      }
    },

    mathmlBuilder(group, options) {
      var {
        body,
        index
      } = group;
      return index ? new mathMLTree.MathNode("mroot", [buildGroup(body, options), buildGroup(index, options)]) : new mathMLTree.MathNode("msqrt", [buildGroup(body, options)]);
    }

  });

  var styleMap = {
    "display": Style$1.DISPLAY,
    "text": Style$1.TEXT,
    "script": Style$1.SCRIPT,
    "scriptscript": Style$1.SCRIPTSCRIPT
  };
  defineFunction({
    type: "styling",
    names: ["\\displaystyle", "\\textstyle", "\\scriptstyle", "\\scriptscriptstyle"],
    props: {
      numArgs: 0,
      allowedInText: true,
      primitive: true
    },

    handler(_ref, args) {
      var {
        breakOnTokenText,
        funcName,
        parser
      } = _ref;
      // parse out the implicit body
      var body = parser.parseExpression(true, breakOnTokenText); // TODO: Refactor to avoid duplicating styleMap in multiple places (e.g.
      // here and in buildHTML and de-dupe the enumeration of all the styles).
      // $FlowFixMe: The names above exactly match the styles.

      var style = funcName.slice(1, funcName.length - 5);
      return {
        type: "styling",
        mode: parser.mode,
        // Figure out what style to use by pulling out the style from
        // the function name
        style,
        body
      };
    },

    htmlBuilder(group, options) {
      // Style changes are handled in the TeXbook on pg. 442, Rule 3.
      var newStyle = styleMap[group.style];
      var newOptions = options.havingStyle(newStyle).withFont('');
      return sizingGroup(group.body, newOptions, options);
    },

    mathmlBuilder(group, options) {
      // Figure out what style we're changing to.
      var newStyle = styleMap[group.style];
      var newOptions = options.havingStyle(newStyle);
      var inner = buildExpression(group.body, newOptions);
      var node = new mathMLTree.MathNode("mstyle", inner);
      var styleAttributes = {
        "display": ["0", "true"],
        "text": ["0", "false"],
        "script": ["1", "false"],
        "scriptscript": ["2", "false"]
      };
      var attr = styleAttributes[group.style];
      node.setAttribute("scriptlevel", attr[0]);
      node.setAttribute("displaystyle", attr[1]);
      return node;
    }

  });

  /**
   * Sometimes, groups perform special rules when they have superscripts or
   * subscripts attached to them. This function lets the `supsub` group know that
   * Sometimes, groups perform special rules when they have superscripts or
   * its inner element should handle the superscripts and subscripts instead of
   * handling them itself.
   */
  var htmlBuilderDelegate = function htmlBuilderDelegate(group, options) {
    var base = group.base;

    if (!base) {
      return null;
    } else if (base.type === "op") {
      // Operators handle supsubs differently when they have limits
      // (e.g. `\displaystyle\sum_2^3`)
      var delegate = base.limits && (options.style.size === Style$1.DISPLAY.size || base.alwaysHandleSupSub);
      return delegate ? htmlBuilder$2 : null;
    } else if (base.type === "operatorname") {
      var _delegate = base.alwaysHandleSupSub && (options.style.size === Style$1.DISPLAY.size || base.limits);

      return _delegate ? htmlBuilder$1 : null;
    } else if (base.type === "accent") {
      return utils.isCharacterBox(base.base) ? htmlBuilder$a : null;
    } else if (base.type === "horizBrace") {
      var isSup = !group.sub;
      return isSup === base.isOver ? htmlBuilder$3 : null;
    } else {
      return null;
    }
  }; // Super scripts and subscripts, whose precise placement can depend on other
  // functions that precede them.


  defineFunctionBuilders({
    type: "supsub",

    htmlBuilder(group, options) {
      // Superscript and subscripts are handled in the TeXbook on page
      // 445-446, rules 18(a-f).
      // Here is where we defer to the inner group if it should handle
      // superscripts and subscripts itself.
      var builderDelegate = htmlBuilderDelegate(group, options);

      if (builderDelegate) {
        return builderDelegate(group, options);
      }

      var {
        base: valueBase,
        sup: valueSup,
        sub: valueSub
      } = group;
      var base = buildGroup$1(valueBase, options);
      var supm;
      var subm;
      var metrics = options.fontMetrics(); // Rule 18a

      var supShift = 0;
      var subShift = 0;
      var isCharacterBox = valueBase && utils.isCharacterBox(valueBase);

      if (valueSup) {
        var newOptions = options.havingStyle(options.style.sup());
        supm = buildGroup$1(valueSup, newOptions, options);

        if (!isCharacterBox) {
          supShift = base.height - newOptions.fontMetrics().supDrop * newOptions.sizeMultiplier / options.sizeMultiplier;
        }
      }

      if (valueSub) {
        var _newOptions = options.havingStyle(options.style.sub());

        subm = buildGroup$1(valueSub, _newOptions, options);

        if (!isCharacterBox) {
          subShift = base.depth + _newOptions.fontMetrics().subDrop * _newOptions.sizeMultiplier / options.sizeMultiplier;
        }
      } // Rule 18c


      var minSupShift;

      if (options.style === Style$1.DISPLAY) {
        minSupShift = metrics.sup1;
      } else if (options.style.cramped) {
        minSupShift = metrics.sup3;
      } else {
        minSupShift = metrics.sup2;
      } // scriptspace is a font-size-independent size, so scale it
      // appropriately for use as the marginRight.


      var multiplier = options.sizeMultiplier;
      var marginRight = makeEm(0.5 / metrics.ptPerEm / multiplier);
      var marginLeft = null;

      if (subm) {
        // Subscripts shouldn't be shifted by the base's italic correction.
        // Account for that by shifting the subscript back the appropriate
        // amount. Note we only do this when the base is a single symbol.
        var isOiint = group.base && group.base.type === "op" && group.base.name && (group.base.name === "\\oiint" || group.base.name === "\\oiiint");

        if (base instanceof SymbolNode || isOiint) {
          // $FlowFixMe
          marginLeft = makeEm(-base.italic);
        }
      }

      var supsub;

      if (supm && subm) {
        supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);
        subShift = Math.max(subShift, metrics.sub2);
        var ruleWidth = metrics.defaultRuleThickness; // Rule 18e

        var maxWidth = 4 * ruleWidth;

        if (supShift - supm.depth - (subm.height - subShift) < maxWidth) {
          subShift = maxWidth - (supShift - supm.depth) + subm.height;
          var psi = 0.8 * metrics.xHeight - (supShift - supm.depth);

          if (psi > 0) {
            supShift += psi;
            subShift -= psi;
          }
        }

        var vlistElem = [{
          type: "elem",
          elem: subm,
          shift: subShift,
          marginRight,
          marginLeft
        }, {
          type: "elem",
          elem: supm,
          shift: -supShift,
          marginRight
        }];
        supsub = buildCommon.makeVList({
          positionType: "individualShift",
          children: vlistElem
        }, options);
      } else if (subm) {
        // Rule 18b
        subShift = Math.max(subShift, metrics.sub1, subm.height - 0.8 * metrics.xHeight);
        var _vlistElem = [{
          type: "elem",
          elem: subm,
          marginLeft,
          marginRight
        }];
        supsub = buildCommon.makeVList({
          positionType: "shift",
          positionData: subShift,
          children: _vlistElem
        }, options);
      } else if (supm) {
        // Rule 18c, d
        supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);
        supsub = buildCommon.makeVList({
          positionType: "shift",
          positionData: -supShift,
          children: [{
            type: "elem",
            elem: supm,
            marginRight
          }]
        }, options);
      } else {
        throw new Error("supsub must have either sup or sub.");
      } // Wrap the supsub vlist in a span.msupsub to reset text-align.


      var mclass = getTypeOfDomTree(base, "right") || "mord";
      return buildCommon.makeSpan([mclass], [base, buildCommon.makeSpan(["msupsub"], [supsub])], options);
    },

    mathmlBuilder(group, options) {
      // Is the inner group a relevant horizonal brace?
      var isBrace = false;
      var isOver;
      var isSup;

      if (group.base && group.base.type === "horizBrace") {
        isSup = !!group.sup;

        if (isSup === group.base.isOver) {
          isBrace = true;
          isOver = group.base.isOver;
        }
      }

      if (group.base && (group.base.type === "op" || group.base.type === "operatorname")) {
        group.base.parentIsSupSub = true;
      }

      var children = [buildGroup(group.base, options)];

      if (group.sub) {
        children.push(buildGroup(group.sub, options));
      }

      if (group.sup) {
        children.push(buildGroup(group.sup, options));
      }

      var nodeType;

      if (isBrace) {
        nodeType = isOver ? "mover" : "munder";
      } else if (!group.sub) {
        var base = group.base;

        if (base && base.type === "op" && base.limits && (options.style === Style$1.DISPLAY || base.alwaysHandleSupSub)) {
          nodeType = "mover";
        } else if (base && base.type === "operatorname" && base.alwaysHandleSupSub && (base.limits || options.style === Style$1.DISPLAY)) {
          nodeType = "mover";
        } else {
          nodeType = "msup";
        }
      } else if (!group.sup) {
        var _base = group.base;

        if (_base && _base.type === "op" && _base.limits && (options.style === Style$1.DISPLAY || _base.alwaysHandleSupSub)) {
          nodeType = "munder";
        } else if (_base && _base.type === "operatorname" && _base.alwaysHandleSupSub && (_base.limits || options.style === Style$1.DISPLAY)) {
          nodeType = "munder";
        } else {
          nodeType = "msub";
        }
      } else {
        var _base2 = group.base;

        if (_base2 && _base2.type === "op" && _base2.limits && options.style === Style$1.DISPLAY) {
          nodeType = "munderover";
        } else if (_base2 && _base2.type === "operatorname" && _base2.alwaysHandleSupSub && (options.style === Style$1.DISPLAY || _base2.limits)) {
          nodeType = "munderover";
        } else {
          nodeType = "msubsup";
        }
      }

      return new mathMLTree.MathNode(nodeType, children);
    }

  });

  defineFunctionBuilders({
    type: "atom",

    htmlBuilder(group, options) {
      return buildCommon.mathsym(group.text, group.mode, options, ["m" + group.family]);
    },

    mathmlBuilder(group, options) {
      var node = new mathMLTree.MathNode("mo", [makeText(group.text, group.mode)]);

      if (group.family === "bin") {
        var variant = getVariant(group, options);

        if (variant === "bold-italic") {
          node.setAttribute("mathvariant", variant);
        }
      } else if (group.family === "punct") {
        node.setAttribute("separator", "true");
      } else if (group.family === "open" || group.family === "close") {
        // Delims built here should not stretch vertically.
        // See delimsizing.js for stretchy delims.
        node.setAttribute("stretchy", "false");
      }

      return node;
    }

  });

  // "mathord" and "textord" ParseNodes created in Parser.js from symbol Groups in
  // src/symbols.js.
  var defaultVariant = {
    "mi": "italic",
    "mn": "normal",
    "mtext": "normal"
  };
  defineFunctionBuilders({
    type: "mathord",

    htmlBuilder(group, options) {
      return buildCommon.makeOrd(group, options, "mathord");
    },

    mathmlBuilder(group, options) {
      var node = new mathMLTree.MathNode("mi", [makeText(group.text, group.mode, options)]);
      var variant = getVariant(group, options) || "italic";

      if (variant !== defaultVariant[node.type]) {
        node.setAttribute("mathvariant", variant);
      }

      return node;
    }

  });
  defineFunctionBuilders({
    type: "textord",

    htmlBuilder(group, options) {
      return buildCommon.makeOrd(group, options, "textord");
    },

    mathmlBuilder(group, options) {
      var text = makeText(group.text, group.mode, options);
      var variant = getVariant(group, options) || "normal";
      var node;

      if (group.mode === 'text') {
        node = new mathMLTree.MathNode("mtext", [text]);
      } else if (/[0-9]/.test(group.text)) {
        node = new mathMLTree.MathNode("mn", [text]);
      } else if (group.text === "\\prime") {
        node = new mathMLTree.MathNode("mo", [text]);
      } else {
        node = new mathMLTree.MathNode("mi", [text]);
      }

      if (variant !== defaultVariant[node.type]) {
        node.setAttribute("mathvariant", variant);
      }

      return node;
    }

  });

  var cssSpace = {
    "\\nobreak": "nobreak",
    "\\allowbreak": "allowbreak"
  }; // A lookup table to determine whether a spacing function/symbol should be
  // treated like a regular space character.  If a symbol or command is a key
  // in this table, then it should be a regular space character.  Furthermore,
  // the associated value may have a `className` specifying an extra CSS class
  // to add to the created `span`.

  var regularSpace = {
    " ": {},
    "\\ ": {},
    "~": {
      className: "nobreak"
    },
    "\\space": {},
    "\\nobreakspace": {
      className: "nobreak"
    }
  }; // ParseNode<"spacing"> created in Parser.js from the "spacing" symbol Groups in
  // src/symbols.js.

  defineFunctionBuilders({
    type: "spacing",

    htmlBuilder(group, options) {
      if (regularSpace.hasOwnProperty(group.text)) {
        var className = regularSpace[group.text].className || ""; // Spaces are generated by adding an actual space. Each of these
        // things has an entry in the symbols table, so these will be turned
        // into appropriate outputs.

        if (group.mode === "text") {
          var ord = buildCommon.makeOrd(group, options, "textord");
          ord.classes.push(className);
          return ord;
        } else {
          return buildCommon.makeSpan(["mspace", className], [buildCommon.mathsym(group.text, group.mode, options)], options);
        }
      } else if (cssSpace.hasOwnProperty(group.text)) {
        // Spaces based on just a CSS class.
        return buildCommon.makeSpan(["mspace", cssSpace[group.text]], [], options);
      } else {
        throw new ParseError("Unknown type of space \"" + group.text + "\"");
      }
    },

    mathmlBuilder(group, options) {
      var node;

      if (regularSpace.hasOwnProperty(group.text)) {
        node = new mathMLTree.MathNode("mtext", [new mathMLTree.TextNode("\u00a0")]);
      } else if (cssSpace.hasOwnProperty(group.text)) {
        // CSS-based MathML spaces (\nobreak, \allowbreak) are ignored
        return new mathMLTree.MathNode("mspace");
      } else {
        throw new ParseError("Unknown type of space \"" + group.text + "\"");
      }

      return node;
    }

  });

  var pad = () => {
    var padNode = new mathMLTree.MathNode("mtd", []);
    padNode.setAttribute("width", "50%");
    return padNode;
  };

  defineFunctionBuilders({
    type: "tag",

    mathmlBuilder(group, options) {
      var table = new mathMLTree.MathNode("mtable", [new mathMLTree.MathNode("mtr", [pad(), new mathMLTree.MathNode("mtd", [buildExpressionRow(group.body, options)]), pad(), new mathMLTree.MathNode("mtd", [buildExpressionRow(group.tag, options)])])]);
      table.setAttribute("width", "100%");
      return table; // TODO: Left-aligned tags.
      // Currently, the group and options passed here do not contain
      // enough info to set tag alignment. `leqno` is in Settings but it is
      // not passed to Options. On the HTML side, leqno is
      // set by a CSS class applied in buildTree.js. That would have worked
      // in MathML if browsers supported <mlabeledtr>. Since they don't, we
      // need to rewrite the way this function is called.
    }

  });

  var textFontFamilies = {
    "\\text": undefined,
    "\\textrm": "textrm",
    "\\textsf": "textsf",
    "\\texttt": "texttt",
    "\\textnormal": "textrm"
  };
  var textFontWeights = {
    "\\textbf": "textbf",
    "\\textmd": "textmd"
  };
  var textFontShapes = {
    "\\textit": "textit",
    "\\textup": "textup"
  };

  var optionsWithFont = (group, options) => {
    var font = group.font; // Checks if the argument is a font family or a font style.

    if (!font) {
      return options;
    } else if (textFontFamilies[font]) {
      return options.withTextFontFamily(textFontFamilies[font]);
    } else if (textFontWeights[font]) {
      return options.withTextFontWeight(textFontWeights[font]);
    } else if (font === "\\emph") {
      return options.fontShape === "textit" ? options.withTextFontShape("textup") : options.withTextFontShape("textit");
    }

    return options.withTextFontShape(textFontShapes[font]);
  };

  defineFunction({
    type: "text",
    names: [// Font families
    "\\text", "\\textrm", "\\textsf", "\\texttt", "\\textnormal", // Font weights
    "\\textbf", "\\textmd", // Font Shapes
    "\\textit", "\\textup", "\\emph"],
    props: {
      numArgs: 1,
      argTypes: ["text"],
      allowedInArgument: true,
      allowedInText: true
    },

    handler(_ref, args) {
      var {
        parser,
        funcName
      } = _ref;
      var body = args[0];
      return {
        type: "text",
        mode: parser.mode,
        body: ordargument(body),
        font: funcName
      };
    },

    htmlBuilder(group, options) {
      var newOptions = optionsWithFont(group, options);
      var inner = buildExpression$1(group.body, newOptions, true);
      return buildCommon.makeSpan(["mord", "text"], inner, newOptions);
    },

    mathmlBuilder(group, options) {
      var newOptions = optionsWithFont(group, options);
      return buildExpressionRow(group.body, newOptions);
    }

  });

  defineFunction({
    type: "underline",
    names: ["\\underline"],
    props: {
      numArgs: 1,
      allowedInText: true
    },

    handler(_ref, args) {
      var {
        parser
      } = _ref;
      return {
        type: "underline",
        mode: parser.mode,
        body: args[0]
      };
    },

    htmlBuilder(group, options) {
      // Underlines are handled in the TeXbook pg 443, Rule 10.
      // Build the inner group.
      var innerGroup = buildGroup$1(group.body, options); // Create the line to go below the body

      var line = buildCommon.makeLineSpan("underline-line", options); // Generate the vlist, with the appropriate kerns

      var defaultRuleThickness = options.fontMetrics().defaultRuleThickness;
      var vlist = buildCommon.makeVList({
        positionType: "top",
        positionData: innerGroup.height,
        children: [{
          type: "kern",
          size: defaultRuleThickness
        }, {
          type: "elem",
          elem: line
        }, {
          type: "kern",
          size: 3 * defaultRuleThickness
        }, {
          type: "elem",
          elem: innerGroup
        }]
      }, options);
      return buildCommon.makeSpan(["mord", "underline"], [vlist], options);
    },

    mathmlBuilder(group, options) {
      var operator = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode("\u203e")]);
      operator.setAttribute("stretchy", "true");
      var node = new mathMLTree.MathNode("munder", [buildGroup(group.body, options), operator]);
      node.setAttribute("accentunder", "true");
      return node;
    }

  });

  defineFunction({
    type: "vcenter",
    names: ["\\vcenter"],
    props: {
      numArgs: 1,
      argTypes: ["original"],
      // In LaTeX, \vcenter can act only on a box.
      allowedInText: false
    },

    handler(_ref, args) {
      var {
        parser
      } = _ref;
      return {
        type: "vcenter",
        mode: parser.mode,
        body: args[0]
      };
    },

    htmlBuilder(group, options) {
      var body = buildGroup$1(group.body, options);
      var axisHeight = options.fontMetrics().axisHeight;
      var dy = 0.5 * (body.height - axisHeight - (body.depth + axisHeight));
      return buildCommon.makeVList({
        positionType: "shift",
        positionData: dy,
        children: [{
          type: "elem",
          elem: body
        }]
      }, options);
    },

    mathmlBuilder(group, options) {
      // There is no way to do this in MathML.
      // Write a class as a breadcrumb in case some post-processor wants
      // to perform a vcenter adjustment.
      return new mathMLTree.MathNode("mpadded", [buildGroup(group.body, options)], ["vcenter"]);
    }

  });

  defineFunction({
    type: "verb",
    names: ["\\verb"],
    props: {
      numArgs: 0,
      allowedInText: true
    },

    handler(context, args, optArgs) {
      // \verb and \verb* are dealt with directly in Parser.js.
      // If we end up here, it's because of a failure to match the two delimiters
      // in the regex in Lexer.js.  LaTeX raises the following error when \verb is
      // terminated by end of line (or file).
      throw new ParseError("\\verb ended by end of line instead of matching delimiter");
    },

    htmlBuilder(group, options) {
      var text = makeVerb(group);
      var body = []; // \verb enters text mode and therefore is sized like \textstyle

      var newOptions = options.havingStyle(options.style.text());

      for (var i = 0; i < text.length; i++) {
        var c = text[i];

        if (c === '~') {
          c = '\\textasciitilde';
        }

        body.push(buildCommon.makeSymbol(c, "Typewriter-Regular", group.mode, newOptions, ["mord", "texttt"]));
      }

      return buildCommon.makeSpan(["mord", "text"].concat(newOptions.sizingClasses(options)), buildCommon.tryCombineChars(body), newOptions);
    },

    mathmlBuilder(group, options) {
      var text = new mathMLTree.TextNode(makeVerb(group));
      var node = new mathMLTree.MathNode("mtext", [text]);
      node.setAttribute("mathvariant", "monospace");
      return node;
    }

  });
  /**
   * Converts verb group into body string.
   *
   * \verb* replaces each space with an open box \u2423
   * \verb replaces each space with a no-break space \xA0
   */

  var makeVerb = group => group.body.replace(/ /g, group.star ? '\u2423' : '\xA0');

  /** Include this to ensure that all functions are defined. */
  var functions = _functions;

  /**
   * The Lexer class handles tokenizing the input in various ways. Since our
   * parser expects us to be able to backtrack, the lexer allows lexing from any
   * given starting point.
   *
   * Its main exposed function is the `lex` function, which takes a position to
   * lex from and a type of token to lex. It defers to the appropriate `_innerLex`
   * function.
   *
   * The various `_innerLex` functions perform the actual lexing of different
   * kinds.
   */

  /* The following tokenRegex
   * - matches typical whitespace (but not NBSP etc.) using its first group
   * - does not match any control character \x00-\x1f except whitespace
   * - does not match a bare backslash
   * - matches any ASCII character except those just mentioned
   * - does not match the BMP private use area \uE000-\uF8FF
   * - does not match bare surrogate code units
   * - matches any BMP character except for those just described
   * - matches any valid Unicode surrogate pair
   * - matches a backslash followed by one or more whitespace characters
   * - matches a backslash followed by one or more letters then whitespace
   * - matches a backslash followed by any BMP character
   * Capturing groups:
   *   [1] regular whitespace
   *   [2] backslash followed by whitespace
   *   [3] anything else, which may include:
   *     [4] left character of \verb*
   *     [5] left character of \verb
   *     [6] backslash followed by word, excluding any trailing whitespace
   * Just because the Lexer matches something doesn't mean it's valid input:
   * If there is no matching function or symbol definition, the Parser will
   * still reject the input.
   */
  var spaceRegexString = "[ \r\n\t]";
  var controlWordRegexString = "\\\\[a-zA-Z@]+";
  var controlSymbolRegexString = "\\\\[^\uD800-\uDFFF]";
  var controlWordWhitespaceRegexString = "(" + controlWordRegexString + ")" + spaceRegexString + "*";
  var controlSpaceRegexString = "\\\\(\n|[ \r\t]+\n?)[ \r\t]*";
  var combiningDiacriticalMarkString = "[\u0300-\u036f]";
  var combiningDiacriticalMarksEndRegex = new RegExp(combiningDiacriticalMarkString + "+$");
  var tokenRegexString = "(" + spaceRegexString + "+)|" + ( // whitespace
  controlSpaceRegexString + "|") + // \whitespace
  "([!-\\[\\]-\u2027\u202A-\uD7FF\uF900-\uFFFF]" + ( // single codepoint
  combiningDiacriticalMarkString + "*") + // ...plus accents
  "|[\uD800-\uDBFF][\uDC00-\uDFFF]" + ( // surrogate pair
  combiningDiacriticalMarkString + "*") + // ...plus accents
  "|\\\\verb\\*([^]).*?\\4" + // \verb*
  "|\\\\verb([^*a-zA-Z]).*?\\5" + ( // \verb unstarred
  "|" + controlWordWhitespaceRegexString) + ( // \macroName + spaces
  "|" + controlSymbolRegexString + ")"); // \\, \', etc.

  /** Main Lexer class */

  class Lexer {
    // Category codes. The lexer only supports comment characters (14) for now.
    // MacroExpander additionally distinguishes active (13).
    constructor(input, settings) {
      this.input = undefined;
      this.settings = undefined;
      this.tokenRegex = undefined;
      this.catcodes = undefined;
      // Separate accents from characters
      this.input = input;
      this.settings = settings;
      this.tokenRegex = new RegExp(tokenRegexString, 'g');
      this.catcodes = {
        "%": 14,
        // comment character
        "~": 13 // active character

      };
    }

    setCatcode(char, code) {
      this.catcodes[char] = code;
    }
    /**
     * This function lexes a single token.
     */


    lex() {
      var input = this.input;
      var pos = this.tokenRegex.lastIndex;

      if (pos === input.length) {
        return new Token("EOF", new SourceLocation(this, pos, pos));
      }

      var match = this.tokenRegex.exec(input);

      if (match === null || match.index !== pos) {
        throw new ParseError("Unexpected character: '" + input[pos] + "'", new Token(input[pos], new SourceLocation(this, pos, pos + 1)));
      }

      var text = match[6] || match[3] || (match[2] ? "\\ " : " ");

      if (this.catcodes[text] === 14) {
        // comment character
        var nlIndex = input.indexOf('\n', this.tokenRegex.lastIndex);

        if (nlIndex === -1) {
          this.tokenRegex.lastIndex = input.length; // EOF

          this.settings.reportNonstrict("commentAtEnd", "% comment has no terminating newline; LaTeX would " + "fail because of commenting the end of math mode (e.g. $)");
        } else {
          this.tokenRegex.lastIndex = nlIndex + 1;
        }

        return this.lex();
      }

      return new Token(text, new SourceLocation(this, pos, this.tokenRegex.lastIndex));
    }

  }

  /**
   * A `Namespace` refers to a space of nameable things like macros or lengths,
   * which can be `set` either globally or local to a nested group, using an
   * undo stack similar to how TeX implements this functionality.
   * Performance-wise, `get` and local `set` take constant time, while global
   * `set` takes time proportional to the depth of group nesting.
   */
  class Namespace {
    /**
     * Both arguments are optional.  The first argument is an object of
     * built-in mappings which never change.  The second argument is an object
     * of initial (global-level) mappings, which will constantly change
     * according to any global/top-level `set`s done.
     */
    constructor(builtins, globalMacros) {
      if (builtins === undefined) {
        builtins = {};
      }

      if (globalMacros === undefined) {
        globalMacros = {};
      }

      this.current = undefined;
      this.builtins = undefined;
      this.undefStack = undefined;
      this.current = globalMacros;
      this.builtins = builtins;
      this.undefStack = [];
    }
    /**
     * Start a new nested group, affecting future local `set`s.
     */


    beginGroup() {
      this.undefStack.push({});
    }
    /**
     * End current nested group, restoring values before the group began.
     */


    endGroup() {
      if (this.undefStack.length === 0) {
        throw new ParseError("Unbalanced namespace destruction: attempt " + "to pop global namespace; please report this as a bug");
      }

      var undefs = this.undefStack.pop();

      for (var undef in undefs) {
        if (undefs.hasOwnProperty(undef)) {
          if (undefs[undef] == null) {
            delete this.current[undef];
          } else {
            this.current[undef] = undefs[undef];
          }
        }
      }
    }
    /**
     * Ends all currently nested groups (if any), restoring values before the
     * groups began.  Useful in case of an error in the middle of parsing.
     */


    endGroups() {
      while (this.undefStack.length > 0) {
        this.endGroup();
      }
    }
    /**
     * Detect whether `name` has a definition.  Equivalent to
     * `get(name) != null`.
     */


    has(name) {
      return this.current.hasOwnProperty(name) || this.builtins.hasOwnProperty(name);
    }
    /**
     * Get the current value of a name, or `undefined` if there is no value.
     *
     * Note: Do not use `if (namespace.get(...))` to detect whether a macro
     * is defined, as the definition may be the empty string which evaluates
     * to `false` in JavaScript.  Use `if (namespace.get(...) != null)` or
     * `if (namespace.has(...))`.
     */


    get(name) {
      if (this.current.hasOwnProperty(name)) {
        return this.current[name];
      } else {
        return this.builtins[name];
      }
    }
    /**
     * Set the current value of a name, and optionally set it globally too.
     * Local set() sets the current value and (when appropriate) adds an undo
     * operation to the undo stack.  Global set() may change the undo
     * operation at every level, so takes time linear in their number.
     * A value of undefined means to delete existing definitions.
     */


    set(name, value, global) {
      if (global === undefined) {
        global = false;
      }

      if (global) {
        // Global set is equivalent to setting in all groups.  Simulate this
        // by destroying any undos currently scheduled for this name,
        // and adding an undo with the *new* value (in case it later gets
        // locally reset within this environment).
        for (var i = 0; i < this.undefStack.length; i++) {
          delete this.undefStack[i][name];
        }

        if (this.undefStack.length > 0) {
          this.undefStack[this.undefStack.length - 1][name] = value;
        }
      } else {
        // Undo this set at end of this group (possibly to `undefined`),
        // unless an undo is already in place, in which case that older
        // value is the correct one.
        var top = this.undefStack[this.undefStack.length - 1];

        if (top && !top.hasOwnProperty(name)) {
          top[name] = this.current[name];
        }
      }

      if (value == null) {
        delete this.current[name];
      } else {
        this.current[name] = value;
      }
    }

  }

  /**
   * Predefined macros for KaTeX.
   * This can be used to define some commands in terms of others.
   */
  var macros = _macros;
  // macro tools

  defineMacro("\\noexpand", function (context) {
    // The expansion is the token itself; but that token is interpreted
    // as if its meaning were ‘\relax’ if it is a control sequence that
    // would ordinarily be expanded by TeX’s expansion rules.
    var t = context.popToken();

    if (context.isExpandable(t.text)) {
      t.noexpand = true;
      t.treatAsRelax = true;
    }

    return {
      tokens: [t],
      numArgs: 0
    };
  });
  defineMacro("\\expandafter", function (context) {
    // TeX first reads the token that comes immediately after \expandafter,
    // without expanding it; let’s call this token t. Then TeX reads the
    // token that comes after t (and possibly more tokens, if that token
    // has an argument), replacing it by its expansion. Finally TeX puts
    // t back in front of that expansion.
    var t = context.popToken();
    context.expandOnce(true); // expand only an expandable token

    return {
      tokens: [t],
      numArgs: 0
    };
  }); // LaTeX's \@firstoftwo{#1}{#2} expands to #1, skipping #2
  // TeX source: \long\def\@firstoftwo#1#2{#1}

  defineMacro("\\@firstoftwo", function (context) {
    var args = context.consumeArgs(2);
    return {
      tokens: args[0],
      numArgs: 0
    };
  }); // LaTeX's \@secondoftwo{#1}{#2} expands to #2, skipping #1
  // TeX source: \long\def\@secondoftwo#1#2{#2}

  defineMacro("\\@secondoftwo", function (context) {
    var args = context.consumeArgs(2);
    return {
      tokens: args[1],
      numArgs: 0
    };
  }); // LaTeX's \@ifnextchar{#1}{#2}{#3} looks ahead to the next (unexpanded)
  // symbol that isn't a space, consuming any spaces but not consuming the
  // first nonspace character.  If that nonspace character matches #1, then
  // the macro expands to #2; otherwise, it expands to #3.

  defineMacro("\\@ifnextchar", function (context) {
    var args = context.consumeArgs(3); // symbol, if, else

    context.consumeSpaces();
    var nextToken = context.future();

    if (args[0].length === 1 && args[0][0].text === nextToken.text) {
      return {
        tokens: args[1],
        numArgs: 0
      };
    } else {
      return {
        tokens: args[2],
        numArgs: 0
      };
    }
  }); // LaTeX's \@ifstar{#1}{#2} looks ahead to the next (unexpanded) symbol.
  // If it is `*`, then it consumes the symbol, and the macro expands to #1;
  // otherwise, the macro expands to #2 (without consuming the symbol).
  // TeX source: \def\@ifstar#1{\@ifnextchar *{\@firstoftwo{#1}}}

  defineMacro("\\@ifstar", "\\@ifnextchar *{\\@firstoftwo{#1}}"); // LaTeX's \TextOrMath{#1}{#2} expands to #1 in text mode, #2 in math mode

  defineMacro("\\TextOrMath", function (context) {
    var args = context.consumeArgs(2);

    if (context.mode === 'text') {
      return {
        tokens: args[0],
        numArgs: 0
      };
    } else {
      return {
        tokens: args[1],
        numArgs: 0
      };
    }
  }); // Lookup table for parsing numbers in base 8 through 16

  var digitToNumber = {
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
    "a": 10,
    "A": 10,
    "b": 11,
    "B": 11,
    "c": 12,
    "C": 12,
    "d": 13,
    "D": 13,
    "e": 14,
    "E": 14,
    "f": 15,
    "F": 15
  }; // TeX \char makes a literal character (catcode 12) using the following forms:
  // (see The TeXBook, p. 43)
  //   \char123  -- decimal
  //   \char'123 -- octal
  //   \char"123 -- hex
  //   \char`x   -- character that can be written (i.e. isn't active)
  //   \char`\x  -- character that cannot be written (e.g. %)
  // These all refer to characters from the font, so we turn them into special
  // calls to a function \@char dealt with in the Parser.

  defineMacro("\\char", function (context) {
    var token = context.popToken();
    var base;
    var number = '';

    if (token.text === "'") {
      base = 8;
      token = context.popToken();
    } else if (token.text === '"') {
      base = 16;
      token = context.popToken();
    } else if (token.text === "`") {
      token = context.popToken();

      if (token.text[0] === "\\") {
        number = token.text.charCodeAt(1);
      } else if (token.text === "EOF") {
        throw new ParseError("\\char` missing argument");
      } else {
        number = token.text.charCodeAt(0);
      }
    } else {
      base = 10;
    }

    if (base) {
      // Parse a number in the given base, starting with first `token`.
      number = digitToNumber[token.text];

      if (number == null || number >= base) {
        throw new ParseError("Invalid base-" + base + " digit " + token.text);
      }

      var digit;

      while ((digit = digitToNumber[context.future().text]) != null && digit < base) {
        number *= base;
        number += digit;
        context.popToken();
      }
    }

    return "\\@char{" + number + "}";
  }); // \newcommand{\macro}[args]{definition}
  // \renewcommand{\macro}[args]{definition}
  // TODO: Optional arguments: \newcommand{\macro}[args][default]{definition}

  var newcommand = (context, existsOK, nonexistsOK, skipIfExists) => {
    var arg = context.consumeArg().tokens;

    if (arg.length !== 1) {
      throw new ParseError("\\newcommand's first argument must be a macro name");
    }

    var name = arg[0].text;
    var exists = context.isDefined(name);

    if (exists && !existsOK) {
      throw new ParseError("\\newcommand{" + name + "} attempting to redefine " + (name + "; use \\renewcommand"));
    }

    if (!exists && !nonexistsOK) {
      throw new ParseError("\\renewcommand{" + name + "} when command " + name + " " + "does not yet exist; use \\newcommand");
    }

    var numArgs = 0;
    arg = context.consumeArg().tokens;

    if (arg.length === 1 && arg[0].text === "[") {
      var argText = '';
      var token = context.expandNextToken();

      while (token.text !== "]" && token.text !== "EOF") {
        // TODO: Should properly expand arg, e.g., ignore {}s
        argText += token.text;
        token = context.expandNextToken();
      }

      if (!argText.match(/^\s*[0-9]+\s*$/)) {
        throw new ParseError("Invalid number of arguments: " + argText);
      }

      numArgs = parseInt(argText);
      arg = context.consumeArg().tokens;
    }

    if (!(exists && skipIfExists)) {
      // Final arg is the expansion of the macro
      context.macros.set(name, {
        tokens: arg,
        numArgs
      });
    }

    return '';
  };

  defineMacro("\\newcommand", context => newcommand(context, false, true, false));
  defineMacro("\\renewcommand", context => newcommand(context, true, false, false));
  defineMacro("\\providecommand", context => newcommand(context, true, true, true)); // terminal (console) tools

  defineMacro("\\message", context => {
    var arg = context.consumeArgs(1)[0]; // eslint-disable-next-line no-console

    console.log(arg.reverse().map(token => token.text).join(""));
    return '';
  });
  defineMacro("\\errmessage", context => {
    var arg = context.consumeArgs(1)[0]; // eslint-disable-next-line no-console

    console.error(arg.reverse().map(token => token.text).join(""));
    return '';
  });
  defineMacro("\\show", context => {
    var tok = context.popToken();
    var name = tok.text; // eslint-disable-next-line no-console

    console.log(tok, context.macros.get(name), functions[name], symbols.math[name], symbols.text[name]);
    return '';
  }); //////////////////////////////////////////////////////////////////////
  // Grouping
  // \let\bgroup={ \let\egroup=}

  defineMacro("\\bgroup", "{");
  defineMacro("\\egroup", "}"); // Symbols from latex.ltx:
  // \def~{\nobreakspace{}}
  // \def\lq{`}
  // \def\rq{'}
  // \def \aa {\r a}
  // \def \AA {\r A}

  defineMacro("~", "\\nobreakspace");
  defineMacro("\\lq", "`");
  defineMacro("\\rq", "'");
  defineMacro("\\aa", "\\r a");
  defineMacro("\\AA", "\\r A"); // Copyright (C) and registered (R) symbols. Use raw symbol in MathML.
  // \DeclareTextCommandDefault{\textcopyright}{\textcircled{c}}
  // \DeclareTextCommandDefault{\textregistered}{\textcircled{%
  //      \check@mathfonts\fontsize\sf@size\z@\math@fontsfalse\selectfont R}}
  // \DeclareRobustCommand{\copyright}{%
  //    \ifmmode{\nfss@text{\textcopyright}}\else\textcopyright\fi}

  defineMacro("\\textcopyright", "\\html@mathml{\\textcircled{c}}{\\char`©}");
  defineMacro("\\copyright", "\\TextOrMath{\\textcopyright}{\\text{\\textcopyright}}");
  defineMacro("\\textregistered", "\\html@mathml{\\textcircled{\\scriptsize R}}{\\char`®}"); // Characters omitted from Unicode range 1D400–1D7FF

  defineMacro("\u212C", "\\mathscr{B}"); // script

  defineMacro("\u2130", "\\mathscr{E}");
  defineMacro("\u2131", "\\mathscr{F}");
  defineMacro("\u210B", "\\mathscr{H}");
  defineMacro("\u2110", "\\mathscr{I}");
  defineMacro("\u2112", "\\mathscr{L}");
  defineMacro("\u2133", "\\mathscr{M}");
  defineMacro("\u211B", "\\mathscr{R}");
  defineMacro("\u212D", "\\mathfrak{C}"); // Fraktur

  defineMacro("\u210C", "\\mathfrak{H}");
  defineMacro("\u2128", "\\mathfrak{Z}"); // Define \Bbbk with a macro that works in both HTML and MathML.

  defineMacro("\\Bbbk", "\\Bbb{k}"); // Unicode middle dot
  // The KaTeX fonts do not contain U+00B7. Instead, \cdotp displays
  // the dot at U+22C5 and gives it punct spacing.

  defineMacro("\u00b7", "\\cdotp"); // \llap and \rlap render their contents in text mode

  defineMacro("\\llap", "\\mathllap{\\textrm{#1}}");
  defineMacro("\\rlap", "\\mathrlap{\\textrm{#1}}");
  defineMacro("\\clap", "\\mathclap{\\textrm{#1}}"); // \mathstrut from the TeXbook, p 360

  defineMacro("\\mathstrut", "\\vphantom{(}"); // \underbar from TeXbook p 353

  defineMacro("\\underbar", "\\underline{\\text{#1}}"); // \not is defined by base/fontmath.ltx via
  // \DeclareMathSymbol{\not}{\mathrel}{symbols}{"36}
  // It's thus treated like a \mathrel, but defined by a symbol that has zero
  // width but extends to the right.  We use \rlap to get that spacing.
  // For MathML we write U+0338 here. buildMathML.js will then do the overlay.

  defineMacro("\\not", '\\html@mathml{\\mathrel{\\mathrlap\\@not}}{\\char"338}'); // Negated symbols from base/fontmath.ltx:
  // \def\neq{\not=} \let\ne=\neq
  // \DeclareRobustCommand
  //   \notin{\mathrel{\m@th\mathpalette\c@ncel\in}}
  // \def\c@ncel#1#2{\m@th\ooalign{$\hfil#1\mkern1mu/\hfil$\crcr$#1#2$}}

  defineMacro("\\neq", "\\html@mathml{\\mathrel{\\not=}}{\\mathrel{\\char`≠}}");
  defineMacro("\\ne", "\\neq");
  defineMacro("\u2260", "\\neq");
  defineMacro("\\notin", "\\html@mathml{\\mathrel{{\\in}\\mathllap{/\\mskip1mu}}}" + "{\\mathrel{\\char`∉}}");
  defineMacro("\u2209", "\\notin"); // Unicode stacked relations

  defineMacro("\u2258", "\\html@mathml{" + "\\mathrel{=\\kern{-1em}\\raisebox{0.4em}{$\\scriptsize\\frown$}}" + "}{\\mathrel{\\char`\u2258}}");
  defineMacro("\u2259", "\\html@mathml{\\stackrel{\\tiny\\wedge}{=}}{\\mathrel{\\char`\u2258}}");
  defineMacro("\u225A", "\\html@mathml{\\stackrel{\\tiny\\vee}{=}}{\\mathrel{\\char`\u225A}}");
  defineMacro("\u225B", "\\html@mathml{\\stackrel{\\scriptsize\\star}{=}}" + "{\\mathrel{\\char`\u225B}}");
  defineMacro("\u225D", "\\html@mathml{\\stackrel{\\tiny\\mathrm{def}}{=}}" + "{\\mathrel{\\char`\u225D}}");
  defineMacro("\u225E", "\\html@mathml{\\stackrel{\\tiny\\mathrm{m}}{=}}" + "{\\mathrel{\\char`\u225E}}");
  defineMacro("\u225F", "\\html@mathml{\\stackrel{\\tiny?}{=}}{\\mathrel{\\char`\u225F}}"); // Misc Unicode

  defineMacro("\u27C2", "\\perp");
  defineMacro("\u203C", "\\mathclose{!\\mkern-0.8mu!}");
  defineMacro("\u220C", "\\notni");
  defineMacro("\u231C", "\\ulcorner");
  defineMacro("\u231D", "\\urcorner");
  defineMacro("\u231E", "\\llcorner");
  defineMacro("\u231F", "\\lrcorner");
  defineMacro("\u00A9", "\\copyright");
  defineMacro("\u00AE", "\\textregistered");
  defineMacro("\uFE0F", "\\textregistered"); // The KaTeX fonts have corners at codepoints that don't match Unicode.
  // For MathML purposes, use the Unicode code point.

  defineMacro("\\ulcorner", "\\html@mathml{\\@ulcorner}{\\mathop{\\char\"231c}}");
  defineMacro("\\urcorner", "\\html@mathml{\\@urcorner}{\\mathop{\\char\"231d}}");
  defineMacro("\\llcorner", "\\html@mathml{\\@llcorner}{\\mathop{\\char\"231e}}");
  defineMacro("\\lrcorner", "\\html@mathml{\\@lrcorner}{\\mathop{\\char\"231f}}"); //////////////////////////////////////////////////////////////////////
  // LaTeX_2ε
  // \vdots{\vbox{\baselineskip4\p@  \lineskiplimit\z@
  // \kern6\p@\hbox{.}\hbox{.}\hbox{.}}}
  // We'll call \varvdots, which gets a glyph from symbols.js.
  // The zero-width rule gets us an equivalent to the vertical 6pt kern.

  defineMacro("\\vdots", "{\\varvdots\\rule{0pt}{15pt}}");
  defineMacro("\u22ee", "\\vdots"); //////////////////////////////////////////////////////////////////////
  // amsmath.sty
  // http://mirrors.concertpass.com/tex-archive/macros/latex/required/amsmath/amsmath.pdf
  // Italic Greek capital letters.  AMS defines these with \DeclareMathSymbol,
  // but they are equivalent to \mathit{\Letter}.

  defineMacro("\\varGamma", "\\mathit{\\Gamma}");
  defineMacro("\\varDelta", "\\mathit{\\Delta}");
  defineMacro("\\varTheta", "\\mathit{\\Theta}");
  defineMacro("\\varLambda", "\\mathit{\\Lambda}");
  defineMacro("\\varXi", "\\mathit{\\Xi}");
  defineMacro("\\varPi", "\\mathit{\\Pi}");
  defineMacro("\\varSigma", "\\mathit{\\Sigma}");
  defineMacro("\\varUpsilon", "\\mathit{\\Upsilon}");
  defineMacro("\\varPhi", "\\mathit{\\Phi}");
  defineMacro("\\varPsi", "\\mathit{\\Psi}");
  defineMacro("\\varOmega", "\\mathit{\\Omega}"); //\newcommand{\substack}[1]{\subarray{c}#1\endsubarray}

  defineMacro("\\substack", "\\begin{subarray}{c}#1\\end{subarray}"); // \renewcommand{\colon}{\nobreak\mskip2mu\mathpunct{}\nonscript
  // \mkern-\thinmuskip{:}\mskip6muplus1mu\relax}

  defineMacro("\\colon", "\\nobreak\\mskip2mu\\mathpunct{}" + "\\mathchoice{\\mkern-3mu}{\\mkern-3mu}{}{}{:}\\mskip6mu\\relax"); // \newcommand{\boxed}[1]{\fbox{\m@th$\displaystyle#1$}}

  defineMacro("\\boxed", "\\fbox{$\\displaystyle{#1}$}"); // \def\iff{\DOTSB\;\Longleftrightarrow\;}
  // \def\implies{\DOTSB\;\Longrightarrow\;}
  // \def\impliedby{\DOTSB\;\Longleftarrow\;}

  defineMacro("\\iff", "\\DOTSB\\;\\Longleftrightarrow\\;");
  defineMacro("\\implies", "\\DOTSB\\;\\Longrightarrow\\;");
  defineMacro("\\impliedby", "\\DOTSB\\;\\Longleftarrow\\;"); // \def\dddot#1{{\mathop{#1}\limits^{\vbox to-1.4\ex@{\kern-\tw@\ex@
  //  \hbox{\normalfont ...}\vss}}}}
  // We use \overset which avoids the vertical shift of \mathop.

  defineMacro("\\dddot", "{\\overset{\\raisebox{-0.1ex}{\\normalsize ...}}{#1}}");
  defineMacro("\\ddddot", "{\\overset{\\raisebox{-0.1ex}{\\normalsize ....}}{#1}}"); // AMSMath's automatic \dots, based on \mdots@@ macro.

  var dotsByToken = {
    ',': '\\dotsc',
    '\\not': '\\dotsb',
    // \keybin@ checks for the following:
    '+': '\\dotsb',
    '=': '\\dotsb',
    '<': '\\dotsb',
    '>': '\\dotsb',
    '-': '\\dotsb',
    '*': '\\dotsb',
    ':': '\\dotsb',
    // Symbols whose definition starts with \DOTSB:
    '\\DOTSB': '\\dotsb',
    '\\coprod': '\\dotsb',
    '\\bigvee': '\\dotsb',
    '\\bigwedge': '\\dotsb',
    '\\biguplus': '\\dotsb',
    '\\bigcap': '\\dotsb',
    '\\bigcup': '\\dotsb',
    '\\prod': '\\dotsb',
    '\\sum': '\\dotsb',
    '\\bigotimes': '\\dotsb',
    '\\bigoplus': '\\dotsb',
    '\\bigodot': '\\dotsb',
    '\\bigsqcup': '\\dotsb',
    '\\And': '\\dotsb',
    '\\longrightarrow': '\\dotsb',
    '\\Longrightarrow': '\\dotsb',
    '\\longleftarrow': '\\dotsb',
    '\\Longleftarrow': '\\dotsb',
    '\\longleftrightarrow': '\\dotsb',
    '\\Longleftrightarrow': '\\dotsb',
    '\\mapsto': '\\dotsb',
    '\\longmapsto': '\\dotsb',
    '\\hookrightarrow': '\\dotsb',
    '\\doteq': '\\dotsb',
    // Symbols whose definition starts with \mathbin:
    '\\mathbin': '\\dotsb',
    // Symbols whose definition starts with \mathrel:
    '\\mathrel': '\\dotsb',
    '\\relbar': '\\dotsb',
    '\\Relbar': '\\dotsb',
    '\\xrightarrow': '\\dotsb',
    '\\xleftarrow': '\\dotsb',
    // Symbols whose definition starts with \DOTSI:
    '\\DOTSI': '\\dotsi',
    '\\int': '\\dotsi',
    '\\oint': '\\dotsi',
    '\\iint': '\\dotsi',
    '\\iiint': '\\dotsi',
    '\\iiiint': '\\dotsi',
    '\\idotsint': '\\dotsi',
    // Symbols whose definition starts with \DOTSX:
    '\\DOTSX': '\\dotsx'
  };
  defineMacro("\\dots", function (context) {
    // TODO: If used in text mode, should expand to \textellipsis.
    // However, in KaTeX, \textellipsis and \ldots behave the same
    // (in text mode), and it's unlikely we'd see any of the math commands
    // that affect the behavior of \dots when in text mode.  So fine for now
    // (until we support \ifmmode ... \else ... \fi).
    var thedots = '\\dotso';
    var next = context.expandAfterFuture().text;

    if (next in dotsByToken) {
      thedots = dotsByToken[next];
    } else if (next.slice(0, 4) === '\\not') {
      thedots = '\\dotsb';
    } else if (next in symbols.math) {
      if (utils.contains(['bin', 'rel'], symbols.math[next].group)) {
        thedots = '\\dotsb';
      }
    }

    return thedots;
  });
  var spaceAfterDots = {
    // \rightdelim@ checks for the following:
    ')': true,
    ']': true,
    '\\rbrack': true,
    '\\}': true,
    '\\rbrace': true,
    '\\rangle': true,
    '\\rceil': true,
    '\\rfloor': true,
    '\\rgroup': true,
    '\\rmoustache': true,
    '\\right': true,
    '\\bigr': true,
    '\\biggr': true,
    '\\Bigr': true,
    '\\Biggr': true,
    // \extra@ also tests for the following:
    '$': true,
    // \extrap@ checks for the following:
    ';': true,
    '.': true,
    ',': true
  };
  defineMacro("\\dotso", function (context) {
    var next = context.future().text;

    if (next in spaceAfterDots) {
      return "\\ldots\\,";
    } else {
      return "\\ldots";
    }
  });
  defineMacro("\\dotsc", function (context) {
    var next = context.future().text; // \dotsc uses \extra@ but not \extrap@, instead specially checking for
    // ';' and '.', but doesn't check for ','.

    if (next in spaceAfterDots && next !== ',') {
      return "\\ldots\\,";
    } else {
      return "\\ldots";
    }
  });
  defineMacro("\\cdots", function (context) {
    var next = context.future().text;

    if (next in spaceAfterDots) {
      return "\\@cdots\\,";
    } else {
      return "\\@cdots";
    }
  });
  defineMacro("\\dotsb", "\\cdots");
  defineMacro("\\dotsm", "\\cdots");
  defineMacro("\\dotsi", "\\!\\cdots"); // amsmath doesn't actually define \dotsx, but \dots followed by a macro
  // starting with \DOTSX implies \dotso, and then \extra@ detects this case
  // and forces the added `\,`.

  defineMacro("\\dotsx", "\\ldots\\,"); // \let\DOTSI\relax
  // \let\DOTSB\relax
  // \let\DOTSX\relax

  defineMacro("\\DOTSI", "\\relax");
  defineMacro("\\DOTSB", "\\relax");
  defineMacro("\\DOTSX", "\\relax"); // Spacing, based on amsmath.sty's override of LaTeX defaults
  // \DeclareRobustCommand{\tmspace}[3]{%
  //   \ifmmode\mskip#1#2\else\kern#1#3\fi\relax}

  defineMacro("\\tmspace", "\\TextOrMath{\\kern#1#3}{\\mskip#1#2}\\relax"); // \renewcommand{\,}{\tmspace+\thinmuskip{.1667em}}
  // TODO: math mode should use \thinmuskip

  defineMacro("\\,", "\\tmspace+{3mu}{.1667em}"); // \let\thinspace\,

  defineMacro("\\thinspace", "\\,"); // \def\>{\mskip\medmuskip}
  // \renewcommand{\:}{\tmspace+\medmuskip{.2222em}}
  // TODO: \> and math mode of \: should use \medmuskip = 4mu plus 2mu minus 4mu

  defineMacro("\\>", "\\mskip{4mu}");
  defineMacro("\\:", "\\tmspace+{4mu}{.2222em}"); // \let\medspace\:

  defineMacro("\\medspace", "\\:"); // \renewcommand{\;}{\tmspace+\thickmuskip{.2777em}}
  // TODO: math mode should use \thickmuskip = 5mu plus 5mu

  defineMacro("\\;", "\\tmspace+{5mu}{.2777em}"); // \let\thickspace\;

  defineMacro("\\thickspace", "\\;"); // \renewcommand{\!}{\tmspace-\thinmuskip{.1667em}}
  // TODO: math mode should use \thinmuskip

  defineMacro("\\!", "\\tmspace-{3mu}{.1667em}"); // \let\negthinspace\!

  defineMacro("\\negthinspace", "\\!"); // \newcommand{\negmedspace}{\tmspace-\medmuskip{.2222em}}
  // TODO: math mode should use \medmuskip

  defineMacro("\\negmedspace", "\\tmspace-{4mu}{.2222em}"); // \newcommand{\negthickspace}{\tmspace-\thickmuskip{.2777em}}
  // TODO: math mode should use \thickmuskip

  defineMacro("\\negthickspace", "\\tmspace-{5mu}{.277em}"); // \def\enspace{\kern.5em }

  defineMacro("\\enspace", "\\kern.5em "); // \def\enskip{\hskip.5em\relax}

  defineMacro("\\enskip", "\\hskip.5em\\relax"); // \def\quad{\hskip1em\relax}

  defineMacro("\\quad", "\\hskip1em\\relax"); // \def\qquad{\hskip2em\relax}

  defineMacro("\\qquad", "\\hskip2em\\relax"); // \tag@in@display form of \tag

  defineMacro("\\tag", "\\@ifstar\\tag@literal\\tag@paren");
  defineMacro("\\tag@paren", "\\tag@literal{({#1})}");
  defineMacro("\\tag@literal", context => {
    if (context.macros.get("\\df@tag")) {
      throw new ParseError("Multiple \\tag");
    }

    return "\\gdef\\df@tag{\\text{#1}}";
  }); // \renewcommand{\bmod}{\nonscript\mskip-\medmuskip\mkern5mu\mathbin
  //   {\operator@font mod}\penalty900
  //   \mkern5mu\nonscript\mskip-\medmuskip}
  // \newcommand{\pod}[1]{\allowbreak
  //   \if@display\mkern18mu\else\mkern8mu\fi(#1)}
  // \renewcommand{\pmod}[1]{\pod{{\operator@font mod}\mkern6mu#1}}
  // \newcommand{\mod}[1]{\allowbreak\if@display\mkern18mu
  //   \else\mkern12mu\fi{\operator@font mod}\,\,#1}
  // TODO: math mode should use \medmuskip = 4mu plus 2mu minus 4mu

  defineMacro("\\bmod", "\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}" + "\\mathbin{\\rm mod}" + "\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}");
  defineMacro("\\pod", "\\allowbreak" + "\\mathchoice{\\mkern18mu}{\\mkern8mu}{\\mkern8mu}{\\mkern8mu}(#1)");
  defineMacro("\\pmod", "\\pod{{\\rm mod}\\mkern6mu#1}");
  defineMacro("\\mod", "\\allowbreak" + "\\mathchoice{\\mkern18mu}{\\mkern12mu}{\\mkern12mu}{\\mkern12mu}" + "{\\rm mod}\\,\\,#1"); //////////////////////////////////////////////////////////////////////
  // LaTeX source2e
  // \expandafter\let\expandafter\@normalcr
  //     \csname\expandafter\@gobble\string\\ \endcsname
  // \DeclareRobustCommand\newline{\@normalcr\relax}

  defineMacro("\\newline", "\\\\\\relax"); // \def\TeX{T\kern-.1667em\lower.5ex\hbox{E}\kern-.125emX\@}
  // TODO: Doesn't normally work in math mode because \@ fails.  KaTeX doesn't
  // support \@ yet, so that's omitted, and we add \text so that the result
  // doesn't look funny in math mode.

  defineMacro("\\TeX", "\\textrm{\\html@mathml{" + "T\\kern-.1667em\\raisebox{-.5ex}{E}\\kern-.125emX" + "}{TeX}}"); // \DeclareRobustCommand{\LaTeX}{L\kern-.36em%
  //         {\sbox\z@ T%
  //          \vbox to\ht\z@{\hbox{\check@mathfonts
  //                               \fontsize\sf@size\z@
  //                               \math@fontsfalse\selectfont
  //                               A}%
  //                         \vss}%
  //         }%
  //         \kern-.15em%
  //         \TeX}
  // This code aligns the top of the A with the T (from the perspective of TeX's
  // boxes, though visually the A appears to extend above slightly).
  // We compute the corresponding \raisebox when A is rendered in \normalsize
  // \scriptstyle, which has a scale factor of 0.7 (see Options.js).

  var latexRaiseA = makeEm(fontMetricsData['Main-Regular']["T".charCodeAt(0)][1] - 0.7 * fontMetricsData['Main-Regular']["A".charCodeAt(0)][1]);
  defineMacro("\\LaTeX", "\\textrm{\\html@mathml{" + ("L\\kern-.36em\\raisebox{" + latexRaiseA + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{LaTeX}}"); // New KaTeX logo based on tweaking LaTeX logo

  defineMacro("\\KaTeX", "\\textrm{\\html@mathml{" + ("K\\kern-.17em\\raisebox{" + latexRaiseA + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{KaTeX}}"); // \DeclareRobustCommand\hspace{\@ifstar\@hspacer\@hspace}
  // \def\@hspace#1{\hskip  #1\relax}
  // \def\@hspacer#1{\vrule \@width\z@\nobreak
  //                 \hskip #1\hskip \z@skip}

  defineMacro("\\hspace", "\\@ifstar\\@hspacer\\@hspace");
  defineMacro("\\@hspace", "\\hskip #1\\relax");
  defineMacro("\\@hspacer", "\\rule{0pt}{0pt}\\hskip #1\\relax"); //////////////////////////////////////////////////////////////////////
  // mathtools.sty
  //\providecommand\ordinarycolon{:}

  defineMacro("\\ordinarycolon", ":"); //\def\vcentcolon{\mathrel{\mathop\ordinarycolon}}
  //TODO(edemaine): Not yet centered. Fix via \raisebox or #726

  defineMacro("\\vcentcolon", "\\mathrel{\\mathop\\ordinarycolon}"); // \providecommand*\dblcolon{\vcentcolon\mathrel{\mkern-.9mu}\vcentcolon}

  defineMacro("\\dblcolon", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-.9mu}\\vcentcolon}}" + "{\\mathop{\\char\"2237}}"); // \providecommand*\coloneqq{\vcentcolon\mathrel{\mkern-1.2mu}=}

  defineMacro("\\coloneqq", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}=}}" + "{\\mathop{\\char\"2254}}"); // ≔
  // \providecommand*\Coloneqq{\dblcolon\mathrel{\mkern-1.2mu}=}

  defineMacro("\\Coloneqq", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}=}}" + "{\\mathop{\\char\"2237\\char\"3d}}"); // \providecommand*\coloneq{\vcentcolon\mathrel{\mkern-1.2mu}\mathrel{-}}

  defineMacro("\\coloneq", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}" + "{\\mathop{\\char\"3a\\char\"2212}}"); // \providecommand*\Coloneq{\dblcolon\mathrel{\mkern-1.2mu}\mathrel{-}}

  defineMacro("\\Coloneq", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}" + "{\\mathop{\\char\"2237\\char\"2212}}"); // \providecommand*\eqqcolon{=\mathrel{\mkern-1.2mu}\vcentcolon}

  defineMacro("\\eqqcolon", "\\html@mathml{" + "\\mathrel{=\\mathrel{\\mkern-1.2mu}\\vcentcolon}}" + "{\\mathop{\\char\"2255}}"); // ≕
  // \providecommand*\Eqqcolon{=\mathrel{\mkern-1.2mu}\dblcolon}

  defineMacro("\\Eqqcolon", "\\html@mathml{" + "\\mathrel{=\\mathrel{\\mkern-1.2mu}\\dblcolon}}" + "{\\mathop{\\char\"3d\\char\"2237}}"); // \providecommand*\eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\vcentcolon}

  defineMacro("\\eqcolon", "\\html@mathml{" + "\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\vcentcolon}}" + "{\\mathop{\\char\"2239}}"); // \providecommand*\Eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\dblcolon}

  defineMacro("\\Eqcolon", "\\html@mathml{" + "\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\dblcolon}}" + "{\\mathop{\\char\"2212\\char\"2237}}"); // \providecommand*\colonapprox{\vcentcolon\mathrel{\mkern-1.2mu}\approx}

  defineMacro("\\colonapprox", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\approx}}" + "{\\mathop{\\char\"3a\\char\"2248}}"); // \providecommand*\Colonapprox{\dblcolon\mathrel{\mkern-1.2mu}\approx}

  defineMacro("\\Colonapprox", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\approx}}" + "{\\mathop{\\char\"2237\\char\"2248}}"); // \providecommand*\colonsim{\vcentcolon\mathrel{\mkern-1.2mu}\sim}

  defineMacro("\\colonsim", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\sim}}" + "{\\mathop{\\char\"3a\\char\"223c}}"); // \providecommand*\Colonsim{\dblcolon\mathrel{\mkern-1.2mu}\sim}

  defineMacro("\\Colonsim", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\sim}}" + "{\\mathop{\\char\"2237\\char\"223c}}"); // Some Unicode characters are implemented with macros to mathtools functions.

  defineMacro("\u2237", "\\dblcolon"); // ::

  defineMacro("\u2239", "\\eqcolon"); // -:

  defineMacro("\u2254", "\\coloneqq"); // :=

  defineMacro("\u2255", "\\eqqcolon"); // =:

  defineMacro("\u2A74", "\\Coloneqq"); // ::=
  //////////////////////////////////////////////////////////////////////
  // colonequals.sty
  // Alternate names for mathtools's macros:

  defineMacro("\\ratio", "\\vcentcolon");
  defineMacro("\\coloncolon", "\\dblcolon");
  defineMacro("\\colonequals", "\\coloneqq");
  defineMacro("\\coloncolonequals", "\\Coloneqq");
  defineMacro("\\equalscolon", "\\eqqcolon");
  defineMacro("\\equalscoloncolon", "\\Eqqcolon");
  defineMacro("\\colonminus", "\\coloneq");
  defineMacro("\\coloncolonminus", "\\Coloneq");
  defineMacro("\\minuscolon", "\\eqcolon");
  defineMacro("\\minuscoloncolon", "\\Eqcolon"); // \colonapprox name is same in mathtools and colonequals.

  defineMacro("\\coloncolonapprox", "\\Colonapprox"); // \colonsim name is same in mathtools and colonequals.

  defineMacro("\\coloncolonsim", "\\Colonsim"); // Additional macros, implemented by analogy with mathtools definitions:

  defineMacro("\\simcolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
  defineMacro("\\simcoloncolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\dblcolon}");
  defineMacro("\\approxcolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
  defineMacro("\\approxcoloncolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\dblcolon}"); // Present in newtxmath, pxfonts and txfonts

  defineMacro("\\notni", "\\html@mathml{\\not\\ni}{\\mathrel{\\char`\u220C}}");
  defineMacro("\\limsup", "\\DOTSB\\operatorname*{lim\\,sup}");
  defineMacro("\\liminf", "\\DOTSB\\operatorname*{lim\\,inf}"); //////////////////////////////////////////////////////////////////////
  // From amsopn.sty

  defineMacro("\\injlim", "\\DOTSB\\operatorname*{inj\\,lim}");
  defineMacro("\\projlim", "\\DOTSB\\operatorname*{proj\\,lim}");
  defineMacro("\\varlimsup", "\\DOTSB\\operatorname*{\\overline{lim}}");
  defineMacro("\\varliminf", "\\DOTSB\\operatorname*{\\underline{lim}}");
  defineMacro("\\varinjlim", "\\DOTSB\\operatorname*{\\underrightarrow{lim}}");
  defineMacro("\\varprojlim", "\\DOTSB\\operatorname*{\\underleftarrow{lim}}"); //////////////////////////////////////////////////////////////////////
  // MathML alternates for KaTeX glyphs in the Unicode private area

  defineMacro("\\gvertneqq", "\\html@mathml{\\@gvertneqq}{\u2269}");
  defineMacro("\\lvertneqq", "\\html@mathml{\\@lvertneqq}{\u2268}");
  defineMacro("\\ngeqq", "\\html@mathml{\\@ngeqq}{\u2271}");
  defineMacro("\\ngeqslant", "\\html@mathml{\\@ngeqslant}{\u2271}");
  defineMacro("\\nleqq", "\\html@mathml{\\@nleqq}{\u2270}");
  defineMacro("\\nleqslant", "\\html@mathml{\\@nleqslant}{\u2270}");
  defineMacro("\\nshortmid", "\\html@mathml{\\@nshortmid}{∤}");
  defineMacro("\\nshortparallel", "\\html@mathml{\\@nshortparallel}{∦}");
  defineMacro("\\nsubseteqq", "\\html@mathml{\\@nsubseteqq}{\u2288}");
  defineMacro("\\nsupseteqq", "\\html@mathml{\\@nsupseteqq}{\u2289}");
  defineMacro("\\varsubsetneq", "\\html@mathml{\\@varsubsetneq}{⊊}");
  defineMacro("\\varsubsetneqq", "\\html@mathml{\\@varsubsetneqq}{⫋}");
  defineMacro("\\varsupsetneq", "\\html@mathml{\\@varsupsetneq}{⊋}");
  defineMacro("\\varsupsetneqq", "\\html@mathml{\\@varsupsetneqq}{⫌}");
  defineMacro("\\imath", "\\html@mathml{\\@imath}{\u0131}");
  defineMacro("\\jmath", "\\html@mathml{\\@jmath}{\u0237}"); //////////////////////////////////////////////////////////////////////
  // stmaryrd and semantic
  // The stmaryrd and semantic packages render the next four items by calling a
  // glyph. Those glyphs do not exist in the KaTeX fonts. Hence the macros.

  defineMacro("\\llbracket", "\\html@mathml{" + "\\mathopen{[\\mkern-3.2mu[}}" + "{\\mathopen{\\char`\u27e6}}");
  defineMacro("\\rrbracket", "\\html@mathml{" + "\\mathclose{]\\mkern-3.2mu]}}" + "{\\mathclose{\\char`\u27e7}}");
  defineMacro("\u27e6", "\\llbracket"); // blackboard bold [

  defineMacro("\u27e7", "\\rrbracket"); // blackboard bold ]

  defineMacro("\\lBrace", "\\html@mathml{" + "\\mathopen{\\{\\mkern-3.2mu[}}" + "{\\mathopen{\\char`\u2983}}");
  defineMacro("\\rBrace", "\\html@mathml{" + "\\mathclose{]\\mkern-3.2mu\\}}}" + "{\\mathclose{\\char`\u2984}}");
  defineMacro("\u2983", "\\lBrace"); // blackboard bold {

  defineMacro("\u2984", "\\rBrace"); // blackboard bold }
  // TODO: Create variable sized versions of the last two items. I believe that
  // will require new font glyphs.
  // The stmaryrd function `\minuso` provides a "Plimsoll" symbol that
  // superimposes the characters \circ and \mathminus. Used in chemistry.

  defineMacro("\\minuso", "\\mathbin{\\html@mathml{" + "{\\mathrlap{\\mathchoice{\\kern{0.145em}}{\\kern{0.145em}}" + "{\\kern{0.1015em}}{\\kern{0.0725em}}\\circ}{-}}}" + "{\\char`⦵}}");
  defineMacro("⦵", "\\minuso"); //////////////////////////////////////////////////////////////////////
  // texvc.sty
  // The texvc package contains macros available in mediawiki pages.
  // We omit the functions deprecated at
  // https://en.wikipedia.org/wiki/Help:Displaying_a_formula#Deprecated_syntax
  // We also omit texvc's \O, which conflicts with \text{\O}

  defineMacro("\\darr", "\\downarrow");
  defineMacro("\\dArr", "\\Downarrow");
  defineMacro("\\Darr", "\\Downarrow");
  defineMacro("\\lang", "\\langle");
  defineMacro("\\rang", "\\rangle");
  defineMacro("\\uarr", "\\uparrow");
  defineMacro("\\uArr", "\\Uparrow");
  defineMacro("\\Uarr", "\\Uparrow");
  defineMacro("\\N", "\\mathbb{N}");
  defineMacro("\\R", "\\mathbb{R}");
  defineMacro("\\Z", "\\mathbb{Z}");
  defineMacro("\\alef", "\\aleph");
  defineMacro("\\alefsym", "\\aleph");
  defineMacro("\\Alpha", "\\mathrm{A}");
  defineMacro("\\Beta", "\\mathrm{B}");
  defineMacro("\\bull", "\\bullet");
  defineMacro("\\Chi", "\\mathrm{X}");
  defineMacro("\\clubs", "\\clubsuit");
  defineMacro("\\cnums", "\\mathbb{C}");
  defineMacro("\\Complex", "\\mathbb{C}");
  defineMacro("\\Dagger", "\\ddagger");
  defineMacro("\\diamonds", "\\diamondsuit");
  defineMacro("\\empty", "\\emptyset");
  defineMacro("\\Epsilon", "\\mathrm{E}");
  defineMacro("\\Eta", "\\mathrm{H}");
  defineMacro("\\exist", "\\exists");
  defineMacro("\\harr", "\\leftrightarrow");
  defineMacro("\\hArr", "\\Leftrightarrow");
  defineMacro("\\Harr", "\\Leftrightarrow");
  defineMacro("\\hearts", "\\heartsuit");
  defineMacro("\\image", "\\Im");
  defineMacro("\\infin", "\\infty");
  defineMacro("\\Iota", "\\mathrm{I}");
  defineMacro("\\isin", "\\in");
  defineMacro("\\Kappa", "\\mathrm{K}");
  defineMacro("\\larr", "\\leftarrow");
  defineMacro("\\lArr", "\\Leftarrow");
  defineMacro("\\Larr", "\\Leftarrow");
  defineMacro("\\lrarr", "\\leftrightarrow");
  defineMacro("\\lrArr", "\\Leftrightarrow");
  defineMacro("\\Lrarr", "\\Leftrightarrow");
  defineMacro("\\Mu", "\\mathrm{M}");
  defineMacro("\\natnums", "\\mathbb{N}");
  defineMacro("\\Nu", "\\mathrm{N}");
  defineMacro("\\Omicron", "\\mathrm{O}");
  defineMacro("\\plusmn", "\\pm");
  defineMacro("\\rarr", "\\rightarrow");
  defineMacro("\\rArr", "\\Rightarrow");
  defineMacro("\\Rarr", "\\Rightarrow");
  defineMacro("\\real", "\\Re");
  defineMacro("\\reals", "\\mathbb{R}");
  defineMacro("\\Reals", "\\mathbb{R}");
  defineMacro("\\Rho", "\\mathrm{P}");
  defineMacro("\\sdot", "\\cdot");
  defineMacro("\\sect", "\\S");
  defineMacro("\\spades", "\\spadesuit");
  defineMacro("\\sub", "\\subset");
  defineMacro("\\sube", "\\subseteq");
  defineMacro("\\supe", "\\supseteq");
  defineMacro("\\Tau", "\\mathrm{T}");
  defineMacro("\\thetasym", "\\vartheta"); // TODO: defineMacro("\\varcoppa", "\\\mbox{\\coppa}");

  defineMacro("\\weierp", "\\wp");
  defineMacro("\\Zeta", "\\mathrm{Z}"); //////////////////////////////////////////////////////////////////////
  // statmath.sty
  // https://ctan.math.illinois.edu/macros/latex/contrib/statmath/statmath.pdf

  defineMacro("\\argmin", "\\DOTSB\\operatorname*{arg\\,min}");
  defineMacro("\\argmax", "\\DOTSB\\operatorname*{arg\\,max}");
  defineMacro("\\plim", "\\DOTSB\\mathop{\\operatorname{plim}}\\limits"); //////////////////////////////////////////////////////////////////////
  // braket.sty
  // http://ctan.math.washington.edu/tex-archive/macros/latex/contrib/braket/braket.pdf

  defineMacro("\\bra", "\\mathinner{\\langle{#1}|}");
  defineMacro("\\ket", "\\mathinner{|{#1}\\rangle}");
  defineMacro("\\braket", "\\mathinner{\\langle{#1}\\rangle}");
  defineMacro("\\Bra", "\\left\\langle#1\\right|");
  defineMacro("\\Ket", "\\left|#1\\right\\rangle");

  var braketHelper = one => context => {
    var left = context.consumeArg().tokens;
    var middle = context.consumeArg().tokens;
    var middleDouble = context.consumeArg().tokens;
    var right = context.consumeArg().tokens;
    var oldMiddle = context.macros.get("|");
    var oldMiddleDouble = context.macros.get("\\|");
    context.macros.beginGroup();

    var midMacro = double => context => {
      if (one) {
        // Only modify the first instance of | or \|
        context.macros.set("|", oldMiddle);

        if (middleDouble.length) {
          context.macros.set("\\|", oldMiddleDouble);
        }
      }

      var doubled = double;

      if (!double && middleDouble.length) {
        // Mimic \@ifnextchar
        var nextToken = context.future();

        if (nextToken.text === "|") {
          context.popToken();
          doubled = true;
        }
      }

      return {
        tokens: doubled ? middleDouble : middle,
        numArgs: 0
      };
    };

    context.macros.set("|", midMacro(false));

    if (middleDouble.length) {
      context.macros.set("\\|", midMacro(true));
    }

    var arg = context.consumeArg().tokens;
    var expanded = context.expandTokens([...right, ...arg, ...left // reversed
    ]);
    context.macros.endGroup();
    return {
      tokens: expanded.reverse(),
      numArgs: 0
    };
  };

  defineMacro("\\bra@ket", braketHelper(false));
  defineMacro("\\bra@set", braketHelper(true));
  defineMacro("\\Braket", "\\bra@ket{\\left\\langle}" + "{\\,\\middle\\vert\\,}{\\,\\middle\\vert\\,}{\\right\\rangle}");
  defineMacro("\\Set", "\\bra@set{\\left\\{\\:}" + "{\\;\\middle\\vert\\;}{\\;\\middle\\Vert\\;}{\\:\\right\\}}");
  defineMacro("\\set", "\\bra@set{\\{\\,}{\\mid}{}{\\,\\}}"); // has no support for special || or \|
  //////////////////////////////////////////////////////////////////////
  // actuarialangle.dtx

  defineMacro("\\angln", "{\\angl n}"); // Custom Khan Academy colors, should be moved to an optional package

  defineMacro("\\blue", "\\textcolor{##6495ed}{#1}");
  defineMacro("\\orange", "\\textcolor{##ffa500}{#1}");
  defineMacro("\\pink", "\\textcolor{##ff00af}{#1}");
  defineMacro("\\red", "\\textcolor{##df0030}{#1}");
  defineMacro("\\green", "\\textcolor{##28ae7b}{#1}");
  defineMacro("\\gray", "\\textcolor{gray}{#1}");
  defineMacro("\\purple", "\\textcolor{##9d38bd}{#1}");
  defineMacro("\\blueA", "\\textcolor{##ccfaff}{#1}");
  defineMacro("\\blueB", "\\textcolor{##80f6ff}{#1}");
  defineMacro("\\blueC", "\\textcolor{##63d9ea}{#1}");
  defineMacro("\\blueD", "\\textcolor{##11accd}{#1}");
  defineMacro("\\blueE", "\\textcolor{##0c7f99}{#1}");
  defineMacro("\\tealA", "\\textcolor{##94fff5}{#1}");
  defineMacro("\\tealB", "\\textcolor{##26edd5}{#1}");
  defineMacro("\\tealC", "\\textcolor{##01d1c1}{#1}");
  defineMacro("\\tealD", "\\textcolor{##01a995}{#1}");
  defineMacro("\\tealE", "\\textcolor{##208170}{#1}");
  defineMacro("\\greenA", "\\textcolor{##b6ffb0}{#1}");
  defineMacro("\\greenB", "\\textcolor{##8af281}{#1}");
  defineMacro("\\greenC", "\\textcolor{##74cf70}{#1}");
  defineMacro("\\greenD", "\\textcolor{##1fab54}{#1}");
  defineMacro("\\greenE", "\\textcolor{##0d923f}{#1}");
  defineMacro("\\goldA", "\\textcolor{##ffd0a9}{#1}");
  defineMacro("\\goldB", "\\textcolor{##ffbb71}{#1}");
  defineMacro("\\goldC", "\\textcolor{##ff9c39}{#1}");
  defineMacro("\\goldD", "\\textcolor{##e07d10}{#1}");
  defineMacro("\\goldE", "\\textcolor{##a75a05}{#1}");
  defineMacro("\\redA", "\\textcolor{##fca9a9}{#1}");
  defineMacro("\\redB", "\\textcolor{##ff8482}{#1}");
  defineMacro("\\redC", "\\textcolor{##f9685d}{#1}");
  defineMacro("\\redD", "\\textcolor{##e84d39}{#1}");
  defineMacro("\\redE", "\\textcolor{##bc2612}{#1}");
  defineMacro("\\maroonA", "\\textcolor{##ffbde0}{#1}");
  defineMacro("\\maroonB", "\\textcolor{##ff92c6}{#1}");
  defineMacro("\\maroonC", "\\textcolor{##ed5fa6}{#1}");
  defineMacro("\\maroonD", "\\textcolor{##ca337c}{#1}");
  defineMacro("\\maroonE", "\\textcolor{##9e034e}{#1}");
  defineMacro("\\purpleA", "\\textcolor{##ddd7ff}{#1}");
  defineMacro("\\purpleB", "\\textcolor{##c6b9fc}{#1}");
  defineMacro("\\purpleC", "\\textcolor{##aa87ff}{#1}");
  defineMacro("\\purpleD", "\\textcolor{##7854ab}{#1}");
  defineMacro("\\purpleE", "\\textcolor{##543b78}{#1}");
  defineMacro("\\mintA", "\\textcolor{##f5f9e8}{#1}");
  defineMacro("\\mintB", "\\textcolor{##edf2df}{#1}");
  defineMacro("\\mintC", "\\textcolor{##e0e5cc}{#1}");
  defineMacro("\\grayA", "\\textcolor{##f6f7f7}{#1}");
  defineMacro("\\grayB", "\\textcolor{##f0f1f2}{#1}");
  defineMacro("\\grayC", "\\textcolor{##e3e5e6}{#1}");
  defineMacro("\\grayD", "\\textcolor{##d6d8da}{#1}");
  defineMacro("\\grayE", "\\textcolor{##babec2}{#1}");
  defineMacro("\\grayF", "\\textcolor{##888d93}{#1}");
  defineMacro("\\grayG", "\\textcolor{##626569}{#1}");
  defineMacro("\\grayH", "\\textcolor{##3b3e40}{#1}");
  defineMacro("\\grayI", "\\textcolor{##21242c}{#1}");
  defineMacro("\\kaBlue", "\\textcolor{##314453}{#1}");
  defineMacro("\\kaGreen", "\\textcolor{##71B307}{#1}");

  /**
   * This file contains the “gullet” where macros are expanded
   * until only non-macro tokens remain.
   */
  // List of commands that act like macros but aren't defined as a macro,
  // function, or symbol.  Used in `isDefined`.
  var implicitCommands = {
    "^": true,
    // Parser.js
    "_": true,
    // Parser.js
    "\\limits": true,
    // Parser.js
    "\\nolimits": true // Parser.js

  };
  class MacroExpander {
    constructor(input, settings, mode) {
      this.settings = undefined;
      this.expansionCount = undefined;
      this.lexer = undefined;
      this.macros = undefined;
      this.stack = undefined;
      this.mode = undefined;
      this.settings = settings;
      this.expansionCount = 0;
      this.feed(input); // Make new global namespace

      this.macros = new Namespace(macros, settings.macros);
      this.mode = mode;
      this.stack = []; // contains tokens in REVERSE order
    }
    /**
     * Feed a new input string to the same MacroExpander
     * (with existing macros etc.).
     */


    feed(input) {
      this.lexer = new Lexer(input, this.settings);
    }
    /**
     * Switches between "text" and "math" modes.
     */


    switchMode(newMode) {
      this.mode = newMode;
    }
    /**
     * Start a new group nesting within all namespaces.
     */


    beginGroup() {
      this.macros.beginGroup();
    }
    /**
     * End current group nesting within all namespaces.
     */


    endGroup() {
      this.macros.endGroup();
    }
    /**
     * Ends all currently nested groups (if any), restoring values before the
     * groups began.  Useful in case of an error in the middle of parsing.
     */


    endGroups() {
      this.macros.endGroups();
    }
    /**
     * Returns the topmost token on the stack, without expanding it.
     * Similar in behavior to TeX's `\futurelet`.
     */


    future() {
      if (this.stack.length === 0) {
        this.pushToken(this.lexer.lex());
      }

      return this.stack[this.stack.length - 1];
    }
    /**
     * Remove and return the next unexpanded token.
     */


    popToken() {
      this.future(); // ensure non-empty stack

      return this.stack.pop();
    }
    /**
     * Add a given token to the token stack.  In particular, this get be used
     * to put back a token returned from one of the other methods.
     */


    pushToken(token) {
      this.stack.push(token);
    }
    /**
     * Append an array of tokens to the token stack.
     */


    pushTokens(tokens) {
      this.stack.push(...tokens);
    }
    /**
     * Find an macro argument without expanding tokens and append the array of
     * tokens to the token stack. Uses Token as a container for the result.
     */


    scanArgument(isOptional) {
      var start;
      var end;
      var tokens;

      if (isOptional) {
        this.consumeSpaces(); // \@ifnextchar gobbles any space following it

        if (this.future().text !== "[") {
          return null;
        }

        start = this.popToken(); // don't include [ in tokens

        ({
          tokens,
          end
        } = this.consumeArg(["]"]));
      } else {
        ({
          tokens,
          start,
          end
        } = this.consumeArg());
      } // indicate the end of an argument


      this.pushToken(new Token("EOF", end.loc));
      this.pushTokens(tokens);
      return start.range(end, "");
    }
    /**
     * Consume all following space tokens, without expansion.
     */


    consumeSpaces() {
      for (;;) {
        var token = this.future();

        if (token.text === " ") {
          this.stack.pop();
        } else {
          break;
        }
      }
    }
    /**
     * Consume an argument from the token stream, and return the resulting array
     * of tokens and start/end token.
     */


    consumeArg(delims) {
      // The argument for a delimited parameter is the shortest (possibly
      // empty) sequence of tokens with properly nested {...} groups that is
      // followed ... by this particular list of non-parameter tokens.
      // The argument for an undelimited parameter is the next nonblank
      // token, unless that token is ‘{’, when the argument will be the
      // entire {...} group that follows.
      var tokens = [];
      var isDelimited = delims && delims.length > 0;

      if (!isDelimited) {
        // Ignore spaces between arguments.  As the TeXbook says:
        // "After you have said ‘\def\row#1#2{...}’, you are allowed to
        //  put spaces between the arguments (e.g., ‘\row x n’), because
        //  TeX doesn’t use single spaces as undelimited arguments."
        this.consumeSpaces();
      }

      var start = this.future();
      var tok;
      var depth = 0;
      var match = 0;

      do {
        tok = this.popToken();
        tokens.push(tok);

        if (tok.text === "{") {
          ++depth;
        } else if (tok.text === "}") {
          --depth;

          if (depth === -1) {
            throw new ParseError("Extra }", tok);
          }
        } else if (tok.text === "EOF") {
          throw new ParseError("Unexpected end of input in a macro argument" + ", expected '" + (delims && isDelimited ? delims[match] : "}") + "'", tok);
        }

        if (delims && isDelimited) {
          if ((depth === 0 || depth === 1 && delims[match] === "{") && tok.text === delims[match]) {
            ++match;

            if (match === delims.length) {
              // don't include delims in tokens
              tokens.splice(-match, match);
              break;
            }
          } else {
            match = 0;
          }
        }
      } while (depth !== 0 || isDelimited); // If the argument found ... has the form ‘{<nested tokens>}’,
      // ... the outermost braces enclosing the argument are removed


      if (start.text === "{" && tokens[tokens.length - 1].text === "}") {
        tokens.pop();
        tokens.shift();
      }

      tokens.reverse(); // to fit in with stack order

      return {
        tokens,
        start,
        end: tok
      };
    }
    /**
     * Consume the specified number of (delimited) arguments from the token
     * stream and return the resulting array of arguments.
     */


    consumeArgs(numArgs, delimiters) {
      if (delimiters) {
        if (delimiters.length !== numArgs + 1) {
          throw new ParseError("The length of delimiters doesn't match the number of args!");
        }

        var delims = delimiters[0];

        for (var i = 0; i < delims.length; i++) {
          var tok = this.popToken();

          if (delims[i] !== tok.text) {
            throw new ParseError("Use of the macro doesn't match its definition", tok);
          }
        }
      }

      var args = [];

      for (var _i = 0; _i < numArgs; _i++) {
        args.push(this.consumeArg(delimiters && delimiters[_i + 1]).tokens);
      }

      return args;
    }
    /**
     * Increment `expansionCount` by the specified amount.
     * Throw an error if it exceeds `maxExpand`.
     */


    countExpansion(amount) {
      this.expansionCount += amount;

      if (this.expansionCount > this.settings.maxExpand) {
        throw new ParseError("Too many expansions: infinite loop or " + "need to increase maxExpand setting");
      }
    }
    /**
     * Expand the next token only once if possible.
     *
     * If the token is expanded, the resulting tokens will be pushed onto
     * the stack in reverse order, and the number of such tokens will be
     * returned.  This number might be zero or positive.
     *
     * If not, the return value is `false`, and the next token remains at the
     * top of the stack.
     *
     * In either case, the next token will be on the top of the stack,
     * or the stack will be empty (in case of empty expansion
     * and no other tokens).
     *
     * Used to implement `expandAfterFuture` and `expandNextToken`.
     *
     * If expandableOnly, only expandable tokens are expanded and
     * an undefined control sequence results in an error.
     */


    expandOnce(expandableOnly) {
      var topToken = this.popToken();
      var name = topToken.text;
      var expansion = !topToken.noexpand ? this._getExpansion(name) : null;

      if (expansion == null || expandableOnly && expansion.unexpandable) {
        if (expandableOnly && expansion == null && name[0] === "\\" && !this.isDefined(name)) {
          throw new ParseError("Undefined control sequence: " + name);
        }

        this.pushToken(topToken);
        return false;
      }

      this.countExpansion(1);
      var tokens = expansion.tokens;
      var args = this.consumeArgs(expansion.numArgs, expansion.delimiters);

      if (expansion.numArgs) {
        // paste arguments in place of the placeholders
        tokens = tokens.slice(); // make a shallow copy

        for (var i = tokens.length - 1; i >= 0; --i) {
          var tok = tokens[i];

          if (tok.text === "#") {
            if (i === 0) {
              throw new ParseError("Incomplete placeholder at end of macro body", tok);
            }

            tok = tokens[--i]; // next token on stack

            if (tok.text === "#") {
              // ## → #
              tokens.splice(i + 1, 1); // drop first #
            } else if (/^[1-9]$/.test(tok.text)) {
              // replace the placeholder with the indicated argument
              tokens.splice(i, 2, ...args[+tok.text - 1]);
            } else {
              throw new ParseError("Not a valid argument number", tok);
            }
          }
        }
      } // Concatenate expansion onto top of stack.


      this.pushTokens(tokens);
      return tokens.length;
    }
    /**
     * Expand the next token only once (if possible), and return the resulting
     * top token on the stack (without removing anything from the stack).
     * Similar in behavior to TeX's `\expandafter\futurelet`.
     * Equivalent to expandOnce() followed by future().
     */


    expandAfterFuture() {
      this.expandOnce();
      return this.future();
    }
    /**
     * Recursively expand first token, then return first non-expandable token.
     */


    expandNextToken() {
      for (;;) {
        if (this.expandOnce() === false) {
          // fully expanded
          var token = this.stack.pop(); // the token after \noexpand is interpreted as if its meaning
          // were ‘\relax’

          if (token.treatAsRelax) {
            token.text = "\\relax";
          }

          return token;
        }
      } // Flow unable to figure out that this pathway is impossible.
      // https://github.com/facebook/flow/issues/4808


      throw new Error(); // eslint-disable-line no-unreachable
    }
    /**
     * Fully expand the given macro name and return the resulting list of
     * tokens, or return `undefined` if no such macro is defined.
     */


    expandMacro(name) {
      return this.macros.has(name) ? this.expandTokens([new Token(name)]) : undefined;
    }
    /**
     * Fully expand the given token stream and return the resulting list of
     * tokens.  Note that the input tokens are in reverse order, but the
     * output tokens are in forward order.
     */


    expandTokens(tokens) {
      var output = [];
      var oldStackLength = this.stack.length;
      this.pushTokens(tokens);

      while (this.stack.length > oldStackLength) {
        // Expand only expandable tokens
        if (this.expandOnce(true) === false) {
          // fully expanded
          var token = this.stack.pop();

          if (token.treatAsRelax) {
            // the expansion of \noexpand is the token itself
            token.noexpand = false;
            token.treatAsRelax = false;
          }

          output.push(token);
        }
      } // Count all of these tokens as additional expansions, to prevent
      // exponential blowup from linearly many \edef's.


      this.countExpansion(output.length);
      return output;
    }
    /**
     * Fully expand the given macro name and return the result as a string,
     * or return `undefined` if no such macro is defined.
     */


    expandMacroAsText(name) {
      var tokens = this.expandMacro(name);

      if (tokens) {
        return tokens.map(token => token.text).join("");
      } else {
        return tokens;
      }
    }
    /**
     * Returns the expanded macro as a reversed array of tokens and a macro
     * argument count.  Or returns `null` if no such macro.
     */


    _getExpansion(name) {
      var definition = this.macros.get(name);

      if (definition == null) {
        // mainly checking for undefined here
        return definition;
      } // If a single character has an associated catcode other than 13
      // (active character), then don't expand it.


      if (name.length === 1) {
        var catcode = this.lexer.catcodes[name];

        if (catcode != null && catcode !== 13) {
          return;
        }
      }

      var expansion = typeof definition === "function" ? definition(this) : definition;

      if (typeof expansion === "string") {
        var numArgs = 0;

        if (expansion.indexOf("#") !== -1) {
          var stripped = expansion.replace(/##/g, "");

          while (stripped.indexOf("#" + (numArgs + 1)) !== -1) {
            ++numArgs;
          }
        }

        var bodyLexer = new Lexer(expansion, this.settings);
        var tokens = [];
        var tok = bodyLexer.lex();

        while (tok.text !== "EOF") {
          tokens.push(tok);
          tok = bodyLexer.lex();
        }

        tokens.reverse(); // to fit in with stack using push and pop

        var expanded = {
          tokens,
          numArgs
        };
        return expanded;
      }

      return expansion;
    }
    /**
     * Determine whether a command is currently "defined" (has some
     * functionality), meaning that it's a macro (in the current group),
     * a function, a symbol, or one of the special commands listed in
     * `implicitCommands`.
     */


    isDefined(name) {
      return this.macros.has(name) || functions.hasOwnProperty(name) || symbols.math.hasOwnProperty(name) || symbols.text.hasOwnProperty(name) || implicitCommands.hasOwnProperty(name);
    }
    /**
     * Determine whether a command is expandable.
     */


    isExpandable(name) {
      var macro = this.macros.get(name);
      return macro != null ? typeof macro === "string" || typeof macro === "function" || !macro.unexpandable : functions.hasOwnProperty(name) && !functions[name].primitive;
    }

  }

  // Helpers for Parser.js handling of Unicode (sub|super)script characters.
  var unicodeSubRegEx = /^[₊₋₌₍₎₀₁₂₃₄₅₆₇₈₉ₐₑₕᵢⱼₖₗₘₙₒₚᵣₛₜᵤᵥₓᵦᵧᵨᵩᵪ]/;
  var uSubsAndSups = Object.freeze({
    '₊': '+',
    '₋': '-',
    '₌': '=',
    '₍': '(',
    '₎': ')',
    '₀': '0',
    '₁': '1',
    '₂': '2',
    '₃': '3',
    '₄': '4',
    '₅': '5',
    '₆': '6',
    '₇': '7',
    '₈': '8',
    '₉': '9',
    '\u2090': 'a',
    '\u2091': 'e',
    '\u2095': 'h',
    '\u1D62': 'i',
    '\u2C7C': 'j',
    '\u2096': 'k',
    '\u2097': 'l',
    '\u2098': 'm',
    '\u2099': 'n',
    '\u2092': 'o',
    '\u209A': 'p',
    '\u1D63': 'r',
    '\u209B': 's',
    '\u209C': 't',
    '\u1D64': 'u',
    '\u1D65': 'v',
    '\u2093': 'x',
    '\u1D66': 'β',
    '\u1D67': 'γ',
    '\u1D68': 'ρ',
    '\u1D69': '\u03d5',
    '\u1D6A': 'χ',
    '⁺': '+',
    '⁻': '-',
    '⁼': '=',
    '⁽': '(',
    '⁾': ')',
    '⁰': '0',
    '¹': '1',
    '²': '2',
    '³': '3',
    '⁴': '4',
    '⁵': '5',
    '⁶': '6',
    '⁷': '7',
    '⁸': '8',
    '⁹': '9',
    '\u1D2C': 'A',
    '\u1D2E': 'B',
    '\u1D30': 'D',
    '\u1D31': 'E',
    '\u1D33': 'G',
    '\u1D34': 'H',
    '\u1D35': 'I',
    '\u1D36': 'J',
    '\u1D37': 'K',
    '\u1D38': 'L',
    '\u1D39': 'M',
    '\u1D3A': 'N',
    '\u1D3C': 'O',
    '\u1D3E': 'P',
    '\u1D3F': 'R',
    '\u1D40': 'T',
    '\u1D41': 'U',
    '\u2C7D': 'V',
    '\u1D42': 'W',
    '\u1D43': 'a',
    '\u1D47': 'b',
    '\u1D9C': 'c',
    '\u1D48': 'd',
    '\u1D49': 'e',
    '\u1DA0': 'f',
    '\u1D4D': 'g',
    '\u02B0': 'h',
    '\u2071': 'i',
    '\u02B2': 'j',
    '\u1D4F': 'k',
    '\u02E1': 'l',
    '\u1D50': 'm',
    '\u207F': 'n',
    '\u1D52': 'o',
    '\u1D56': 'p',
    '\u02B3': 'r',
    '\u02E2': 's',
    '\u1D57': 't',
    '\u1D58': 'u',
    '\u1D5B': 'v',
    '\u02B7': 'w',
    '\u02E3': 'x',
    '\u02B8': 'y',
    '\u1DBB': 'z',
    '\u1D5D': 'β',
    '\u1D5E': 'γ',
    '\u1D5F': 'δ',
    '\u1D60': '\u03d5',
    '\u1D61': 'χ',
    '\u1DBF': 'θ'
  });

  /* eslint no-constant-condition:0 */

  var unicodeAccents = {
    "́": {
      "text": "\\'",
      "math": "\\acute"
    },
    "̀": {
      "text": "\\`",
      "math": "\\grave"
    },
    "̈": {
      "text": "\\\"",
      "math": "\\ddot"
    },
    "̃": {
      "text": "\\~",
      "math": "\\tilde"
    },
    "̄": {
      "text": "\\=",
      "math": "\\bar"
    },
    "̆": {
      "text": "\\u",
      "math": "\\breve"
    },
    "̌": {
      "text": "\\v",
      "math": "\\check"
    },
    "̂": {
      "text": "\\^",
      "math": "\\hat"
    },
    "̇": {
      "text": "\\.",
      "math": "\\dot"
    },
    "̊": {
      "text": "\\r",
      "math": "\\mathring"
    },
    "̋": {
      "text": "\\H"
    },
    "̧": {
      "text": "\\c"
    }
  };
  var unicodeSymbols = {
    "á": "á",
    "à": "à",
    "ä": "ä",
    "ǟ": "ǟ",
    "ã": "ã",
    "ā": "ā",
    "ă": "ă",
    "ắ": "ắ",
    "ằ": "ằ",
    "ẵ": "ẵ",
    "ǎ": "ǎ",
    "â": "â",
    "ấ": "ấ",
    "ầ": "ầ",
    "ẫ": "ẫ",
    "ȧ": "ȧ",
    "ǡ": "ǡ",
    "å": "å",
    "ǻ": "ǻ",
    "ḃ": "ḃ",
    "ć": "ć",
    "ḉ": "ḉ",
    "č": "č",
    "ĉ": "ĉ",
    "ċ": "ċ",
    "ç": "ç",
    "ď": "ď",
    "ḋ": "ḋ",
    "ḑ": "ḑ",
    "é": "é",
    "è": "è",
    "ë": "ë",
    "ẽ": "ẽ",
    "ē": "ē",
    "ḗ": "ḗ",
    "ḕ": "ḕ",
    "ĕ": "ĕ",
    "ḝ": "ḝ",
    "ě": "ě",
    "ê": "ê",
    "ế": "ế",
    "ề": "ề",
    "ễ": "ễ",
    "ė": "ė",
    "ȩ": "ȩ",
    "ḟ": "ḟ",
    "ǵ": "ǵ",
    "ḡ": "ḡ",
    "ğ": "ğ",
    "ǧ": "ǧ",
    "ĝ": "ĝ",
    "ġ": "ġ",
    "ģ": "ģ",
    "ḧ": "ḧ",
    "ȟ": "ȟ",
    "ĥ": "ĥ",
    "ḣ": "ḣ",
    "ḩ": "ḩ",
    "í": "í",
    "ì": "ì",
    "ï": "ï",
    "ḯ": "ḯ",
    "ĩ": "ĩ",
    "ī": "ī",
    "ĭ": "ĭ",
    "ǐ": "ǐ",
    "î": "î",
    "ǰ": "ǰ",
    "ĵ": "ĵ",
    "ḱ": "ḱ",
    "ǩ": "ǩ",
    "ķ": "ķ",
    "ĺ": "ĺ",
    "ľ": "ľ",
    "ļ": "ļ",
    "ḿ": "ḿ",
    "ṁ": "ṁ",
    "ń": "ń",
    "ǹ": "ǹ",
    "ñ": "ñ",
    "ň": "ň",
    "ṅ": "ṅ",
    "ņ": "ņ",
    "ó": "ó",
    "ò": "ò",
    "ö": "ö",
    "ȫ": "ȫ",
    "õ": "õ",
    "ṍ": "ṍ",
    "ṏ": "ṏ",
    "ȭ": "ȭ",
    "ō": "ō",
    "ṓ": "ṓ",
    "ṑ": "ṑ",
    "ŏ": "ŏ",
    "ǒ": "ǒ",
    "ô": "ô",
    "ố": "ố",
    "ồ": "ồ",
    "ỗ": "ỗ",
    "ȯ": "ȯ",
    "ȱ": "ȱ",
    "ő": "ő",
    "ṕ": "ṕ",
    "ṗ": "ṗ",
    "ŕ": "ŕ",
    "ř": "ř",
    "ṙ": "ṙ",
    "ŗ": "ŗ",
    "ś": "ś",
    "ṥ": "ṥ",
    "š": "š",
    "ṧ": "ṧ",
    "ŝ": "ŝ",
    "ṡ": "ṡ",
    "ş": "ş",
    "ẗ": "ẗ",
    "ť": "ť",
    "ṫ": "ṫ",
    "ţ": "ţ",
    "ú": "ú",
    "ù": "ù",
    "ü": "ü",
    "ǘ": "ǘ",
    "ǜ": "ǜ",
    "ǖ": "ǖ",
    "ǚ": "ǚ",
    "ũ": "ũ",
    "ṹ": "ṹ",
    "ū": "ū",
    "ṻ": "ṻ",
    "ŭ": "ŭ",
    "ǔ": "ǔ",
    "û": "û",
    "ů": "ů",
    "ű": "ű",
    "ṽ": "ṽ",
    "ẃ": "ẃ",
    "ẁ": "ẁ",
    "ẅ": "ẅ",
    "ŵ": "ŵ",
    "ẇ": "ẇ",
    "ẘ": "ẘ",
    "ẍ": "ẍ",
    "ẋ": "ẋ",
    "ý": "ý",
    "ỳ": "ỳ",
    "ÿ": "ÿ",
    "ỹ": "ỹ",
    "ȳ": "ȳ",
    "ŷ": "ŷ",
    "ẏ": "ẏ",
    "ẙ": "ẙ",
    "ź": "ź",
    "ž": "ž",
    "ẑ": "ẑ",
    "ż": "ż",
    "Á": "Á",
    "À": "À",
    "Ä": "Ä",
    "Ǟ": "Ǟ",
    "Ã": "Ã",
    "Ā": "Ā",
    "Ă": "Ă",
    "Ắ": "Ắ",
    "Ằ": "Ằ",
    "Ẵ": "Ẵ",
    "Ǎ": "Ǎ",
    "Â": "Â",
    "Ấ": "Ấ",
    "Ầ": "Ầ",
    "Ẫ": "Ẫ",
    "Ȧ": "Ȧ",
    "Ǡ": "Ǡ",
    "Å": "Å",
    "Ǻ": "Ǻ",
    "Ḃ": "Ḃ",
    "Ć": "Ć",
    "Ḉ": "Ḉ",
    "Č": "Č",
    "Ĉ": "Ĉ",
    "Ċ": "Ċ",
    "Ç": "Ç",
    "Ď": "Ď",
    "Ḋ": "Ḋ",
    "Ḑ": "Ḑ",
    "É": "É",
    "È": "È",
    "Ë": "Ë",
    "Ẽ": "Ẽ",
    "Ē": "Ē",
    "Ḗ": "Ḗ",
    "Ḕ": "Ḕ",
    "Ĕ": "Ĕ",
    "Ḝ": "Ḝ",
    "Ě": "Ě",
    "Ê": "Ê",
    "Ế": "Ế",
    "Ề": "Ề",
    "Ễ": "Ễ",
    "Ė": "Ė",
    "Ȩ": "Ȩ",
    "Ḟ": "Ḟ",
    "Ǵ": "Ǵ",
    "Ḡ": "Ḡ",
    "Ğ": "Ğ",
    "Ǧ": "Ǧ",
    "Ĝ": "Ĝ",
    "Ġ": "Ġ",
    "Ģ": "Ģ",
    "Ḧ": "Ḧ",
    "Ȟ": "Ȟ",
    "Ĥ": "Ĥ",
    "Ḣ": "Ḣ",
    "Ḩ": "Ḩ",
    "Í": "Í",
    "Ì": "Ì",
    "Ï": "Ï",
    "Ḯ": "Ḯ",
    "Ĩ": "Ĩ",
    "Ī": "Ī",
    "Ĭ": "Ĭ",
    "Ǐ": "Ǐ",
    "Î": "Î",
    "İ": "İ",
    "Ĵ": "Ĵ",
    "Ḱ": "Ḱ",
    "Ǩ": "Ǩ",
    "Ķ": "Ķ",
    "Ĺ": "Ĺ",
    "Ľ": "Ľ",
    "Ļ": "Ļ",
    "Ḿ": "Ḿ",
    "Ṁ": "Ṁ",
    "Ń": "Ń",
    "Ǹ": "Ǹ",
    "Ñ": "Ñ",
    "Ň": "Ň",
    "Ṅ": "Ṅ",
    "Ņ": "Ņ",
    "Ó": "Ó",
    "Ò": "Ò",
    "Ö": "Ö",
    "Ȫ": "Ȫ",
    "Õ": "Õ",
    "Ṍ": "Ṍ",
    "Ṏ": "Ṏ",
    "Ȭ": "Ȭ",
    "Ō": "Ō",
    "Ṓ": "Ṓ",
    "Ṑ": "Ṑ",
    "Ŏ": "Ŏ",
    "Ǒ": "Ǒ",
    "Ô": "Ô",
    "Ố": "Ố",
    "Ồ": "Ồ",
    "Ỗ": "Ỗ",
    "Ȯ": "Ȯ",
    "Ȱ": "Ȱ",
    "Ő": "Ő",
    "Ṕ": "Ṕ",
    "Ṗ": "Ṗ",
    "Ŕ": "Ŕ",
    "Ř": "Ř",
    "Ṙ": "Ṙ",
    "Ŗ": "Ŗ",
    "Ś": "Ś",
    "Ṥ": "Ṥ",
    "Š": "Š",
    "Ṧ": "Ṧ",
    "Ŝ": "Ŝ",
    "Ṡ": "Ṡ",
    "Ş": "Ş",
    "Ť": "Ť",
    "Ṫ": "Ṫ",
    "Ţ": "Ţ",
    "Ú": "Ú",
    "Ù": "Ù",
    "Ü": "Ü",
    "Ǘ": "Ǘ",
    "Ǜ": "Ǜ",
    "Ǖ": "Ǖ",
    "Ǚ": "Ǚ",
    "Ũ": "Ũ",
    "Ṹ": "Ṹ",
    "Ū": "Ū",
    "Ṻ": "Ṻ",
    "Ŭ": "Ŭ",
    "Ǔ": "Ǔ",
    "Û": "Û",
    "Ů": "Ů",
    "Ű": "Ű",
    "Ṽ": "Ṽ",
    "Ẃ": "Ẃ",
    "Ẁ": "Ẁ",
    "Ẅ": "Ẅ",
    "Ŵ": "Ŵ",
    "Ẇ": "Ẇ",
    "Ẍ": "Ẍ",
    "Ẋ": "Ẋ",
    "Ý": "Ý",
    "Ỳ": "Ỳ",
    "Ÿ": "Ÿ",
    "Ỹ": "Ỹ",
    "Ȳ": "Ȳ",
    "Ŷ": "Ŷ",
    "Ẏ": "Ẏ",
    "Ź": "Ź",
    "Ž": "Ž",
    "Ẑ": "Ẑ",
    "Ż": "Ż",
    "ά": "ά",
    "ὰ": "ὰ",
    "ᾱ": "ᾱ",
    "ᾰ": "ᾰ",
    "έ": "έ",
    "ὲ": "ὲ",
    "ή": "ή",
    "ὴ": "ὴ",
    "ί": "ί",
    "ὶ": "ὶ",
    "ϊ": "ϊ",
    "ΐ": "ΐ",
    "ῒ": "ῒ",
    "ῑ": "ῑ",
    "ῐ": "ῐ",
    "ό": "ό",
    "ὸ": "ὸ",
    "ύ": "ύ",
    "ὺ": "ὺ",
    "ϋ": "ϋ",
    "ΰ": "ΰ",
    "ῢ": "ῢ",
    "ῡ": "ῡ",
    "ῠ": "ῠ",
    "ώ": "ώ",
    "ὼ": "ὼ",
    "Ύ": "Ύ",
    "Ὺ": "Ὺ",
    "Ϋ": "Ϋ",
    "Ῡ": "Ῡ",
    "Ῠ": "Ῠ",
    "Ώ": "Ώ",
    "Ὼ": "Ὼ"
  };

  /**
   * This file contains the parser used to parse out a TeX expression from the
   * input. Since TeX isn't context-free, standard parsers don't work particularly
   * well.
   *
   * The strategy of this parser is as such:
   *
   * The main functions (the `.parse...` ones) take a position in the current
   * parse string to parse tokens from. The lexer (found in Lexer.js, stored at
   * this.gullet.lexer) also supports pulling out tokens at arbitrary places. When
   * individual tokens are needed at a position, the lexer is called to pull out a
   * token, which is then used.
   *
   * The parser has a property called "mode" indicating the mode that
   * the parser is currently in. Currently it has to be one of "math" or
   * "text", which denotes whether the current environment is a math-y
   * one or a text-y one (e.g. inside \text). Currently, this serves to
   * limit the functions which can be used in text mode.
   *
   * The main functions then return an object which contains the useful data that
   * was parsed at its given point, and a new position at the end of the parsed
   * data. The main functions can call each other and continue the parsing by
   * using the returned position as a new starting point.
   *
   * There are also extra `.handle...` functions, which pull out some reused
   * functionality into self-contained functions.
   *
   * The functions return ParseNodes.
   */
  class Parser {
    constructor(input, settings) {
      this.mode = undefined;
      this.gullet = undefined;
      this.settings = undefined;
      this.leftrightDepth = undefined;
      this.nextToken = undefined;
      // Start in math mode
      this.mode = "math"; // Create a new macro expander (gullet) and (indirectly via that) also a
      // new lexer (mouth) for this parser (stomach, in the language of TeX)

      this.gullet = new MacroExpander(input, settings, this.mode); // Store the settings for use in parsing

      this.settings = settings; // Count leftright depth (for \middle errors)

      this.leftrightDepth = 0;
    }
    /**
     * Checks a result to make sure it has the right type, and throws an
     * appropriate error otherwise.
     */


    expect(text, consume) {
      if (consume === undefined) {
        consume = true;
      }

      if (this.fetch().text !== text) {
        throw new ParseError("Expected '" + text + "', got '" + this.fetch().text + "'", this.fetch());
      }

      if (consume) {
        this.consume();
      }
    }
    /**
     * Discards the current lookahead token, considering it consumed.
     */


    consume() {
      this.nextToken = null;
    }
    /**
     * Return the current lookahead token, or if there isn't one (at the
     * beginning, or if the previous lookahead token was consume()d),
     * fetch the next token as the new lookahead token and return it.
     */


    fetch() {
      if (this.nextToken == null) {
        this.nextToken = this.gullet.expandNextToken();
      }

      return this.nextToken;
    }
    /**
     * Switches between "text" and "math" modes.
     */


    switchMode(newMode) {
      this.mode = newMode;
      this.gullet.switchMode(newMode);
    }
    /**
     * Main parsing function, which parses an entire input.
     */


    parse() {
      if (!this.settings.globalGroup) {
        // Create a group namespace for the math expression.
        // (LaTeX creates a new group for every $...$, $$...$$, \[...\].)
        this.gullet.beginGroup();
      } // Use old \color behavior (same as LaTeX's \textcolor) if requested.
      // We do this within the group for the math expression, so it doesn't
      // pollute settings.macros.


      if (this.settings.colorIsTextColor) {
        this.gullet.macros.set("\\color", "\\textcolor");
      }

      try {
        // Try to parse the input
        var parse = this.parseExpression(false); // If we succeeded, make sure there's an EOF at the end

        this.expect("EOF"); // End the group namespace for the expression

        if (!this.settings.globalGroup) {
          this.gullet.endGroup();
        }

        return parse; // Close any leftover groups in case of a parse error.
      } finally {
        this.gullet.endGroups();
      }
    }
    /**
     * Fully parse a separate sequence of tokens as a separate job.
     * Tokens should be specified in reverse order, as in a MacroDefinition.
     */


    subparse(tokens) {
      // Save the next token from the current job.
      var oldToken = this.nextToken;
      this.consume(); // Run the new job, terminating it with an excess '}'

      this.gullet.pushToken(new Token("}"));
      this.gullet.pushTokens(tokens);
      var parse = this.parseExpression(false);
      this.expect("}"); // Restore the next token from the current job.

      this.nextToken = oldToken;
      return parse;
    }

    /**
     * Parses an "expression", which is a list of atoms.
     *
     * `breakOnInfix`: Should the parsing stop when we hit infix nodes? This
     *                 happens when functions have higher precedence han infix
     *                 nodes in implicit parses.
     *
     * `breakOnTokenText`: The text of the token that the expression should end
     *                     with, or `null` if something else should end the
     *                     expression.
     */
    parseExpression(breakOnInfix, breakOnTokenText) {
      var body = []; // Keep adding atoms to the body until we can't parse any more atoms (either
      // we reached the end, a }, or a \right)

      while (true) {
        // Ignore spaces in math mode
        if (this.mode === "math") {
          this.consumeSpaces();
        }

        var lex = this.fetch();

        if (Parser.endOfExpression.indexOf(lex.text) !== -1) {
          break;
        }

        if (breakOnTokenText && lex.text === breakOnTokenText) {
          break;
        }

        if (breakOnInfix && functions[lex.text] && functions[lex.text].infix) {
          break;
        }

        var atom = this.parseAtom(breakOnTokenText);

        if (!atom) {
          break;
        } else if (atom.type === "internal") {
          continue;
        }

        body.push(atom);
      }

      if (this.mode === "text") {
        this.formLigatures(body);
      }

      return this.handleInfixNodes(body);
    }
    /**
     * Rewrites infix operators such as \over with corresponding commands such
     * as \frac.
     *
     * There can only be one infix operator per group.  If there's more than one
     * then the expression is ambiguous.  This can be resolved by adding {}.
     */


    handleInfixNodes(body) {
      var overIndex = -1;
      var funcName;

      for (var i = 0; i < body.length; i++) {
        if (body[i].type === "infix") {
          if (overIndex !== -1) {
            throw new ParseError("only one infix operator per group", body[i].token);
          }

          overIndex = i;
          funcName = body[i].replaceWith;
        }
      }

      if (overIndex !== -1 && funcName) {
        var numerNode;
        var denomNode;
        var numerBody = body.slice(0, overIndex);
        var denomBody = body.slice(overIndex + 1);

        if (numerBody.length === 1 && numerBody[0].type === "ordgroup") {
          numerNode = numerBody[0];
        } else {
          numerNode = {
            type: "ordgroup",
            mode: this.mode,
            body: numerBody
          };
        }

        if (denomBody.length === 1 && denomBody[0].type === "ordgroup") {
          denomNode = denomBody[0];
        } else {
          denomNode = {
            type: "ordgroup",
            mode: this.mode,
            body: denomBody
          };
        }

        var node;

        if (funcName === "\\\\abovefrac") {
          node = this.callFunction(funcName, [numerNode, body[overIndex], denomNode], []);
        } else {
          node = this.callFunction(funcName, [numerNode, denomNode], []);
        }

        return [node];
      } else {
        return body;
      }
    }
    /**
     * Handle a subscript or superscript with nice errors.
     */


    handleSupSubscript(name // For error reporting.
    ) {
      var symbolToken = this.fetch();
      var symbol = symbolToken.text;
      this.consume();
      this.consumeSpaces(); // ignore spaces before sup/subscript argument

      var group = this.parseGroup(name);

      if (!group) {
        throw new ParseError("Expected group after '" + symbol + "'", symbolToken);
      }

      return group;
    }
    /**
     * Converts the textual input of an unsupported command into a text node
     * contained within a color node whose color is determined by errorColor
     */


    formatUnsupportedCmd(text) {
      var textordArray = [];

      for (var i = 0; i < text.length; i++) {
        textordArray.push({
          type: "textord",
          mode: "text",
          text: text[i]
        });
      }

      var textNode = {
        type: "text",
        mode: this.mode,
        body: textordArray
      };
      var colorNode = {
        type: "color",
        mode: this.mode,
        color: this.settings.errorColor,
        body: [textNode]
      };
      return colorNode;
    }
    /**
     * Parses a group with optional super/subscripts.
     */


    parseAtom(breakOnTokenText) {
      // The body of an atom is an implicit group, so that things like
      // \left(x\right)^2 work correctly.
      var base = this.parseGroup("atom", breakOnTokenText); // In text mode, we don't have superscripts or subscripts

      if (this.mode === "text") {
        return base;
      } // Note that base may be empty (i.e. null) at this point.


      var superscript;
      var subscript;

      while (true) {
        // Guaranteed in math mode, so eat any spaces first.
        this.consumeSpaces(); // Lex the first token

        var lex = this.fetch();

        if (lex.text === "\\limits" || lex.text === "\\nolimits") {
          // We got a limit control
          if (base && base.type === "op") {
            var limits = lex.text === "\\limits";
            base.limits = limits;
            base.alwaysHandleSupSub = true;
          } else if (base && base.type === "operatorname") {
            if (base.alwaysHandleSupSub) {
              base.limits = lex.text === "\\limits";
            }
          } else {
            throw new ParseError("Limit controls must follow a math operator", lex);
          }

          this.consume();
        } else if (lex.text === "^") {
          // We got a superscript start
          if (superscript) {
            throw new ParseError("Double superscript", lex);
          }

          superscript = this.handleSupSubscript("superscript");
        } else if (lex.text === "_") {
          // We got a subscript start
          if (subscript) {
            throw new ParseError("Double subscript", lex);
          }

          subscript = this.handleSupSubscript("subscript");
        } else if (lex.text === "'") {
          // We got a prime
          if (superscript) {
            throw new ParseError("Double superscript", lex);
          }

          var prime = {
            type: "textord",
            mode: this.mode,
            text: "\\prime"
          }; // Many primes can be grouped together, so we handle this here

          var primes = [prime];
          this.consume(); // Keep lexing tokens until we get something that's not a prime

          while (this.fetch().text === "'") {
            // For each one, add another prime to the list
            primes.push(prime);
            this.consume();
          } // If there's a superscript following the primes, combine that
          // superscript in with the primes.


          if (this.fetch().text === "^") {
            primes.push(this.handleSupSubscript("superscript"));
          } // Put everything into an ordgroup as the superscript


          superscript = {
            type: "ordgroup",
            mode: this.mode,
            body: primes
          };
        } else if (uSubsAndSups[lex.text]) {
          // A Unicode subscript or superscript character.
          // We treat these similarly to the unicode-math package.
          // So we render a string of Unicode (sub|super)scripts the
          // same as a (sub|super)script of regular characters.
          var isSub = unicodeSubRegEx.test(lex.text);
          var subsupTokens = [];
          subsupTokens.push(new Token(uSubsAndSups[lex.text]));
          this.consume(); // Continue fetching tokens to fill out the string.

          while (true) {
            var token = this.fetch().text;

            if (!uSubsAndSups[token]) {
              break;
            }

            if (unicodeSubRegEx.test(token) !== isSub) {
              break;
            }

            subsupTokens.unshift(new Token(uSubsAndSups[token]));
            this.consume();
          } // Now create a (sub|super)script.


          var body = this.subparse(subsupTokens);

          if (isSub) {
            subscript = {
              type: "ordgroup",
              mode: "math",
              body
            };
          } else {
            superscript = {
              type: "ordgroup",
              mode: "math",
              body
            };
          }
        } else {
          // If it wasn't ^, _, or ', stop parsing super/subscripts
          break;
        }
      } // Base must be set if superscript or subscript are set per logic above,
      // but need to check here for type check to pass.


      if (superscript || subscript) {
        // If we got either a superscript or subscript, create a supsub
        return {
          type: "supsub",
          mode: this.mode,
          base: base,
          sup: superscript,
          sub: subscript
        };
      } else {
        // Otherwise return the original body
        return base;
      }
    }
    /**
     * Parses an entire function, including its base and all of its arguments.
     */


    parseFunction(breakOnTokenText, name // For determining its context
    ) {
      var token = this.fetch();
      var func = token.text;
      var funcData = functions[func];

      if (!funcData) {
        return null;
      }

      this.consume(); // consume command token

      if (name && name !== "atom" && !funcData.allowedInArgument) {
        throw new ParseError("Got function '" + func + "' with no arguments" + (name ? " as " + name : ""), token);
      } else if (this.mode === "text" && !funcData.allowedInText) {
        throw new ParseError("Can't use function '" + func + "' in text mode", token);
      } else if (this.mode === "math" && funcData.allowedInMath === false) {
        throw new ParseError("Can't use function '" + func + "' in math mode", token);
      }

      var {
        args,
        optArgs
      } = this.parseArguments(func, funcData);
      return this.callFunction(func, args, optArgs, token, breakOnTokenText);
    }
    /**
     * Call a function handler with a suitable context and arguments.
     */


    callFunction(name, args, optArgs, token, breakOnTokenText) {
      var context = {
        funcName: name,
        parser: this,
        token,
        breakOnTokenText
      };
      var func = functions[name];

      if (func && func.handler) {
        return func.handler(context, args, optArgs);
      } else {
        throw new ParseError("No function handler for " + name);
      }
    }
    /**
     * Parses the arguments of a function or environment
     */


    parseArguments(func, // Should look like "\name" or "\begin{name}".
    funcData) {
      var totalArgs = funcData.numArgs + funcData.numOptionalArgs;

      if (totalArgs === 0) {
        return {
          args: [],
          optArgs: []
        };
      }

      var args = [];
      var optArgs = [];

      for (var i = 0; i < totalArgs; i++) {
        var argType = funcData.argTypes && funcData.argTypes[i];
        var isOptional = i < funcData.numOptionalArgs;

        if (funcData.primitive && argType == null || // \sqrt expands into primitive if optional argument doesn't exist
        funcData.type === "sqrt" && i === 1 && optArgs[0] == null) {
          argType = "primitive";
        }

        var arg = this.parseGroupOfType("argument to '" + func + "'", argType, isOptional);

        if (isOptional) {
          optArgs.push(arg);
        } else if (arg != null) {
          args.push(arg);
        } else {
          // should be unreachable
          throw new ParseError("Null argument, please report this as a bug");
        }
      }

      return {
        args,
        optArgs
      };
    }
    /**
     * Parses a group when the mode is changing.
     */


    parseGroupOfType(name, type, optional) {
      switch (type) {
        case "color":
          return this.parseColorGroup(optional);

        case "size":
          return this.parseSizeGroup(optional);

        case "url":
          return this.parseUrlGroup(optional);

        case "math":
        case "text":
          return this.parseArgumentGroup(optional, type);

        case "hbox":
          {
            // hbox argument type wraps the argument in the equivalent of
            // \hbox, which is like \text but switching to \textstyle size.
            var group = this.parseArgumentGroup(optional, "text");
            return group != null ? {
              type: "styling",
              mode: group.mode,
              body: [group],
              style: "text" // simulate \textstyle

            } : null;
          }

        case "raw":
          {
            var token = this.parseStringGroup("raw", optional);
            return token != null ? {
              type: "raw",
              mode: "text",
              string: token.text
            } : null;
          }

        case "primitive":
          {
            if (optional) {
              throw new ParseError("A primitive argument cannot be optional");
            }

            var _group = this.parseGroup(name);

            if (_group == null) {
              throw new ParseError("Expected group as " + name, this.fetch());
            }

            return _group;
          }

        case "original":
        case null:
        case undefined:
          return this.parseArgumentGroup(optional);

        default:
          throw new ParseError("Unknown group type as " + name, this.fetch());
      }
    }
    /**
     * Discard any space tokens, fetching the next non-space token.
     */


    consumeSpaces() {
      while (this.fetch().text === " ") {
        this.consume();
      }
    }
    /**
     * Parses a group, essentially returning the string formed by the
     * brace-enclosed tokens plus some position information.
     */


    parseStringGroup(modeName, // Used to describe the mode in error messages.
    optional) {
      var argToken = this.gullet.scanArgument(optional);

      if (argToken == null) {
        return null;
      }

      var str = "";
      var nextToken;

      while ((nextToken = this.fetch()).text !== "EOF") {
        str += nextToken.text;
        this.consume();
      }

      this.consume(); // consume the end of the argument

      argToken.text = str;
      return argToken;
    }
    /**
     * Parses a regex-delimited group: the largest sequence of tokens
     * whose concatenated strings match `regex`. Returns the string
     * formed by the tokens plus some position information.
     */


    parseRegexGroup(regex, modeName // Used to describe the mode in error messages.
    ) {
      var firstToken = this.fetch();
      var lastToken = firstToken;
      var str = "";
      var nextToken;

      while ((nextToken = this.fetch()).text !== "EOF" && regex.test(str + nextToken.text)) {
        lastToken = nextToken;
        str += lastToken.text;
        this.consume();
      }

      if (str === "") {
        throw new ParseError("Invalid " + modeName + ": '" + firstToken.text + "'", firstToken);
      }

      return firstToken.range(lastToken, str);
    }
    /**
     * Parses a color description.
     */


    parseColorGroup(optional) {
      var res = this.parseStringGroup("color", optional);

      if (res == null) {
        return null;
      }

      var match = /^(#[a-f0-9]{3}|#?[a-f0-9]{6}|[a-z]+)$/i.exec(res.text);

      if (!match) {
        throw new ParseError("Invalid color: '" + res.text + "'", res);
      }

      var color = match[0];

      if (/^[0-9a-f]{6}$/i.test(color)) {
        // We allow a 6-digit HTML color spec without a leading "#".
        // This follows the xcolor package's HTML color model.
        // Predefined color names are all missed by this RegEx pattern.
        color = "#" + color;
      }

      return {
        type: "color-token",
        mode: this.mode,
        color
      };
    }
    /**
     * Parses a size specification, consisting of magnitude and unit.
     */


    parseSizeGroup(optional) {
      var res;
      var isBlank = false; // don't expand before parseStringGroup

      this.gullet.consumeSpaces();

      if (!optional && this.gullet.future().text !== "{") {
        res = this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2} *$/, "size");
      } else {
        res = this.parseStringGroup("size", optional);
      }

      if (!res) {
        return null;
      }

      if (!optional && res.text.length === 0) {
        // Because we've tested for what is !optional, this block won't
        // affect \kern, \hspace, etc. It will capture the mandatory arguments
        // to \genfrac and \above.
        res.text = "0pt"; // Enable \above{}

        isBlank = true; // This is here specifically for \genfrac
      }

      var match = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(res.text);

      if (!match) {
        throw new ParseError("Invalid size: '" + res.text + "'", res);
      }

      var data = {
        number: +(match[1] + match[2]),
        // sign + magnitude, cast to number
        unit: match[3]
      };

      if (!validUnit(data)) {
        throw new ParseError("Invalid unit: '" + data.unit + "'", res);
      }

      return {
        type: "size",
        mode: this.mode,
        value: data,
        isBlank
      };
    }
    /**
     * Parses an URL, checking escaped letters and allowed protocols,
     * and setting the catcode of % as an active character (as in \hyperref).
     */


    parseUrlGroup(optional) {
      this.gullet.lexer.setCatcode("%", 13); // active character

      this.gullet.lexer.setCatcode("~", 12); // other character

      var res = this.parseStringGroup("url", optional);
      this.gullet.lexer.setCatcode("%", 14); // comment character

      this.gullet.lexer.setCatcode("~", 13); // active character

      if (res == null) {
        return null;
      } // hyperref package allows backslashes alone in href, but doesn't
      // generate valid links in such cases; we interpret this as
      // "undefined" behaviour, and keep them as-is. Some browser will
      // replace backslashes with forward slashes.


      var url = res.text.replace(/\\([#$%&~_^{}])/g, '$1');
      return {
        type: "url",
        mode: this.mode,
        url
      };
    }
    /**
     * Parses an argument with the mode specified.
     */


    parseArgumentGroup(optional, mode) {
      var argToken = this.gullet.scanArgument(optional);

      if (argToken == null) {
        return null;
      }

      var outerMode = this.mode;

      if (mode) {
        // Switch to specified mode
        this.switchMode(mode);
      }

      this.gullet.beginGroup();
      var expression = this.parseExpression(false, "EOF"); // TODO: find an alternative way to denote the end

      this.expect("EOF"); // expect the end of the argument

      this.gullet.endGroup();
      var result = {
        type: "ordgroup",
        mode: this.mode,
        loc: argToken.loc,
        body: expression
      };

      if (mode) {
        // Switch mode back
        this.switchMode(outerMode);
      }

      return result;
    }
    /**
     * Parses an ordinary group, which is either a single nucleus (like "x")
     * or an expression in braces (like "{x+y}") or an implicit group, a group
     * that starts at the current position, and ends right before a higher explicit
     * group ends, or at EOF.
     */


    parseGroup(name, // For error reporting.
    breakOnTokenText) {
      var firstToken = this.fetch();
      var text = firstToken.text;
      var result; // Try to parse an open brace or \begingroup

      if (text === "{" || text === "\\begingroup") {
        this.consume();
        var groupEnd = text === "{" ? "}" : "\\endgroup";
        this.gullet.beginGroup(); // If we get a brace, parse an expression

        var expression = this.parseExpression(false, groupEnd);
        var lastToken = this.fetch();
        this.expect(groupEnd); // Check that we got a matching closing brace

        this.gullet.endGroup();
        result = {
          type: "ordgroup",
          mode: this.mode,
          loc: SourceLocation.range(firstToken, lastToken),
          body: expression,
          // A group formed by \begingroup...\endgroup is a semi-simple group
          // which doesn't affect spacing in math mode, i.e., is transparent.
          // https://tex.stackexchange.com/questions/1930/when-should-one-
          // use-begingroup-instead-of-bgroup
          semisimple: text === "\\begingroup" || undefined
        };
      } else {
        // If there exists a function with this name, parse the function.
        // Otherwise, just return a nucleus
        result = this.parseFunction(breakOnTokenText, name) || this.parseSymbol();

        if (result == null && text[0] === "\\" && !implicitCommands.hasOwnProperty(text)) {
          if (this.settings.throwOnError) {
            throw new ParseError("Undefined control sequence: " + text, firstToken);
          }

          result = this.formatUnsupportedCmd(text);
          this.consume();
        }
      }

      return result;
    }
    /**
     * Form ligature-like combinations of characters for text mode.
     * This includes inputs like "--", "---", "``" and "''".
     * The result will simply replace multiple textord nodes with a single
     * character in each value by a single textord node having multiple
     * characters in its value.  The representation is still ASCII source.
     * The group will be modified in place.
     */


    formLigatures(group) {
      var n = group.length - 1;

      for (var i = 0; i < n; ++i) {
        var a = group[i]; // $FlowFixMe: Not every node type has a `text` property.

        var v = a.text;

        if (v === "-" && group[i + 1].text === "-") {
          if (i + 1 < n && group[i + 2].text === "-") {
            group.splice(i, 3, {
              type: "textord",
              mode: "text",
              loc: SourceLocation.range(a, group[i + 2]),
              text: "---"
            });
            n -= 2;
          } else {
            group.splice(i, 2, {
              type: "textord",
              mode: "text",
              loc: SourceLocation.range(a, group[i + 1]),
              text: "--"
            });
            n -= 1;
          }
        }

        if ((v === "'" || v === "`") && group[i + 1].text === v) {
          group.splice(i, 2, {
            type: "textord",
            mode: "text",
            loc: SourceLocation.range(a, group[i + 1]),
            text: v + v
          });
          n -= 1;
        }
      }
    }
    /**
     * Parse a single symbol out of the string. Here, we handle single character
     * symbols and special functions like \verb.
     */


    parseSymbol() {
      var nucleus = this.fetch();
      var text = nucleus.text;

      if (/^\\verb[^a-zA-Z]/.test(text)) {
        this.consume();
        var arg = text.slice(5);
        var star = arg.charAt(0) === "*";

        if (star) {
          arg = arg.slice(1);
        } // Lexer's tokenRegex is constructed to always have matching
        // first/last characters.


        if (arg.length < 2 || arg.charAt(0) !== arg.slice(-1)) {
          throw new ParseError("\\verb assertion failed --\n                    please report what input caused this bug");
        }

        arg = arg.slice(1, -1); // remove first and last char

        return {
          type: "verb",
          mode: "text",
          body: arg,
          star
        };
      } // At this point, we should have a symbol, possibly with accents.
      // First expand any accented base symbol according to unicodeSymbols.


      if (unicodeSymbols.hasOwnProperty(text[0]) && !symbols[this.mode][text[0]]) {
        // This behavior is not strict (XeTeX-compatible) in math mode.
        if (this.settings.strict && this.mode === "math") {
          this.settings.reportNonstrict("unicodeTextInMathMode", "Accented Unicode text character \"" + text[0] + "\" used in " + "math mode", nucleus);
        }

        text = unicodeSymbols[text[0]] + text.slice(1);
      } // Strip off any combining characters


      var match = combiningDiacriticalMarksEndRegex.exec(text);

      if (match) {
        text = text.substring(0, match.index);

        if (text === 'i') {
          text = '\u0131'; // dotless i, in math and text mode
        } else if (text === 'j') {
          text = '\u0237'; // dotless j, in math and text mode
        }
      } // Recognize base symbol


      var symbol;

      if (symbols[this.mode][text]) {
        if (this.settings.strict && this.mode === 'math' && extraLatin.indexOf(text) >= 0) {
          this.settings.reportNonstrict("unicodeTextInMathMode", "Latin-1/Unicode text character \"" + text[0] + "\" used in " + "math mode", nucleus);
        }

        var group = symbols[this.mode][text].group;
        var loc = SourceLocation.range(nucleus);
        var s;

        if (ATOMS.hasOwnProperty(group)) {
          // $FlowFixMe
          var family = group;
          s = {
            type: "atom",
            mode: this.mode,
            family,
            loc,
            text
          };
        } else {
          // $FlowFixMe
          s = {
            type: group,
            mode: this.mode,
            loc,
            text
          };
        } // $FlowFixMe


        symbol = s;
      } else if (text.charCodeAt(0) >= 0x80) {
        // no symbol for e.g. ^
        if (this.settings.strict) {
          if (!supportedCodepoint(text.charCodeAt(0))) {
            this.settings.reportNonstrict("unknownSymbol", "Unrecognized Unicode character \"" + text[0] + "\"" + (" (" + text.charCodeAt(0) + ")"), nucleus);
          } else if (this.mode === "math") {
            this.settings.reportNonstrict("unicodeTextInMathMode", "Unicode text character \"" + text[0] + "\" used in math mode", nucleus);
          }
        } // All nonmathematical Unicode characters are rendered as if they
        // are in text mode (wrapped in \text) because that's what it
        // takes to render them in LaTeX.  Setting `mode: this.mode` is
        // another natural choice (the user requested math mode), but
        // this makes it more difficult for getCharacterMetrics() to
        // distinguish Unicode characters without metrics and those for
        // which we want to simulate the letter M.


        symbol = {
          type: "textord",
          mode: "text",
          loc: SourceLocation.range(nucleus),
          text
        };
      } else {
        return null; // EOF, ^, _, {, }, etc.
      }

      this.consume(); // Transform combining characters into accents

      if (match) {
        for (var i = 0; i < match[0].length; i++) {
          var accent = match[0][i];

          if (!unicodeAccents[accent]) {
            throw new ParseError("Unknown accent ' " + accent + "'", nucleus);
          }

          var command = unicodeAccents[accent][this.mode] || unicodeAccents[accent].text;

          if (!command) {
            throw new ParseError("Accent " + accent + " unsupported in " + this.mode + " mode", nucleus);
          }

          symbol = {
            type: "accent",
            mode: this.mode,
            loc: SourceLocation.range(nucleus),
            label: command,
            isStretchy: false,
            isShifty: true,
            // $FlowFixMe
            base: symbol
          };
        }
      } // $FlowFixMe


      return symbol;
    }

  }
  Parser.endOfExpression = ["}", "\\endgroup", "\\end", "\\right", "&"];

  /**
   * Provides a single function for parsing an expression using a Parser
   * TODO(emily): Remove this
   */

  /**
   * Parses an expression using a Parser, then returns the parsed result.
   */
  var parseTree = function parseTree(toParse, settings) {
    if (!(typeof toParse === 'string' || toParse instanceof String)) {
      throw new TypeError('KaTeX can only parse string typed expression');
    }

    var parser = new Parser(toParse, settings); // Blank out any \df@tag to avoid spurious "Duplicate \tag" errors

    delete parser.gullet.macros.current["\\df@tag"];
    var tree = parser.parse(); // Prevent a color definition from persisting between calls to katex.render().

    delete parser.gullet.macros.current["\\current@color"];
    delete parser.gullet.macros.current["\\color"]; // If the input used \tag, it will set the \df@tag macro to the tag.
    // In this case, we separately parse the tag and wrap the tree.

    if (parser.gullet.macros.get("\\df@tag")) {
      if (!settings.displayMode) {
        throw new ParseError("\\tag works only in display equations");
      }

      tree = [{
        type: "tag",
        mode: "text",
        body: tree,
        tag: parser.subparse([new Token("\\df@tag")])
      }];
    }

    return tree;
  };

  /* eslint no-console:0 */

  /**
   * Parse and build an expression, and place that expression in the DOM node
   * given.
   */
  var render = function render(expression, baseNode, options) {
    baseNode.textContent = "";
    var node = renderToDomTree(expression, options).toNode();
    baseNode.appendChild(node);
  }; // KaTeX's styles don't work properly in quirks mode. Print out an error, and
  // disable rendering.


  if (typeof document !== "undefined") {
    if (document.compatMode !== "CSS1Compat") {
      typeof console !== "undefined" && console.warn("Warning: KaTeX doesn't work in quirks mode. Make sure your " + "website has a suitable doctype.");

      render = function render() {
        throw new ParseError("KaTeX doesn't work in quirks mode.");
      };
    }
  }
  /**
   * Parse and build an expression, and return the markup for that.
   */


  var renderToString = function renderToString(expression, options) {
    var markup = renderToDomTree(expression, options).toMarkup();
    return markup;
  };
  /**
   * Parse an expression and return the parse tree.
   */


  var generateParseTree = function generateParseTree(expression, options) {
    var settings = new Settings(options);
    return parseTree(expression, settings);
  };
  /**
   * If the given error is a KaTeX ParseError and options.throwOnError is false,
   * renders the invalid LaTeX as a span with hover title giving the KaTeX
   * error message.  Otherwise, simply throws the error.
   */


  var renderError = function renderError(error, expression, options) {
    if (options.throwOnError || !(error instanceof ParseError)) {
      throw error;
    }

    var node = buildCommon.makeSpan(["katex-error"], [new SymbolNode(expression)]);
    node.setAttribute("title", error.toString());
    node.setAttribute("style", "color:" + options.errorColor);
    return node;
  };
  /**
   * Generates and returns the katex build tree. This is used for advanced
   * use cases (like rendering to custom output).
   */


  var renderToDomTree = function renderToDomTree(expression, options) {
    var settings = new Settings(options);

    try {
      var tree = parseTree(expression, settings);
      return buildTree(tree, expression, settings);
    } catch (error) {
      return renderError(error, expression, settings);
    }
  };
  /**
   * Generates and returns the katex build tree, with just HTML (no MathML).
   * This is used for advanced use cases (like rendering to custom output).
   */


  var renderToHTMLTree = function renderToHTMLTree(expression, options) {
    var settings = new Settings(options);

    try {
      var tree = parseTree(expression, settings);
      return buildHTMLTree(tree, expression, settings);
    } catch (error) {
      return renderError(error, expression, settings);
    }
  };

  var version = "0.16.21";
  var __domTree = {
    Span,
    Anchor,
    SymbolNode,
    SvgNode,
    PathNode,
    LineNode
  }; // ESM exports

  var katex = {
    /**
     * Current KaTeX version
     */
    version,

    /**
     * Renders the given LaTeX into an HTML+MathML combination, and adds
     * it as a child to the specified DOM node.
     */
    render,

    /**
     * Renders the given LaTeX into an HTML+MathML combination string,
     * for sending to the client.
     */
    renderToString,

    /**
     * KaTeX error, usually during parsing.
     */
    ParseError,

    /**
     * The schema of Settings
     */
    SETTINGS_SCHEMA,

    /**
     * Parses the given LaTeX into KaTeX's internal parse tree structure,
     * without rendering to HTML or MathML.
     *
     * NOTE: This method is not currently recommended for public use.
     * The internal tree representation is unstable and is very likely
     * to change. Use at your own risk.
     */
    __parse: generateParseTree,

    /**
     * Renders the given LaTeX into an HTML+MathML internal DOM tree
     * representation, without flattening that representation to a string.
     *
     * NOTE: This method is not currently recommended for public use.
     * The internal tree representation is unstable and is very likely
     * to change. Use at your own risk.
     */
    __renderToDomTree: renderToDomTree,

    /**
     * Renders the given LaTeX into an HTML internal DOM tree representation,
     * without MathML and without flattening that representation to a string.
     *
     * NOTE: This method is not currently recommended for public use.
     * The internal tree representation is unstable and is very likely
     * to change. Use at your own risk.
     */
    __renderToHTMLTree: renderToHTMLTree,

    /**
     * extends internal font metrics object with a new object
     * each key in the new object represents a font name
    */
    __setFontMetrics: setFontMetrics,

    /**
     * adds a new symbol to builtin symbols table
     */
    __defineSymbol: defineSymbol,

    /**
     * adds a new function to builtin function list,
     * which directly produce parse tree elements
     * and have their own html/mathml builders
     */
    __defineFunction: defineFunction,

    /**
     * adds a new macro to builtin macro list
     */
    __defineMacro: defineMacro,

    /**
     * Expose the dom tree node types, which can be useful for type checking nodes.
     *
     * NOTE: These methods are not currently recommended for public use.
     * The internal tree representation is unstable and is very likely
     * to change. Use at your own risk.
     */
    __domTree
  };

  /* eslint no-constant-condition:0 */
  var findEndOfMath = function findEndOfMath(delimiter, text, startIndex) {
    // Adapted from
    // https://github.com/Khan/perseus/blob/master/src/perseus-markdown.jsx
    var index = startIndex;
    var braceLevel = 0;
    var delimLength = delimiter.length;

    while (index < text.length) {
      var character = text[index];

      if (braceLevel <= 0 && text.slice(index, index + delimLength) === delimiter) {
        return index;
      } else if (character === "\\") {
        index++;
      } else if (character === "{") {
        braceLevel++;
      } else if (character === "}") {
        braceLevel--;
      }

      index++;
    }

    return -1;
  };

  var escapeRegex = function escapeRegex(string) {
    return string.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
  };

  var amsRegex = /^\\begin{/;

  var splitAtDelimiters = function splitAtDelimiters(text, delimiters) {
    var index;
    var data = [];
    var regexLeft = new RegExp("(" + delimiters.map(x => escapeRegex(x.left)).join("|") + ")");

    while (true) {
      index = text.search(regexLeft);

      if (index === -1) {
        break;
      }

      if (index > 0) {
        data.push({
          type: "text",
          data: text.slice(0, index)
        });
        text = text.slice(index); // now text starts with delimiter
      } // ... so this always succeeds:


      var i = delimiters.findIndex(delim => text.startsWith(delim.left));
      index = findEndOfMath(delimiters[i].right, text, delimiters[i].left.length);

      if (index === -1) {
        break;
      }

      var rawData = text.slice(0, index + delimiters[i].right.length);
      var math = amsRegex.test(rawData) ? rawData : text.slice(delimiters[i].left.length, index);
      data.push({
        type: "math",
        data: math,
        rawData,
        display: delimiters[i].display
      });
      text = text.slice(index + delimiters[i].right.length);
    }

    if (text !== "") {
      data.push({
        type: "text",
        data: text
      });
    }

    return data;
  };

  /* eslint no-console:0 */
  /* Note: optionsCopy is mutated by this method. If it is ever exposed in the
   * API, we should copy it before mutating.
   */

  var renderMathInText = function renderMathInText(text, optionsCopy) {
    var data = splitAtDelimiters(text, optionsCopy.delimiters);

    if (data.length === 1 && data[0].type === 'text') {
      // There is no formula in the text.
      // Let's return null which means there is no need to replace
      // the current text node with a new one.
      return null;
    }

    var fragment = document.createDocumentFragment();

    for (var i = 0; i < data.length; i++) {
      if (data[i].type === "text") {
        fragment.appendChild(document.createTextNode(data[i].data));
      } else {
        var span = document.createElement("span");
        var math = data[i].data; // Override any display mode defined in the settings with that
        // defined by the text itself

        optionsCopy.displayMode = data[i].display;

        try {
          if (optionsCopy.preProcess) {
            math = optionsCopy.preProcess(math);
          }

          katex.render(math, span, optionsCopy);
        } catch (e) {
          if (!(e instanceof katex.ParseError)) {
            throw e;
          }

          optionsCopy.errorCallback("KaTeX auto-render: Failed to parse `" + data[i].data + "` with ", e);
          fragment.appendChild(document.createTextNode(data[i].rawData));
          continue;
        }

        fragment.appendChild(span);
      }
    }

    return fragment;
  };

  var renderElem = function renderElem(elem, optionsCopy) {
    for (var i = 0; i < elem.childNodes.length; i++) {
      var childNode = elem.childNodes[i];

      if (childNode.nodeType === 3) {
        // Text node
        // Concatenate all sibling text nodes.
        // Webkit browsers split very large text nodes into smaller ones,
        // so the delimiters may be split across different nodes.
        var textContentConcat = childNode.textContent;
        var sibling = childNode.nextSibling;
        var nSiblings = 0;

        while (sibling && sibling.nodeType === Node.TEXT_NODE) {
          textContentConcat += sibling.textContent;
          sibling = sibling.nextSibling;
          nSiblings++;
        }

        var frag = renderMathInText(textContentConcat, optionsCopy);

        if (frag) {
          // Remove extra text nodes
          for (var j = 0; j < nSiblings; j++) {
            childNode.nextSibling.remove();
          }

          i += frag.childNodes.length - 1;
          elem.replaceChild(frag, childNode);
        } else {
          // If the concatenated text does not contain math
          // the siblings will not either
          i += nSiblings;
        }
      } else if (childNode.nodeType === 1) {
        (function () {
          // Element node
          var className = ' ' + childNode.className + ' ';
          var shouldRender = optionsCopy.ignoredTags.indexOf(childNode.nodeName.toLowerCase()) === -1 && optionsCopy.ignoredClasses.every(x => className.indexOf(' ' + x + ' ') === -1);

          if (shouldRender) {
            renderElem(childNode, optionsCopy);
          }
        })();
      } // Otherwise, it's something else, and ignore it.

    }
  };

  var renderMathInElement = function renderMathInElement(elem, options) {
    if (!elem) {
      throw new Error("No element provided to render");
    }

    var optionsCopy = {}; // Object.assign(optionsCopy, option)

    for (var option in options) {
      if (options.hasOwnProperty(option)) {
        optionsCopy[option] = options[option];
      }
    } // default options


    optionsCopy.delimiters = optionsCopy.delimiters || [{
      left: "$$",
      right: "$$",
      display: true
    }, {
      left: "\\(",
      right: "\\)",
      display: false
    }, // LaTeX uses $…$, but it ruins the display of normal `$` in text:
    // {left: "$", right: "$", display: false},
    // $ must come after $$
    // Render AMS environments even if outside $$…$$ delimiters.
    {
      left: "\\begin{equation}",
      right: "\\end{equation}",
      display: true
    }, {
      left: "\\begin{align}",
      right: "\\end{align}",
      display: true
    }, {
      left: "\\begin{alignat}",
      right: "\\end{alignat}",
      display: true
    }, {
      left: "\\begin{gather}",
      right: "\\end{gather}",
      display: true
    }, {
      left: "\\begin{CD}",
      right: "\\end{CD}",
      display: true
    }, {
      left: "\\[",
      right: "\\]",
      display: true
    }];
    optionsCopy.ignoredTags = optionsCopy.ignoredTags || ["script", "noscript", "style", "textarea", "pre", "code", "option"];
    optionsCopy.ignoredClasses = optionsCopy.ignoredClasses || [];
    optionsCopy.errorCallback = optionsCopy.errorCallback || console.error; // Enable sharing of global macros defined via `\gdef` between different
    // math elements within a single call to `renderMathInElement`.

    optionsCopy.macros = optionsCopy.macros || {};
    renderElem(elem, optionsCopy);
  };

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function getAugmentedNamespace(n) {
    if (n.__esModule) return n;
    var f = n.default;
  	if (typeof f == "function") {
  		var a = function a () {
  			if (this instanceof a) {
          return Reflect.construct(f, arguments, this.constructor);
  			}
  			return f.apply(this, arguments);
  		};
  		a.prototype = f.prototype;
    } else a = {};
    Object.defineProperty(a, '__esModule', {value: true});
  	Object.keys(n).forEach(function (k) {
  		var d = Object.getOwnPropertyDescriptor(n, k);
  		Object.defineProperty(a, k, d.get ? d : {
  			enumerable: true,
  			get: function () {
  				return n[k];
  			}
  		});
  	});
  	return a;
  }

  var levenshtein$1 = {exports: {}};

  const peq = new Uint32Array(0x10000);
  const myers_32 = (a, b) => {
      const n = a.length;
      const m = b.length;
      const lst = 1 << (n - 1);
      let pv = -1;
      let mv = 0;
      let sc = n;
      let i = n;
      while (i--) {
          peq[a.charCodeAt(i)] |= 1 << i;
      }
      for (i = 0; i < m; i++) {
          let eq = peq[b.charCodeAt(i)];
          const xv = eq | mv;
          eq |= ((eq & pv) + pv) ^ pv;
          mv |= ~(eq | pv);
          pv &= eq;
          if (mv & lst) {
              sc++;
          }
          if (pv & lst) {
              sc--;
          }
          mv = (mv << 1) | 1;
          pv = (pv << 1) | ~(xv | mv);
          mv &= xv;
      }
      i = n;
      while (i--) {
          peq[a.charCodeAt(i)] = 0;
      }
      return sc;
  };
  const myers_x = (b, a) => {
      const n = a.length;
      const m = b.length;
      const mhc = [];
      const phc = [];
      const hsize = Math.ceil(n / 32);
      const vsize = Math.ceil(m / 32);
      for (let i = 0; i < hsize; i++) {
          phc[i] = -1;
          mhc[i] = 0;
      }
      let j = 0;
      for (; j < vsize - 1; j++) {
          let mv = 0;
          let pv = -1;
          const start = j * 32;
          const vlen = Math.min(32, m) + start;
          for (let k = start; k < vlen; k++) {
              peq[b.charCodeAt(k)] |= 1 << k;
          }
          for (let i = 0; i < n; i++) {
              const eq = peq[a.charCodeAt(i)];
              const pb = (phc[(i / 32) | 0] >>> i) & 1;
              const mb = (mhc[(i / 32) | 0] >>> i) & 1;
              const xv = eq | mv;
              const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;
              let ph = mv | ~(xh | pv);
              let mh = pv & xh;
              if ((ph >>> 31) ^ pb) {
                  phc[(i / 32) | 0] ^= 1 << i;
              }
              if ((mh >>> 31) ^ mb) {
                  mhc[(i / 32) | 0] ^= 1 << i;
              }
              ph = (ph << 1) | pb;
              mh = (mh << 1) | mb;
              pv = mh | ~(xv | ph);
              mv = ph & xv;
          }
          for (let k = start; k < vlen; k++) {
              peq[b.charCodeAt(k)] = 0;
          }
      }
      let mv = 0;
      let pv = -1;
      const start = j * 32;
      const vlen = Math.min(32, m - start) + start;
      for (let k = start; k < vlen; k++) {
          peq[b.charCodeAt(k)] |= 1 << k;
      }
      let score = m;
      for (let i = 0; i < n; i++) {
          const eq = peq[a.charCodeAt(i)];
          const pb = (phc[(i / 32) | 0] >>> i) & 1;
          const mb = (mhc[(i / 32) | 0] >>> i) & 1;
          const xv = eq | mv;
          const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;
          let ph = mv | ~(xh | pv);
          let mh = pv & xh;
          score += (ph >>> (m - 1)) & 1;
          score -= (mh >>> (m - 1)) & 1;
          if ((ph >>> 31) ^ pb) {
              phc[(i / 32) | 0] ^= 1 << i;
          }
          if ((mh >>> 31) ^ mb) {
              mhc[(i / 32) | 0] ^= 1 << i;
          }
          ph = (ph << 1) | pb;
          mh = (mh << 1) | mb;
          pv = mh | ~(xv | ph);
          mv = ph & xv;
      }
      for (let k = start; k < vlen; k++) {
          peq[b.charCodeAt(k)] = 0;
      }
      return score;
  };
  const distance = (a, b) => {
      if (a.length < b.length) {
          const tmp = b;
          b = a;
          a = tmp;
      }
      if (b.length === 0) {
          return a.length;
      }
      if (a.length <= 32) {
          return myers_32(a, b);
      }
      return myers_x(a, b);
  };
  const closest = (str, arr) => {
      let min_distance = Infinity;
      let min_index = 0;
      for (let i = 0; i < arr.length; i++) {
          const dist = distance(str, arr[i]);
          if (dist < min_distance) {
              min_distance = dist;
              min_index = i;
          }
      }
      return arr[min_index];
  };

  var mod = /*#__PURE__*/Object.freeze({
    __proto__: null,
    closest: closest,
    distance: distance
  });

  var require$$0 = /*@__PURE__*/getAugmentedNamespace(mod);

  levenshtein$1.exports;

  var hasRequiredLevenshtein;

  function requireLevenshtein () {
  	if (hasRequiredLevenshtein) return levenshtein$1.exports;
  	hasRequiredLevenshtein = 1;
  	(function (module, exports) {
  		(function() {
  		  
  		  var collator;
  		  try {
  		    collator = (typeof Intl !== "undefined" && typeof Intl.Collator !== "undefined") ? Intl.Collator("generic", { sensitivity: "base" }) : null;
  		  } catch (err){
  		    console.log("Collator could not be initialized and wouldn't be used");
  		  }

  		  var levenshtein = require$$0;

  		  // arrays to re-use
  		  var prevRow = [],
  		    str2Char = [];
  		  
  		  /**
  		   * Based on the algorithm at http://en.wikipedia.org/wiki/Levenshtein_distance.
  		   */
  		  var Levenshtein = {
  		    /**
  		     * Calculate levenshtein distance of the two strings.
  		     *
  		     * @param str1 String the first string.
  		     * @param str2 String the second string.
  		     * @param [options] Additional options.
  		     * @param [options.useCollator] Use `Intl.Collator` for locale-sensitive string comparison.
  		     * @return Integer the levenshtein distance (0 and above).
  		     */
  		    get: function(str1, str2, options) {
  		      var useCollator = (options && collator && options.useCollator);
  		      
  		      if (useCollator) {
  		        var str1Len = str1.length,
  		          str2Len = str2.length;
  		        
  		        // base cases
  		        if (str1Len === 0) return str2Len;
  		        if (str2Len === 0) return str1Len;

  		        // two rows
  		        var curCol, nextCol, i, j, tmp;

  		        // initialise previous row
  		        for (i=0; i<str2Len; ++i) {
  		          prevRow[i] = i;
  		          str2Char[i] = str2.charCodeAt(i);
  		        }
  		        prevRow[str2Len] = str2Len;

  		        var strCmp;
  		        // calculate current row distance from previous row using collator
  		        for (i = 0; i < str1Len; ++i) {
  		          nextCol = i + 1;

  		          for (j = 0; j < str2Len; ++j) {
  		            curCol = nextCol;

  		            // substution
  		            strCmp = 0 === collator.compare(str1.charAt(i), String.fromCharCode(str2Char[j]));

  		            nextCol = prevRow[j] + (strCmp ? 0 : 1);

  		            // insertion
  		            tmp = curCol + 1;
  		            if (nextCol > tmp) {
  		              nextCol = tmp;
  		            }
  		            // deletion
  		            tmp = prevRow[j + 1] + 1;
  		            if (nextCol > tmp) {
  		              nextCol = tmp;
  		            }

  		            // copy current col value into previous (in preparation for next iteration)
  		            prevRow[j] = curCol;
  		          }

  		          // copy last col value into previous (in preparation for next iteration)
  		          prevRow[j] = nextCol;
  		        }
  		        return nextCol;
  		      }
  		      return levenshtein.distance(str1, str2);
  		    }

  		  };

  		  // amd
  		  if (module !== null && 'object' !== "undefined" && module.exports === exports) {
  		    module.exports = Levenshtein;
  		  }
  		  // web worker
  		  else if (typeof self !== "undefined" && typeof self.postMessage === 'function' && typeof self.importScripts === 'function') {
  		    self.Levenshtein = Levenshtein;
  		  }
  		  // browser main thread
  		  else if (typeof window !== "undefined" && window !== null) {
  		    window.Levenshtein = Levenshtein;
  		  }
  		}()); 
  	} (levenshtein$1, levenshtein$1.exports));
  	return levenshtein$1.exports;
  }

  var levenshteinExports = requireLevenshtein();
  var levenshtein = /*@__PURE__*/getDefaultExportFromCjs(levenshteinExports);

  // Exponemos a window para que sea global
  window.katex = katex;
  window.renderMathInElement = renderMathInElement;

  async function feedbackQuestion(originalFormulationClearfix) {
    // console.log('Iniciando feedbackQuestion');

    // Encontrar el hermano de originalFormulationClearfix que tiene clase "outcome clearfix"
    let hermano = originalFormulationClearfix.nextElementSibling;
    // console.log('Buscando hermano con clase "outcome clearfix"');

    while (hermano) {
      // console.log('Revisando elemento:', hermano);
      if (hermano.classList.contains('outcome') && hermano.classList.contains('clearfix')) {
        // console.log('Hermano encontrado:', hermano);
        break;
      }
      hermano = hermano.nextElementSibling;
    }
    if (!hermano) {
      // console.error('No se encontró el hermano con clase "outcome clearfix"');
      return '';
    }

    // Dentro del hermano, encontrar el elemento con clase "feedback"
    // console.log('Buscando elemento con clase "feedback" dentro del hermano');
    let feedback = hermano.querySelector('.feedback');
    if (!feedback) {
      console.error('No se encontró el elemento con clase "feedback"');
      return '';
    }

    // Dentro de feedback, encontrar el elemento con clase "generalfeedback"
    // console.log('Buscando elemento con clase "generalfeedback" dentro de feedback');
    let generalFeedback = feedback.querySelector('.generalfeedback');
    if (!generalFeedback) {
      console.error('No se encontró el elemento con clase "generalfeedback"');
      return '';
    }

    // Clonar el elemento generalFeedback para no modificar el original
    // console.log('Clonando el elemento generalFeedback');
    let generalFeedbackClone = generalFeedback.cloneNode(true);

    // Procesar imágenes que contienen 'pluginfile.php' en su URL en el clon
    // console.log('Buscando imágenes en generalFeedbackClone');
    let images = generalFeedbackClone.querySelectorAll('img');
    if (images.length > 0) {
      // console.log('Se encontraron imágenes:', images.length);
      let promises = [];

      images.forEach(img => {
        // console.log('Procesando imagen:', img.src);
        if (img.src.includes('pluginfile.php')) {
          // console.log('La imagen contiene "pluginfile.php" en la URL');
          let promise = convertImageToDataUri(img.src).then(dataUri => {
            img.src = dataUri;
            // console.log('Imagen convertida a Data URI');
          }).catch(error => {
            console.error(error);
          });
          promises.push(promise);
        }
      });

      // Esperar a que todas las conversiones terminen
      await Promise.all(promises);
    }

    // Eliminar <p> vacíos o con solo <br>, espacios o <span> sin contenido
    // console.log('Eliminando <p> vacíos de generalFeedbackClone');
    let paragraphs = generalFeedbackClone.querySelectorAll('p');
    paragraphs.forEach(p => {
      if (!p.textContent.trim() && !p.querySelector('img')) {
        // console.log('Eliminando <p> vacío o sin contenido relevante:', p);
        p.remove();
      }
    });

    // Extraer el contenido HTML del clon después de procesar las imágenes y eliminar <p> vacíos
    let textoFeedback = generalFeedbackClone.innerHTML;
    // console.log('Contenido del textoFeedback:', textoFeedback);

    // Retornar el texto del feedback
    return textoFeedback;
  }

  function getQuestionNumber(formulation_clearfix) {
    let contenedorPadre = formulation_clearfix.closest('.content');
    if (contenedorPadre) {
      let infoHermanos = contenedorPadre.parentElement.querySelector('.info');
      if (infoHermanos) {
        let numeroPreguntaSpan = infoHermanos.querySelector('.rui-qno');
        return numeroPreguntaSpan ? numeroPreguntaSpan.textContent.trim() : null; // Retornar número
      }
    }
    return null; // Sin número
  }

  // Función auxiliar para determinar el tipo de pregunta
  function determinarTipoPregunta(formulation_clearfix) {
    const hayUnSoloQtext = formulation_clearfix.querySelectorAll('.qtext').length === 1;
    const dropzonesElement = formulation_clearfix.querySelector('.dropzones') !== null;
    const draghomesElement = formulation_clearfix.querySelector('.draghome') !== null;

    const inputTextCount = formulation_clearfix.querySelectorAll('input[type="text"]').length;
    const inputRadioCount = formulation_clearfix.querySelectorAll('input[type="radio"]').length;
    const inputCheckboxCount = formulation_clearfix.querySelectorAll('input[type="checkbox"]').length;
    const selectCount = formulation_clearfix.querySelectorAll('select').length;

    const tablaAnswer = formulation_clearfix.querySelectorAll('table.answer').length;


    const blocks = formulation_clearfix.querySelectorAll(".ablock.form-inline");
    let containsRespuesta = Array.from(blocks).some(block =>
      block.textContent.toLowerCase().includes("respuesta")
    );


    if (hayUnSoloQtext) {
      if (inputRadioCount > 0 && inputCheckboxCount === 0 && selectCount === 0 && !dropzonesElement && !draghomesElement) {
        return 'inputradio_opcionmultiple_verdaderofalso';
      }
      if (inputCheckboxCount > 0 && inputRadioCount === 0 && selectCount === 0 && !dropzonesElement && !draghomesElement) {
        return 'inputchecked_opcionmultiple';
      }
      if (selectCount > 0 && tablaAnswer > 0 && inputRadioCount === 0 && inputCheckboxCount === 0 && !dropzonesElement && !draghomesElement) {
        return 'select_emparejamiento';
      }

      if (inputTextCount === 1 && inputRadioCount === 0 && inputCheckboxCount === 0 && selectCount === 0 && !dropzonesElement && !draghomesElement) {
        if (containsRespuesta) {
          return 'inputtext_respuestacorta2';
        } else {
          return 'inputtext_respuestacorta';
        }
      }


    }

    if (draghomesElement && !dropzonesElement) {
      return 'draganddrop_text';
    }

    if (draghomesElement && dropzonesElement) {
      return 'draganddrop_image';
    }

    return 'otroscasos';
  }

  async function File2DataUri(files) {
    let imagenes = [];
    let audios = [];

    if (files instanceof HTMLImageElement) {
      imagenes = [files];
    } else if (files instanceof HTMLAudioElement) {
      audios = [files];
    } else if (files instanceof HTMLElement) {
      imagenes = Array.from(files.querySelectorAll('img'));
      audios = Array.from(files.querySelectorAll('audio'));
    } else {
      // Si el tipo de entrada no es soportado, se lanza un error que se captura inmediatamente
      console.log("Tipo de entrada no soportado. Proporcione un elemento HTML, una imagen o un audio.");
    }


    // --- Procesar imágenes ---
    for (const imagen of imagenes) {
      // Procesar solo imágenes cuya URL contenga 'pluginfile.php'
      if (imagen.src.includes('pluginfile.php')) {
        try {
          console.log(`Intentando procesar imagen: ${imagen.src}`);

          // Esperar a que la imagen se cargue (ya sea de caché o en tiempo real)
          await new Promise((resolver, rechazar) => {
            if (imagen.complete) {
              resolver();
            } else {
              imagen.onload = resolver;
              imagen.onerror = (error) => {
                console.error(`Error al cargar la imagen: ${imagen.src}`, error);
                rechazar(error);
              };
            }
          });

          // Dibujar la imagen en un canvas para obtener su Data URI
          const lienzo = document.createElement('canvas');
          const contexto = lienzo.getContext('2d');
          lienzo.width = imagen.naturalWidth;
          lienzo.height = imagen.naturalHeight;
          contexto.drawImage(imagen, 0, 0);

          const dataUriImagen = lienzo.toDataURL();
          console.log(`Imagen procesada con éxito: ${imagen.src}`);
          imagen.src = dataUriImagen;
        } catch (error) {
          console.error(`Error en la conversión de la imagen: ${imagen.src}`, error);
        }
      }
    }


    // --- Procesar audios ---
    const umbralDuracionAudio = 60; // Duración umbral en segundos
    const umbralTamanoAudio = 10 * 1024 * 1024; // Tamaño umbral en bytes (10 MB)

    for (const audio of audios) {
      // Procesar solo si la URL existe y contiene 'pluginfile.php'
      if (audio.src && audio.src.includes('pluginfile.php')) {
        try {
          // Esperar a que se carguen los metadatos del audio (para obtener la duración)
          await new Promise((resolver, rechazar) => {
            if (audio.readyState >= 1 && !isNaN(audio.duration)) {
              resolver();
            } else {
              audio.onloadedmetadata = resolver;
              audio.onerror = rechazar;
            }
          });

          // Obtener el blob del audio para revisar el tamaño
          const respuesta = await fetch(audio.src);
          const blob = await respuesta.blob();

          /*  
            Se realiza la conversión si:
            - El audio dura menos o igual al umbral, o
            - Si dura más, pero su tamaño es inferior al umbral.
            Esto permite convertir audios largos que estén bien comprimidos (por ejemplo, 5 minutos y 1 MB)
            y omitir la conversión en casos donde el audio sea extenso y pesado.
          */
          if (audio.duration > umbralDuracionAudio && blob.size > umbralTamanoAudio) {
            console.log('Audio demasiado largo y pesado, se omite la conversión:', audio.src);
            continue;
          }

          // Convertir el blob a Data URI usando FileReader
          const dataUriAudio = await new Promise((resolver, rechazar) => {
            const lector = new FileReader();
            lector.onloadend = () => resolver(lector.result);
            lector.onerror = rechazar;
            lector.readAsDataURL(blob);
          });

          audio.src = dataUriAudio;
        } catch (error) {
          console.error('Error en la conversión del audio a Data URI:', error);
        }
      }
    }
  }

  async function extractContentInOrder(node) {
    //console.log('Iniciando extracción de contenido para el nodo:', node);
    let content = '';

    for (const child of node.childNodes) {
      //console.log('Procesando child node con nodeType:', child.nodeType);

      // 1) Nodos de texto
      if (child.nodeType === Node.TEXT_NODE) {
        const text = child.textContent;
        //console.log('-> Nodo de texto encontrado:', text);

        if (text && text !== '\n') {
          content += text;
          //console.log('-> Agregando al contenido:', text);
        }

        // 2) Nodos de elemento
      } else if (child.nodeType === Node.ELEMENT_NODE) {
        const tagName = child.tagName.toLowerCase();
        //console.log('-> Nodo de elemento encontrado con tagName:', tagName);

        // ------------------------------------------------------------------------
        // Ignorar nodos <span> que sean de MathJax o MathJax_Preview
        // ------------------------------------------------------------------------
        if (
          tagName === 'span' &&
          (child.classList.contains('MathJax') || child.classList.contains('MathJax_Preview'))
        ) {
          //console.log('-> Ignorando nodo <span> con clase MathJax o MathJax_Preview');
          continue; // No procesamos este nodo ni sus hijos
        }

        // ------------------------------------------------------------------------
        // A) <script type="math/tex">
        // ------------------------------------------------------------------------
        if (tagName === 'script' && child.getAttribute('type') === 'math/tex') {
          const latexCode = child.textContent.trim();
          //console.log('-> Nodo <script type="math/tex"> detectado, LaTeX:', latexCode);

          if (latexCode) {
            // Se añade un espacio si es necesario
            if (content.length > 0 && !content.endsWith(' ') && !content.endsWith('\u00A0')) {
              content += ' ';
            }
            // Encierrar el código LaTeX entre \(...\)
            content += `\\(${latexCode}\\)`;
            //console.log('-> Agregando LaTeX al contenido:', latexCode);
          }

          // ------------------------------------------------------------------------
          // C) <img>
          // ------------------------------------------------------------------------
        } else if (tagName === 'img') {
          //console.log('-> Encontrado <img> con src');
          const src = child.getAttribute('src');
          if (src) {
            if (content.length > 0 && !content.endsWith(' ') && !content.endsWith('\u00A0')) {
              content += ' ';
            }
            content += src;
            //console.log('-> Agregando src al contenido:', src);
          }

          // ------------------------------------------------------------------------
          // D) <sub> y <sup>
          // ------------------------------------------------------------------------
        } else if (tagName === 'sub' || tagName === 'sup') {
          //console.log(`-> Encontrado <${tagName}>; conservando la etiqueta completa.`);
          // Se conserva la etiqueta completa
          content += child.outerHTML;

          // ------------------------------------------------------------------------
          // E) <p> (procesado recursivo + saltos de línea)
          // ------------------------------------------------------------------------
        } else if (tagName === 'p') {
          //console.log('-> Encontrado <p>. Procesando recursivamente su contenido...');
          const childContent = await extractContentInOrder(child);
          if (childContent) {
            if (content.length > 0 && !content.endsWith('\n')) {
              content += '\n';
            }
            content += childContent + '\n';
            // console.log('-> Contenido extraído de <p>:', childContent);
          }

          // ------------------------------------------------------------------------
          // F) <br> (salto de línea)
          // ------------------------------------------------------------------------
        } else if (tagName === 'br') {
          //console.log('-> Encontrado <br>. Añadiendo salto de línea.');
          content += '\n';

          // ------------------------------------------------------------------------
          // G) Otros elementos (procesado recursivo)
          // ------------------------------------------------------------------------
        } else {
          //console.log('-> Nodo de tipo desconocido. Procesando recursivamente...');
          const childContent = await extractContentInOrder(child);
          if (childContent) {
            content += childContent;
            // console.log('-> Contenido extraído del nodo hijo desconocido:', childContent);
          }
        }
      }
    }

    // console.log('Contenido acumulado para este nodo:', content);
    return content;
  }

  function renderizarPreguntas() {
    // 1. Verificar si existe la función renderMathInElement en window.
    if (typeof window.renderMathInElement !== 'function') {
      console.warn('[autofill-autosave-helpers] NO se encontró la función `renderMathInElement`. Asegúrate de cargar KaTeX AutoRender primero.');
      return;
    }

    // 2. Obtener el contenedor por id
    const contenedor = document.getElementById('barra-lateral-autoquizfillapp');
    if (!contenedor) {
      console.warn('[autofill-autosave-helpers] No se encontró el contenedor con id "barra-lateral-autoquizfillapp".');
      return;
    }

    // 3. Llamar a la función de KaTeX auto-render sobre el contenedor
    window.renderMathInElement(contenedor, {
      delimiters: [
        { left: '$$', right: '$$', display: true },
        { left: '\\(', right: '\\)', display: false },
      ],
      // Otras opciones opcionales de KaTeX auto-render
    });

  }

  // =============================================================================
  // Función principal asíncrona para comparar las preguntas de DPN y DFN.
  // Se utiliza procesamiento concurrente para comparar candidatos en paralelo.
  // =============================================================================
  async function compararPreguntas(dpn, dfn) {
    // Si dfn es vacío o solo contiene los metadatos ("ruta" y "tabSessionId"),
    // se omite la comparación y se consideran todas las preguntas de dpnOrigin como nuevas.
    const clavesDFN = Object.keys(dfn);
    if (clavesDFN.length === 0 || (clavesDFN.length === 2 && dfn.hasOwnProperty("ruta") && dfn.hasOwnProperty("tabSessionId"))) {
      console.log("dfn está vacío o solo contiene metadatos. Se asignan todas las preguntas de dpnOrigin como nuevas.");
      let dpnOrigin = sessionStorage.getItem("questions-AutoSave");
      dpnOrigin = JSON.parse(dpnOrigin);
      return { dpnExistentes: [], dpnNuevas: dpnOrigin };
    }

    let dpnExistentes = {};  // Almacena coincidencias encontradas: { dpn: { ... }, dfn: { ... } }
    let dpnNuevas = [];      // Almacena las preguntas de DPN sin coincidencia (con todos sus datos)

    // ---------------------------------------------------------------------------
    // Pre-indexar DFN: Agrupar por "tipo" y cantidad de elementos en "html"
    // ---------------------------------------------------------------------------

    let indiceDFN = {};
    for (const claveDFN in dfn) {
      const preguntaDFN = dfn[claveDFN];
      // console.log(`Procesando DFN: ${claveDFN}`, preguntaDFN);

      if (!preguntaDFN.html) {
        // console.warn(`Elemento DFN "${claveDFN}" no tiene propiedad "html". Se omite.`);
        continue;
      }

      const cantidadHTML = preguntaDFN.html.length;
      const tipoPregunta = preguntaDFN.tipo;

      // Crear grupo por tipo
      if (!indiceDFN[tipoPregunta]) {
        indiceDFN[tipoPregunta] = {};
      }
      // Crear grupo por cantidad de elementos en html
      if (!indiceDFN[tipoPregunta][cantidadHTML]) {
        indiceDFN[tipoPregunta][cantidadHTML] = {};
      }

      // Opcional: Precalcular el contenido de "html" y almacenarlo en caché para DFN.
      if (!cacheContenidoDFN[claveDFN]) {
        cacheContenidoDFN[claveDFN] = obtenerContenidoSeparadoYConcatenado(preguntaDFN.html);
      }

      // Se asigna el objeto preguntaDFN a la clave claveDFN
      indiceDFN[tipoPregunta][cantidadHTML][claveDFN] = preguntaDFN;
    }

    console.log("Índice DFN creado:", indiceDFN);

    // ---------------------------------------------------------------------------
    // Procesar cada pregunta de DPN concurrentemente.
    // Se crea una promesa por cada pregunta y se esperan todas con Promise.all.
    // ---------------------------------------------------------------------------

    const promesasDPN = Object.keys(dpn).map(async (claveDPN) => {

      const preguntaDPN = dpn[claveDPN];
      const tipoDPN = preguntaDPN.tipo;
      const cantidadDPN = preguntaDPN.html.length;

      let cantidadesPermitidas = [cantidadDPN];
      console.log(`Cantidades permitidas para DPN "${claveDPN}":`, cantidadesPermitidas);

      // Recolectar candidatos de DFN que cumplan la cantidad en "html".
      let candidatos = [];
      if (indiceDFN[tipoDPN]) {
        cantidadesPermitidas.forEach(cantidad => {
          if (indiceDFN[tipoDPN][cantidad]) {
            const candidatosEncontrados = indiceDFN[tipoDPN][cantidad];
            Object.keys(candidatosEncontrados).length;
            // Convertir cada candidato del objeto en un elemento del arreglo, conservando su clave principal.
            Object.keys(candidatosEncontrados).forEach(candidateKey => {
              const candidateData = candidatosEncontrados[candidateKey];
              // Se guarda el candidato como { "questionXXXX": candidateData }
              candidatos.push({ [candidateKey]: candidateData });
            });
          } else {
            console.log(`No hay candidatos DFN para cantidad ${cantidad}.`);
          }
        });
      } else {
        console.log(`No existen preguntas DFN para el tipo "${tipoDPN}"`);
      }
      console.log("Listado de candidatos:", candidatos);

      // Si no se encontró ningún candidato, se marca la pregunta DPN como nueva.
      if (candidatos.length === 0) {
        console.log(`No hay candidatos válidos para DPN "${claveDPN}". Se marca como nueva.`);
        dpnNuevas.push(claveDPN);
        return;
      }

      // Precalcular y almacenar en caché el contenido para DPN, si aún no está en caché.
      if (!cacheContenidoDPN[claveDPN]) {
        cacheContenidoDPN[claveDPN] = obtenerContenidoSeparadoYConcatenado(preguntaDPN.html);
      }

      // Crear una promesa para cada candidato que compare la pregunta DPN con el candidato DFN.
      const promesasCandidatos = candidatos.map(candidato => {
        return new Promise((resolve, reject) => {
          // Extraer la clave y los datos del candidato
          const candidateKey = Object.keys(candidato)[0];
          const candidateData = candidato[candidateKey];
          const resultadoComparacion = compararHTML(preguntaDPN.html, candidateData.html);

          if (resultadoComparacion.coincide) {
            console.log(`Candidato DFN "${candidateKey}" coincide con DPN "${claveDPN}"`);
            // Se resuelve la promesa devolviendo el objeto candidato tal como está.
            resolve(candidato);
          } else {
            // console.log(`Candidato DFN "${candidateKey}" NO coincide con DPN "${claveDPN}"`);
            reject('No coincide');
          }
        });
      });

      try {
        // Promise.any se resuelve tan pronto como un candidato cumpla la condición.
        const candidatoCoincidente = await Promise.any(promesasCandidatos);

        // Extraer la clave y los datos del candidato coincidente.
        const claveDFN = Object.keys(candidatoCoincidente)[0];
        const candidateData = candidatoCoincidente[claveDFN];

        // Eliminar propiedades no deseadas del candidato.
        ["clave", "html", "ciclo", "timestamp"].forEach(prop => {
          if (candidateData.hasOwnProperty(prop)) {
            delete candidateData[prop];
          }
        });

        dpnExistentes[claveDPN] = { [claveDFN]: candidateData, data: preguntaDPN };


      } catch (e) {
        // Si ninguno de los candidatos cumple, se marca la pregunta DPN como nueva.
        dpnNuevas.push(claveDPN);
      }

    });

    // Esperar a que se procesen todas las preguntas de DPN.
    await Promise.all(promesasDPN);

    // Recuperar los datos del sessionStorage
    let dpnOrigin = sessionStorage.getItem("questions-AutoSave");
    dpnOrigin = JSON.parse(dpnOrigin);

    const dpnNuevasData = {};

    // Iterar sobre dpnNuevas para extraer los datos de questions
    dpnNuevas.forEach((clave) => {
      if (dpnOrigin[clave]) {
        dpnNuevasData[clave] = dpnOrigin[clave]; // Inserta el objeto completo
      }
    });

    // 2) Iteramos en las claves de dpnExistentes:
    Object.keys(dpnExistentes).forEach((key) => {
      // Chequear que la clave sea algo tipo "Pregunta1", "Pregunta2", etc.
      if (key.startsWith("Pregunta")) {
        // Verificar que en dpnOrigin exista la misma clave:
        if (dpnOrigin[key]) {
          // Reemplazamos dpnExistentes[key].data.html con dpnOrigin[key].html
          dpnExistentes[key].data.html = dpnOrigin[key].html;
        }
      }
    });

    return { dpnExistentes: dpnExistentes, dpnNuevas: dpnNuevasData };
  }

  async function normalizarHTML(input) {
    // Caso 1: Entrada es un string HTML directo.
    if (typeof input === "string") {
      return await normalizarHTMLString(input);
    }

    // Caso 2: Entrada es un objeto (no null).
    if (typeof input === "object" && input !== null) {
      // Caso 2.a: Si el objeto tiene la propiedad "html" (string).
      if (input.hasOwnProperty("html") && typeof input.html === "string") {
        return {
          ...input,
          html: await normalizarHTMLString(input.html)
        };
      }
      // Caso 2.b: Objeto con múltiples claves (por ejemplo, 1000 preguntas).
      const keys = Object.keys(input);
      const promiseArray = keys.map(key => {
        const valor = input[key];
        if (typeof valor === "object" && valor !== null && typeof valor.html === "string") {
          return normalizarHTMLString(valor.html).then(normalizedHTML => {
            return { key, value: { ...valor, html: normalizedHTML } };
          });
        } else {
          return Promise.resolve({ key, value: valor });
        }
      });
      const results = await Promise.all(promiseArray);
      const resultObject = {};
      results.forEach(({ key, value }) => {
        resultObject[key] = value;
      });
      return resultObject;
    }

    // Si la entrada no es string ni objeto, se retorna tal cual.
    return input;
  }

  async function normalizarHTMLString(html) {
    // Crear un contenedor temporal y convertir el string a un fragmento DOM.
    const tempDiv = document.createElement('div');
    const fragment = document.createRange().createContextualFragment(html);
    tempDiv.appendChild(fragment);

    tempDiv.querySelectorAll(
      '.accesshide, .custom-watermark,.validationerror , .sr-only , .qtype_multichoice_clearchoice'
    ).forEach(el => el.remove());

    // Eliminar el <legend> con clase "prompt h6 font-weight-normal sr-only"
    tempDiv.querySelectorAll('legend.prompt.h6.font-weight-normal.sr-only')
      .forEach(el => el.remove());

    // Eliminar elementos con la clase "answernumber"
    tempDiv.querySelectorAll('.answernumber')
      .forEach(el => el.remove());

    // Eliminar el <legend> con clase "prompt h6 font-weight-normal sr-only"
    tempDiv.querySelectorAll('option[value="0"]')
      .forEach(el => el.remove());

    tempDiv.querySelectorAll('.answercontainer')
      .forEach(el => el.remove());

    tempDiv.querySelectorAll('.draghomes')
      .forEach(el => el.remove());

    tempDiv.querySelectorAll('.draghome.placed').forEach(element => {
      // Verificamos si el siguiente hermano cumple con las condiciones:
      const sibling = element.nextElementSibling;
      if (sibling) {
        // Comprobamos si tiene alguna clase que coincida con "place" seguido de dígitos
        const hasPlace = Array.from(sibling.classList).some(cls => /^place\d+$/.test(cls));
        // Comprobamos si tiene la clase "drop"
        const hasDrop = sibling.classList.contains('drop');
        // Comprobamos si tiene alguna clase que coincida con "group" seguido de dígitos
        const hasGroup = Array.from(sibling.classList).some(cls => /^group\d+$/.test(cls));

        if (hasPlace && hasDrop && hasGroup) {
          sibling.remove();
        }
      }

      // Finalmente, eliminamos el elemento actual
      element.remove();
    });

    // Extraer el contenido utilizando la función extractContent (se asume que devuelve una lista)
    let combinedResults = await extractContent(tempDiv);

    // Filtrar la lista final para eliminar elementos vacíos o que contengan solo espacios y saltos de línea.
    combinedResults = combinedResults.filter(item => item.trim() !== '');

    return combinedResults; // Retornar la lista filtrada
  }

  async function extractContent(node) {
    let tokens = [];

    for (const child of node.childNodes) {
      // ------------------------------------------------------------------------
      // 1) Nodos de texto
      // ------------------------------------------------------------------------
      if (child.nodeType === Node.TEXT_NODE) {
        const text = child.textContent;
        if (text && text.trim() !== '') {
          const trimmedText = text.trim();
          // Si el texto parece ser una expresión matemática completa delimitada por "\(" y "\)"
          if (trimmedText.startsWith("\\(") && trimmedText.endsWith("\\)")) {
            // Se remueven los delimitadores y se añade como un único token
            tokens.push(trimmedText.slice(2, -2).trim());
          } else {
            // Para texto normal se separa en palabras
            tokens.push(...trimmedText.split(/\s+/));
          }
        }
      }
      // ------------------------------------------------------------------------
      // 2) Nodos de elemento
      // ------------------------------------------------------------------------
      else if (child.nodeType === Node.ELEMENT_NODE) {
        const tagName = child.tagName.toLowerCase();

        // Ignorar nodos <span> de MathJax o MathJax_Preview
        if (
          tagName === 'span' &&
          (child.classList.contains('MathJax') || child.classList.contains('MathJax_Preview'))
        ) {
          continue; // Se omite este nodo y sus hijos
        }

        // A) Elemento <script type="math/tex">: extraer el código LaTeX sin modificar
        if (tagName === 'script' && child.getAttribute('type') === 'math/tex') {
          const latexCode = child.textContent.trim();
          if (latexCode) {
            tokens.push(latexCode);
          }
        }
        // B) Elemento <img>: extraer el atributo src
        else if (tagName === 'img') {
          const src = child.getAttribute('src');
          if (src) {
            tokens.push(src);
          }
        }
        // C) Elementos <sub> y <sup>: conservar la etiqueta completa
        else if (tagName === 'sub' || tagName === 'sup') {
          tokens.push(child.outerHTML);
        }
        // D) Elemento <p>: procesar recursivamente (se podría agregar un salto de línea)
        else if (tagName === 'p') {
          const childTokens = await extractContent(child);
          if (childTokens && childTokens.length > 0) {
            tokens.push(...childTokens);
          }
          // Si deseas marcar fin de párrafo, puedes descomentar la siguiente línea:
          // tokens.push('\n');
        }
        // E) Elemento <br>: añadir un salto de línea
        else if (tagName === 'br') {
          tokens.push('\n');
        }
        // F) Otros elementos: procesarlos recursivamente
        else {
          const childTokens = await extractContent(child);
          if (childTokens && childTokens.length > 0) {
            tokens.push(...childTokens);
          }
        }
      }
    }

    return tokens;
  }

  // =============================================================================
  // Cachés para optimización: Almacenan el resultado del procesamiento de la propiedad
  // "html" para cada pregunta, evitando recalcular la separación de contenido en cada comparación.
  // =============================================================================
  const cacheContenidoDPN = {};
  const cacheContenidoDFN = {};

  // =============================================================================
  // Función para calcular la distancia de Levenshtein entre dos cadenas.
  // Permite medir la diferencia entre dos textos.
  // =============================================================================
  function calcularDistanciaLevenshtein(cadena1, cadena2) {
    // La función get de fast-levenshtein retorna la distancia entre ambas cadenas.
    return levenshtein.get(cadena1, cadena2);
  }

  // =============================================================================
  // Función para calcular el porcentaje de similitud entre dos textos.
  // Si los textos son exactamente iguales se retorna 100 sin calcular la distancia.
  // =============================================================================
  function calcularSimilitudTexto(texto1, texto2) {
    if (texto1 === texto2) return 100;
    if (texto1.length === 0 && texto2.length === 0) return 100;
    const distancia = calcularDistanciaLevenshtein(texto1, texto2);
    const longitudMaxima = Math.max(texto1.length, texto2.length);
    const similitud = ((longitudMaxima - distancia) / longitudMaxima) * 100;
    return similitud;
  }

  // =============================================================================
  // Función para procesar la lista "html": Separa en dos arreglos (texto y medios)
  // y genera un string con todo el texto concatenado.
  // =============================================================================
  function obtenerContenidoSeparadoYConcatenado(listaHTML) {
    let contenidoTexto = [];
    let contenidoMedios = [];
    listaHTML.forEach(elemento => {
      if (typeof elemento === 'string') {
        // Si la cadena contiene "http://" o "https://" o "data:" se considera un medio.
        if (elemento.includes("http://") || elemento.includes("https://") || elemento.includes("data:")) {
          contenidoMedios.push(elemento);
        } else {
          contenidoTexto.push(elemento);
        }
      } else {
        // Si es un objeto, se asume que tiene la propiedad "tipo".
        if (elemento.tipo === 'media') {
          contenidoMedios.push(elemento.contenido);
        } else {
          contenidoTexto.push(elemento.contenido);
        }
      }
    });
    const textoConcatenado = contenidoTexto.join(" ").trim();
    return { texto: contenidoTexto, medios: contenidoMedios, textoConcatenado: textoConcatenado };
  }

  // =============================================================================
  // Función para comparar dos arreglos de medios (enlaces).
  // Se requiere que ambos arreglos tengan la misma cantidad y que sus elementos sean idénticos,
  // sin importar el orden.
  // =============================================================================
  function compararMedios(arregloMedios1, arregloMedios2) {
    if (arregloMedios1.length !== arregloMedios2.length) return false;
    let mediosNoEmparejados = arregloMedios2.slice();
    for (const medio1 of arregloMedios1) {
      const indiceCoincidente = mediosNoEmparejados.findIndex(medio2 => compararContenidoMedios(medio1, medio2));
      if (indiceCoincidente === -1) {
        return false;
      } else {
        mediosNoEmparejados.splice(indiceCoincidente, 1);
      }
    }
    return true;
  }

  // =============================================================================
  // Función para comparar dos elementos de medios (simulación de comparación exacta).
  // En una implementación real se podría utilizar una comparación de píxeles o pHash.
  // =============================================================================
  function compararContenidoMedios(medio1, medio2) {
    return medio1 === medio2;
  }

  // =============================================================================
  // Función para comparar el contenido de "html" de dos preguntas.
  // Se aprovechan los datos precalculados (o se generan y almacenan en caché si es la primera vez).
  // =============================================================================
  function compararHTML(htmlDPN, htmlDFN) {
    let contenidoDPN = obtenerContenidoSeparadoYConcatenado(htmlDPN);
    let contenidoDFN = obtenerContenidoSeparadoYConcatenado(htmlDFN);

    // Suponiendo que la función retorna, además de 'textoConcatenado', un array de fragmentos,
    // lo llamamos 'textoArray'. Si no está disponible, podemos obtenerlo dividiendo 'textoConcatenado'.
    const textoArrayDPN = contenidoDPN.textoArray || contenidoDPN.textoConcatenado.split(' ');
    const textoArrayDFN = contenidoDFN.textoArray || contenidoDFN.textoConcatenado.split(' ');

    // Ordenamos los arrays para que el orden original no influya
    const textoOrdenadoDPN = textoArrayDPN.slice().sort().join(' ');
    const textoOrdenadoDFN = textoArrayDFN.slice().sort().join(' ');

    // Si los textos ordenados son idénticos, se omite el cálculo completo
    if (textoOrdenadoDPN === textoOrdenadoDFN) {
      const mediosOk = compararMedios(contenidoDPN.medios, contenidoDFN.medios);
      return { coincide: mediosOk, similitudTexto: 100, mediosCoinciden: mediosOk };
    }

    const similitudTexto = calcularSimilitudTexto(contenidoDPN.textoConcatenado, contenidoDFN.textoConcatenado);
    const mediosCoinciden = compararMedios(contenidoDPN.medios, contenidoDFN.medios);
    const coincide = (similitudTexto >= 99) && mediosCoinciden;

    return { coincide: coincide, similitudTexto: similitudTexto, mediosCoinciden: mediosCoinciden };
  }

  function obtenerFormulationClearfix(preguntaStr) {
    // Extrae el número de la cadena, por ejemplo: "Pregunta7" → "7"
    const match = preguntaStr.match(/Pregunta(\d+)/);
    if (!match) {
      console.error('El formato de la pregunta no es válido. Usa "PreguntaXX"');
      return null;
    }
    const numeroPregunta = match[1];

    // Busca todos los elementos con class "info"
    const infoElements = document.querySelectorAll('.info');
    let infoTarget = null;
    infoElements.forEach((info) => {
      // Busca dentro de info un elemento con class "rui-qno" (sin importar si está dentro de un h4 o no)
      const span = info.querySelector('.rui-qno');
      if (span && span.textContent.trim() === numeroPregunta) {
        infoTarget = info;
      }
    });

    if (!infoTarget) {
      console.error(`No se encontró la pregunta número ${numeroPregunta}`);
      return null;
    }

    // Encuentra el hermano con class "content"
    let contentElement = infoTarget.nextElementSibling;
    while (contentElement && !contentElement.classList.contains('content')) {
      contentElement = contentElement.nextElementSibling;
    }
    if (!contentElement) {
      console.error('No se encontró el elemento "content" hermano de la pregunta');
      return null;
    }

    // Dentro de "content", devuelve el elemento que contiene la formulación (class "formulation clearfix")
    const formulationElement = contentElement.querySelector('.formulation.clearfix');
    if (!formulationElement) {
      console.error('No se encontró el elemento ".formulation.clearfix" dentro de "content"');
      return null;
    }

    return formulationElement;
  }

  // Manejar respuestas tipo 'draganddrop_image'
  async function draganddrop_image(originalFormulationClearfix) {
      
      // Definir el tipo de pregunta
      const tipo = 'draganddrop_image';
      console.log(tipo);

      // Crear un array para almacenar las respuestas (se usará como "respuestaCorrecta")
      const respuestas = [];

      // Clonar el elemento original para procesarlo
      const clonFormulation = originalFormulationClearfix.cloneNode(true);

      // Convertir las imágenes dentro del clon a formato Data URI
      await File2DataUri(clonFormulation);

      // 1) Localizar el elemento que contiene el enunciado (qtext)
      const enunciadoElement = clonFormulation.querySelector('.qtext');
      let enunciado = '';
      if (enunciadoElement) {
          enunciado = await extractContentInOrder(enunciadoElement);
      } else {
          console.warn("No se encontró el elemento .qtext para extraer el enunciado.");
      }

      // 2) Obtener la imagen principal (dropbackground) dentro de .droparea
      let imagenDrop = '';
      const dropareaImg = clonFormulation.querySelector('.droparea img.dropbackground');
      if (dropareaImg) {
          imagenDrop = dropareaImg.getAttribute('src') || '';
      }

      // 3) Recopilar las "respuestas" realmente colocadas en cada .dropzone
      //    (las que aparecen con clase .placed, p. ej. choice1 placed inplace1)
      const dropzones = clonFormulation.querySelectorAll('.dropzones .dropzone');
      dropzones.forEach(dropzone => {
          // p.ej. class="dropzone group1 place1" => "place1"
          const placeClass = [...dropzone.classList].find(cls => cls.startsWith('place'));
          if (placeClass) {
              // Buscar si hay un elemento .draghome que coincida con la misma place (inplace1, inplace2, etc.)
              const occupant = dropzone.parentElement.querySelector(`.draghome.user-select-none.placed.in${placeClass}`);
              if (occupant) {
                  respuestas.push(occupant.textContent.trim());
              } else {
                  respuestas.push('');
              }
          }
      });

      // 4) Recopilar las opciones de respuesta únicas desde .draghomes
      const opcionesRespuestas = [];
      const draghomesContainer = clonFormulation.querySelector('.draghomes');
      if (draghomesContainer) {
          const draghomes = draghomesContainer.querySelectorAll('.draghome');
          draghomes.forEach(d => {
              const texto = d.textContent.trim();
              if (texto && !opcionesRespuestas.includes(texto)) {
                  opcionesRespuestas.push(texto);
              }
          });
      }

      // 5) Obtener el feedback de la pregunta (si corresponde)
      const feedback = await feedbackQuestion(originalFormulationClearfix);

      // 6) Construir el objeto final con la estructura solicitada
      const questionData = {
          enunciado: enunciado,
          imagenDrop: imagenDrop,
          respuestaCorrecta: respuestas,  
          html: clonFormulation.outerHTML, 
          tipo: tipo,
          ciclo: localStorage.getItem("ciclo"),
          feedback: feedback,
          opcionesRespuestas: opcionesRespuestas
      };

      return questionData;
  }

  // Manejar respuestas tipo 'draganddrop' (texto)
  async function draganddrop_text(originalFormulationClearfix) {
      // Definir el tipo de pregunta
      const tipo = 'draganddrop_text';
      console.log(tipo);

      // Crear un array para almacenar las respuestas encontradas (se usará como "respuestaCorrecta")
      const respuestas = [];

      // Clonar el elemento original para procesarlo (así no alteramos el DOM original)
      const clonFormulation = originalFormulationClearfix.cloneNode(true);

      // Convertir las imágenes dentro del clon a formato Data URI (opcional, depende de tu caso)
      await File2DataUri(clonFormulation);

      // 1) Localizar el elemento que contiene el enunciado
      const enunciadoElement = clonFormulation.querySelector('.qtext');
      if (enunciadoElement) {
          // 2) Fusionar cada `place` con su posible `draghome` ocupante
          const placeElements = enunciadoElement.querySelectorAll('span[class*="place"][class*="drop"][class*="group"]');

          placeElements.forEach(place => {
              // Verificar si el siguiente hermano del `place` es un `span.draghome`
              let occupantText = '';
              const occupant = (place.nextElementSibling && place.nextElementSibling.classList.contains('draghome'))
                  ? place.nextElementSibling
                  : null;

              // Si hay ocupante, tomamos su texto y lo eliminamos del DOM
              if (occupant) {
                  occupantText = occupant.textContent.trim();
                  occupant.remove();
              }

              // Guardamos la respuesta en el array `respuestas`
              respuestas.push(occupantText || '');

              // Reemplazamos el propio `place` por un TextNode de la forma `[ texto ]` o `[ ]`
              const textBracket = '[ ]';
              place.replaceWith(document.createTextNode(textBracket));
          });
      } else {
          console.log("No se encontró el elemento .qtext para el preprocesado del enunciado.");
      }

      // Ahora que todos los `span.place...` y `span.draghome` han sido fusionados,
      // extraemos el enunciado en texto plano (o HTML en orden) con `extractContentInOrder`.
      let enunciado = '';
      if (enunciadoElement) {
          enunciado = await extractContentInOrder(enunciadoElement);
      } else {
          console.log("No se encontró el elemento .qtext para extraer el enunciado.");
      }
      console.log("Enunciado After", enunciado);

      // 3) Recopilar las opciones de respuesta únicas
      //    (en muchos casos Moodle las pone en un div con clase "user-select-none draggrouphomes1")
      const opcionesRespuestas = [];
      const divOpciones = clonFormulation.querySelectorAll('div.user-select-none.draggrouphomes1');
      divOpciones.forEach(div => {
          const spans = div.querySelectorAll('span.draghome');
          spans.forEach(span => {
              const texto = span.textContent.trim();
              if (texto && !opcionesRespuestas.includes(texto)) {
                  opcionesRespuestas.push(texto);
              }
          });
      });

      // Mostrar en consola las respuestas encontradas y las opciones
      console.log('Respuestas encontradas:', respuestas);
      console.log('Opciones de respuestas:', opcionesRespuestas);

      // 4) Obtener el feedback de la pregunta (si corresponde)
      const feedback = await feedbackQuestion(originalFormulationClearfix);

      // 5) Construir el objeto `questionData` con la estructura solicitada
      const questionData = {
          enunciado: enunciado,           // El texto final del enunciado, con `[ ]` o `[ texto ]`
          respuestaCorrecta: respuestas,  // Array con el texto que había en cada hueco
          html: clonFormulation.outerHTML,
          tipo: tipo,
          ciclo: localStorage.getItem("ciclo"),
          feedback: feedback,
          opcionesRespuestas: opcionesRespuestas
      };

      return questionData;
  }

  /**
   * Función para procesar preguntas de opción múltiple con checkboxes.
   * Se clona el formulario original, se convierten las imágenes, se extrae el enunciado,
   * se recogen todas las opciones y se determina cuáles están seleccionadas.
   *
   * @param {HTMLElement} originalFormulationClearfix - Elemento DOM original de la pregunta.
   * @returns {Object} Objeto con la información extraída de la pregunta.
   */
  async function inputchecked_opcionmultiple(originalFormulationClearfix) {
      const tipo = 'inputchecked_opcionmultiple';

      // Clonamos el elemento original para trabajar sobre una copia sin modificar el DOM.
      const clonFormulation = originalFormulationClearfix.cloneNode(true);

      if (clonFormulation.querySelectorAll('img').length > 0 || clonFormulation.querySelectorAll('audio').length > 0) {
          await File2DataUri(clonFormulation);
      }

      // Extraemos el enunciado usando la función dedicada.
      const enunciado = await extractEnunciado$2(clonFormulation);

      // Extraemos las opciones de respuesta y las respuestas seleccionadas.
      const { opcionesRespuesta, respuestaCorrecta } = await extractOpcionesYRespuestaCheckbox(originalFormulationClearfix);

      // Obtenemos el feedback, si existe.
      const feedback = await feedbackQuestion(originalFormulationClearfix);

      // Construimos el objeto questionData con la información obtenida.
      const questionData = {
          enunciado: enunciado,
          opcionesRespuesta: opcionesRespuesta,
          // En el caso de checkboxes, pueden haber múltiples respuestas seleccionadas.
          respuestaCorrecta: respuestaCorrecta,
          html: clonFormulation.outerHTML,
          tipo: tipo,
          ciclo: localStorage.getItem("ciclo"),
          feedback: feedback,
      };

      // console.log("Objeto questionData generado:", questionData);
      return questionData;
  }

  /**
   * Extrae el enunciado de la pregunta a partir del clon del formulario.
   *
   * @param {HTMLElement} clonFormulation - Clon del elemento de la pregunta.
   * @returns {string} Enunciado extraído.
   */
  async function extractEnunciado$2(clonFormulation) {
      const enunciadoElement = clonFormulation.querySelector('.qtext');
      let enunciado = '';
      if (enunciadoElement) {
          enunciado = await extractContentInOrder(enunciadoElement);
      } else {
          console.log("No se encontró el elemento .qtext para extraer el enunciado.");
      }
      return enunciado;
  }

  /**
   * Extrae las opciones de respuesta y determina cuáles están seleccionadas (respuesta correcta)
   * para preguntas con checkboxes.
   *
   * Se asume que cada input checkbox tiene un atributo "aria-labelledby" que referencia al label asociado.
   *
   * @param {HTMLElement} originalFormulationClearfix - Elemento DOM original de la pregunta.
   * @returns {Object} Objeto con las propiedades:
   *                   - opcionesRespuesta: Array con el texto de cada opción.
   *                   - respuestaCorrecta: Array con el texto de las opciones seleccionadas.
   */
  async function extractOpcionesYRespuestaCheckbox(originalFormulationClearfix) {
      const allInputCheckbox = originalFormulationClearfix.querySelectorAll('input[type="checkbox"]');
      let opcionesRespuesta = [];
      let respuestaCorrecta = [];

      for (const inputCheckbox of allInputCheckbox) {
          // Se obtiene el id del label a partir del atributo "aria-labelledby".
          const labelId = inputCheckbox.getAttribute('aria-labelledby');
          if (!labelId) {
              console.log("No se encontró el atributo aria-labelledby para el input checkbox:", inputCheckbox);
              continue;
          }

          // Escapamos el id para usarlo en el selector.
          const escapedLabelId = CSS.escape(labelId);
          const labelElement = originalFormulationClearfix.querySelector(`#${escapedLabelId}`);

          let textoOpcion = '';
          if (labelElement) {
              // Se extrae el contenido del label.
              textoOpcion = await extractContentInOrder(labelElement);
              // Se eliminan posibles literales iniciales (por ejemplo: "a.", "b.", etc.).
              textoOpcion = textoOpcion.replace(/^[a-zA-Z]\.|^[ivxlcdmIVXLCDM]+\./, '').trim();
          } else {
              console.log("No se encontró label asociado para el input checkbox con id:", labelId);
          }

          opcionesRespuesta.push(textoOpcion);

          // Si el checkbox está marcado, se añade su texto a las respuestas correctas.
          if (inputCheckbox.checked) {
              respuestaCorrecta.push(textoOpcion);
          }
      }

      return { opcionesRespuesta, respuestaCorrecta };
  }

  async function inputradio_opcionmultiple_verdaderofalso(originalFormulationClearfix) {
      const tipo = 'inputradio_opcionmultiple_verdaderofalso';

      // Clonamos el elemento original para trabajar sobre una copia sin modificar el DOM.
      const clonFormulation = originalFormulationClearfix.cloneNode(true);

      if (clonFormulation.querySelectorAll('img').length > 0 || clonFormulation.querySelectorAll('audio').length > 0) {
          await File2DataUri(clonFormulation);
      }

      // Extraemos el enunciado usando la función dedicada.
      const enunciado = await extractEnunciado$1(clonFormulation);

      // Extraemos las opciones de respuesta y la respuesta correcta.
      const { opcionesRespuesta, respuestaCorrecta } = await extractOpcionesYRespuesta$1(originalFormulationClearfix);

      // Obtenemos el feedback, si existe.
      const feedback = await feedbackQuestion(originalFormulationClearfix);

      // Construimos el objeto questionData con la información obtenida.
      const questionData = {
          enunciado: enunciado,
          opcionesRespuesta: opcionesRespuesta,
          respuestaCorrecta: respuestaCorrecta,
          html: clonFormulation.outerHTML,
          tipo: tipo,
          ciclo: localStorage.getItem("ciclo"),
          feedback: feedback,
      };

      // console.log("Objeto questionData generado:", questionData);
      return questionData;
  }

  async function extractEnunciado$1(clonFormulation) {
      const enunciadoElement = clonFormulation.querySelector('.qtext');
      let enunciado = '';
      if (enunciadoElement) {
          enunciado = await extractContentInOrder(enunciadoElement);
      } else {
          console.log("No se encontró el elemento .qtext para extraer el enunciado.");
      }
      return enunciado;
  }

  async function extractOpcionesYRespuesta$1(originalFormulationClearfix) {
      const allInputRadio = originalFormulationClearfix.querySelectorAll('input[type="radio"]');
      let opcionesRespuesta = [];
      let respuestaCorrecta = '';

      for (const inputRadio of allInputRadio) {
          // Ignoramos inputs que correspondan a "Quitar mi elección" o similares.
          const parentDiv = inputRadio.closest('.qtype_multichoice_clearchoice');
          const isClearChoice = parentDiv !== null || inputRadio.value === "-1" || inputRadio.classList.contains('sr-only');
          if (isClearChoice) {
              continue;
          }

          // Se asume que el label asociado es el siguiente elemento en el DOM.
          let labelInput = inputRadio.nextElementSibling;
          let textoOpcion = '';
          if (labelInput) {
              // Si el label contiene un elemento con clase "flex-fill", se extrae desde allí.
              const flexFillElement = labelInput.querySelector('.flex-fill');
              if (flexFillElement) {
                  textoOpcion = await extractContentInOrder(flexFillElement);
              } else {
                  // Si no, se extrae directamente del label.
                  textoOpcion = await extractContentInOrder(labelInput);
              }
              // Si no se encuentra un elemento MathJax, se eliminan literales iniciales (como "a.", "b.", etc.).
              const mathJaxElement = labelInput.querySelector('.MathJax');
              if (!mathJaxElement) {
                  textoOpcion = textoOpcion.replace(/^[a-zA-Z]\.|^[ivxlcdmIVXLCDM]+\./, '');
              }
          } else {
              console.log("No se encontró label asociado para el input radio:", inputRadio);
          }

          opcionesRespuesta.push(textoOpcion);

          // Si el input está marcado, se asigna su texto como respuesta correcta.
          if (inputRadio.checked) {
              // console.log("Input radio marcado encontrado. Respuesta correcta:", textoOpcion);
              respuestaCorrecta = textoOpcion;
          }
      }

      return { opcionesRespuesta, respuestaCorrecta };
  }

  async function inputtext_respuestacorta(originalFormulationClearfix) {
      const tipo = 'inputtext_respuestacorta';

      // 1) Clonamos el elemento original para trabajar sobre la copia.
      const clonFormulation = originalFormulationClearfix.cloneNode(true);

      // 2) Convertimos a Data URI todas las imágenes del clon.
      await File2DataUri(clonFormulation);

      // 3) Obtenemos la referencia a .qtext dentro del clon.
      const clonedQtext = clonFormulation.querySelector('.qtext');
      let enunciadoProcess = '';

      if (clonedQtext) {
          // Buscamos todos los <input type="text"> en TODO el clon
          const inputs = clonFormulation.querySelectorAll('input[type="text"]');

          inputs.forEach((input) => {
              // Eliminamos el label asociado al input (si existe)
              const label = clonFormulation.querySelector(`label[for="${input.id}"]`);
              if (label) {
                  label.remove();
              }

              // Verificamos si el input está dentro del .qtext
              if (clonedQtext.contains(input)) {
                  // Lo reemplazamos en el DOM por "[ ]"
                  const placeholder = document.createTextNode('[ ]');
                  input.parentNode.replaceChild(placeholder, input);
              }
          });

          // Aquí pasamos el nodo, no la cadena HTML
          enunciadoProcess = await extractContentInOrder(clonedQtext);

      } else {
          console.log("No se encontró el elemento .qtext para extraer el enunciado.");
      }

      // 4) Recorremos los <input> del original para extraer los valores ingresados.
      const respuestaCorrecta = [];
      const allInputText = originalFormulationClearfix.querySelectorAll('input[type="text"]');
      allInputText.forEach((inputText) => {
          const valor = inputText.value.trim();
          respuestaCorrecta.push(valor);
      });

      // 5) Obtenemos el feedback de la pregunta
      const feedback = await feedbackQuestion(originalFormulationClearfix);

      // 6) Construimos el objeto final questionData
      const questionData = {
          enunciado: enunciadoProcess,       // Texto con [ ] donde estaban los inputs
          respuestaCorrecta: respuestaCorrecta, 
          html: clonFormulation.outerHTML,   // HTML completo del clon (imágenes en Data URI)
          tipo: tipo,
          ciclo: localStorage.getItem("ciclo"),
          feedback: feedback
      };

      return questionData;
  }

  async function inputtext_respuestacorta2(originalFormulationClearfix) {
      const tipo = 'inputtext_respuestacorta2';

      // 1) Clonamos el elemento original para trabajar sobre la copia.
      const clonFormulation = originalFormulationClearfix.cloneNode(true);

      // 2) Convertimos a Data URI todas las imágenes del clon.
      await File2DataUri(clonFormulation);

      // 3) Obtenemos la referencia a .qtext dentro del clon.
      const clonedQtext = clonFormulation.querySelector('.qtext');
      let enunciadoProcess = '';

      if (clonedQtext) {
          // Extraemos el contenido de .qtext sin modificaciones
          enunciadoProcess = await extractContentInOrder(clonedQtext);
      } else {
          console.log("No se encontró el elemento .qtext para extraer el enunciado.");
      }

      // 4) Buscamos el <div class="ablock form-inline"> hermano de .qtext
      let respuestaCorrecta = [];
      const respuestaContainer = originalFormulationClearfix.querySelector('.ablock.form-inline');
      
      if (respuestaContainer) {
          const inputText = respuestaContainer.querySelector('input[type="text"]');
          if (inputText) {
              respuestaCorrecta.push(inputText.value.trim());
          }
      }

      // 5) Obtenemos el feedback de la pregunta
      const feedback = await feedbackQuestion(originalFormulationClearfix);

      // 6) Construimos el objeto final questionData
      const questionData = {
          enunciado: enunciadoProcess,       // Texto del enunciado sin modificaciones
          respuestaCorrecta: respuestaCorrecta, 
          html: clonFormulation.outerHTML,   // HTML completo del clon (imágenes en Data URI)
          tipo: tipo,
          ciclo: localStorage.getItem("ciclo"),
          feedback: feedback
      };

      return questionData;
  }

  /**
   * Procesa preguntas de emparejamiento basadas en <select>.
   * Se clona el elemento original, se convierten las imágenes a Data URI,
   * se extrae el enunciado, las respuestas seleccionadas y las opciones únicas de los <select>.
   *
   * @param {HTMLElement} originalFormulationClearfix - Elemento DOM original de la pregunta.
   * @returns {Object} Objeto questionData con la información procesada.
   */
  async function select_emparejamiento(originalFormulationClearfix) {
      const tipo = 'select_emparejamiento';

      // Clonamos el elemento original para trabajar sobre una copia sin modificar el DOM.
      const clonFormulation = originalFormulationClearfix.cloneNode(true);

      // Convertimos las imágenes del clon a Data URI si es necesario.
      if (clonFormulation.querySelectorAll('img').length > 0) {
          await File2DataUri(clonFormulation);
      }

      // Extraemos el enunciado usando la función dedicada.
      const enunciado = await extractEnunciado(clonFormulation);

      // Extraemos las opciones de emparejamiento, las respuestas correctas y las opciones únicas de los select.
      const { opcionesEnunciados, respuestaCorrecta, opcionesSelect } = await extractOpcionesYRespuesta(originalFormulationClearfix);

      // Obtenemos el feedback, si existe.
      const feedback = await feedbackQuestion(originalFormulationClearfix);

      // Construimos el objeto questionData con la información obtenida.
      const questionData = {
          enunciado: enunciado,
          opcionesEnunciados: opcionesEnunciados,
          respuestaCorrecta: respuestaCorrecta,
          opcionesSelect: opcionesSelect,  // Opciones únicas sin repetir
          html: clonFormulation.outerHTML,
          tipo: tipo,
          ciclo: localStorage.getItem("ciclo"),
          feedback: feedback,
      };

      //console.log("Objeto questionData generado:", questionData);
      return questionData;
  }

  /**
   * Extrae el enunciado usando la función dedicada.
   *
   * @param {HTMLElement} clonFormulation - Elemento DOM clonado de la pregunta.
   * @returns {string} El enunciado extraído.
   */
  async function extractEnunciado(clonFormulation) {
      const enunciadoElement = clonFormulation.querySelector('.qtext');
      let enunciado = '';
      if (enunciadoElement) {
          enunciado = await extractContentInOrder(enunciadoElement);
      } else {
          console.log("No se encontró el elemento .qtext para extraer el enunciado.");
      }
      return enunciado;
  }

  /**
   * Extrae las opciones de emparejamiento, las respuestas correctas y las opciones únicas de los <select>.
   *
   * @param {HTMLElement} originalFormulationClearfix - Elemento DOM original de la pregunta.
   * @returns {Object} Objeto con las opciones de emparejamiento, respuestas correctas y opciones únicas de los select.
   */
  async function extractOpcionesYRespuesta(originalFormulationClearfix) {
      const allSelects = originalFormulationClearfix.querySelectorAll('select');
      let opcionesEnunciados = [];
      let respuestaCorrecta = [];
      let opcionesSelectSet = new Set(); // Usamos un Set para evitar duplicados

      for (const selectElement of allSelects) {
          // Obtenemos todas las opciones dentro del <select>, omitiendo "Elegir..."
          for (const option of selectElement.options) {
              if (option.value !== "0") {
                  opcionesSelectSet.add(option.textContent.trim());
              }
          }

          // Obtenemos la opción seleccionada en el <select>
          let opcionSeleccionada = selectElement.options[selectElement.selectedIndex];

          if (opcionSeleccionada) {
              // Si el valor es "0", interpretamos que no se seleccionó opción, por lo que la respuesta es cadena vacía.
              let textoRespuesta = (opcionSeleccionada.value === "0")
                  ? ""
                  : opcionSeleccionada.textContent.trim();

              // Almacenamos la respuesta seleccionada.
              respuestaCorrecta.push(textoRespuesta);

              // Buscamos el enunciado asociado a este <select>.
              let textoPregunta;
              const textoElement = selectElement.closest('tr')?.querySelector('td.text');
              if (textoElement) {
                  // Si la celda contiene texto, lo usamos como enunciado.
                  if (textoElement.innerText.trim()) {
                      textoPregunta = textoElement.innerText.trim();
                  } else {
                      // Si no contiene texto, buscamos una imagen.
                      const imgElement = textoElement.querySelector('img');
                      if (imgElement) {
                          // La imagen ya fue convertida a Data URI (si era necesario) durante File2DataUri.
                          textoPregunta = imgElement.src;
                          console.log('Obteniendo imagen ya convertida:', imgElement.src);
                      }
                  }

                  // Si se obtuvo algún enunciado (ya sea texto o imagen), lo almacenamos.
                  if (textoPregunta) {
                      opcionesEnunciados.push(textoPregunta);
                  }
              }
          }
      }

      return { 
          opcionesEnunciados, 
          respuestaCorrecta, 
          opcionesSelect: Array.from(opcionesSelectSet) // Convertimos el Set en una lista sin repeticiones
      };
  }

  async function otroscasos(originalFormulationClearfix) {
      const tipo = 'otroscasos';

      // 1) Clonamos el elemento original para trabajar sobre la copia.
      const clonFormulation = originalFormulationClearfix.cloneNode(true);

      // 2) Convertimos a Data URI todas las imágenes del clon.
      await File2DataUri(clonFormulation);

      // 6) Construimos el objeto final questionData
      const questionData = {
          enunciado: "PREGUNTA NO SOPORTADA",       // Texto con [ ] donde estaban los inputs
          html: clonFormulation.outerHTML,   // HTML completo del clon (imágenes en Data URI)
          tipo: tipo,
          ciclo: localStorage.getItem("ciclo"),
      };

      return questionData;
  }

  var interact_min$1 = {exports: {}};

  /* interact.js 1.10.27 | https://raw.github.com/taye/interact.js/main/LICENSE */
  var interact_min = interact_min$1.exports;

  var hasRequiredInteract_min;

  function requireInteract_min () {
  	if (hasRequiredInteract_min) return interact_min$1.exports;
  	hasRequiredInteract_min = 1;
  	(function (module, exports) {
  		!function(t,e){module.exports=e();}(interact_min,(function(){function t(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r);}return n}function e(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?t(Object(r),true).forEach((function(t){a(e,t,r[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):t(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t));}));}return e}function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||false,r.configurable=true,"value"in r&&(r.writable=true),Object.defineProperty(t,d(r.key),r);}}function o(t,e,n){return e&&i(t.prototype,e),Object.defineProperty(t,"prototype",{writable:false}),t}function a(t,e,n){return (e=d(e))in t?Object.defineProperty(t,e,{value:n,enumerable:true,configurable:true,writable:true}):t[e]=n,t}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:true,configurable:true}}),Object.defineProperty(t,"prototype",{writable:false}),e&&l(t,e);}function c(t){return c=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},c(t)}function l(t,e){return l=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},l(t,e)}function u(t){if(undefined===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function p(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return  false;if(Reflect.construct.sham)return  false;if("function"==typeof Proxy)return  true;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return  false}}();return function(){var n,r=c(t);if(e){var i=c(this).constructor;n=Reflect.construct(r,arguments,i);}else n=r.apply(this,arguments);return function(t,e){if(e&&("object"==typeof e||"function"==typeof e))return e;if(undefined!==e)throw new TypeError("Derived constructors may only return object or undefined");return u(t)}(this,n)}}function f(){return f="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=c(t)););return t}(t,e);if(r){var i=Object.getOwnPropertyDescriptor(r,e);return i.get?i.get.call(arguments.length<3?t:n):i.value}},f.apply(this,arguments)}function d(t){var e=function(t,e){if("object"!=typeof t||null===t)return t;var n=t[Symbol.toPrimitive];if(undefined!==n){var r=n.call(t,e);if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return (String)(t)}(t,"string");return "symbol"==typeof e?e:e+""}var h=function(t){return !(!t||!t.Window)&&t instanceof t.Window},v=undefined,g=undefined;function m(t){v=t;var e=t.document.createTextNode("");e.ownerDocument!==t.document&&"function"==typeof t.wrap&&t.wrap(e)===e&&(t=t.wrap(t)),g=t;}function y(t){return h(t)?t:(t.ownerDocument||t).defaultView||g.window}"undefined"!=typeof window&&window&&m(window);var b=function(t){return !!t&&"object"===n(t)},x=function(t){return "function"==typeof t},w={window:function(t){return t===g||h(t)},docFrag:function(t){return b(t)&&11===t.nodeType},object:b,func:x,number:function(t){return "number"==typeof t},bool:function(t){return "boolean"==typeof t},string:function(t){return "string"==typeof t},element:function(t){if(!t||"object"!==n(t))return  false;var e=y(t)||g;return /object|function/.test("undefined"==typeof Element?"undefined":n(Element))?t instanceof Element||t instanceof e.Element:1===t.nodeType&&"string"==typeof t.nodeName},plainObject:function(t){return b(t)&&!!t.constructor&&/function Object\b/.test(t.constructor.toString())},array:function(t){return b(t)&&undefined!==t.length&&x(t.splice)}};function E(t){var e=t.interaction;if("drag"===e.prepared.name){var n=e.prepared.axis;"x"===n?(e.coords.cur.page.y=e.coords.start.page.y,e.coords.cur.client.y=e.coords.start.client.y,e.coords.velocity.client.y=0,e.coords.velocity.page.y=0):"y"===n&&(e.coords.cur.page.x=e.coords.start.page.x,e.coords.cur.client.x=e.coords.start.client.x,e.coords.velocity.client.x=0,e.coords.velocity.page.x=0);}}function T(t){var e=t.iEvent,n=t.interaction;if("drag"===n.prepared.name){var r=n.prepared.axis;if("x"===r||"y"===r){var i="x"===r?"y":"x";e.page[i]=n.coords.start.page[i],e.client[i]=n.coords.start.client[i],e.delta[i]=0;}}}var S={id:"actions/drag",install:function(t){var e=t.actions,n=t.Interactable,r=t.defaults;n.prototype.draggable=S.draggable,e.map.drag=S,e.methodDict.drag="draggable",r.actions.drag=S.defaults;},listeners:{"interactions:before-action-move":E,"interactions:action-resume":E,"interactions:action-move":T,"auto-start:check":function(t){var e=t.interaction,n=t.interactable,r=t.buttons,i=n.options.drag;if(i&&i.enabled&&(!e.pointerIsDown||!/mouse|pointer/.test(e.pointerType)||0!=(r&n.options.drag.mouseButtons)))return t.action={name:"drag",axis:"start"===i.lockAxis?i.startAxis:i.lockAxis},false}},draggable:function(t){return w.object(t)?(this.options.drag.enabled=false!==t.enabled,this.setPerAction("drag",t),this.setOnEvents("drag",t),/^(xy|x|y|start)$/.test(t.lockAxis)&&(this.options.drag.lockAxis=t.lockAxis),/^(xy|x|y)$/.test(t.startAxis)&&(this.options.drag.startAxis=t.startAxis),this):w.bool(t)?(this.options.drag.enabled=t,this):this.options.drag},beforeMove:E,move:T,defaults:{startAxis:"xy",lockAxis:"xy"},getCursor:function(){return "move"},filterEventType:function(t){return 0===t.search("drag")}},_=S,P={init:function(t){var e=t;P.document=e.document,P.DocumentFragment=e.DocumentFragment||O,P.SVGElement=e.SVGElement||O,P.SVGSVGElement=e.SVGSVGElement||O,P.SVGElementInstance=e.SVGElementInstance||O,P.Element=e.Element||O,P.HTMLElement=e.HTMLElement||P.Element,P.Event=e.Event,P.Touch=e.Touch||O,P.PointerEvent=e.PointerEvent||e.MSPointerEvent;},document:null,DocumentFragment:null,SVGElement:null,SVGSVGElement:null,SVGElementInstance:null,Element:null,HTMLElement:null,Event:null,Touch:null,PointerEvent:null};function O(){}var k=P;var D={init:function(t){var e=k.Element,n=t.navigator||{};D.supportsTouch="ontouchstart"in t||w.func(t.DocumentTouch)&&k.document instanceof t.DocumentTouch,D.supportsPointerEvent=false!==n.pointerEnabled&&!!k.PointerEvent,D.isIOS=/iP(hone|od|ad)/.test(n.platform),D.isIOS7=/iP(hone|od|ad)/.test(n.platform)&&/OS 7[^\d]/.test(n.appVersion),D.isIe9=/MSIE 9/.test(n.userAgent),D.isOperaMobile="Opera"===n.appName&&D.supportsTouch&&/Presto/.test(n.userAgent),D.prefixedMatchesSelector="matches"in e.prototype?"matches":"webkitMatchesSelector"in e.prototype?"webkitMatchesSelector":"mozMatchesSelector"in e.prototype?"mozMatchesSelector":"oMatchesSelector"in e.prototype?"oMatchesSelector":"msMatchesSelector",D.pEventTypes=D.supportsPointerEvent?k.PointerEvent===t.MSPointerEvent?{up:"MSPointerUp",down:"MSPointerDown",over:"mouseover",out:"mouseout",move:"MSPointerMove",cancel:"MSPointerCancel"}:{up:"pointerup",down:"pointerdown",over:"pointerover",out:"pointerout",move:"pointermove",cancel:"pointercancel"}:null,D.wheelEvent=k.document&&"onmousewheel"in k.document?"mousewheel":"wheel";},supportsTouch:null,supportsPointerEvent:null,isIOS7:null,isIOS:null,isIe9:null,isOperaMobile:null,prefixedMatchesSelector:null,pEventTypes:null,wheelEvent:null};var I=D;function M(t,e){if(t.contains)return t.contains(e);for(;e;){if(e===t)return  true;e=e.parentNode;}return  false}function z(t,e){for(;w.element(t);){if(R(t,e))return t;t=A(t);}return null}function A(t){var e=t.parentNode;if(w.docFrag(e)){for(;(e=e.host)&&w.docFrag(e););return e}return e}function R(t,e){return g!==v&&(e=e.replace(/\/deep\//g," ")),t[I.prefixedMatchesSelector](e)}var C=function(t){return t.parentNode||t.host};function j(t,e){for(var n,r=[],i=t;(n=C(i))&&i!==e&&n!==i.ownerDocument;)r.unshift(i),i=n;return r}function F(t,e,n){for(;w.element(t);){if(R(t,e))return  true;if((t=A(t))===n)return R(t,e)}return  false}function X(t){return t.correspondingUseElement||t}function Y(t){var e=t instanceof k.SVGElement?t.getBoundingClientRect():t.getClientRects()[0];return e&&{left:e.left,right:e.right,top:e.top,bottom:e.bottom,width:e.width||e.right-e.left,height:e.height||e.bottom-e.top}}function L(t){var e,n=Y(t);if(!I.isIOS7&&n){var r={x:(e=(e=y(t))||g).scrollX||e.document.documentElement.scrollLeft,y:e.scrollY||e.document.documentElement.scrollTop};n.left+=r.x,n.right+=r.x,n.top+=r.y,n.bottom+=r.y;}return n}function q(t){for(var e=[];t;)e.push(t),t=A(t);return e}function B(t){return !!w.string(t)&&(k.document.querySelector(t),true)}function V(t,e){for(var n in e)t[n]=e[n];return t}function W(t,e,n){return "parent"===t?A(n):"self"===t?e.getRect(n):z(n,t)}function G(t,e,n,r){var i=t;return w.string(i)?i=W(i,e,n):w.func(i)&&(i=i.apply(undefined,r)),w.element(i)&&(i=L(i)),i}function N(t){return t&&{x:"x"in t?t.x:t.left,y:"y"in t?t.y:t.top}}function U(t){return !t||"x"in t&&"y"in t||((t=V({},t)).x=t.left||0,t.y=t.top||0,t.width=t.width||(t.right||0)-t.x,t.height=t.height||(t.bottom||0)-t.y),t}function H(t,e,n){t.left&&(e.left+=n.x),t.right&&(e.right+=n.x),t.top&&(e.top+=n.y),t.bottom&&(e.bottom+=n.y),e.width=e.right-e.left,e.height=e.bottom-e.top;}function K(t,e,n){var r=n&&t.options[n];return N(G(r&&r.origin||t.options.origin,t,e,[t&&e]))||{x:0,y:0}}function $(t,e){var n=arguments.length>2&&undefined!==arguments[2]?arguments[2]:function(t){return  true},r=arguments.length>3?arguments[3]:undefined;if(r=r||{},w.string(t)&&-1!==t.search(" ")&&(t=J(t)),w.array(t))return t.forEach((function(t){return $(t,e,n,r)})),r;if(w.object(t)&&(e=t,t=""),w.func(e)&&n(t))r[t]=r[t]||[],r[t].push(e);else if(w.array(e))for(var i=0,o=e;i<o.length;i++){var a=o[i];$(t,a,n,r);}else if(w.object(e))for(var s in e){$(J(s).map((function(e){return "".concat(t).concat(e)})),e[s],n,r);}return r}function J(t){return t.trim().split(/ +/)}var Q=function(t,e){return Math.sqrt(t*t+e*e)},Z=["webkit","moz"];function tt(t,e){t.__set||(t.__set={});var n=function(n){if(Z.some((function(t){return 0===n.indexOf(t)})))return 1;"function"!=typeof t[n]&&"__set"!==n&&Object.defineProperty(t,n,{get:function(){return n in t.__set?t.__set[n]:t.__set[n]=e[n]},set:function(e){t.__set[n]=e;},configurable:true});};for(var r in e)n(r);return t}function et(t,e){t.page=t.page||{},t.page.x=e.page.x,t.page.y=e.page.y,t.client=t.client||{},t.client.x=e.client.x,t.client.y=e.client.y,t.timeStamp=e.timeStamp;}function nt(t){t.page.x=0,t.page.y=0,t.client.x=0,t.client.y=0;}function rt(t){return t instanceof k.Event||t instanceof k.Touch}function it(t,e,n){return t=t||"page",(n=n||{}).x=e[t+"X"],n.y=e[t+"Y"],n}function ot(t,e){return e=e||{x:0,y:0},I.isOperaMobile&&rt(t)?(it("screen",t,e),e.x+=window.scrollX,e.y+=window.scrollY):it("page",t,e),e}function at(t){return w.number(t.pointerId)?t.pointerId:t.identifier}function st(t,e,n){var r=e.length>1?lt(e):e[0];ot(r,t.page),function(t,e){e=e||{},I.isOperaMobile&&rt(t)?it("screen",t,e):it("client",t,e);}(r,t.client),t.timeStamp=n;}function ct(t){var e=[];return w.array(t)?(e[0]=t[0],e[1]=t[1]):"touchend"===t.type?1===t.touches.length?(e[0]=t.touches[0],e[1]=t.changedTouches[0]):0===t.touches.length&&(e[0]=t.changedTouches[0],e[1]=t.changedTouches[1]):(e[0]=t.touches[0],e[1]=t.touches[1]),e}function lt(t){for(var e={pageX:0,pageY:0,clientX:0,clientY:0,screenX:0,screenY:0},n=0;n<t.length;n++){var r=t[n];for(var i in e)e[i]+=r[i];}for(var o in e)e[o]/=t.length;return e}function ut(t){if(!t.length)return null;var e=ct(t),n=Math.min(e[0].pageX,e[1].pageX),r=Math.min(e[0].pageY,e[1].pageY),i=Math.max(e[0].pageX,e[1].pageX),o=Math.max(e[0].pageY,e[1].pageY);return {x:n,y:r,left:n,top:r,right:i,bottom:o,width:i-n,height:o-r}}function pt(t,e){var n=e+"X",r=e+"Y",i=ct(t),o=i[0][n]-i[1][n],a=i[0][r]-i[1][r];return Q(o,a)}function ft(t,e){var n=e+"X",r=e+"Y",i=ct(t),o=i[1][n]-i[0][n],a=i[1][r]-i[0][r];return 180*Math.atan2(a,o)/Math.PI}function dt(t){return w.string(t.pointerType)?t.pointerType:w.number(t.pointerType)?[undefined,undefined,"touch","pen","mouse"][t.pointerType]:/touch/.test(t.type||"")||t instanceof k.Touch?"touch":"mouse"}function ht(t){var e=w.func(t.composedPath)?t.composedPath():t.path;return [X(e?e[0]:t.target),X(t.currentTarget)]}var vt=function(){function t(e){r(this,t),this.immediatePropagationStopped=false,this.propagationStopped=false,this._interaction=e;}return o(t,[{key:"preventDefault",value:function(){}},{key:"stopPropagation",value:function(){this.propagationStopped=true;}},{key:"stopImmediatePropagation",value:function(){this.immediatePropagationStopped=this.propagationStopped=true;}}]),t}();Object.defineProperty(vt.prototype,"interaction",{get:function(){return this._interaction._proxy},set:function(){}});var gt=function(t,e){for(var n=0;n<e.length;n++){var r=e[n];t.push(r);}return t},mt=function(t){return gt([],t)},yt=function(t,e){for(var n=0;n<t.length;n++)if(e(t[n],n,t))return n;return  -1},bt=function(t,e){return t[yt(t,e)]},xt=function(t){s(n,t);var e=p(n);function n(t,i,o){var a;r(this,n),(a=e.call(this,i._interaction)).dropzone=undefined,a.dragEvent=undefined,a.relatedTarget=undefined,a.draggable=undefined,a.propagationStopped=false,a.immediatePropagationStopped=false;var s="dragleave"===o?t.prev:t.cur,c=s.element,l=s.dropzone;return a.type=o,a.target=c,a.currentTarget=c,a.dropzone=l,a.dragEvent=i,a.relatedTarget=i.target,a.draggable=i.interactable,a.timeStamp=i.timeStamp,a}return o(n,[{key:"reject",value:function(){var t=this,e=this._interaction.dropState;if("dropactivate"===this.type||this.dropzone&&e.cur.dropzone===this.dropzone&&e.cur.element===this.target)if(e.prev.dropzone=this.dropzone,e.prev.element=this.target,e.rejected=true,e.events.enter=null,this.stopImmediatePropagation(),"dropactivate"===this.type){var r=e.activeDrops,i=yt(r,(function(e){var n=e.dropzone,r=e.element;return n===t.dropzone&&r===t.target}));e.activeDrops.splice(i,1);var o=new n(e,this.dragEvent,"dropdeactivate");o.dropzone=this.dropzone,o.target=this.target,this.dropzone.fire(o);}else this.dropzone.fire(new n(e,this.dragEvent,"dragleave"));}},{key:"preventDefault",value:function(){}},{key:"stopPropagation",value:function(){this.propagationStopped=true;}},{key:"stopImmediatePropagation",value:function(){this.immediatePropagationStopped=this.propagationStopped=true;}}]),n}(vt);function wt(t,e){for(var n=0,r=t.slice();n<r.length;n++){var i=r[n],o=i.dropzone,a=i.element;e.dropzone=o,e.target=a,o.fire(e),e.propagationStopped=e.immediatePropagationStopped=false;}}function Et(t,e){for(var n=function(t,e){for(var n=[],r=0,i=t.interactables.list;r<i.length;r++){var o=i[r];if(o.options.drop.enabled){var a=o.options.drop.accept;if(!(w.element(a)&&a!==e||w.string(a)&&!R(e,a)||w.func(a)&&!a({dropzone:o,draggableElement:e})))for(var s=0,c=o.getAllElements();s<c.length;s++){var l=c[s];l!==e&&n.push({dropzone:o,element:l,rect:o.getRect(l)});}}}return n}(t,e),r=0;r<n.length;r++){var i=n[r];i.rect=i.dropzone.getRect(i.element);}return n}function Tt(t,e,n){for(var r=t.dropState,i=t.interactable,o=t.element,a=[],s=0,c=r.activeDrops;s<c.length;s++){var l=c[s],u=l.dropzone,p=l.element,f=l.rect,d=u.dropCheck(e,n,i,o,p,f);a.push(d?p:null);}var h=function(t){for(var e,n,r,i=[],o=0;o<t.length;o++){var a=t[o],s=t[e];if(a&&o!==e)if(s){var c=C(a),l=C(s);if(c!==a.ownerDocument)if(l!==a.ownerDocument)if(c!==l){i=i.length?i:j(s);var u=undefined;if(s instanceof k.HTMLElement&&a instanceof k.SVGElement&&!(a instanceof k.SVGSVGElement)){if(a===l)continue;u=a.ownerSVGElement;}else u=a;for(var p=j(u,s.ownerDocument),f=0;p[f]&&p[f]===i[f];)f++;var d=[p[f-1],p[f],i[f]];if(d[0])for(var h=d[0].lastChild;h;){if(h===d[1]){e=o,i=p;break}if(h===d[2])break;h=h.previousSibling;}}else r=s,(parseInt(y(n=a).getComputedStyle(n).zIndex,10)||0)>=(parseInt(y(r).getComputedStyle(r).zIndex,10)||0)&&(e=o);else e=o;}else e=o;}return e}(a);return r.activeDrops[h]||null}function St(t,e,n){var r=t.dropState,i={enter:null,leave:null,activate:null,deactivate:null,move:null,drop:null};return "dragstart"===n.type&&(i.activate=new xt(r,n,"dropactivate"),i.activate.target=null,i.activate.dropzone=null),"dragend"===n.type&&(i.deactivate=new xt(r,n,"dropdeactivate"),i.deactivate.target=null,i.deactivate.dropzone=null),r.rejected||(r.cur.element!==r.prev.element&&(r.prev.dropzone&&(i.leave=new xt(r,n,"dragleave"),n.dragLeave=i.leave.target=r.prev.element,n.prevDropzone=i.leave.dropzone=r.prev.dropzone),r.cur.dropzone&&(i.enter=new xt(r,n,"dragenter"),n.dragEnter=r.cur.element,n.dropzone=r.cur.dropzone)),"dragend"===n.type&&r.cur.dropzone&&(i.drop=new xt(r,n,"drop"),n.dropzone=r.cur.dropzone,n.relatedTarget=r.cur.element),"dragmove"===n.type&&r.cur.dropzone&&(i.move=new xt(r,n,"dropmove"),n.dropzone=r.cur.dropzone)),i}function _t(t,e){var n=t.dropState,r=n.activeDrops,i=n.cur,o=n.prev;e.leave&&o.dropzone.fire(e.leave),e.enter&&i.dropzone.fire(e.enter),e.move&&i.dropzone.fire(e.move),e.drop&&i.dropzone.fire(e.drop),e.deactivate&&wt(r,e.deactivate),n.prev.dropzone=i.dropzone,n.prev.element=i.element;}function Pt(t,e){var n=t.interaction,r=t.iEvent,i=t.event;if("dragmove"===r.type||"dragend"===r.type){var o=n.dropState;e.dynamicDrop&&(o.activeDrops=Et(e,n.element));var a=r,s=Tt(n,a,i);o.rejected=o.rejected&&!!s&&s.dropzone===o.cur.dropzone&&s.element===o.cur.element,o.cur.dropzone=s&&s.dropzone,o.cur.element=s&&s.element,o.events=St(n,0,a);}}var Ot={id:"actions/drop",install:function(t){var e=t.actions,n=t.interactStatic,r=t.Interactable,i=t.defaults;t.usePlugin(_),r.prototype.dropzone=function(t){return function(t,e){if(w.object(e)){if(t.options.drop.enabled=false!==e.enabled,e.listeners){var n=$(e.listeners),r=Object.keys(n).reduce((function(t,e){return t[/^(enter|leave)/.test(e)?"drag".concat(e):/^(activate|deactivate|move)/.test(e)?"drop".concat(e):e]=n[e],t}),{}),i=t.options.drop.listeners;i&&t.off(i),t.on(r),t.options.drop.listeners=r;}return w.func(e.ondrop)&&t.on("drop",e.ondrop),w.func(e.ondropactivate)&&t.on("dropactivate",e.ondropactivate),w.func(e.ondropdeactivate)&&t.on("dropdeactivate",e.ondropdeactivate),w.func(e.ondragenter)&&t.on("dragenter",e.ondragenter),w.func(e.ondragleave)&&t.on("dragleave",e.ondragleave),w.func(e.ondropmove)&&t.on("dropmove",e.ondropmove),/^(pointer|center)$/.test(e.overlap)?t.options.drop.overlap=e.overlap:w.number(e.overlap)&&(t.options.drop.overlap=Math.max(Math.min(1,e.overlap),0)),"accept"in e&&(t.options.drop.accept=e.accept),"checker"in e&&(t.options.drop.checker=e.checker),t}if(w.bool(e))return t.options.drop.enabled=e,t;return t.options.drop}(this,t)},r.prototype.dropCheck=function(t,e,n,r,i,o){return function(t,e,n,r,i,o,a){var s=false;if(!(a=a||t.getRect(o)))return !!t.options.drop.checker&&t.options.drop.checker(e,n,s,t,o,r,i);var c=t.options.drop.overlap;if("pointer"===c){var l=K(r,i,"drag"),u=ot(e);u.x+=l.x,u.y+=l.y;var p=u.x>a.left&&u.x<a.right,f=u.y>a.top&&u.y<a.bottom;s=p&&f;}var d=r.getRect(i);if(d&&"center"===c){var h=d.left+d.width/2,v=d.top+d.height/2;s=h>=a.left&&h<=a.right&&v>=a.top&&v<=a.bottom;}if(d&&w.number(c)){s=Math.max(0,Math.min(a.right,d.right)-Math.max(a.left,d.left))*Math.max(0,Math.min(a.bottom,d.bottom)-Math.max(a.top,d.top))/(d.width*d.height)>=c;}t.options.drop.checker&&(s=t.options.drop.checker(e,n,s,t,o,r,i));return s}(this,t,e,n,r,i,o)},n.dynamicDrop=function(e){return w.bool(e)?(t.dynamicDrop=e,n):t.dynamicDrop},V(e.phaselessTypes,{dragenter:true,dragleave:true,dropactivate:true,dropdeactivate:true,dropmove:true,drop:true}),e.methodDict.drop="dropzone",t.dynamicDrop=false,i.actions.drop=Ot.defaults;},listeners:{"interactions:before-action-start":function(t){var e=t.interaction;"drag"===e.prepared.name&&(e.dropState={cur:{dropzone:null,element:null},prev:{dropzone:null,element:null},rejected:null,events:null,activeDrops:[]});},"interactions:after-action-start":function(t,e){var n=t.interaction,r=(t.event,t.iEvent);if("drag"===n.prepared.name){var i=n.dropState;i.activeDrops=[],i.events={},i.activeDrops=Et(e,n.element),i.events=St(n,0,r),i.events.activate&&(wt(i.activeDrops,i.events.activate),e.fire("actions/drop:start",{interaction:n,dragEvent:r}));}},"interactions:action-move":Pt,"interactions:after-action-move":function(t,e){var n=t.interaction,r=t.iEvent;if("drag"===n.prepared.name){var i=n.dropState;_t(n,i.events),e.fire("actions/drop:move",{interaction:n,dragEvent:r}),i.events={};}},"interactions:action-end":function(t,e){if("drag"===t.interaction.prepared.name){var n=t.interaction,r=t.iEvent;Pt(t,e),_t(n,n.dropState.events),e.fire("actions/drop:end",{interaction:n,dragEvent:r});}},"interactions:stop":function(t){var e=t.interaction;if("drag"===e.prepared.name){var n=e.dropState;n&&(n.activeDrops=null,n.events=null,n.cur.dropzone=null,n.cur.element=null,n.prev.dropzone=null,n.prev.element=null,n.rejected=false);}}},getActiveDrops:Et,getDrop:Tt,getDropEvents:St,fireDropEvents:_t,filterEventType:function(t){return 0===t.search("drag")||0===t.search("drop")},defaults:{enabled:false,accept:null,overlap:"pointer"}},kt=Ot;function Dt(t){var e=t.interaction,n=t.iEvent,r=t.phase;if("gesture"===e.prepared.name){var i=e.pointers.map((function(t){return t.pointer})),o="start"===r,a="end"===r,s=e.interactable.options.deltaSource;if(n.touches=[i[0],i[1]],o)n.distance=pt(i,s),n.box=ut(i),n.scale=1,n.ds=0,n.angle=ft(i,s),n.da=0,e.gesture.startDistance=n.distance,e.gesture.startAngle=n.angle;else if(a||e.pointers.length<2){var c=e.prevEvent;n.distance=c.distance,n.box=c.box,n.scale=c.scale,n.ds=0,n.angle=c.angle,n.da=0;}else n.distance=pt(i,s),n.box=ut(i),n.scale=n.distance/e.gesture.startDistance,n.angle=ft(i,s),n.ds=n.scale-e.gesture.scale,n.da=n.angle-e.gesture.angle;e.gesture.distance=n.distance,e.gesture.angle=n.angle,w.number(n.scale)&&n.scale!==1/0&&!isNaN(n.scale)&&(e.gesture.scale=n.scale);}}var It={id:"actions/gesture",before:["actions/drag","actions/resize"],install:function(t){var e=t.actions,n=t.Interactable,r=t.defaults;n.prototype.gesturable=function(t){return w.object(t)?(this.options.gesture.enabled=false!==t.enabled,this.setPerAction("gesture",t),this.setOnEvents("gesture",t),this):w.bool(t)?(this.options.gesture.enabled=t,this):this.options.gesture},e.map.gesture=It,e.methodDict.gesture="gesturable",r.actions.gesture=It.defaults;},listeners:{"interactions:action-start":Dt,"interactions:action-move":Dt,"interactions:action-end":Dt,"interactions:new":function(t){t.interaction.gesture={angle:0,distance:0,scale:1,startAngle:0,startDistance:0};},"auto-start:check":function(t){if(!(t.interaction.pointers.length<2)){var e=t.interactable.options.gesture;if(e&&e.enabled)return t.action={name:"gesture"},false}}},defaults:{},getCursor:function(){return ""},filterEventType:function(t){return 0===t.search("gesture")}},Mt=It;function zt(t,e,n,r,i,o,a){if(!e)return  false;if(true===e){var s=w.number(o.width)?o.width:o.right-o.left,c=w.number(o.height)?o.height:o.bottom-o.top;if(a=Math.min(a,Math.abs(("left"===t||"right"===t?s:c)/2)),s<0&&("left"===t?t="right":"right"===t&&(t="left")),c<0&&("top"===t?t="bottom":"bottom"===t&&(t="top")),"left"===t){var l=s>=0?o.left:o.right;return n.x<l+a}if("top"===t){var u=c>=0?o.top:o.bottom;return n.y<u+a}if("right"===t)return n.x>(s>=0?o.right:o.left)-a;if("bottom"===t)return n.y>(c>=0?o.bottom:o.top)-a}return !!w.element(r)&&(w.element(e)?e===r:F(r,e,i))}function At(t){var e=t.iEvent,n=t.interaction;if("resize"===n.prepared.name&&n.resizeAxes){var r=e;n.interactable.options.resize.square?("y"===n.resizeAxes?r.delta.x=r.delta.y:r.delta.y=r.delta.x,r.axes="xy"):(r.axes=n.resizeAxes,"x"===n.resizeAxes?r.delta.y=0:"y"===n.resizeAxes&&(r.delta.x=0));}}var Rt,Ct,jt={id:"actions/resize",before:["actions/drag"],install:function(t){var e=t.actions,n=t.browser,r=t.Interactable,i=t.defaults;jt.cursors=function(t){return t.isIe9?{x:"e-resize",y:"s-resize",xy:"se-resize",top:"n-resize",left:"w-resize",bottom:"s-resize",right:"e-resize",topleft:"se-resize",bottomright:"se-resize",topright:"ne-resize",bottomleft:"ne-resize"}:{x:"ew-resize",y:"ns-resize",xy:"nwse-resize",top:"ns-resize",left:"ew-resize",bottom:"ns-resize",right:"ew-resize",topleft:"nwse-resize",bottomright:"nwse-resize",topright:"nesw-resize",bottomleft:"nesw-resize"}}(n),jt.defaultMargin=n.supportsTouch||n.supportsPointerEvent?20:10,r.prototype.resizable=function(e){return function(t,e,n){if(w.object(e))return t.options.resize.enabled=false!==e.enabled,t.setPerAction("resize",e),t.setOnEvents("resize",e),w.string(e.axis)&&/^x$|^y$|^xy$/.test(e.axis)?t.options.resize.axis=e.axis:null===e.axis&&(t.options.resize.axis=n.defaults.actions.resize.axis),w.bool(e.preserveAspectRatio)?t.options.resize.preserveAspectRatio=e.preserveAspectRatio:w.bool(e.square)&&(t.options.resize.square=e.square),t;if(w.bool(e))return t.options.resize.enabled=e,t;return t.options.resize}(this,e,t)},e.map.resize=jt,e.methodDict.resize="resizable",i.actions.resize=jt.defaults;},listeners:{"interactions:new":function(t){t.interaction.resizeAxes="xy";},"interactions:action-start":function(t){!function(t){var e=t.iEvent,n=t.interaction;if("resize"===n.prepared.name&&n.prepared.edges){var r=e,i=n.rect;n._rects={start:V({},i),corrected:V({},i),previous:V({},i),delta:{left:0,right:0,width:0,top:0,bottom:0,height:0}},r.edges=n.prepared.edges,r.rect=n._rects.corrected,r.deltaRect=n._rects.delta;}}(t),At(t);},"interactions:action-move":function(t){!function(t){var e=t.iEvent,n=t.interaction;if("resize"===n.prepared.name&&n.prepared.edges){var r=e,i=n.interactable.options.resize.invert,o="reposition"===i||"negate"===i,a=n.rect,s=n._rects,c=s.start,l=s.corrected,u=s.delta,p=s.previous;if(V(p,l),o){if(V(l,a),"reposition"===i){if(l.top>l.bottom){var f=l.top;l.top=l.bottom,l.bottom=f;}if(l.left>l.right){var d=l.left;l.left=l.right,l.right=d;}}}else l.top=Math.min(a.top,c.bottom),l.bottom=Math.max(a.bottom,c.top),l.left=Math.min(a.left,c.right),l.right=Math.max(a.right,c.left);for(var h in l.width=l.right-l.left,l.height=l.bottom-l.top,l)u[h]=l[h]-p[h];r.edges=n.prepared.edges,r.rect=l,r.deltaRect=u;}}(t),At(t);},"interactions:action-end":function(t){var e=t.iEvent,n=t.interaction;if("resize"===n.prepared.name&&n.prepared.edges){var r=e;r.edges=n.prepared.edges,r.rect=n._rects.corrected,r.deltaRect=n._rects.delta;}},"auto-start:check":function(t){var e=t.interaction,n=t.interactable,r=t.element,i=t.rect,o=t.buttons;if(i){var a=V({},e.coords.cur.page),s=n.options.resize;if(s&&s.enabled&&(!e.pointerIsDown||!/mouse|pointer/.test(e.pointerType)||0!=(o&s.mouseButtons))){if(w.object(s.edges)){var c={left:false,right:false,top:false,bottom:false};for(var l in c)c[l]=zt(l,s.edges[l],a,e._latestPointer.eventTarget,r,i,s.margin||jt.defaultMargin);c.left=c.left&&!c.right,c.top=c.top&&!c.bottom,(c.left||c.right||c.top||c.bottom)&&(t.action={name:"resize",edges:c});}else {var u="y"!==s.axis&&a.x>i.right-jt.defaultMargin,p="x"!==s.axis&&a.y>i.bottom-jt.defaultMargin;(u||p)&&(t.action={name:"resize",axes:(u?"x":"")+(p?"y":"")});}return !t.action&&undefined}}}},defaults:{square:false,preserveAspectRatio:false,axis:"xy",margin:NaN,edges:null,invert:"none"},cursors:null,getCursor:function(t){var e=t.edges,n=t.axis,r=t.name,i=jt.cursors,o=null;if(n)o=i[r+n];else if(e){for(var a="",s=0,c=["top","bottom","left","right"];s<c.length;s++){var l=c[s];e[l]&&(a+=l);}o=i[a];}return o},filterEventType:function(t){return 0===t.search("resize")},defaultMargin:null},Ft=jt,Xt={id:"actions",install:function(t){t.usePlugin(Mt),t.usePlugin(Ft),t.usePlugin(_),t.usePlugin(kt);}},Yt=0;var Lt={request:function(t){return Rt(t)},cancel:function(t){return Ct(t)},init:function(t){if(Rt=t.requestAnimationFrame,Ct=t.cancelAnimationFrame,!Rt)for(var e=["ms","moz","webkit","o"],n=0;n<e.length;n++){var r=e[n];Rt=t["".concat(r,"RequestAnimationFrame")],Ct=t["".concat(r,"CancelAnimationFrame")]||t["".concat(r,"CancelRequestAnimationFrame")];}Rt=Rt&&Rt.bind(t),Ct=Ct&&Ct.bind(t),Rt||(Rt=function(e){var n=Date.now(),r=Math.max(0,16-(n-Yt)),i=t.setTimeout((function(){e(n+r);}),r);return Yt=n+r,i},Ct=function(t){return clearTimeout(t)});}};var qt={defaults:{enabled:false,margin:60,container:null,speed:300},now:Date.now,interaction:null,i:0,x:0,y:0,isScrolling:false,prevTime:0,margin:0,speed:0,start:function(t){qt.isScrolling=true,Lt.cancel(qt.i),t.autoScroll=qt,qt.interaction=t,qt.prevTime=qt.now(),qt.i=Lt.request(qt.scroll);},stop:function(){qt.isScrolling=false,qt.interaction&&(qt.interaction.autoScroll=null),Lt.cancel(qt.i);},scroll:function(){var t=qt.interaction,e=t.interactable,n=t.element,r=t.prepared.name,i=e.options[r].autoScroll,o=Bt(i.container,e,n),a=qt.now(),s=(a-qt.prevTime)/1e3,c=i.speed*s;if(c>=1){var l={x:qt.x*c,y:qt.y*c};if(l.x||l.y){var u=Vt(o);w.window(o)?o.scrollBy(l.x,l.y):o&&(o.scrollLeft+=l.x,o.scrollTop+=l.y);var p=Vt(o),f={x:p.x-u.x,y:p.y-u.y};(f.x||f.y)&&e.fire({type:"autoscroll",target:n,interactable:e,delta:f,interaction:t,container:o});}qt.prevTime=a;}qt.isScrolling&&(Lt.cancel(qt.i),qt.i=Lt.request(qt.scroll));},check:function(t,e){var n;return null==(n=t.options[e].autoScroll)?undefined:n.enabled},onInteractionMove:function(t){var e=t.interaction,n=t.pointer;if(e.interacting()&&qt.check(e.interactable,e.prepared.name))if(e.simulation)qt.x=qt.y=0;else {var r,i,o,a,s=e.interactable,c=e.element,l=e.prepared.name,u=s.options[l].autoScroll,p=Bt(u.container,s,c);if(w.window(p))a=n.clientX<qt.margin,r=n.clientY<qt.margin,i=n.clientX>p.innerWidth-qt.margin,o=n.clientY>p.innerHeight-qt.margin;else {var f=Y(p);a=n.clientX<f.left+qt.margin,r=n.clientY<f.top+qt.margin,i=n.clientX>f.right-qt.margin,o=n.clientY>f.bottom-qt.margin;}qt.x=i?1:a?-1:0,qt.y=o?1:r?-1:0,qt.isScrolling||(qt.margin=u.margin,qt.speed=u.speed,qt.start(e));}}};function Bt(t,e,n){return (w.string(t)?W(t,e,n):t)||y(n)}function Vt(t){return w.window(t)&&(t=window.document.body),{x:t.scrollLeft,y:t.scrollTop}}var Wt={id:"auto-scroll",install:function(t){var e=t.defaults,n=t.actions;t.autoScroll=qt,qt.now=function(){return t.now()},n.phaselessTypes.autoscroll=true,e.perAction.autoScroll=qt.defaults;},listeners:{"interactions:new":function(t){t.interaction.autoScroll=null;},"interactions:destroy":function(t){t.interaction.autoScroll=null,qt.stop(),qt.interaction&&(qt.interaction=null);},"interactions:stop":qt.stop,"interactions:action-move":function(t){return qt.onInteractionMove(t)}}},Gt=Wt;function Nt(t,e){var n=false;return function(){return n||(g.console.warn(e),n=true),t.apply(this,arguments)}}function Ut(t,e){return t.name=e.name,t.axis=e.axis,t.edges=e.edges,t}function Ht(t){return w.bool(t)?(this.options.styleCursor=t,this):null===t?(delete this.options.styleCursor,this):this.options.styleCursor}function Kt(t){return w.func(t)?(this.options.actionChecker=t,this):null===t?(delete this.options.actionChecker,this):this.options.actionChecker}var $t={id:"auto-start/interactableMethods",install:function(t){var e=t.Interactable;e.prototype.getAction=function(e,n,r,i){var o=function(t,e,n,r,i){var o=t.getRect(r),a=e.buttons||{0:1,1:4,3:8,4:16}[e.button],s={action:null,interactable:t,interaction:n,element:r,rect:o,buttons:a};return i.fire("auto-start:check",s),s.action}(this,n,r,i,t);return this.options.actionChecker?this.options.actionChecker(e,n,o,this,i,r):o},e.prototype.ignoreFrom=Nt((function(t){return this._backCompatOption("ignoreFrom",t)}),"Interactable.ignoreFrom() has been deprecated. Use Interactble.draggable({ignoreFrom: newValue})."),e.prototype.allowFrom=Nt((function(t){return this._backCompatOption("allowFrom",t)}),"Interactable.allowFrom() has been deprecated. Use Interactble.draggable({allowFrom: newValue})."),e.prototype.actionChecker=Kt,e.prototype.styleCursor=Ht;}};function Jt(t,e,n,r,i){return e.testIgnoreAllow(e.options[t.name],n,r)&&e.options[t.name].enabled&&ee(e,n,t,i)?t:null}function Qt(t,e,n,r,i,o,a){for(var s=0,c=r.length;s<c;s++){var l=r[s],u=i[s],p=l.getAction(e,n,t,u);if(p){var f=Jt(p,l,u,o,a);if(f)return {action:f,interactable:l,element:u}}}return {action:null,interactable:null,element:null}}function Zt(t,e,n,r,i){var o=[],a=[],s=r;function c(t){o.push(t),a.push(s);}for(;w.element(s);){o=[],a=[],i.interactables.forEachMatch(s,c);var l=Qt(t,e,n,o,a,r,i);if(l.action&&!l.interactable.options[l.action.name].manualStart)return l;s=A(s);}return {action:null,interactable:null,element:null}}function te(t,e,n){var r=e.action,i=e.interactable,o=e.element;r=r||{name:null},t.interactable=i,t.element=o,Ut(t.prepared,r),t.rect=i&&r.name?i.getRect(o):null,ie(t,n),n.fire("autoStart:prepared",{interaction:t});}function ee(t,e,n,r){var i=t.options,o=i[n.name].max,a=i[n.name].maxPerElement,s=r.autoStart.maxInteractions,c=0,l=0,u=0;if(!(o&&a&&s))return  false;for(var p=0,f=r.interactions.list;p<f.length;p++){var d=f[p],h=d.prepared.name;if(d.interacting()){if(++c>=s)return  false;if(d.interactable===t){if((l+=h===n.name?1:0)>=o)return  false;if(d.element===e&&(u++,h===n.name&&u>=a))return  false}}}return s>0}function ne(t,e){return w.number(t)?(e.autoStart.maxInteractions=t,this):e.autoStart.maxInteractions}function re(t,e,n){var r=n.autoStart.cursorElement;r&&r!==t&&(r.style.cursor=""),t.ownerDocument.documentElement.style.cursor=e,t.style.cursor=e,n.autoStart.cursorElement=e?t:null;}function ie(t,e){var n=t.interactable,r=t.element,i=t.prepared;if("mouse"===t.pointerType&&n&&n.options.styleCursor){var o="";if(i.name){var a=n.options[i.name].cursorChecker;o=w.func(a)?a(i,n,r,t._interacting):e.actions.map[i.name].getCursor(i);}re(t.element,o||"",e);}else e.autoStart.cursorElement&&re(e.autoStart.cursorElement,"",e);}var oe={id:"auto-start/base",before:["actions"],install:function(t){var e=t.interactStatic,n=t.defaults;t.usePlugin($t),n.base.actionChecker=null,n.base.styleCursor=true,V(n.perAction,{manualStart:false,max:1/0,maxPerElement:1,allowFrom:null,ignoreFrom:null,mouseButtons:1}),e.maxInteractions=function(e){return ne(e,t)},t.autoStart={maxInteractions:1/0,withinInteractionLimit:ee,cursorElement:null};},listeners:{"interactions:down":function(t,e){var n=t.interaction,r=t.pointer,i=t.event,o=t.eventTarget;n.interacting()||te(n,Zt(n,r,i,o,e),e);},"interactions:move":function(t,e){!function(t,e){var n=t.interaction,r=t.pointer,i=t.event,o=t.eventTarget;"mouse"!==n.pointerType||n.pointerIsDown||n.interacting()||te(n,Zt(n,r,i,o,e),e);}(t,e),function(t,e){var n=t.interaction;if(n.pointerIsDown&&!n.interacting()&&n.pointerWasMoved&&n.prepared.name){e.fire("autoStart:before-start",t);var r=n.interactable,i=n.prepared.name;i&&r&&(r.options[i].manualStart||!ee(r,n.element,n.prepared,e)?n.stop():(n.start(n.prepared,r,n.element),ie(n,e)));}}(t,e);},"interactions:stop":function(t,e){var n=t.interaction,r=n.interactable;r&&r.options.styleCursor&&re(n.element,"",e);}},maxInteractions:ne,withinInteractionLimit:ee,validateAction:Jt},ae=oe;var se={id:"auto-start/dragAxis",listeners:{"autoStart:before-start":function(t,e){var n=t.interaction,r=t.eventTarget,i=t.dx,o=t.dy;if("drag"===n.prepared.name){var a=Math.abs(i),s=Math.abs(o),c=n.interactable.options.drag,l=c.startAxis,u=a>s?"x":a<s?"y":"xy";if(n.prepared.axis="start"===c.lockAxis?u[0]:c.lockAxis,"xy"!==u&&"xy"!==l&&l!==u){n.prepared.name=null;for(var p=r,f=function(t){if(t!==n.interactable){var i=n.interactable.options.drag;if(!i.manualStart&&t.testIgnoreAllow(i,p,r)){var o=t.getAction(n.downPointer,n.downEvent,n,p);if(o&&"drag"===o.name&&function(t,e){if(!e)return  false;var n=e.options.drag.startAxis;return "xy"===t||"xy"===n||n===t}(u,t)&&ae.validateAction(o,t,p,r,e))return t}}};w.element(p);){var d=e.interactables.forEachMatch(p,f);if(d){n.prepared.name="drag",n.interactable=d,n.element=p;break}p=A(p);}}}}}};function ce(t){var e=t.prepared&&t.prepared.name;if(!e)return null;var n=t.interactable.options;return n[e].hold||n[e].delay}var le={id:"auto-start/hold",install:function(t){var e=t.defaults;t.usePlugin(ae),e.perAction.hold=0,e.perAction.delay=0;},listeners:{"interactions:new":function(t){t.interaction.autoStartHoldTimer=null;},"autoStart:prepared":function(t){var e=t.interaction,n=ce(e);n>0&&(e.autoStartHoldTimer=setTimeout((function(){e.start(e.prepared,e.interactable,e.element);}),n));},"interactions:move":function(t){var e=t.interaction,n=t.duplicate;e.autoStartHoldTimer&&e.pointerWasMoved&&!n&&(clearTimeout(e.autoStartHoldTimer),e.autoStartHoldTimer=null);},"autoStart:before-start":function(t){var e=t.interaction;ce(e)>0&&(e.prepared.name=null);}},getHoldDuration:ce},ue=le,pe={id:"auto-start",install:function(t){t.usePlugin(ae),t.usePlugin(ue),t.usePlugin(se);}},fe=function(t){return /^(always|never|auto)$/.test(t)?(this.options.preventDefault=t,this):w.bool(t)?(this.options.preventDefault=t?"always":"never",this):this.options.preventDefault};function de(t){var e=t.interaction,n=t.event;e.interactable&&e.interactable.checkAndPreventDefault(n);}var he={id:"core/interactablePreventDefault",install:function(t){var e=t.Interactable;e.prototype.preventDefault=fe,e.prototype.checkAndPreventDefault=function(e){return function(t,e,n){var r=t.options.preventDefault;if("never"!==r)if("always"!==r){if(e.events.supportsPassive&&/^touch(start|move)$/.test(n.type)){var i=y(n.target).document,o=e.getDocOptions(i);if(!o||!o.events||false!==o.events.passive)return}/^(mouse|pointer|touch)*(down|start)/i.test(n.type)||w.element(n.target)&&R(n.target,"input,select,textarea,[contenteditable=true],[contenteditable=true] *")||n.preventDefault();}else n.preventDefault();}(this,t,e)},t.interactions.docEvents.push({type:"dragstart",listener:function(e){for(var n=0,r=t.interactions.list;n<r.length;n++){var i=r[n];if(i.element&&(i.element===e.target||M(i.element,e.target)))return void i.interactable.checkAndPreventDefault(e)}}});},listeners:["down","move","up","cancel"].reduce((function(t,e){return t["interactions:".concat(e)]=de,t}),{})};function ve(t,e){if(e.phaselessTypes[t])return  true;for(var n in e.map)if(0===t.indexOf(n)&&t.substr(n.length)in e.phases)return  true;return  false}function ge(t){var e={};for(var n in t){var r=t[n];w.plainObject(r)?e[n]=ge(r):w.array(r)?e[n]=mt(r):e[n]=r;}return e}var me=function(){function t(e){r(this,t),this.states=[],this.startOffset={left:0,right:0,top:0,bottom:0},this.startDelta=undefined,this.result=undefined,this.endResult=undefined,this.startEdges=undefined,this.edges=undefined,this.interaction=undefined,this.interaction=e,this.result=ye(),this.edges={left:false,right:false,top:false,bottom:false};}return o(t,[{key:"start",value:function(t,e){var n,r,i=t.phase,o=this.interaction,a=function(t){var e=t.interactable.options[t.prepared.name],n=e.modifiers;if(n&&n.length)return n;return ["snap","snapSize","snapEdges","restrict","restrictEdges","restrictSize"].map((function(t){var n=e[t];return n&&n.enabled&&{options:n,methods:n._methods}})).filter((function(t){return !!t}))}(o);this.prepareStates(a),this.startEdges=V({},o.edges),this.edges=V({},this.startEdges),this.startOffset=(n=o.rect,r=e,n?{left:r.x-n.left,top:r.y-n.top,right:n.right-r.x,bottom:n.bottom-r.y}:{left:0,top:0,right:0,bottom:0}),this.startDelta={x:0,y:0};var s=this.fillArg({phase:i,pageCoords:e,preEnd:false});return this.result=ye(),this.startAll(s),this.result=this.setAll(s)}},{key:"fillArg",value:function(t){var e=this.interaction;return t.interaction=e,t.interactable=e.interactable,t.element=e.element,t.rect||(t.rect=e.rect),t.edges||(t.edges=this.startEdges),t.startOffset=this.startOffset,t}},{key:"startAll",value:function(t){for(var e=0,n=this.states;e<n.length;e++){var r=n[e];r.methods.start&&(t.state=r,r.methods.start(t));}}},{key:"setAll",value:function(t){var e=t.phase,n=t.preEnd,r=t.skipModifiers,i=t.rect,o=t.edges;t.coords=V({},t.pageCoords),t.rect=V({},i),t.edges=V({},o);for(var a=r?this.states.slice(r):this.states,s=ye(t.coords,t.rect),c=0;c<a.length;c++){var l,u=a[c],p=u.options,f=V({},t.coords),d=null;null!=(l=u.methods)&&l.set&&this.shouldDo(p,n,e)&&(t.state=u,d=u.methods.set(t),H(t.edges,t.rect,{x:t.coords.x-f.x,y:t.coords.y-f.y})),s.eventProps.push(d);}V(this.edges,t.edges),s.delta.x=t.coords.x-t.pageCoords.x,s.delta.y=t.coords.y-t.pageCoords.y,s.rectDelta.left=t.rect.left-i.left,s.rectDelta.right=t.rect.right-i.right,s.rectDelta.top=t.rect.top-i.top,s.rectDelta.bottom=t.rect.bottom-i.bottom;var h=this.result.coords,v=this.result.rect;if(h&&v){var g=s.rect.left!==v.left||s.rect.right!==v.right||s.rect.top!==v.top||s.rect.bottom!==v.bottom;s.changed=g||h.x!==s.coords.x||h.y!==s.coords.y;}return s}},{key:"applyToInteraction",value:function(t){var e=this.interaction,n=t.phase,r=e.coords.cur,i=e.coords.start,o=this.result,a=this.startDelta,s=o.delta;"start"===n&&V(this.startDelta,o.delta);for(var c=0,l=[[i,a],[r,s]];c<l.length;c++){var u=l[c],p=u[0],f=u[1];p.page.x+=f.x,p.page.y+=f.y,p.client.x+=f.x,p.client.y+=f.y;}var d=this.result.rectDelta,h=t.rect||e.rect;h.left+=d.left,h.right+=d.right,h.top+=d.top,h.bottom+=d.bottom,h.width=h.right-h.left,h.height=h.bottom-h.top;}},{key:"setAndApply",value:function(t){var e=this.interaction,n=t.phase,r=t.preEnd,i=t.skipModifiers,o=this.setAll(this.fillArg({preEnd:r,phase:n,pageCoords:t.modifiedCoords||e.coords.cur.page}));if(this.result=o,!o.changed&&(!i||i<this.states.length)&&e.interacting())return  false;if(t.modifiedCoords){var a=e.coords.cur.page,s={x:t.modifiedCoords.x-a.x,y:t.modifiedCoords.y-a.y};o.coords.x+=s.x,o.coords.y+=s.y,o.delta.x+=s.x,o.delta.y+=s.y;}this.applyToInteraction(t);}},{key:"beforeEnd",value:function(t){var e=t.interaction,n=t.event,r=this.states;if(r&&r.length){for(var i=false,o=0;o<r.length;o++){var a=r[o];t.state=a;var s=a.options,c=a.methods,l=c.beforeEnd&&c.beforeEnd(t);if(l)return this.endResult=l,false;i=i||!i&&this.shouldDo(s,true,t.phase,true);}i&&e.move({event:n,preEnd:true});}}},{key:"stop",value:function(t){var e=t.interaction;if(this.states&&this.states.length){var n=V({states:this.states,interactable:e.interactable,element:e.element,rect:null},t);this.fillArg(n);for(var r=0,i=this.states;r<i.length;r++){var o=i[r];n.state=o,o.methods.stop&&o.methods.stop(n);}this.states=null,this.endResult=null;}}},{key:"prepareStates",value:function(t){this.states=[];for(var e=0;e<t.length;e++){var n=t[e],r=n.options,i=n.methods,o=n.name;this.states.push({options:r,methods:i,index:e,name:o});}return this.states}},{key:"restoreInteractionCoords",value:function(t){var e=t.interaction,n=e.coords,r=e.rect,i=e.modification;if(i.result){for(var o=i.startDelta,a=i.result,s=a.delta,c=a.rectDelta,l=0,u=[[n.start,o],[n.cur,s]];l<u.length;l++){var p=u[l],f=p[0],d=p[1];f.page.x-=d.x,f.page.y-=d.y,f.client.x-=d.x,f.client.y-=d.y;}r.left-=c.left,r.right-=c.right,r.top-=c.top,r.bottom-=c.bottom;}}},{key:"shouldDo",value:function(t,e,n,r){return !(!t||false===t.enabled||r&&!t.endOnly||t.endOnly&&!e||"start"===n&&!t.setStart)}},{key:"copyFrom",value:function(t){this.startOffset=t.startOffset,this.startDelta=t.startDelta,this.startEdges=t.startEdges,this.edges=t.edges,this.states=t.states.map((function(t){return ge(t)})),this.result=ye(V({},t.result.coords),V({},t.result.rect));}},{key:"destroy",value:function(){for(var t in this)this[t]=null;}}]),t}();function ye(t,e){return {rect:e,coords:t,delta:{x:0,y:0},rectDelta:{left:0,right:0,top:0,bottom:0},eventProps:[],changed:true}}function be(t,e){var n=t.defaults,r={start:t.start,set:t.set,beforeEnd:t.beforeEnd,stop:t.stop},i=function(t){var i=t||{};for(var o in i.enabled=false!==i.enabled,n)o in i||(i[o]=n[o]);var a={options:i,methods:r,name:e,enable:function(){return i.enabled=true,a},disable:function(){return i.enabled=false,a}};return a};return e&&"string"==typeof e&&(i._defaults=n,i._methods=r),i}function xe(t){var e=t.iEvent,n=t.interaction.modification.result;n&&(e.modifiers=n.eventProps);}var we={id:"modifiers/base",before:["actions"],install:function(t){t.defaults.perAction.modifiers=[];},listeners:{"interactions:new":function(t){var e=t.interaction;e.modification=new me(e);},"interactions:before-action-start":function(t){var e=t.interaction,n=t.interaction.modification;n.start(t,e.coords.start.page),e.edges=n.edges,n.applyToInteraction(t);},"interactions:before-action-move":function(t){var e=t.interaction,n=e.modification,r=n.setAndApply(t);return e.edges=n.edges,r},"interactions:before-action-end":function(t){var e=t.interaction,n=e.modification,r=n.beforeEnd(t);return e.edges=n.startEdges,r},"interactions:action-start":xe,"interactions:action-move":xe,"interactions:action-end":xe,"interactions:after-action-start":function(t){return t.interaction.modification.restoreInteractionCoords(t)},"interactions:after-action-move":function(t){return t.interaction.modification.restoreInteractionCoords(t)},"interactions:stop":function(t){return t.interaction.modification.stop(t)}}},Ee=we,Te={base:{preventDefault:"auto",deltaSource:"page"},perAction:{enabled:false,origin:{x:0,y:0}},actions:{}},Se=function(t){s(n,t);var e=p(n);function n(t,i,o,a,s,c,l){var p;r(this,n),(p=e.call(this,t)).relatedTarget=null,p.screenX=undefined,p.screenY=undefined,p.button=undefined,p.buttons=undefined,p.ctrlKey=undefined,p.shiftKey=undefined,p.altKey=undefined,p.metaKey=undefined,p.page=undefined,p.client=undefined,p.delta=undefined,p.rect=undefined,p.x0=undefined,p.y0=undefined,p.t0=undefined,p.dt=undefined,p.duration=undefined,p.clientX0=undefined,p.clientY0=undefined,p.velocity=undefined,p.speed=undefined,p.swipe=undefined,p.axes=undefined,p.preEnd=undefined,s=s||t.element;var f=t.interactable,d=(f&&f.options||Te).deltaSource,h=K(f,s,o),v="start"===a,g="end"===a,m=v?u(p):t.prevEvent,y=v?t.coords.start:g?{page:m.page,client:m.client,timeStamp:t.coords.cur.timeStamp}:t.coords.cur;return p.page=V({},y.page),p.client=V({},y.client),p.rect=V({},t.rect),p.timeStamp=y.timeStamp,g||(p.page.x-=h.x,p.page.y-=h.y,p.client.x-=h.x,p.client.y-=h.y),p.ctrlKey=i.ctrlKey,p.altKey=i.altKey,p.shiftKey=i.shiftKey,p.metaKey=i.metaKey,p.button=i.button,p.buttons=i.buttons,p.target=s,p.currentTarget=s,p.preEnd=c,p.type=l||o+(a||""),p.interactable=f,p.t0=v?t.pointers[t.pointers.length-1].downTime:m.t0,p.x0=t.coords.start.page.x-h.x,p.y0=t.coords.start.page.y-h.y,p.clientX0=t.coords.start.client.x-h.x,p.clientY0=t.coords.start.client.y-h.y,p.delta=v||g?{x:0,y:0}:{x:p[d].x-m[d].x,y:p[d].y-m[d].y},p.dt=t.coords.delta.timeStamp,p.duration=p.timeStamp-p.t0,p.velocity=V({},t.coords.velocity[d]),p.speed=Q(p.velocity.x,p.velocity.y),p.swipe=g||"inertiastart"===a?p.getSwipe():null,p}return o(n,[{key:"getSwipe",value:function(){var t=this._interaction;if(t.prevEvent.speed<600||this.timeStamp-t.prevEvent.timeStamp>150)return null;var e=180*Math.atan2(t.prevEvent.velocityY,t.prevEvent.velocityX)/Math.PI;e<0&&(e+=360);var n=112.5<=e&&e<247.5,r=202.5<=e&&e<337.5;return {up:r,down:!r&&22.5<=e&&e<157.5,left:n,right:!n&&(292.5<=e||e<67.5),angle:e,speed:t.prevEvent.speed,velocity:{x:t.prevEvent.velocityX,y:t.prevEvent.velocityY}}}},{key:"preventDefault",value:function(){}},{key:"stopImmediatePropagation",value:function(){this.immediatePropagationStopped=this.propagationStopped=true;}},{key:"stopPropagation",value:function(){this.propagationStopped=true;}}]),n}(vt);Object.defineProperties(Se.prototype,{pageX:{get:function(){return this.page.x},set:function(t){this.page.x=t;}},pageY:{get:function(){return this.page.y},set:function(t){this.page.y=t;}},clientX:{get:function(){return this.client.x},set:function(t){this.client.x=t;}},clientY:{get:function(){return this.client.y},set:function(t){this.client.y=t;}},dx:{get:function(){return this.delta.x},set:function(t){this.delta.x=t;}},dy:{get:function(){return this.delta.y},set:function(t){this.delta.y=t;}},velocityX:{get:function(){return this.velocity.x},set:function(t){this.velocity.x=t;}},velocityY:{get:function(){return this.velocity.y},set:function(t){this.velocity.y=t;}}});var _e=o((function t(e,n,i,o,a){r(this,t),this.id=undefined,this.pointer=undefined,this.event=undefined,this.downTime=undefined,this.downTarget=undefined,this.id=e,this.pointer=n,this.event=i,this.downTime=o,this.downTarget=a;})),Pe=function(t){return t.interactable="",t.element="",t.prepared="",t.pointerIsDown="",t.pointerWasMoved="",t._proxy="",t}({}),Oe=function(t){return t.start="",t.move="",t.end="",t.stop="",t.interacting="",t}({}),ke=0,De=function(){function t(e){var n=this,i=e.pointerType,o=e.scopeFire;r(this,t),this.interactable=null,this.element=null,this.rect=null,this._rects=undefined,this.edges=null,this._scopeFire=undefined,this.prepared={name:null,axis:null,edges:null},this.pointerType=undefined,this.pointers=[],this.downEvent=null,this.downPointer={},this._latestPointer={pointer:null,event:null,eventTarget:null},this.prevEvent=null,this.pointerIsDown=false,this.pointerWasMoved=false,this._interacting=false,this._ending=false,this._stopped=true,this._proxy=undefined,this.simulation=null,this.doMove=Nt((function(t){this.move(t);}),"The interaction.doMove() method has been renamed to interaction.move()"),this.coords={start:{page:{x:0,y:0},client:{x:0,y:0},timeStamp:0},prev:{page:{x:0,y:0},client:{x:0,y:0},timeStamp:0},cur:{page:{x:0,y:0},client:{x:0,y:0},timeStamp:0},delta:{page:{x:0,y:0},client:{x:0,y:0},timeStamp:0},velocity:{page:{x:0,y:0},client:{x:0,y:0},timeStamp:0}},this._id=ke++,this._scopeFire=o,this.pointerType=i;var a=this;this._proxy={};var s=function(t){Object.defineProperty(n._proxy,t,{get:function(){return a[t]}});};for(var c in Pe)s(c);var l=function(t){Object.defineProperty(n._proxy,t,{value:function(){return a[t].apply(a,arguments)}});};for(var u in Oe)l(u);this._scopeFire("interactions:new",{interaction:this});}return o(t,[{key:"pointerMoveTolerance",get:function(){return 1}},{key:"pointerDown",value:function(t,e,n){var r=this.updatePointer(t,e,n,true),i=this.pointers[r];this._scopeFire("interactions:down",{pointer:t,event:e,eventTarget:n,pointerIndex:r,pointerInfo:i,type:"down",interaction:this});}},{key:"start",value:function(t,e,n){return !(this.interacting()||!this.pointerIsDown||this.pointers.length<("gesture"===t.name?2:1)||!e.options[t.name].enabled)&&(Ut(this.prepared,t),this.interactable=e,this.element=n,this.rect=e.getRect(n),this.edges=this.prepared.edges?V({},this.prepared.edges):{left:true,right:true,top:true,bottom:true},this._stopped=false,this._interacting=this._doPhase({interaction:this,event:this.downEvent,phase:"start"})&&!this._stopped,this._interacting)}},{key:"pointerMove",value:function(t,e,n){this.simulation||this.modification&&this.modification.endResult||this.updatePointer(t,e,n,false);var r,i,o=this.coords.cur.page.x===this.coords.prev.page.x&&this.coords.cur.page.y===this.coords.prev.page.y&&this.coords.cur.client.x===this.coords.prev.client.x&&this.coords.cur.client.y===this.coords.prev.client.y;this.pointerIsDown&&!this.pointerWasMoved&&(r=this.coords.cur.client.x-this.coords.start.client.x,i=this.coords.cur.client.y-this.coords.start.client.y,this.pointerWasMoved=Q(r,i)>this.pointerMoveTolerance);var a,s,c,l=this.getPointerIndex(t),u={pointer:t,pointerIndex:l,pointerInfo:this.pointers[l],event:e,type:"move",eventTarget:n,dx:r,dy:i,duplicate:o,interaction:this};o||(a=this.coords.velocity,s=this.coords.delta,c=Math.max(s.timeStamp/1e3,.001),a.page.x=s.page.x/c,a.page.y=s.page.y/c,a.client.x=s.client.x/c,a.client.y=s.client.y/c,a.timeStamp=c),this._scopeFire("interactions:move",u),o||this.simulation||(this.interacting()&&(u.type=null,this.move(u)),this.pointerWasMoved&&et(this.coords.prev,this.coords.cur));}},{key:"move",value:function(t){t&&t.event||nt(this.coords.delta),(t=V({pointer:this._latestPointer.pointer,event:this._latestPointer.event,eventTarget:this._latestPointer.eventTarget,interaction:this},t||{})).phase="move",this._doPhase(t);}},{key:"pointerUp",value:function(t,e,n,r){var i=this.getPointerIndex(t);-1===i&&(i=this.updatePointer(t,e,n,false));var o=/cancel$/i.test(e.type)?"cancel":"up";this._scopeFire("interactions:".concat(o),{pointer:t,pointerIndex:i,pointerInfo:this.pointers[i],event:e,eventTarget:n,type:o,curEventTarget:r,interaction:this}),this.simulation||this.end(e),this.removePointer(t,e);}},{key:"documentBlur",value:function(t){this.end(t),this._scopeFire("interactions:blur",{event:t,type:"blur",interaction:this});}},{key:"end",value:function(t){var e;this._ending=true,t=t||this._latestPointer.event,this.interacting()&&(e=this._doPhase({event:t,interaction:this,phase:"end"})),this._ending=false,true===e&&this.stop();}},{key:"currentAction",value:function(){return this._interacting?this.prepared.name:null}},{key:"interacting",value:function(){return this._interacting}},{key:"stop",value:function(){this._scopeFire("interactions:stop",{interaction:this}),this.interactable=this.element=null,this._interacting=false,this._stopped=true,this.prepared.name=this.prevEvent=null;}},{key:"getPointerIndex",value:function(t){var e=at(t);return "mouse"===this.pointerType||"pen"===this.pointerType?this.pointers.length-1:yt(this.pointers,(function(t){return t.id===e}))}},{key:"getPointerInfo",value:function(t){return this.pointers[this.getPointerIndex(t)]}},{key:"updatePointer",value:function(t,e,n,r){var i,o,a,s=at(t),c=this.getPointerIndex(t),l=this.pointers[c];return r=false!==r&&(r||/(down|start)$/i.test(e.type)),l?l.pointer=t:(l=new _e(s,t,e,null,null),c=this.pointers.length,this.pointers.push(l)),st(this.coords.cur,this.pointers.map((function(t){return t.pointer})),this._now()),i=this.coords.delta,o=this.coords.prev,a=this.coords.cur,i.page.x=a.page.x-o.page.x,i.page.y=a.page.y-o.page.y,i.client.x=a.client.x-o.client.x,i.client.y=a.client.y-o.client.y,i.timeStamp=a.timeStamp-o.timeStamp,r&&(this.pointerIsDown=true,l.downTime=this.coords.cur.timeStamp,l.downTarget=n,tt(this.downPointer,t),this.interacting()||(et(this.coords.start,this.coords.cur),et(this.coords.prev,this.coords.cur),this.downEvent=e,this.pointerWasMoved=false)),this._updateLatestPointer(t,e,n),this._scopeFire("interactions:update-pointer",{pointer:t,event:e,eventTarget:n,down:r,pointerInfo:l,pointerIndex:c,interaction:this}),c}},{key:"removePointer",value:function(t,e){var n=this.getPointerIndex(t);if(-1!==n){var r=this.pointers[n];this._scopeFire("interactions:remove-pointer",{pointer:t,event:e,eventTarget:null,pointerIndex:n,pointerInfo:r,interaction:this}),this.pointers.splice(n,1),this.pointerIsDown=false;}}},{key:"_updateLatestPointer",value:function(t,e,n){this._latestPointer.pointer=t,this._latestPointer.event=e,this._latestPointer.eventTarget=n;}},{key:"destroy",value:function(){this._latestPointer.pointer=null,this._latestPointer.event=null,this._latestPointer.eventTarget=null;}},{key:"_createPreparedEvent",value:function(t,e,n,r){return new Se(this,t,this.prepared.name,e,this.element,n,r)}},{key:"_fireEvent",value:function(t){var e;null==(e=this.interactable)||e.fire(t),(!this.prevEvent||t.timeStamp>=this.prevEvent.timeStamp)&&(this.prevEvent=t);}},{key:"_doPhase",value:function(t){var e=t.event,n=t.phase,r=t.preEnd,i=t.type,o=this.rect;if(o&&"move"===n&&(H(this.edges,o,this.coords.delta[this.interactable.options.deltaSource]),o.width=o.right-o.left,o.height=o.bottom-o.top),false===this._scopeFire("interactions:before-action-".concat(n),t))return  false;var a=t.iEvent=this._createPreparedEvent(e,n,r,i);return this._scopeFire("interactions:action-".concat(n),t),"start"===n&&(this.prevEvent=a),this._fireEvent(a),this._scopeFire("interactions:after-action-".concat(n),t),true}},{key:"_now",value:function(){return Date.now()}}]),t}();function Ie(t){Me(t.interaction);}function Me(t){if(!function(t){return !(!t.offset.pending.x&&!t.offset.pending.y)}(t))return  false;var e=t.offset.pending;return Ae(t.coords.cur,e),Ae(t.coords.delta,e),H(t.edges,t.rect,e),e.x=0,e.y=0,true}function ze(t){var e=t.x,n=t.y;this.offset.pending.x+=e,this.offset.pending.y+=n,this.offset.total.x+=e,this.offset.total.y+=n;}function Ae(t,e){var n=t.page,r=t.client,i=e.x,o=e.y;n.x+=i,n.y+=o,r.x+=i,r.y+=o;}Oe.offsetBy="";var Re={id:"offset",before:["modifiers","pointer-events","actions","inertia"],install:function(t){t.Interaction.prototype.offsetBy=ze;},listeners:{"interactions:new":function(t){t.interaction.offset={total:{x:0,y:0},pending:{x:0,y:0}};},"interactions:update-pointer":function(t){return function(t){t.pointerIsDown&&(Ae(t.coords.cur,t.offset.total),t.offset.pending.x=0,t.offset.pending.y=0);}(t.interaction)},"interactions:before-action-start":Ie,"interactions:before-action-move":Ie,"interactions:before-action-end":function(t){var e=t.interaction;if(Me(e))return e.move({offset:true}),e.end(),false},"interactions:stop":function(t){var e=t.interaction;e.offset.total.x=0,e.offset.total.y=0,e.offset.pending.x=0,e.offset.pending.y=0;}}},Ce=Re;var je=function(){function t(e){r(this,t),this.active=false,this.isModified=false,this.smoothEnd=false,this.allowResume=false,this.modification=undefined,this.modifierCount=0,this.modifierArg=undefined,this.startCoords=undefined,this.t0=0,this.v0=0,this.te=0,this.targetOffset=undefined,this.modifiedOffset=undefined,this.currentOffset=undefined,this.lambda_v0=0,this.one_ve_v0=0,this.timeout=undefined,this.interaction=undefined,this.interaction=e;}return o(t,[{key:"start",value:function(t){var e=this.interaction,n=Fe(e);if(!n||!n.enabled)return  false;var r=e.coords.velocity.client,i=Q(r.x,r.y),o=this.modification||(this.modification=new me(e));if(o.copyFrom(e.modification),this.t0=e._now(),this.allowResume=n.allowResume,this.v0=i,this.currentOffset={x:0,y:0},this.startCoords=e.coords.cur.page,this.modifierArg=o.fillArg({pageCoords:this.startCoords,preEnd:true,phase:"inertiastart"}),this.t0-e.coords.cur.timeStamp<50&&i>n.minSpeed&&i>n.endSpeed)this.startInertia();else {if(o.result=o.setAll(this.modifierArg),!o.result.changed)return  false;this.startSmoothEnd();}return e.modification.result.rect=null,e.offsetBy(this.targetOffset),e._doPhase({interaction:e,event:t,phase:"inertiastart"}),e.offsetBy({x:-this.targetOffset.x,y:-this.targetOffset.y}),e.modification.result.rect=null,this.active=true,e.simulation=this,true}},{key:"startInertia",value:function(){var t=this,e=this.interaction.coords.velocity.client,n=Fe(this.interaction),r=n.resistance,i=-Math.log(n.endSpeed/this.v0)/r;this.targetOffset={x:(e.x-i)/r,y:(e.y-i)/r},this.te=i,this.lambda_v0=r/this.v0,this.one_ve_v0=1-n.endSpeed/this.v0;var o=this.modification,a=this.modifierArg;a.pageCoords={x:this.startCoords.x+this.targetOffset.x,y:this.startCoords.y+this.targetOffset.y},o.result=o.setAll(a),o.result.changed&&(this.isModified=true,this.modifiedOffset={x:this.targetOffset.x+o.result.delta.x,y:this.targetOffset.y+o.result.delta.y}),this.onNextFrame((function(){return t.inertiaTick()}));}},{key:"startSmoothEnd",value:function(){var t=this;this.smoothEnd=true,this.isModified=true,this.targetOffset={x:this.modification.result.delta.x,y:this.modification.result.delta.y},this.onNextFrame((function(){return t.smoothEndTick()}));}},{key:"onNextFrame",value:function(t){var e=this;this.timeout=Lt.request((function(){e.active&&t();}));}},{key:"inertiaTick",value:function(){var t,e,n,r,i,o,a,s=this,c=this.interaction,l=Fe(c).resistance,u=(c._now()-this.t0)/1e3;if(u<this.te){var p,f=1-(Math.exp(-l*u)-this.lambda_v0)/this.one_ve_v0;this.isModified?(t=0,e=0,n=this.targetOffset.x,r=this.targetOffset.y,i=this.modifiedOffset.x,o=this.modifiedOffset.y,p={x:Ye(a=f,t,n,i),y:Ye(a,e,r,o)}):p={x:this.targetOffset.x*f,y:this.targetOffset.y*f};var d={x:p.x-this.currentOffset.x,y:p.y-this.currentOffset.y};this.currentOffset.x+=d.x,this.currentOffset.y+=d.y,c.offsetBy(d),c.move(),this.onNextFrame((function(){return s.inertiaTick()}));}else c.offsetBy({x:this.modifiedOffset.x-this.currentOffset.x,y:this.modifiedOffset.y-this.currentOffset.y}),this.end();}},{key:"smoothEndTick",value:function(){var t=this,e=this.interaction,n=e._now()-this.t0,r=Fe(e).smoothEndDuration;if(n<r){var i={x:Le(n,0,this.targetOffset.x,r),y:Le(n,0,this.targetOffset.y,r)},o={x:i.x-this.currentOffset.x,y:i.y-this.currentOffset.y};this.currentOffset.x+=o.x,this.currentOffset.y+=o.y,e.offsetBy(o),e.move({skipModifiers:this.modifierCount}),this.onNextFrame((function(){return t.smoothEndTick()}));}else e.offsetBy({x:this.targetOffset.x-this.currentOffset.x,y:this.targetOffset.y-this.currentOffset.y}),this.end();}},{key:"resume",value:function(t){var e=t.pointer,n=t.event,r=t.eventTarget,i=this.interaction;i.offsetBy({x:-this.currentOffset.x,y:-this.currentOffset.y}),i.updatePointer(e,n,r,true),i._doPhase({interaction:i,event:n,phase:"resume"}),et(i.coords.prev,i.coords.cur),this.stop();}},{key:"end",value:function(){this.interaction.move(),this.interaction.end(),this.stop();}},{key:"stop",value:function(){this.active=this.smoothEnd=false,this.interaction.simulation=null,Lt.cancel(this.timeout);}}]),t}();function Fe(t){var e=t.interactable,n=t.prepared;return e&&e.options&&n.name&&e.options[n.name].inertia}var Xe={id:"inertia",before:["modifiers","actions"],install:function(t){var e=t.defaults;t.usePlugin(Ce),t.usePlugin(Ee),t.actions.phases.inertiastart=true,t.actions.phases.resume=true,e.perAction.inertia={enabled:false,resistance:10,minSpeed:100,endSpeed:10,allowResume:true,smoothEndDuration:300};},listeners:{"interactions:new":function(t){var e=t.interaction;e.inertia=new je(e);},"interactions:before-action-end":function(t){var e=t.interaction,n=t.event;return (!e._interacting||e.simulation||!e.inertia.start(n))&&null},"interactions:down":function(t){var e=t.interaction,n=t.eventTarget,r=e.inertia;if(r.active)for(var i=n;w.element(i);){if(i===e.element){r.resume(t);break}i=A(i);}},"interactions:stop":function(t){var e=t.interaction.inertia;e.active&&e.stop();},"interactions:before-action-resume":function(t){var e=t.interaction.modification;e.stop(t),e.start(t,t.interaction.coords.cur.page),e.applyToInteraction(t);},"interactions:before-action-inertiastart":function(t){return t.interaction.modification.setAndApply(t)},"interactions:action-resume":xe,"interactions:action-inertiastart":xe,"interactions:after-action-inertiastart":function(t){return t.interaction.modification.restoreInteractionCoords(t)},"interactions:after-action-resume":function(t){return t.interaction.modification.restoreInteractionCoords(t)}}};function Ye(t,e,n,r){var i=1-t;return i*i*e+2*i*t*n+t*t*r}function Le(t,e,n,r){return -n*(t/=r)*(t-2)+e}var qe=Xe;function Be(t,e){for(var n=0;n<e.length;n++){var r=e[n];if(t.immediatePropagationStopped)break;r(t);}}var Ve=function(){function t(e){r(this,t),this.options=undefined,this.types={},this.propagationStopped=false,this.immediatePropagationStopped=false,this.global=undefined,this.options=V({},e||{});}return o(t,[{key:"fire",value:function(t){var e,n=this.global;(e=this.types[t.type])&&Be(t,e),!t.propagationStopped&&n&&(e=n[t.type])&&Be(t,e);}},{key:"on",value:function(t,e){var n=$(t,e);for(t in n)this.types[t]=gt(this.types[t]||[],n[t]);}},{key:"off",value:function(t,e){var n=$(t,e);for(t in n){var r=this.types[t];if(r&&r.length)for(var i=0,o=n[t];i<o.length;i++){var a=o[i],s=r.indexOf(a);-1!==s&&r.splice(s,1);}}}},{key:"getRect",value:function(t){return null}}]),t}();var We=function(){function t(e){r(this,t),this.currentTarget=undefined,this.originalEvent=undefined,this.type=undefined,this.originalEvent=e,tt(this,e);}return o(t,[{key:"preventOriginalDefault",value:function(){this.originalEvent.preventDefault();}},{key:"stopPropagation",value:function(){this.originalEvent.stopPropagation();}},{key:"stopImmediatePropagation",value:function(){this.originalEvent.stopImmediatePropagation();}}]),t}();function Ge(t){return w.object(t)?{capture:!!t.capture,passive:!!t.passive}:{capture:!!t,passive:false}}function Ne(t,e){return t===e||("boolean"==typeof t?!!e.capture===t&&false==!!e.passive:!!t.capture==!!e.capture&&!!t.passive==!!e.passive)}var Ue={id:"events",install:function(t){var e,n=[],r={},i=[],o={add:a,remove:s,addDelegate:function(t,e,n,o,s){var u=Ge(s);if(!r[n]){r[n]=[];for(var p=0;p<i.length;p++){var f=i[p];a(f,n,c),a(f,n,l,true);}}var d=r[n],h=bt(d,(function(n){return n.selector===t&&n.context===e}));h||(h={selector:t,context:e,listeners:[]},d.push(h));h.listeners.push({func:o,options:u});},removeDelegate:function(t,e,n,i,o){var a,u=Ge(o),p=r[n],f=false;if(!p)return;for(a=p.length-1;a>=0;a--){var d=p[a];if(d.selector===t&&d.context===e){for(var h=d.listeners,v=h.length-1;v>=0;v--){var g=h[v];if(g.func===i&&Ne(g.options,u)){h.splice(v,1),h.length||(p.splice(a,1),s(e,n,c),s(e,n,l,true)),f=true;break}}if(f)break}}},delegateListener:c,delegateUseCapture:l,delegatedEvents:r,documents:i,targets:n,supportsOptions:false,supportsPassive:false};function a(t,e,r,i){if(t.addEventListener){var a=Ge(i),s=bt(n,(function(e){return e.eventTarget===t}));s||(s={eventTarget:t,events:{}},n.push(s)),s.events[e]||(s.events[e]=[]),bt(s.events[e],(function(t){return t.func===r&&Ne(t.options,a)}))||(t.addEventListener(e,r,o.supportsOptions?a:a.capture),s.events[e].push({func:r,options:a}));}}function s(t,e,r,i){if(t.addEventListener&&t.removeEventListener){var a=yt(n,(function(e){return e.eventTarget===t})),c=n[a];if(c&&c.events)if("all"!==e){var l=false,u=c.events[e];if(u){if("all"===r){for(var p=u.length-1;p>=0;p--){var f=u[p];s(t,e,f.func,f.options);}return}for(var d=Ge(i),h=0;h<u.length;h++){var v=u[h];if(v.func===r&&Ne(v.options,d)){t.removeEventListener(e,r,o.supportsOptions?d:d.capture),u.splice(h,1),0===u.length&&(delete c.events[e],l=true);break}}}l&&!Object.keys(c.events).length&&n.splice(a,1);}else for(e in c.events)c.events.hasOwnProperty(e)&&s(t,e,"all");}}function c(t,e){for(var n=Ge(e),i=new We(t),o=r[t.type],a=ht(t)[0],s=a;w.element(s);){for(var c=0;c<o.length;c++){var l=o[c],u=l.selector,p=l.context;if(R(s,u)&&M(p,a)&&M(p,s)){var f=l.listeners;i.currentTarget=s;for(var d=0;d<f.length;d++){var h=f[d];Ne(h.options,n)&&h.func(i);}}}s=A(s);}}function l(t){return c(t,true)}return null==(e=t.document)||e.createElement("div").addEventListener("test",null,{get capture(){return o.supportsOptions=true},get passive(){return o.supportsPassive=true}}),t.events=o,o}},He={methodOrder:["simulationResume","mouseOrPen","hasPointer","idle"],search:function(t){for(var e=0,n=He.methodOrder;e<n.length;e++){var r=n[e],i=He[r](t);if(i)return i}return null},simulationResume:function(t){var e=t.pointerType,n=t.eventType,r=t.eventTarget,i=t.scope;if(!/down|start/i.test(n))return null;for(var o=0,a=i.interactions.list;o<a.length;o++){var s=a[o],c=r;if(s.simulation&&s.simulation.allowResume&&s.pointerType===e)for(;c;){if(c===s.element)return s;c=A(c);}}return null},mouseOrPen:function(t){var e,n=t.pointerId,r=t.pointerType,i=t.eventType,o=t.scope;if("mouse"!==r&&"pen"!==r)return null;for(var a=0,s=o.interactions.list;a<s.length;a++){var c=s[a];if(c.pointerType===r){if(c.simulation&&!Ke(c,n))continue;if(c.interacting())return c;e||(e=c);}}if(e)return e;for(var l=0,u=o.interactions.list;l<u.length;l++){var p=u[l];if(!(p.pointerType!==r||/down/i.test(i)&&p.simulation))return p}return null},hasPointer:function(t){for(var e=t.pointerId,n=0,r=t.scope.interactions.list;n<r.length;n++){var i=r[n];if(Ke(i,e))return i}return null},idle:function(t){for(var e=t.pointerType,n=0,r=t.scope.interactions.list;n<r.length;n++){var i=r[n];if(1===i.pointers.length){var o=i.interactable;if(o&&(!o.options.gesture||!o.options.gesture.enabled))continue}else if(i.pointers.length>=2)continue;if(!i.interacting()&&e===i.pointerType)return i}return null}};function Ke(t,e){return t.pointers.some((function(t){return t.id===e}))}var $e=He,Je=["pointerDown","pointerMove","pointerUp","updatePointer","removePointer","windowBlur"];function Qe(t,e){return function(n){var r=e.interactions.list,i=dt(n),o=ht(n),a=o[0],s=o[1],c=[];if(/^touch/.test(n.type)){e.prevTouchTime=e.now();for(var l=0,u=n.changedTouches;l<u.length;l++){var p=u[l],f={pointer:p,pointerId:at(p),pointerType:i,eventType:n.type,eventTarget:a,curEventTarget:s,scope:e},d=Ze(f);c.push([f.pointer,f.eventTarget,f.curEventTarget,d]);}}else {var h=false;if(!I.supportsPointerEvent&&/mouse/.test(n.type)){for(var v=0;v<r.length&&!h;v++)h="mouse"!==r[v].pointerType&&r[v].pointerIsDown;h=h||e.now()-e.prevTouchTime<500||0===n.timeStamp;}if(!h){var g={pointer:n,pointerId:at(n),pointerType:i,eventType:n.type,curEventTarget:s,eventTarget:a,scope:e},m=Ze(g);c.push([g.pointer,g.eventTarget,g.curEventTarget,m]);}}for(var y=0;y<c.length;y++){var b=c[y],x=b[0],w=b[1],E=b[2];b[3][t](x,n,w,E);}}}function Ze(t){var e=t.pointerType,n=t.scope,r={interaction:$e.search(t),searchDetails:t};return n.fire("interactions:find",r),r.interaction||n.interactions.new({pointerType:e})}function tn(t,e){var n=t.doc,r=t.scope,i=t.options,o=r.interactions.docEvents,a=r.events,s=a[e];for(var c in r.browser.isIOS&&!i.events&&(i.events={passive:false}),a.delegatedEvents)s(n,c,a.delegateListener),s(n,c,a.delegateUseCapture,true);for(var l=i&&i.events,u=0;u<o.length;u++){var p=o[u];s(n,p.type,p.listener,l);}}var en={id:"core/interactions",install:function(t){for(var e={},n=0;n<Je.length;n++){var i=Je[n];e[i]=Qe(i,t);}var a,c=I.pEventTypes;function l(){for(var e=0,n=t.interactions.list;e<n.length;e++){var r=n[e];if(r.pointerIsDown&&"touch"===r.pointerType&&!r._interacting)for(var i=function(){var e=a[o];t.documents.some((function(t){return M(t.doc,e.downTarget)}))||r.removePointer(e.pointer,e.event);},o=0,a=r.pointers;o<a.length;o++)i();}}(a=k.PointerEvent?[{type:c.down,listener:l},{type:c.down,listener:e.pointerDown},{type:c.move,listener:e.pointerMove},{type:c.up,listener:e.pointerUp},{type:c.cancel,listener:e.pointerUp}]:[{type:"mousedown",listener:e.pointerDown},{type:"mousemove",listener:e.pointerMove},{type:"mouseup",listener:e.pointerUp},{type:"touchstart",listener:l},{type:"touchstart",listener:e.pointerDown},{type:"touchmove",listener:e.pointerMove},{type:"touchend",listener:e.pointerUp},{type:"touchcancel",listener:e.pointerUp}]).push({type:"blur",listener:function(e){for(var n=0,r=t.interactions.list;n<r.length;n++){r[n].documentBlur(e);}}}),t.prevTouchTime=0,t.Interaction=function(e){s(i,e);var n=p(i);function i(){return r(this,i),n.apply(this,arguments)}return o(i,[{key:"pointerMoveTolerance",get:function(){return t.interactions.pointerMoveTolerance},set:function(e){t.interactions.pointerMoveTolerance=e;}},{key:"_now",value:function(){return t.now()}}]),i}(De),t.interactions={list:[],new:function(e){e.scopeFire=function(e,n){return t.fire(e,n)};var n=new t.Interaction(e);return t.interactions.list.push(n),n},listeners:e,docEvents:a,pointerMoveTolerance:1},t.usePlugin(he);},listeners:{"scope:add-document":function(t){return tn(t,"add")},"scope:remove-document":function(t){return tn(t,"remove")},"interactable:unset":function(t,e){for(var n=t.interactable,r=e.interactions.list.length-1;r>=0;r--){var i=e.interactions.list[r];i.interactable===n&&(i.stop(),e.fire("interactions:destroy",{interaction:i}),i.destroy(),e.interactions.list.length>2&&e.interactions.list.splice(r,1));}}},onDocSignal:tn,doOnInteractions:Qe,methodNames:Je},nn=en,rn=function(t){return t[t.On=0]="On",t[t.Off=1]="Off",t}(rn||{}),on=function(){function t(e,n,i,o){r(this,t),this.target=undefined,this.options=undefined,this._actions=undefined,this.events=new Ve,this._context=undefined,this._win=undefined,this._doc=undefined,this._scopeEvents=undefined,this._actions=n.actions,this.target=e,this._context=n.context||i,this._win=y(B(e)?this._context:e),this._doc=this._win.document,this._scopeEvents=o,this.set(n);}return o(t,[{key:"_defaults",get:function(){return {base:{},perAction:{},actions:{}}}},{key:"setOnEvents",value:function(t,e){return w.func(e.onstart)&&this.on("".concat(t,"start"),e.onstart),w.func(e.onmove)&&this.on("".concat(t,"move"),e.onmove),w.func(e.onend)&&this.on("".concat(t,"end"),e.onend),w.func(e.oninertiastart)&&this.on("".concat(t,"inertiastart"),e.oninertiastart),this}},{key:"updatePerActionListeners",value:function(t,e,n){var r,i=this,o=null==(r=this._actions.map[t])?undefined:r.filterEventType,a=function(t){return (null==o||o(t))&&ve(t,i._actions)};(w.array(e)||w.object(e))&&this._onOff(rn.Off,t,e,undefined,a),(w.array(n)||w.object(n))&&this._onOff(rn.On,t,n,undefined,a);}},{key:"setPerAction",value:function(t,e){var n=this._defaults;for(var r in e){var i=r,o=this.options[t],a=e[i];"listeners"===i&&this.updatePerActionListeners(t,o.listeners,a),w.array(a)?o[i]=mt(a):w.plainObject(a)?(o[i]=V(o[i]||{},ge(a)),w.object(n.perAction[i])&&"enabled"in n.perAction[i]&&(o[i].enabled=false!==a.enabled)):w.bool(a)&&w.object(n.perAction[i])?o[i].enabled=a:o[i]=a;}}},{key:"getRect",value:function(t){return t=t||(w.element(this.target)?this.target:null),w.string(this.target)&&(t=t||this._context.querySelector(this.target)),L(t)}},{key:"rectChecker",value:function(t){var e=this;return w.func(t)?(this.getRect=function(n){var r=V({},t.apply(e,n));return "width"in r||(r.width=r.right-r.left,r.height=r.bottom-r.top),r},this):null===t?(delete this.getRect,this):this.getRect}},{key:"_backCompatOption",value:function(t,e){if(B(e)||w.object(e)){for(var n in this.options[t]=e,this._actions.map)this.options[n][t]=e;return this}return this.options[t]}},{key:"origin",value:function(t){return this._backCompatOption("origin",t)}},{key:"deltaSource",value:function(t){return "page"===t||"client"===t?(this.options.deltaSource=t,this):this.options.deltaSource}},{key:"getAllElements",value:function(){var t=this.target;return w.string(t)?Array.from(this._context.querySelectorAll(t)):w.func(t)&&t.getAllElements?t.getAllElements():w.element(t)?[t]:[]}},{key:"context",value:function(){return this._context}},{key:"inContext",value:function(t){return this._context===t.ownerDocument||M(this._context,t)}},{key:"testIgnoreAllow",value:function(t,e,n){return !this.testIgnore(t.ignoreFrom,e,n)&&this.testAllow(t.allowFrom,e,n)}},{key:"testAllow",value:function(t,e,n){return !t||!!w.element(n)&&(w.string(t)?F(n,t,e):!!w.element(t)&&M(t,n))}},{key:"testIgnore",value:function(t,e,n){return !(!t||!w.element(n))&&(w.string(t)?F(n,t,e):!!w.element(t)&&M(t,n))}},{key:"fire",value:function(t){return this.events.fire(t),this}},{key:"_onOff",value:function(t,e,n,r,i){w.object(e)&&!w.array(e)&&(r=n,n=null);var o=$(e,n,i);for(var a in o){"wheel"===a&&(a=I.wheelEvent);for(var s=0,c=o[a];s<c.length;s++){var l=c[s];ve(a,this._actions)?this.events[t===rn.On?"on":"off"](a,l):w.string(this.target)?this._scopeEvents[t===rn.On?"addDelegate":"removeDelegate"](this.target,this._context,a,l,r):this._scopeEvents[t===rn.On?"add":"remove"](this.target,a,l,r);}}return this}},{key:"on",value:function(t,e,n){return this._onOff(rn.On,t,e,n)}},{key:"off",value:function(t,e,n){return this._onOff(rn.Off,t,e,n)}},{key:"set",value:function(t){var e=this._defaults;for(var n in w.object(t)||(t={}),this.options=ge(e.base),this._actions.methodDict){var r=n,i=this._actions.methodDict[r];this.options[r]={},this.setPerAction(r,V(V({},e.perAction),e.actions[r])),this[i](t[r]);}for(var o in t)"getRect"!==o?w.func(this[o])&&this[o](t[o]):this.rectChecker(t.getRect);return this}},{key:"unset",value:function(){if(w.string(this.target))for(var t in this._scopeEvents.delegatedEvents)for(var e=this._scopeEvents.delegatedEvents[t],n=e.length-1;n>=0;n--){var r=e[n],i=r.selector,o=r.context,a=r.listeners;i===this.target&&o===this._context&&e.splice(n,1);for(var s=a.length-1;s>=0;s--)this._scopeEvents.removeDelegate(this.target,this._context,t,a[s][0],a[s][1]);}else this._scopeEvents.remove(this.target,"all");}}]),t}(),an=function(){function t(e){var n=this;r(this,t),this.list=[],this.selectorMap={},this.scope=undefined,this.scope=e,e.addListeners({"interactable:unset":function(t){var e=t.interactable,r=e.target,i=w.string(r)?n.selectorMap[r]:r[n.scope.id],o=yt(i,(function(t){return t===e}));i.splice(o,1);}});}return o(t,[{key:"new",value:function(t,e){e=V(e||{},{actions:this.scope.actions});var n=new this.scope.Interactable(t,e,this.scope.document,this.scope.events);return this.scope.addDocument(n._doc),this.list.push(n),w.string(t)?(this.selectorMap[t]||(this.selectorMap[t]=[]),this.selectorMap[t].push(n)):(n.target[this.scope.id]||Object.defineProperty(t,this.scope.id,{value:[],configurable:true}),t[this.scope.id].push(n)),this.scope.fire("interactable:new",{target:t,options:e,interactable:n,win:this.scope._win}),n}},{key:"getExisting",value:function(t,e){var n=e&&e.context||this.scope.document,r=w.string(t),i=r?this.selectorMap[t]:t[this.scope.id];if(i)return bt(i,(function(e){return e._context===n&&(r||e.inContext(t))}))}},{key:"forEachMatch",value:function(t,e){for(var n=0,r=this.list;n<r.length;n++){var i=r[n],o=undefined;if((w.string(i.target)?w.element(t)&&R(t,i.target):t===i.target)&&i.inContext(t)&&(o=e(i)),undefined!==o)return o}}}]),t}();var sn=function(){function t(){var e=this;r(this,t),this.id="__interact_scope_".concat(Math.floor(100*Math.random())),this.isInitialized=false,this.listenerMaps=[],this.browser=I,this.defaults=ge(Te),this.Eventable=Ve,this.actions={map:{},phases:{start:true,move:true,end:true},methodDict:{},phaselessTypes:{}},this.interactStatic=function(t){var e=function e(n,r){var i=t.interactables.getExisting(n,r);return i||((i=t.interactables.new(n,r)).events.global=e.globalEvents),i};return e.getPointerAverage=lt,e.getTouchBBox=ut,e.getTouchDistance=pt,e.getTouchAngle=ft,e.getElementRect=L,e.getElementClientRect=Y,e.matchesSelector=R,e.closest=z,e.globalEvents={},e.version="1.10.27",e.scope=t,e.use=function(t,e){return this.scope.usePlugin(t,e),this},e.isSet=function(t,e){return !!this.scope.interactables.get(t,e&&e.context)},e.on=Nt((function(t,e,n){if(w.string(t)&&-1!==t.search(" ")&&(t=t.trim().split(/ +/)),w.array(t)){for(var r=0,i=t;r<i.length;r++){var o=i[r];this.on(o,e,n);}return this}if(w.object(t)){for(var a in t)this.on(a,t[a],e);return this}return ve(t,this.scope.actions)?this.globalEvents[t]?this.globalEvents[t].push(e):this.globalEvents[t]=[e]:this.scope.events.add(this.scope.document,t,e,{options:n}),this}),"The interact.on() method is being deprecated"),e.off=Nt((function(t,e,n){if(w.string(t)&&-1!==t.search(" ")&&(t=t.trim().split(/ +/)),w.array(t)){for(var r=0,i=t;r<i.length;r++){var o=i[r];this.off(o,e,n);}return this}if(w.object(t)){for(var a in t)this.off(a,t[a],e);return this}var s;return ve(t,this.scope.actions)?t in this.globalEvents&&-1!==(s=this.globalEvents[t].indexOf(e))&&this.globalEvents[t].splice(s,1):this.scope.events.remove(this.scope.document,t,e,n),this}),"The interact.off() method is being deprecated"),e.debug=function(){return this.scope},e.supportsTouch=function(){return I.supportsTouch},e.supportsPointerEvent=function(){return I.supportsPointerEvent},e.stop=function(){for(var t=0,e=this.scope.interactions.list;t<e.length;t++)e[t].stop();return this},e.pointerMoveTolerance=function(t){return w.number(t)?(this.scope.interactions.pointerMoveTolerance=t,this):this.scope.interactions.pointerMoveTolerance},e.addDocument=function(t,e){this.scope.addDocument(t,e);},e.removeDocument=function(t){this.scope.removeDocument(t);},e}(this),this.InteractEvent=Se,this.Interactable=undefined,this.interactables=new an(this),this._win=undefined,this.document=undefined,this.window=undefined,this.documents=[],this._plugins={list:[],map:{}},this.onWindowUnload=function(t){return e.removeDocument(t.target)};var n=this;this.Interactable=function(t){s(i,t);var e=p(i);function i(){return r(this,i),e.apply(this,arguments)}return o(i,[{key:"_defaults",get:function(){return n.defaults}},{key:"set",value:function(t){return f(c(i.prototype),"set",this).call(this,t),n.fire("interactable:set",{options:t,interactable:this}),this}},{key:"unset",value:function(){f(c(i.prototype),"unset",this).call(this);var t=n.interactables.list.indexOf(this);t<0||(n.interactables.list.splice(t,1),n.fire("interactable:unset",{interactable:this}));}}]),i}(on);}return o(t,[{key:"addListeners",value:function(t,e){this.listenerMaps.push({id:e,map:t});}},{key:"fire",value:function(t,e){for(var n=0,r=this.listenerMaps;n<r.length;n++){var i=r[n].map[t];if(i&&false===i(e,this,t))return  false}}},{key:"init",value:function(t){return this.isInitialized?this:function(t,e){t.isInitialized=true,w.window(e)&&m(e);return k.init(e),I.init(e),Lt.init(e),t.window=e,t.document=e.document,t.usePlugin(nn),t.usePlugin(Ue),t}(this,t)}},{key:"pluginIsInstalled",value:function(t){var e=t.id;return e?!!this._plugins.map[e]:-1!==this._plugins.list.indexOf(t)}},{key:"usePlugin",value:function(t,e){if(!this.isInitialized)return this;if(this.pluginIsInstalled(t))return this;if(t.id&&(this._plugins.map[t.id]=t),this._plugins.list.push(t),t.install&&t.install(this,e),t.listeners&&t.before){for(var n=0,r=this.listenerMaps.length,i=t.before.reduce((function(t,e){return t[e]=true,t[cn(e)]=true,t}),{});n<r;n++){var o=this.listenerMaps[n].id;if(o&&(i[o]||i[cn(o)]))break}this.listenerMaps.splice(n,0,{id:t.id,map:t.listeners});}else t.listeners&&this.listenerMaps.push({id:t.id,map:t.listeners});return this}},{key:"addDocument",value:function(t,e){if(-1!==this.getDocIndex(t))return  false;var n=y(t);e=e?V({},e):{},this.documents.push({doc:t,options:e}),this.events.documents.push(t),t!==this.document&&this.events.add(n,"unload",this.onWindowUnload),this.fire("scope:add-document",{doc:t,window:n,scope:this,options:e});}},{key:"removeDocument",value:function(t){var e=this.getDocIndex(t),n=y(t),r=this.documents[e].options;this.events.remove(n,"unload",this.onWindowUnload),this.documents.splice(e,1),this.events.documents.splice(e,1),this.fire("scope:remove-document",{doc:t,window:n,scope:this,options:r});}},{key:"getDocIndex",value:function(t){for(var e=0;e<this.documents.length;e++)if(this.documents[e].doc===t)return e;return  -1}},{key:"getDocOptions",value:function(t){var e=this.getDocIndex(t);return  -1===e?null:this.documents[e].options}},{key:"now",value:function(){return (this.window.Date||Date).now()}}]),t}();function cn(t){return t&&t.replace(/\/.*$/,"")}var ln=new sn,un=ln.interactStatic,pn="undefined"!=typeof globalThis?globalThis:window;ln.init(pn);var fn=Object.freeze({__proto__:null,edgeTarget:function(){},elements:function(){},grid:function(t){var e=[["x","y"],["left","top"],["right","bottom"],["width","height"]].filter((function(e){var n=e[0],r=e[1];return n in t||r in t})),n=function(n,r){for(var i=t.range,o=t.limits,a=undefined===o?{left:-1/0,right:1/0,top:-1/0,bottom:1/0}:o,s=t.offset,c=undefined===s?{x:0,y:0}:s,l={range:i,grid:t,x:null,y:null},u=0;u<e.length;u++){var p=e[u],f=p[0],d=p[1],h=Math.round((n-c.x)/t[f]),v=Math.round((r-c.y)/t[d]);l[f]=Math.max(a.left,Math.min(a.right,h*t[f]+c.x)),l[d]=Math.max(a.top,Math.min(a.bottom,v*t[d]+c.y));}return l};return n.grid=t,n.coordFields=e,n}}),dn={id:"snappers",install:function(t){var e=t.interactStatic;e.snappers=V(e.snappers||{},fn),e.createSnapGrid=e.snappers.grid;}},hn=dn,vn={start:function(t){var n=t.state,r=t.rect,i=t.edges,o=t.pageCoords,a=n.options,s=a.ratio,c=a.enabled,l=n.options,u=l.equalDelta,p=l.modifiers;"preserve"===s&&(s=r.width/r.height),n.startCoords=V({},o),n.startRect=V({},r),n.ratio=s,n.equalDelta=u;var f=n.linkedEdges={top:i.top||i.left&&!i.bottom,left:i.left||i.top&&!i.right,bottom:i.bottom||i.right&&!i.top,right:i.right||i.bottom&&!i.left};if(n.xIsPrimaryAxis=!(!i.left&&!i.right),n.equalDelta){var d=(f.left?1:-1)*(f.top?1:-1);n.edgeSign={x:d,y:d};}else n.edgeSign={x:f.left?-1:1,y:f.top?-1:1};if(false!==c&&V(i,f),null!=p&&p.length){var h=new me(t.interaction);h.copyFrom(t.interaction.modification),h.prepareStates(p),n.subModification=h,h.startAll(e({},t));}},set:function(t){var n=t.state,r=t.rect,i=t.coords,o=n.linkedEdges,a=V({},i),s=n.equalDelta?gn:mn;if(V(t.edges,o),s(n,n.xIsPrimaryAxis,i,r),!n.subModification)return null;var c=V({},r);H(o,c,{x:i.x-a.x,y:i.y-a.y});var l=n.subModification.setAll(e(e({},t),{},{rect:c,edges:o,pageCoords:i,prevCoords:i,prevRect:c})),u=l.delta;l.changed&&(s(n,Math.abs(u.x)>Math.abs(u.y),l.coords,l.rect),V(i,l.coords));return l.eventProps},defaults:{ratio:"preserve",equalDelta:false,modifiers:[],enabled:false}};function gn(t,e,n){var r=t.startCoords,i=t.edgeSign;e?n.y=r.y+(n.x-r.x)*i.y:n.x=r.x+(n.y-r.y)*i.x;}function mn(t,e,n,r){var i=t.startRect,o=t.startCoords,a=t.ratio,s=t.edgeSign;if(e){var c=r.width/a;n.y=o.y+(c-i.height)*s.y;}else {var l=r.height*a;n.x=o.x+(l-i.width)*s.x;}}var yn=be(vn,"aspectRatio"),bn=function(){};bn._defaults={};var xn=bn;function wn(t,e,n){return w.func(t)?G(t,e.interactable,e.element,[n.x,n.y,e]):G(t,e.interactable,e.element)}var En={start:function(t){var e=t.rect,n=t.startOffset,r=t.state,i=t.interaction,o=t.pageCoords,a=r.options,s=a.elementRect,c=V({left:0,top:0,right:0,bottom:0},a.offset||{});if(e&&s){var l=wn(a.restriction,i,o);if(l){var u=l.right-l.left-e.width,p=l.bottom-l.top-e.height;u<0&&(c.left+=u,c.right+=u),p<0&&(c.top+=p,c.bottom+=p);}c.left+=n.left-e.width*s.left,c.top+=n.top-e.height*s.top,c.right+=n.right-e.width*(1-s.right),c.bottom+=n.bottom-e.height*(1-s.bottom);}r.offset=c;},set:function(t){var e=t.coords,n=t.interaction,r=t.state,i=r.options,o=r.offset,a=wn(i.restriction,n,e);if(a){var s=function(t){return !t||"left"in t&&"top"in t||((t=V({},t)).left=t.x||0,t.top=t.y||0,t.right=t.right||t.left+t.width,t.bottom=t.bottom||t.top+t.height),t}(a);e.x=Math.max(Math.min(s.right-o.right,e.x),s.left+o.left),e.y=Math.max(Math.min(s.bottom-o.bottom,e.y),s.top+o.top);}},defaults:{restriction:null,elementRect:null,offset:null,endOnly:false,enabled:false}},Tn=be(En,"restrict"),Sn={top:1/0,left:1/0,bottom:-1/0,right:-1/0},_n={top:-1/0,left:-1/0,bottom:1/0,right:1/0};function Pn(t,e){for(var n=0,r=["top","left","bottom","right"];n<r.length;n++){var i=r[n];i in t||(t[i]=e[i]);}return t}var On={noInner:Sn,noOuter:_n,start:function(t){var e,n=t.interaction,r=t.startOffset,i=t.state,o=i.options;o&&(e=N(wn(o.offset,n,n.coords.start.page))),e=e||{x:0,y:0},i.offset={top:e.y+r.top,left:e.x+r.left,bottom:e.y-r.bottom,right:e.x-r.right};},set:function(t){var e=t.coords,n=t.edges,r=t.interaction,i=t.state,o=i.offset,a=i.options;if(n){var s=V({},e),c=wn(a.inner,r,s)||{},l=wn(a.outer,r,s)||{};Pn(c,Sn),Pn(l,_n),n.top?e.y=Math.min(Math.max(l.top+o.top,s.y),c.top+o.top):n.bottom&&(e.y=Math.max(Math.min(l.bottom+o.bottom,s.y),c.bottom+o.bottom)),n.left?e.x=Math.min(Math.max(l.left+o.left,s.x),c.left+o.left):n.right&&(e.x=Math.max(Math.min(l.right+o.right,s.x),c.right+o.right));}},defaults:{inner:null,outer:null,offset:null,endOnly:false,enabled:false}},kn=be(On,"restrictEdges"),Dn=V({get elementRect(){return {top:0,left:0,bottom:1,right:1}},set elementRect(t){}},En.defaults),In=be({start:En.start,set:En.set,defaults:Dn},"restrictRect"),Mn={width:-1/0,height:-1/0},zn={width:1/0,height:1/0};var An=be({start:function(t){return On.start(t)},set:function(t){var e=t.interaction,n=t.state,r=t.rect,i=t.edges,o=n.options;if(i){var a=U(wn(o.min,e,t.coords))||Mn,s=U(wn(o.max,e,t.coords))||zn;n.options={endOnly:o.endOnly,inner:V({},On.noInner),outer:V({},On.noOuter)},i.top?(n.options.inner.top=r.bottom-a.height,n.options.outer.top=r.bottom-s.height):i.bottom&&(n.options.inner.bottom=r.top+a.height,n.options.outer.bottom=r.top+s.height),i.left?(n.options.inner.left=r.right-a.width,n.options.outer.left=r.right-s.width):i.right&&(n.options.inner.right=r.left+a.width,n.options.outer.right=r.left+s.width),On.set(t),n.options=o;}},defaults:{min:null,max:null,endOnly:false,enabled:false}},"restrictSize");var Rn={start:function(t){var e,n=t.interaction,r=t.interactable,i=t.element,o=t.rect,a=t.state,s=t.startOffset,c=a.options,l=c.offsetWithOrigin?function(t){var e=t.interaction.element,n=N(G(t.state.options.origin,null,null,[e])),r=n||K(t.interactable,e,t.interaction.prepared.name);return r}(t):{x:0,y:0};if("startCoords"===c.offset)e={x:n.coords.start.page.x,y:n.coords.start.page.y};else {var u=G(c.offset,r,i,[n]);(e=N(u)||{x:0,y:0}).x+=l.x,e.y+=l.y;}var p=c.relativePoints;a.offsets=o&&p&&p.length?p.map((function(t,n){return {index:n,relativePoint:t,x:s.left-o.width*t.x+e.x,y:s.top-o.height*t.y+e.y}})):[{index:0,relativePoint:null,x:e.x,y:e.y}];},set:function(t){var e=t.interaction,n=t.coords,r=t.state,i=r.options,o=r.offsets,a=K(e.interactable,e.element,e.prepared.name),s=V({},n),c=[];i.offsetWithOrigin||(s.x-=a.x,s.y-=a.y);for(var l=0,u=o;l<u.length;l++)for(var p=u[l],f=s.x-p.x,d=s.y-p.y,h=0,v=i.targets.length;h<v;h++){var g=i.targets[h],m=undefined;(m=w.func(g)?g(f,d,e._proxy,p,h):g)&&c.push({x:(w.number(m.x)?m.x:f)+p.x,y:(w.number(m.y)?m.y:d)+p.y,range:w.number(m.range)?m.range:i.range,source:g,index:h,offset:p});}for(var y={target:null,inRange:false,distance:0,range:0,delta:{x:0,y:0}},b=0;b<c.length;b++){var x=c[b],E=x.range,T=x.x-s.x,S=x.y-s.y,_=Q(T,S),P=_<=E;E===1/0&&y.inRange&&y.range!==1/0&&(P=false),y.target&&!(P?y.inRange&&E!==1/0?_/E<y.distance/y.range:E===1/0&&y.range!==1/0||_<y.distance:!y.inRange&&_<y.distance)||(y.target=x,y.distance=_,y.range=E,y.inRange=P,y.delta.x=T,y.delta.y=S);}return y.inRange&&(n.x=y.target.x,n.y=y.target.y),r.closest=y,y},defaults:{range:1/0,targets:null,offset:null,offsetWithOrigin:true,origin:null,relativePoints:null,endOnly:false,enabled:false}},Cn=be(Rn,"snap");var jn={start:function(t){var e=t.state,n=t.edges,r=e.options;if(!n)return null;t.state={options:{targets:null,relativePoints:[{x:n.left?0:1,y:n.top?0:1}],offset:r.offset||"self",origin:{x:0,y:0},range:r.range}},e.targetFields=e.targetFields||[["width","height"],["x","y"]],Rn.start(t),e.offsets=t.state.offsets,t.state=e;},set:function(t){var e=t.interaction,n=t.state,r=t.coords,i=n.options,o=n.offsets,a={x:r.x-o[0].x,y:r.y-o[0].y};n.options=V({},i),n.options.targets=[];for(var s=0,c=i.targets||[];s<c.length;s++){var l=c[s],u=undefined;if(u=w.func(l)?l(a.x,a.y,e):l){for(var p=0,f=n.targetFields;p<f.length;p++){var d=f[p],h=d[0],v=d[1];if(h in u||v in u){u.x=u[h],u.y=u[v];break}}n.options.targets.push(u);}}var g=Rn.set(t);return n.options=i,g},defaults:{range:1/0,targets:null,offset:null,endOnly:false,enabled:false}},Fn=be(jn,"snapSize");var Xn={aspectRatio:yn,restrictEdges:kn,restrict:Tn,restrictRect:In,restrictSize:An,snapEdges:be({start:function(t){var e=t.edges;return e?(t.state.targetFields=t.state.targetFields||[[e.left?"left":"right",e.top?"top":"bottom"]],jn.start(t)):null},set:jn.set,defaults:V(ge(jn.defaults),{targets:undefined,range:undefined,offset:{x:0,y:0}})},"snapEdges"),snap:Cn,snapSize:Fn,spring:xn,avoid:xn,transform:xn,rubberband:xn},Yn={id:"modifiers",install:function(t){var e=t.interactStatic;for(var n in t.usePlugin(Ee),t.usePlugin(hn),e.modifiers=Xn,Xn){var r=Xn[n],i=r._defaults,o=r._methods;i._methods=o,t.defaults.perAction[n]=i;}}},Ln=Yn,qn=function(t){s(n,t);var e=p(n);function n(t,i,o,a,s,c){var l;if(r(this,n),tt(u(l=e.call(this,s)),o),o!==i&&tt(u(l),i),l.timeStamp=c,l.originalEvent=o,l.type=t,l.pointerId=at(i),l.pointerType=dt(i),l.target=a,l.currentTarget=null,"tap"===t){var p=s.getPointerIndex(i);l.dt=l.timeStamp-s.pointers[p].downTime;var f=l.timeStamp-s.tapTime;l.double=!!s.prevTap&&"doubletap"!==s.prevTap.type&&s.prevTap.target===l.target&&f<500;}else "doubletap"===t&&(l.dt=i.timeStamp-s.tapTime,l.double=true);return l}return o(n,[{key:"_subtractOrigin",value:function(t){var e=t.x,n=t.y;return this.pageX-=e,this.pageY-=n,this.clientX-=e,this.clientY-=n,this}},{key:"_addOrigin",value:function(t){var e=t.x,n=t.y;return this.pageX+=e,this.pageY+=n,this.clientX+=e,this.clientY+=n,this}},{key:"preventDefault",value:function(){this.originalEvent.preventDefault();}}]),n}(vt),Bn={id:"pointer-events/base",before:["inertia","modifiers","auto-start","actions"],install:function(t){t.pointerEvents=Bn,t.defaults.actions.pointerEvents=Bn.defaults,V(t.actions.phaselessTypes,Bn.types);},listeners:{"interactions:new":function(t){var e=t.interaction;e.prevTap=null,e.tapTime=0;},"interactions:update-pointer":function(t){var e=t.down,n=t.pointerInfo;if(!e&&n.hold)return;n.hold={duration:1/0,timeout:null};},"interactions:move":function(t,e){var n=t.interaction,r=t.pointer,i=t.event,o=t.eventTarget;t.duplicate||n.pointerIsDown&&!n.pointerWasMoved||(n.pointerIsDown&&Gn(t),Vn({interaction:n,pointer:r,event:i,eventTarget:o,type:"move"},e));},"interactions:down":function(t,e){!function(t,e){for(var n=t.interaction,r=t.pointer,i=t.event,o=t.eventTarget,a=t.pointerIndex,s=n.pointers[a].hold,c=q(o),l={interaction:n,pointer:r,event:i,eventTarget:o,type:"hold",targets:[],path:c,node:null},u=0;u<c.length;u++){var p=c[u];l.node=p,e.fire("pointerEvents:collect-targets",l);}if(!l.targets.length)return;for(var f=1/0,d=0,h=l.targets;d<h.length;d++){var v=h[d].eventable.options.holdDuration;v<f&&(f=v);}s.duration=f,s.timeout=setTimeout((function(){Vn({interaction:n,eventTarget:o,pointer:r,event:i,type:"hold"},e);}),f);}(t,e),Vn(t,e);},"interactions:up":function(t,e){Gn(t),Vn(t,e),function(t,e){var n=t.interaction,r=t.pointer,i=t.event,o=t.eventTarget;n.pointerWasMoved||Vn({interaction:n,eventTarget:o,pointer:r,event:i,type:"tap"},e);}(t,e);},"interactions:cancel":function(t,e){Gn(t),Vn(t,e);}},PointerEvent:qn,fire:Vn,collectEventTargets:Wn,defaults:{holdDuration:600,ignoreFrom:null,allowFrom:null,origin:{x:0,y:0}},types:{down:true,move:true,up:true,cancel:true,tap:true,doubletap:true,hold:true}};function Vn(t,e){var n=t.interaction,r=t.pointer,i=t.event,o=t.eventTarget,a=t.type,s=t.targets,c=undefined===s?Wn(t,e):s,l=new qn(a,r,i,o,n,e.now());e.fire("pointerEvents:new",{pointerEvent:l});for(var u={interaction:n,pointer:r,event:i,eventTarget:o,targets:c,type:a,pointerEvent:l},p=0;p<c.length;p++){var f=c[p];for(var d in f.props||{})l[d]=f.props[d];var h=K(f.eventable,f.node);if(l._subtractOrigin(h),l.eventable=f.eventable,l.currentTarget=f.node,f.eventable.fire(l),l._addOrigin(h),l.immediatePropagationStopped||l.propagationStopped&&p+1<c.length&&c[p+1].node!==l.currentTarget)break}if(e.fire("pointerEvents:fired",u),"tap"===a){var v=l.double?Vn({interaction:n,pointer:r,event:i,eventTarget:o,type:"doubletap"},e):l;n.prevTap=v,n.tapTime=v.timeStamp;}return l}function Wn(t,e){var n=t.interaction,r=t.pointer,i=t.event,o=t.eventTarget,a=t.type,s=n.getPointerIndex(r),c=n.pointers[s];if("tap"===a&&(n.pointerWasMoved||!c||c.downTarget!==o))return [];for(var l=q(o),u={interaction:n,pointer:r,event:i,eventTarget:o,type:a,path:l,targets:[],node:null},p=0;p<l.length;p++){var f=l[p];u.node=f,e.fire("pointerEvents:collect-targets",u);}return "hold"===a&&(u.targets=u.targets.filter((function(t){var e,r;return t.eventable.options.holdDuration===(null==(e=n.pointers[s])||null==(r=e.hold)?undefined:r.duration)}))),u.targets}function Gn(t){var e=t.interaction,n=t.pointerIndex,r=e.pointers[n].hold;r&&r.timeout&&(clearTimeout(r.timeout),r.timeout=null);}var Nn=Object.freeze({__proto__:null,default:Bn});function Un(t){var e=t.interaction;e.holdIntervalHandle&&(clearInterval(e.holdIntervalHandle),e.holdIntervalHandle=null);}var Hn={id:"pointer-events/holdRepeat",install:function(t){t.usePlugin(Bn);var e=t.pointerEvents;e.defaults.holdRepeatInterval=0,e.types.holdrepeat=t.actions.phaselessTypes.holdrepeat=true;},listeners:["move","up","cancel","endall"].reduce((function(t,e){return t["pointerEvents:".concat(e)]=Un,t}),{"pointerEvents:new":function(t){var e=t.pointerEvent;"hold"===e.type&&(e.count=(e.count||0)+1);},"pointerEvents:fired":function(t,e){var n=t.interaction,r=t.pointerEvent,i=t.eventTarget,o=t.targets;if("hold"===r.type&&o.length){var a=o[0].eventable.options.holdRepeatInterval;a<=0||(n.holdIntervalHandle=setTimeout((function(){e.pointerEvents.fire({interaction:n,eventTarget:i,type:"hold",pointer:r,event:r},e);}),a));}}})},Kn=Hn;var $n={id:"pointer-events/interactableTargets",install:function(t){var e=t.Interactable;e.prototype.pointerEvents=function(t){return V(this.events.options,t),this};var n=e.prototype._backCompatOption;e.prototype._backCompatOption=function(t,e){var r=n.call(this,t,e);return r===this&&(this.events.options[t]=e),r};},listeners:{"pointerEvents:collect-targets":function(t,e){var n=t.targets,r=t.node,i=t.type,o=t.eventTarget;e.interactables.forEachMatch(r,(function(t){var e=t.events,a=e.options;e.types[i]&&e.types[i].length&&t.testIgnoreAllow(a,r,o)&&n.push({node:r,eventable:e,props:{interactable:t}});}));},"interactable:new":function(t){var e=t.interactable;e.events.getRect=function(t){return e.getRect(t)};},"interactable:set":function(t,e){var n=t.interactable,r=t.options;V(n.events.options,e.pointerEvents.defaults),V(n.events.options,r.pointerEvents||{});}}},Jn=$n,Qn={id:"pointer-events",install:function(t){t.usePlugin(Nn),t.usePlugin(Kn),t.usePlugin(Jn);}},Zn=Qn;var tr={id:"reflow",install:function(t){var e=t.Interactable;t.actions.phases.reflow=true,e.prototype.reflow=function(e){return function(t,e,n){for(var r=t.getAllElements(),i=n.window.Promise,o=i?[]:null,a=function(){var a=r[s],c=t.getRect(a);if(!c)return 1;var l,u=bt(n.interactions.list,(function(n){return n.interacting()&&n.interactable===t&&n.element===a&&n.prepared.name===e.name}));if(u)u.move(),o&&(l=u._reflowPromise||new i((function(t){u._reflowResolve=t;})));else {var p=U(c),f=function(t){return {coords:t,get page(){return this.coords.page},get client(){return this.coords.client},get timeStamp(){return this.coords.timeStamp},get pageX(){return this.coords.page.x},get pageY(){return this.coords.page.y},get clientX(){return this.coords.client.x},get clientY(){return this.coords.client.y},get pointerId(){return this.coords.pointerId},get target(){return this.coords.target},get type(){return this.coords.type},get pointerType(){return this.coords.pointerType},get buttons(){return this.coords.buttons},preventDefault:function(){}}}({page:{x:p.x,y:p.y},client:{x:p.x,y:p.y},timeStamp:n.now()});l=function(t,e,n,r,i){var o=t.interactions.new({pointerType:"reflow"}),a={interaction:o,event:i,pointer:i,eventTarget:n,phase:"reflow"};o.interactable=e,o.element=n,o.prevEvent=i,o.updatePointer(i,i,n,true),nt(o.coords.delta),Ut(o.prepared,r),o._doPhase(a);var s=t.window,c=s.Promise,l=c?new c((function(t){o._reflowResolve=t;})):undefined;o._reflowPromise=l,o.start(r,e,n),o._interacting?(o.move(a),o.end(i)):(o.stop(),o._reflowResolve());return o.removePointer(i,i),l}(n,t,a,e,f);}o&&o.push(l);},s=0;s<r.length&&!a();s++);return o&&i.all(o).then((function(){return t}))}(this,e,t)};},listeners:{"interactions:stop":function(t,e){var n=t.interaction;"reflow"===n.pointerType&&(n._reflowResolve&&n._reflowResolve(),function(t,e){t.splice(t.indexOf(e),1);}(e.interactions.list,n));}}},er=tr;if(un.use(he),un.use(Ce),un.use(Zn),un.use(qe),un.use(Ln),un.use(pe),un.use(Xt),un.use(Gt),un.use(er),un.default=un,"object"===(n(module))&&module)try{module.exports=un;}catch(t){}return un.default=un,un}));
  		
  	} (interact_min$1, interact_min$1.exports));
  	return interact_min$1.exports;
  }

  var interact_minExports = /*@__PURE__*/ requireInteract_min();
  var interact = /*@__PURE__*/getDefaultExportFromCjs(interact_minExports);

  // idbSession.js

  // Genera o recupera un identificador único para la pestaña (se almacena en sessionStorage)
  let tabSessionId = sessionStorage.getItem('tabSessionId');
  if (!tabSessionId) {
    tabSessionId = Date.now() + '-' + Math.random().toString(36).substr(2, 9);
    sessionStorage.setItem('tabSessionId', tabSessionId);
  }

  function getTabSessionId() {
    return tabSessionId;
  }

  function openDB() {
    return new Promise((resolve, reject) => {
      const request = indexedDB.open('SessionStorageDB', 1);

      request.onerror = (event) => reject(event);

      request.onsuccess = (event) => resolve(event.target.result);

      request.onupgradeneeded = (event) => {
        const db = event.target.result;
        if (!db.objectStoreNames.contains('store')) {
          db.createObjectStore('store');
        }
      };
    });
  }

  async function idbGet(key) {
    const db = await openDB();
    return new Promise((resolve, reject) => {
      const tx = db.transaction('store', 'readonly');
      const store = tx.objectStore('store');
      const request = store.get(key);

      request.onerror = (event) => reject(event);
      request.onsuccess = (event) => resolve(event.target.result);
    });
  }

  async function idbSet(key, value) {
    const db = await openDB();
    return new Promise((resolve, reject) => {
      const tx = db.transaction('store', 'readwrite');
      const store = tx.objectStore('store');
      const request = store.put(value, key);

      request.onerror = (event) => reject(event);
      request.onsuccess = (event) => resolve(event.target.result);
    });
  }

  // Importa funciones de Firebase para obtener datos y la instancia de la base de datos.

  async function getDataFromFirebase(ruta) {
    try {
      const reference = ref(database, ruta);
      const snapshot = await get(reference);

      if (snapshot.exists()) {
        console.log(`Datos encontrados en la ruta "${ruta}":`, snapshot.val());
        return snapshot.val();
      } else {
        console.warn(`No se encontró data en la ruta: ${ruta}`);
        return {};
      }
    } catch (error) {
      console.error(`Error al obtener data desde Firebase: ${error.message}`);
      throw error;
    }
  }

  async function saveNewQuestionsToFirebase(ruta, datos, lastKey) {
    try {
      // 1. Obtener prefijo y parte numérica de lastKey
      const prefixMatch = lastKey.match(/^[a-zA-Z]+/);
      if (!prefixMatch) {
        throw new Error("Formato de lastKey inválido");
      }
      const prefix = prefixMatch[0];
      const numberPart = parseInt(lastKey.replace(prefix, ""), 10);
      if (isNaN(numberPart)) {
        throw new Error("La parte numérica de lastKey no es válida");
      }

      // 2. Renombrar claves y preparar datos
      const newQuestions = {};
      let currentNumber = numberPart;

      for (const key of Object.keys(datos)) {
        currentNumber++;

        const newKey = prefix + String(currentNumber).padStart(4, "0");
        const questionData = { ...datos[key] };

        // Eliminar "previous"
        delete questionData.previous;

        // =============================================
        // Determinar el estado según "respuestaCorrecta"
        // =============================================
        const rc = questionData.respuestaCorrecta; // atajo

        // si no existe o es null o undefined
        if (rc == null) {
          questionData.estado = "sin responder";
        }
        // caso 1: rc es un string
        else if (typeof rc === "string") {
          questionData.estado = rc.trim() === "" 
            ? "sin responder" 
            : "no verificado";
        }
        // caso 2: rc es un array
        else if (Array.isArray(rc)) {
          if (
            rc.length === 0 ||
            rc.every(res => typeof res === "string" && res.trim() === "")
          ) {
            questionData.estado = "sin responder";
          } else {
            questionData.estado = "no verificado";
          }
        }
        // caso 3: cualquier otra cosa no prevista
        else {
          questionData.estado = "sin responder";
        }

        newQuestions[newKey] = questionData;
      }

      // 3. Hacer el update en Firebase
      const dbRef = ref(database, ruta);
      await update(dbRef, newQuestions);
      console.log("Preguntas guardadas correctamente en Firebase");
      return newQuestions;

    } catch (error) {
      console.error("Error al guardar las preguntas en Firebase:", error);
      throw error;
    }
  }
  async function saveNewQuestionsToFirebaseAltissia(ruta, datos) {
    try {
      // 1. Crear la referencia en Firebase para la ruta especificada.
      const dbRef = ref(database, ruta);

      // Intentar obtener una copia de los datos existentes en esa ruta.
      // Si la ruta no existe, snapshot.exists() devolverá false.
      const snapshot = await get(dbRef);

      // Mapa para almacenar las firmas únicas de preguntas existentes, para evitar duplicados.
      const existingMap = new Map();

      if (snapshot.exists()) {
        const existingData = snapshot.val();
        Object.keys(existingData).forEach(key => {
          const questionData = existingData[key];
          // Solo se consideran entradas válidas que tengan la propiedad "question"
          if (questionData && questionData.question) {
            const signature = `${questionData.question}|${questionData.uuid}|${JSON.stringify(questionData.answers)}`;
            existingMap.set(signature, true);
          }
        });
      }

      // 2. Procesar el objeto "datos", que puede tener uno o más elementos.
      const newQuestions = {};

      Object.keys(datos).forEach(key => {
        const newQuestion = datos[key];

        if (!newQuestion || !newQuestion.question) {
          console.error("Pregunta no válida, se omite:", newQuestion);
          return;
        }

        // Crear la firma para la nueva pregunta.
        const signature = `${newQuestion.question}|${newQuestion.uuid}|${JSON.stringify(newQuestion.answers)}`;

        // Si la firma ya existe en el mapa, se considera duplicada y se omite.
        if (existingMap.has(signature)) {
          console.log("Pregunta duplicada, no se agrega:", newQuestion.uuid);
          return;
        }

        // Usar la clave original del objeto para Firebase.
        newQuestions[key] = newQuestion;
      });

      // Si no hay nuevas preguntas para agregar, se retorna.
      if (Object.keys(newQuestions).length === 0) {
        console.log("No hay nuevas preguntas para agregar.");
        return null;
      }

      // 3. Actualizar Firebase. Si la ruta no existe, Firebase la crea automáticamente.
      await update(dbRef, newQuestions);
      console.log("Preguntas guardadas correctamente en Firebase:", newQuestions);
      return newQuestions;

    } catch (error) {
      console.error("Error al guardar las preguntas en Firebase:", error);
      throw error;
    }
  }

  async function createDataInSessionStorageDB(customKey, data) {
    console.log("==> Creando datos en SessionStorageDB:");
    console.log("Clave utilizada:", customKey);
    console.log("Dato a insertar:", data);
    
    await idbSet(customKey, data);
    console.log("Datos almacenados correctamente en IndexedDB bajo la clave:", customKey);
  }

  async function getDataFromFirebaseAsync(reset = false) {
      // Define la clave fija para almacenar la data
      const customKey = "dataFirebaseNormalizada";
    
      try {
        // Obtiene la ruta desde localStorage según una configuración
        const switchRutaDinamica = localStorage.getItem('switch-ruta-dinamica') === 'true';
        const ruta = switchRutaDinamica
          ? localStorage.getItem('configRutaDinamic')
          : localStorage.getItem('configRuta');
    
        if (!ruta) {
          console.warn("No se encontró una ruta válida.");
          return;
        }
    
        // Consulta la data almacenada en IndexedDB utilizando la clave
        const storedData = await idbGet(customKey);
        const currentTabSessionId = getTabSessionId();
      
        // Si reset es false y existe data que ya corresponde a la pestaña actual, se evita la actualización
        //if (!reset && storedData && storedData.tabSessionId === currentTabSessionId && storedData.ruta === ruta &&
            //Object.keys(storedData).length !== 2) {
          //console.log("La data ya pertenece a esta pestaña (tabSessionId igual). No se actualiza.");
          //return;
        //}
    
        // Se obtienen nuevos datos desde Firebase
        const dataFirebase = await getDataFromFirebase(ruta);
    
        if (dataFirebase) {
          // Normaliza la data y añade la ruta y el tabSessionId actual
          const normalizedData = {
            ...await normalizarHTML(dataFirebase),
            ruta,
            tabSessionId: currentTabSessionId
          };
    
          // Crea o actualiza la data en SessionStorageDB
          await createDataInSessionStorageDB(customKey, normalizedData);
        } else {
          console.warn("No se encontró data en Firebase.");
        }
      } catch (error) {
        console.error("Error en getDataFromFirebaseAsync:", error);
      }
    }
    
  /**
   * Verifica si "respuestaCorrecta" tiene contenido real:
   * - Si es un string no vacío luego de trim().
   * - Si es un array con al menos un elemento no vacío.
   */
  function hasRespuestaCorrecta(data) {
    const rc = data.respuestaCorrecta;

    // Si no existe o es nulo/undefined, retornamos false
    if (rc == null) return false;

    // Caso: respuestaCorrecta es string
    if (typeof rc === "string") {
      return rc.trim() !== "";
    }

    // Caso: respuestaCorrecta es array
    if (Array.isArray(rc)) {
      // Si al menos un elemento es un string no vacío, retornamos true
      return rc.some(
        (item) => typeof item === "string" && item.trim() !== ""
      );
    }

    // Cualquier otro tipo (número, objeto, etc.) se considera "no tiene valor"
    return false;
  }

  async function saveExistingQuestionsToFirebase(ruta, datos) {
    try {
      console.log("Iniciando la actualización de preguntas en Firebase.");

      // 1. Leer en bloque el nodo destino en Firebase
      const destSnapshot = await get(ref(database, ruta));
      const destFull = destSnapshot.exists() ? destSnapshot.val() : {};
      console.log(`Datos actuales en Firebase en la ruta '${ruta}':`, destFull);

      // 2. Preparar objeto de actualizaciones
      const updates = {};

      // 3. Iterar sobre cada entrada en el objeto "datos"
      for (const preguntaKey in datos) {
        if (!Object.prototype.hasOwnProperty.call(datos, preguntaKey)) continue;

        const preguntaObj = datos[preguntaKey];

        // Buscar la clave tipo "questionXXXX"
        const firebaseKey = Object.keys(preguntaObj).find((key) =>
          key.startsWith("question")
        );

        if (!firebaseKey) {
          console.warn(
            `No se encontró ninguna clave tipo 'questionXXXX' en ${preguntaKey}`
          );
          continue;
        }

        console.log(`\nProcesando ${preguntaKey} con firebaseKey: ${firebaseKey}`);

        // La parte principal (question0043, etc.)
        const questionBlock = preguntaObj[firebaseKey];

        // La parte "data" (puede tener html, ciclo, enunciado, etc.)
        const dataBlock = preguntaObj.data || {};

        // Merge inicial de la data fuente
        const sourceData = {
          ...questionBlock,
          ...dataBlock,
        };

        // 3b. Leemos lo que ya existe en Firebase para esa clave
        const destData = destFull[firebaseKey] || {};
        console.log(`Datos actuales en Firebase para ${firebaseKey}:`, destData);

        // 3c. Aplicamos la lógica de actualización
        let updatedData = {};

        // CASO 1: Registro verificado
        if (destData.estado === "verificado") {
          console.log(`El registro ${firebaseKey} está verificado.`);

          // Únicamente actualizar feedback si:
          // - Viene algo nuevo en sourceData.feedback
          // - Y en destData.feedback está vacío
          if (
            sourceData.feedback &&
            sourceData.feedback.trim() !== "" &&
            (!destData.feedback || destData.feedback.trim() === "")
          ) {
            updatedData = {
              ...destData, // partimos de lo que ya existe
              feedback: sourceData.feedback,
            };
            console.log(
              `Actualizando 'feedback' para ${firebaseKey}:\n` +
                `- Nuevo feedback: "${sourceData.feedback}"\n` +
                `- Feedback anterior: "${destData.feedback || "(vacío)"}"`
            );
          } else {
            console.log(
              `No se actualiza 'feedback' para ${firebaseKey} porque no se cumplieron las condiciones.`
            );
          }

          // En caso de que esté verificado, NO cambiamos el estado ni otros campos.
        }

        // CASO 2: Registro NO verificado
        else {
          console.log(
            `El registro ${firebaseKey} NO está verificado. Se fusionarán los datos.`
          );

          // Partimos de lo que ya hay en Firebase
          updatedData = { ...destData };

          // Fusionamos / sobreescribimos con todo lo que nos trae "sourceData"
          for (const key in sourceData) {
            if (Object.prototype.hasOwnProperty.call(sourceData, key)) {
              updatedData[key] = sourceData[key];
            }
          }

          // Si "previous" existe, lo removemos
          if (updatedData.hasOwnProperty("previous")) {
            delete updatedData.previous;
            console.log(`Eliminando la clave "previous" para ${firebaseKey}.`);
          }

          // Regla especial para "feedback":
          // si el nuevo feedback está vacío, conservamos el existente
          if (
            (!sourceData.feedback || sourceData.feedback.trim() === "") &&
            destData.feedback &&
            destData.feedback.trim() !== ""
          ) {
            updatedData.feedback = destData.feedback;
            console.log(
              `Conservando el feedback existente para ${firebaseKey} porque el nuevo viene vacío.`
            );
          }

          // ================================
          // NUEVA LÓGICA: estado según "respuestaCorrecta"
          // ================================
          if (hasRespuestaCorrecta(updatedData)) {
            updatedData.estado = "no verificado";
          } else {
            updatedData.estado = "sin responder";
          }
        }

        // 3d. Verificamos si hay cambios efectivos
        if (
          Object.keys(updatedData).length > 0 &&
          JSON.stringify(updatedData) !== JSON.stringify(destData)
        ) {
          updates[firebaseKey] = updatedData;
          console.log(`Datos a actualizar para ${firebaseKey}:`, updatedData);
        } else {
          console.log(`No hay cambios para ${firebaseKey}.`);
        }
      }

      // 4. Realizamos un único update en Firebase si hay cambios
      if (Object.keys(updates).length > 0) {
        await update(ref(database, ruta), updates);
        console.log(
          "Se han actualizado las siguientes entradas en Firebase:",
          updates
        );
      } else {
        console.log("No se realizaron actualizaciones, no se cumplieron las condiciones.");
      }
    } catch (error) {
      console.error("Error al guardar las preguntas en Firebase:", error);
      throw error;
    }
  }

  // Exporta una función llamada contenedorAutoSave_js
  function contenedorAutoSave_js() {
      console.log(`[opc-autofill-autosave-moodle: autosave] Iniciando AutoSave...`);

      // Mostrar las respuestas auto-guardadas y esperar a que se complete el proceso
      AutoSave_ShowResponses();

      // Iniciar el monitoreo de cambios en las prefzguntas para actualizaciones dinámicas
      detectarCambiosPreguntas();
      console.log(`[opc-autofill-autosave-moodle: autosave] Finalizando AutoSave...`);
  }

  async function AutoSaveQuestions_SessionStorage(questionsHtml, numeroQuestionUpdate = null) {
      // --------------------------------------------------------------------------
      // 1) Verificar si "questionsHtml" es una colección (NodeList, HTMLCollection)
      //    Si no, convertirlo en array.
      // --------------------------------------------------------------------------
      if (
          !NodeList.prototype.isPrototypeOf(questionsHtml) &&
          !HTMLCollection.prototype.isPrototypeOf(questionsHtml)
      ) {
          questionsHtml = [questionsHtml];
      }

      // --------------------------------------------------------------------------
      // 2) Si el array está vacío, terminamos.
      // --------------------------------------------------------------------------
      if (questionsHtml.length === 0) {
          console.error('[AutoSaveQuestions_SessionStorage] No se pudo ejecutar: no hay preguntas para procesar.');
          return;
      }

      // --------------------------------------------------------------------------
      // 3) Definición de funciones para distintos tipos de pregunta (ya existentes)
      // --------------------------------------------------------------------------
      const funcQuestionType = {
          'inputradio_opcionmultiple_verdaderofalso': inputradio_opcionmultiple_verdaderofalso,
          'inputchecked_opcionmultiple': inputchecked_opcionmultiple,
          'select_emparejamiento': select_emparejamiento,
          'inputtext_respuestacorta': inputtext_respuestacorta,
          'inputtext_respuestacorta2': inputtext_respuestacorta2,
          'draganddrop_text': draganddrop_text,
          'draganddrop_image': draganddrop_image,
          'otroscasos': otroscasos,
      };

      // --------------------------------------------------------------------------
      // 4) Lectura inicial del sessionStorage (si existe)
      // --------------------------------------------------------------------------
      let datosExistentes = {};
      let existeAlmacenamiento = false;

      try {
          const cadenaAlmacenamiento = sessionStorage.getItem('questions-AutoSave');
          if (cadenaAlmacenamiento) {
              datosExistentes = JSON.parse(cadenaAlmacenamiento);
              existeAlmacenamiento = true;
          }
      } catch (err) {
          console.error('[AutoSaveQuestions_SessionStorage] Error al parsear sessionStorage:', err);
          datosExistentes = {};
      }

      // --------------------------------------------------------------------------
      // 5) Determinar si es Caso A (múltiples preguntas) o Caso B (1 con número).
      // --------------------------------------------------------------------------
      const esCasoA =
          questionsHtml.length > 1 || (questionsHtml.length === 1 && numeroQuestionUpdate === null);

      if (esCasoA) {
          // =======================================================
          // CASO A: Múltiples preguntas, o bien 1 sola pero sin numeroQuestionUpdate
          // =======================================================
          const questionsHtmlObject = {};
          let contadorPreguntas = 0;

          // Recorrer todas las preguntas que llegan en "questionsHtml"
          for (const questionHtml of questionsHtml) {
              // Determinar el número DE FORMA NUMÉRICA
              let numberQuestion = null;

              // Si se pasó un numeroQuestionUpdate, se intenta parsear a número
              if (numeroQuestionUpdate !== null) {
                  const numParam = parseInt(numeroQuestionUpdate, 10);
                  if (!isNaN(numParam)) {
                      numberQuestion = numParam;
                  }
              }

              // Si no se obtuvo nada y la pregunta en sí lo tiene:
              if (numberQuestion === null) {
                  // Aquí asumes que tu getQuestionNumber() retorna un string o número
                  // Y lo conviertes a number:
                  const value = getQuestionNumber(questionHtml);
                  const numFromHtml = parseInt(value, 10);
                  if (!isNaN(numFromHtml)) {
                      numberQuestion = numFromHtml;
                  }
              }

              // Si aún es null, usar contador para asignar uno
              if (numberQuestion === null) {
                  contadorPreguntas++;
                  numberQuestion = contadorPreguntas;
              }

              // Determinar tipo de pregunta (asumes que ya existe tu función)
              const questionType = determinarTipoPregunta(questionHtml);
              console.log(`[AutoSaveQuestions_SessionStorage] Pregunta ${numberQuestion}, tipo: ${questionType}`);

              // Llamar la función correspondiente
              const funcion = funcQuestionType[questionType];
              if (!funcion) {
                  console.warn(`No se encontró función para el tipo de pregunta: ${questionType}`);
                  continue;
              }

              const questionData = await funcion(questionHtml);

              // Agregar al objeto de nuevas preguntas
              questionsHtmlObject[`Pregunta${numberQuestion}`] = questionData;
          }

          // ----------------------------------------------------------------------
          // LÓGICA PRINCIPAL de "mezclar"
          // ----------------------------------------------------------------------

          // Si NO hay datos en sessionStorage, se crea de cero
          if (!existeAlmacenamiento) {
              console.log('[AutoSaveQuestions_SessionStorage] No hay datos previos en sessionStorage. Se crea nuevo.');

              // Insertar/actualizar las nuevas
              for (const key in questionsHtmlObject) {
                  if (Object.hasOwn(questionsHtmlObject, key)) {
                      questionsHtmlObject[key].previous = false;
                      datosExistentes[key] = questionsHtmlObject[key];
                  }
              }

              sessionStorage.setItem('questions-AutoSave', JSON.stringify(questionsHtmlObject));


          } else {
              // MEZCLAR: old -> previous:true, new -> previous:false
              console.log('[AutoSaveQuestions_SessionStorage] No está la #1. Se mezclan datos: antiguos previous:true, nuevos previous:false.');

              // a) Marcar existentes
              for (const key in datosExistentes) {
                  if (Object.hasOwn(datosExistentes, key)) {
                      datosExistentes[key].previous = true;
                  }
              }

              // b) Insertar/actualizar las nuevas
              for (const key in questionsHtmlObject) {
                  if (Object.hasOwn(questionsHtmlObject, key)) {
                      questionsHtmlObject[key].previous = false;
                      datosExistentes[key] = questionsHtmlObject[key];
                  }
              }

              // c) Guardar resultado
              sessionStorage.setItem('questions-AutoSave', JSON.stringify(datosExistentes));
          }
      } else {
          // =====================================
          // CASO B: 1 pregunta con un número
          // =====================================
          const questionHtml = questionsHtml[0];
          const numberQuestion = parseInt(numeroQuestionUpdate, 10);

          const questionType = determinarTipoPregunta(questionHtml);
          // console.log(`[AutoSaveQuestions_SessionStorage] Pregunta ${numberQuestion}, tipo: ${questionType}`);

          const funcion = funcQuestionType[questionType];
          if (!funcion) {
              console.warn(`No se encontró función para el tipo de pregunta: ${questionType}`);
              return;
          }

          // 2) Procesar la nueva (o actualizada) pregunta
          const questionData = await funcion(questionHtml);

          // 3) A esta pregunta le asignamos previous: false
          questionData.previous = false;
          datosExistentes[`Pregunta${numberQuestion}`] = questionData;

          // 4) Guardar todo en sessionStorage
          try {
              sessionStorage.setItem('questions-AutoSave', JSON.stringify(datosExistentes));
              console.log('[AutoSaveQuestions_SessionStorage] Se ha actualizado la información de 1 pregunta con previous:false.');
          } catch (error) {
              console.error('Error al guardar en sessionStorage:', error);
          }
      }


  }

  function detectarCambiosPreguntas() {
      // 1. Escucha los cambios en inputs, selects y checkboxes
      const elementos = document.querySelectorAll(
          'input[type="radio"], select, input[type="checkbox"], input[type="text"]'
      );

      elementos.forEach(el => {
          el.addEventListener('change', async (event) => {
              // Si los eventos están deshabilitados, se ignora.
              if (!window.eventosPreguntasHabilitados) return;

              // Si el cambio se produjo dentro del contenedor "barra-lateral-autoquizfillapp", se ignora.
              if (event.target.closest('#barra-lateral-autoquizfillapp')) {
                  return;
              }

              // Verificar si ya se está ejecutando el proceso
              if (window.autoSaveEnEjecucion) {
                  console.log("AutoSave en ejecución, ignorando este cambio.");
                  return;
              }

              window.autoSaveEnEjecucion = true;
              console.log('[detectarCambiosPreguntas] Cambio detectado en', event.target);
              try {
                  await procesoAutoSave(event.target);
              } catch (error) {
                  console.error("Error en procesoAutoSave:", error);
              } finally {
                  window.autoSaveEnEjecucion = false;
              }
          });
      });

      // 2. Configura los elementos "draghome" para que sean arrastrables
      interact('.draghome').draggable({
          inertia: true,
          onmove: function (event) {
              // Aquí puedes incluir lógica de movimiento si lo requieres.
          },
          onend: async function (event) {
              // Si ya se está ejecutando el proceso, ignorar.
              if (window.autoSaveEnEjecucion) {
                  console.log("AutoSave en ejecución, ignorando evento onend.");
                  return;
              }

              window.autoSaveEnEjecucion = true;
              console.log('[detectarCambiosPreguntas] Evento onend disparado para:', event.target);

              // Obtén la posición de soltado (opcional)
              const dropX = event.pageX;
              const dropY = event.pageY;
              console.log(`Elemento soltado en X: ${dropX}, Y: ${dropY}`);

              // Espera a que ocurra algún cambio en el DOM (por ejemplo, animaciones o re-renderizados)
              await new Promise(resolve => {
                  const observer = new MutationObserver(() => {
                      observer.disconnect();
                      console.log('Se ha detectado un cambio en el DOM');
                      resolve();
                  });
                  observer.observe(document.body, { childList: true, subtree: true });
              });

              try {
                  await procesoAutoSave(event.target);
              } catch (error) {
                  console.error("Error en procesoAutoSave:", error);
              } finally {
                  window.autoSaveEnEjecucion = false;
              }
          }
      });

      // 3. Configura el botón de auto-guardado, si existe
      const boton = document.getElementById("upload-autosave");
      if (boton) {
          boton.addEventListener("click", AutoSave_Firebase);
      } else {
          console.error("El botón con ID 'upload-autosave' no fue encontrado.");
      }
  }

  async function procesoAutoSave(elemento) {
      // Verifica si 'questions-AutoSave' existe en sessionStorage
      let questionsAutoSaveStr = sessionStorage.getItem('questions-AutoSave');

      if (!questionsAutoSaveStr) {
          console.log("'questions-AutoSave' no existe. Llamando a AutoSaveQuestions_SessionStorage por primera vez.");
          // Si no existe, se guarda todo de una vez
          const originalAllFormulations = document.querySelectorAll('.formulation.clearfix');
          await AutoSaveQuestions_SessionStorage(originalAllFormulations);
          await AutoSave_ShowResponses();

          // Llamada para renderizar expresiones LaTeX (u otro proceso similar)
          renderizarPreguntas();
      } else {
          // Se parsea el objeto guardado
          const questionsAutoSave = JSON.parse(questionsAutoSaveStr);

          // Ubica el elemento .formulation.clearfix más cercano al elemento disparador
          const formulation = elemento.closest('.formulation.clearfix');

          if (!formulation) {
              console.warn('No se encontró el elemento .formulation.clearfix cercano. Saliendo.');
              return;
          }

          // Se obtiene el número de la pregunta (por ejemplo, mediante getQuestionNumber)
          const numeroPregunta = getQuestionNumber(formulation);

          console.log('[opc-autofill-autosave-moodle: autosave] Actualizando Pregunta', numeroPregunta);
          if (!numeroPregunta) {
              console.warn('No se pudo obtener el número de pregunta. Saliendo.');
              return;
          }

          // Construye la llave de la pregunta, por ejemplo "Pregunta1", "Pregunta2", etc.
          const preguntaKey = `Pregunta${numeroPregunta}`;

          // Si la pregunta ya existe en el objeto guardado, se actualiza
          if (questionsAutoSave[preguntaKey]) {
              await AutoSaveQuestions_SessionStorage(formulation, numeroPregunta);
              console.log('AutoSave_ShowResponses iniciado');
              await AutoSave_ShowResponses(numeroPregunta);

              // Llamada para renderizar expresiones LaTeX
              renderizarPreguntas();
          } else {
              console.log(`La pregunta ${preguntaKey} no existe en questionsAutoSave. Llamando a AutoSaveQuestions_SessionStorage.`);
              // Aquí podrías forzar a guardar todo de nuevo o manejar el caso que prefieras.
          }
      }
  }

  function AutoSave_ShowResponses(numeroPregunta) {
      return new Promise((resolve, reject) => {
          const container = document.getElementById('respuestasautosave');
          if (!container) {
              console.error('Elemento "respuestasautosave" no encontrado.');
              return reject('Elemento "respuestasautosave" no encontrado.');
          }

          const savedData = sessionStorage.getItem('questions-AutoSave');
          if (!savedData) {
              // Solo si no existe ningún dato, se muestra el mensaje.
              return resolve();
          }

          try {
              const responses = JSON.parse(savedData);

              // Si se recibe el parámetro numeroPregunta, solo procesamos esa pregunta
              if (numeroPregunta !== undefined && numeroPregunta !== null) {
                  const key = 'Pregunta' + numeroPregunta;
                  const data = responses[key];

                  // Solo mostramos si esa pregunta tiene 'previous: false'
                  if (data && data.previous === false) {

                      let html = `<div class="preguntaautosave" id="${key}">`;

                      if (data.enunciado && data.tipo !== 'draganddrop_text' && data.tipo !== 'inputtext_respuestacorta' && data.tipo !== 'otroscasos') {
                          html += `<strong>Pregunta ${numeroPregunta}:</strong> ${processContent(data.enunciado)}`;
                      }

                      if (data.tipo === 'inputradio_opcionmultiple_verdaderofalso' || data.tipo === 'inputchecked_opcionmultiple') {
                          if (Array.isArray(data.opcionesRespuesta) && data.opcionesRespuesta.length) {
                              html += `<div class="respuestasautosave">${formatResponseOptions(data.opcionesRespuesta, data.respuestaCorrecta)}</div>`;
                          }
                      } else if (data.tipo === 'select_emparejamiento') {
                          if (Array.isArray(data.opcionesEnunciados) && Array.isArray(data.respuestaCorrecta)) {
                              html += `<div class="respuestasautosave">` + data.opcionesEnunciados.map((enunciado, i) => {
                                  const respuesta = data.respuestaCorrecta[i]?.trim() || "Elegir...";
                                  return `<div>• ${processContent(enunciado)} - <span style="font-weight:500; color:${respuesta !== "Elegir..." ? "MediumBlue" : "black"};">${processContent(respuesta)}</span></div>`;
                              }).join('') + `</div>`;
                          }

                      } else if (data.tipo === 'inputtext_respuestacorta') {
                          const respuestas = Array.isArray(data.respuestaCorrecta) ? data.respuestaCorrecta : [];
                          let respuestaIndex = 0;

                          let enunciadoProcesado = data.enunciado.replace(/\[(.*?)\]/g, (match, contenido) => {
                              let respuesta = respuestas[respuestaIndex] !== undefined ? respuestas[respuestaIndex] : '';
                              respuestaIndex++; // Avanzamos al siguiente elemento en la lista

                              return `<strong style="font-weight: 500;">[<span style="color: mediumblue;">${respuesta}</span>]</strong>`;
                          });

                          // Procesamos el contenido antes de añadirlo a HTML
                          enunciadoProcesado = processContent(enunciadoProcesado);

                          html += `<div class="respuestasautosave"><strong>Pregunta ${numeroPregunta}:</strong> ${enunciadoProcesado}</div>`;
                      } else if (data.tipo === 'inputtext_respuestacorta2') {
                          const respuestas = Array.isArray(data.respuestaCorrecta) ? data.respuestaCorrecta : [];

                          html += '<div class="respuestasautosave">';
                          html += '<strong style="font-weight: 500;">Respuesta:</strong><br>';

                          respuestas.forEach((resp) => {
                              html += `<strong style="font-weight: 500;">[</strong><span style="color: mediumblue; font-weight: 500;">${resp}</span><strong style="font-weight: 500;">]</strong> `;
                          });

                          html += '</div>';


                      } else if (data.tipo === 'draganddrop_text') {
                          // Se asume que 'data.enunciado' contiene el texto con [ ] como marcador
                          let enunciado = data.enunciado;
                          let contador = 0;

                          // Usamos una expresión regular que sólo coincida con corchetes vacíos (o que tengan solo espacios)
                          enunciado = enunciado.replace(/\[\s*\]/g, (match) => {
                              // Obtenemos la respuesta correspondiente o un string vacío si no existe
                              const respuesta = data.respuestaCorrecta[contador] || "";
                              contador++;
                              return `<span style="font-weight:500;">[</span>
                                    <span style="font-weight:500; color:MediumBlue;">${respuesta}</span>
                                    <span style="font-weight:500;">]</span>`;
                          });

                          enunciado = `<strong>Pregunta ${numeroPregunta}:</strong> ` + enunciado;
                          html += `<div class="enunciado">${enunciado}</div>`;


                      } else if (data.tipo === 'draganddrop_image') {
                          const isArray = Array.isArray(data.respuestaCorrecta);
                          const respuestaArray = isArray ? data.respuestaCorrecta : [data.respuestaCorrecta];
                          const imagenDrop = data.imagenDrop;

                          const opcionesHTML = respuestaArray
                              .map(opc => ` <strong style="font-weight: 500">[</strong> <strong style="font-weight: 500; color: mediumblue;">${opc}</strong><strong style="font-weight: 500">]</strong> `)
                              .join(' ');

                          html += `
                            <div>
                                <div style="margin-bottom: 5px;">
                                    ${opcionesHTML}
                                </div>
                                <img src="${imagenDrop}" alt="Imagen de arrastre" class="img-fluid w-100" />
                            </div>
                        `;
                      } else if (data.tipo === 'otroscasos') {
                          html += `
                        <strong>Pregunta ${numeroPregunta}:</strong>
                        <span style="font-weight: 500; color: red;">${processContent(data.enunciado)}</span>
                      `;
                      }

                      // Agregamos el hr solo si esta pregunta no es la última dentro de las guardadas
                      let preguntas = JSON.parse(sessionStorage.getItem('questions-AutoSave'));
                      let keysPreguntas = Object.keys(preguntas);
                      let maxNumero = 0;
                      keysPreguntas.forEach(function (keyIt) {
                          var num = parseInt(keyIt.replace('Pregunta', ''), 10);
                          if (num > maxNumero) {
                              maxNumero = num;
                          }
                      });
                      if (numeroPregunta < maxNumero) {
                          html += '<hr style="margin-top: 5px; margin-bottom: 5px;"></div>';
                      }

                      // Actualizamos / insertamos el contenido
                      let updatedElement = container.querySelector(`#${key}`);
                      if (updatedElement) {
                          updatedElement.outerHTML = html;
                          updatedElement = container.querySelector(`#${key}`);
                      } else {
                          const tempContainer = document.createElement('div');
                          tempContainer.innerHTML = html;
                          updatedElement = tempContainer.firstElementChild;
                          container.appendChild(updatedElement);
                      }

                      // Enfocamos la pregunta actualizada
                      if (updatedElement && typeof updatedElement.scrollIntoView === 'function') {
                          updatedElement.scrollIntoView({ behavior: 'auto', block: 'center' });
                      }
                  } else {
                      console.warn(
                          data
                              ? `La pregunta ${numeroPregunta} existe, pero no tiene previous: true. No se muestra.`
                              : `No se encontró la información para ${key} en los datos guardados.`
                      );
                  }
                  return resolve();
              }

              // Si no se recibió numeroPregunta, procesamos TODAS las preguntas
              // 1) Tomamos todas las entradas
              const entries = Object.entries(responses);
              // 2) Filtramos solo las que tengan previous: true
              const filteredEntries = entries.filter(([key, data]) => data.previous === false);

              // 3) Renderizamos únicamente las preguntas filtradas
              container.innerHTML = filteredEntries
                  .map(([key, data], index, array) => {
                      const questionNumber = key.replace(/\D/g, '');
                      let html = `<div class="preguntaautosave" id="${key}">`;

                      if (data.enunciado && data.tipo !== 'draganddrop_text' && data.tipo !== 'inputtext_respuestacorta'  && data.tipo !== 'otroscasos') {

                          html += `<strong>Pregunta ${questionNumber}:</strong> ${processContent(data.enunciado)}`;

                      }

                      if (data.tipo === 'inputradio_opcionmultiple_verdaderofalso' || data.tipo === 'inputchecked_opcionmultiple') {
                          if (Array.isArray(data.opcionesRespuesta) && data.opcionesRespuesta.length) {
                              html += `<div class="respuestasautosave">${formatResponseOptions(
                                data.opcionesRespuesta,
                                data.respuestaCorrecta
                            )}</div>`;
                          }
                      } else if (data.tipo === 'select_emparejamiento') {
                          if (Array.isArray(data.opcionesEnunciados) && Array.isArray(data.respuestaCorrecta)) {
                              html +=
                                  `<div class="respuestasautosave">` +
                                  data.opcionesEnunciados
                                      .map((enunciado, i) => {
                                          const respuesta = data.respuestaCorrecta[i]?.trim() || 'Elegir...';
                                          return `<div>• ${processContent(
                                            enunciado
                                        )} - <span style="font-weight:500; color:${respuesta !== 'Elegir...' ? 'MediumBlue' : 'black'
                                            };">${processContent(respuesta)}</span></div>`;
                                      })
                                      .join('') +
                                  `</div>`;
                          }


                      } else if (data.tipo === 'inputtext_respuestacorta') {
                          const respuestas = Array.isArray(data.respuestaCorrecta) ? data.respuestaCorrecta : [];
                          let respuestaIndex = 0;

                          let enunciadoProcesado = data.enunciado.replace(/\[(.*?)\]/g, (match, contenido) => {
                              let respuesta = respuestas[respuestaIndex] !== undefined ? respuestas[respuestaIndex] : '';
                              respuestaIndex++; // Avanzamos al siguiente elemento en la lista

                              return `<strong style="font-weight: 500;">[<span style="color: mediumblue;">${respuesta}</span>]</strong>`;
                          });

                          enunciadoProcesado = processContent(enunciadoProcesado);

                          html += `<div class="respuestasautosave"><strong>Pregunta ${questionNumber}:</strong> ${enunciadoProcesado}</div>`;




                      } else if (data.tipo === 'inputtext_respuestacorta2') {
                          const respuestas = Array.isArray(data.respuestaCorrecta) ? data.respuestaCorrecta : [];

                          html += '<div class="respuestasautosave">';
                          html += '<strong style="font-weight: 500;">Respuesta:</strong><br>';

                          respuestas.forEach((resp) => {
                              html += `<strong style="font-weight: 500;">[</strong><span style="color: mediumblue; font-weight: 500;">${resp}</span><strong style="font-weight: 500;">]</strong> `;
                          });

                          html += '</div>';


                      } else if (data.tipo === 'draganddrop_text') {

                          // Se asume que 'data.enunciado' contiene el texto con [ ] como marcador
                          let enunciado = data.enunciado;
                          let contador = 0;

                          // Usamos una expresión regular que sólo coincida con corchetes vacíos (o que tengan solo espacios)
                          enunciado = enunciado.replace(/\[\s*\]/g, (match) => {
                              // Obtenemos la respuesta correspondiente o un string vacío si no existe
                              const respuesta = data.respuestaCorrecta[contador] || "";
                              contador++;
                              return `<span style="font-weight:500;">[</span>
                                    <span style="font-weight:500; color:MediumBlue;">${respuesta}</span>
                                    <span style="font-weight:500;">]</span>`;
                          });

                          enunciado = `<strong>Pregunta ${questionNumber}:</strong> ` + enunciado;
                          html += `<div class="enunciado">${enunciado}</div>`;
                      } else if (data.tipo === 'draganddrop_image') {
                          const isArray = Array.isArray(data.respuestaCorrecta);
                          const respuestaArray = isArray ? data.respuestaCorrecta : [data.respuestaCorrecta];
                          const imagenDrop = data.imagenDrop;

                          const opcionesHTML = respuestaArray
                              .map(
                                  (opc) =>
                                      ` <strong style="font-weight: 500">[</strong> <strong style="font-weight: 500; color: mediumblue;">${opc}</strong><strong style="font-weight: 500">]</strong> `
                              )
                              .join(' ');

                          html += `
                            <div>
                                <div style="margin-bottom: 5px;">
                                    ${opcionesHTML}
                                </div>
                                <img src="${imagenDrop}" alt="Imagen de arrastre" class="img-fluid w-100" />
                            </div>
                        `;
                      } else if (data.tipo === 'otroscasos') {
                          html += `
                        <strong>Pregunta ${questionNumber}:</strong>
                        <span style="font-weight: 500; color: red;">${processContent(data.enunciado)}</span>
                      `;
                      }

                      // Solo agregamos la línea separadora si NO es el último elemento en el nuevo array filtrado
                      html += index < array.length - 1 ? '<hr style="margin-top: 5px; margin-bottom: 5px;"></div>' : '</div>';
                      return html;
                  })
                  .join('');

              resolve();
          } catch (error) {
              console.error('Error al parsear las respuestas:', error);
              container.innerHTML = '<span style="font-weight:500; color:red;">Error</span>';
              reject(error);
          }
      });
  }

  function formatResponseOptions(options, selected) {
      // Convertimos selected en un conjunto para facilitar la comparación
      const selectedSet = new Set(
          Array.isArray(selected)
              ? selected.map(s => s.trim())
              : [selected?.trim()]
      );

      return options.map((option, i) => {
          const literal = options.length > 1
              ? String.fromCharCode(97 + i) + '. '
              : (i + 1) + '. ';

          const isSelected = selectedSet.has(option.trim());
          // Procesamos el contenido y luego verificamos si contiene una imagen
          const processedContent = processContent(option);
          const containsImage = /<img\s+[^>]*>/.test(processedContent);

          if (containsImage && isSelected) {
              // Si contiene imagen y está seleccionado, se aplica el overlay
              // y el literal se muestra en MediumBlue y con font-weight:500
              return `
                <div class="respuesta">
                    <span style="font-weight:500; color:MediumBlue;">${literal}</span>
                    <div class="img-overlay">
                        ${processedContent}
                    </div>
                </div>
            `;
          } else {
              // En otro caso, se aplica el estilo normal (p.ej., color MediumBlue si está seleccionado)
              return `
                <div class="respuesta">
                    <span style="font-weight:500; ${isSelected ? 'color:MediumBlue;' : ''}">
                        ${literal}${processedContent}
                    </span>
                </div>
            `;
          }
      }).join('');
  }

  function processContent(content) {
      if (!content) return '<span style="font-weight:500; color:red;">Sin responder</span>';
      return content
          .replace(/(https?:\/\/\S+\.(?:png|jpg|jpeg|gif|bmp|webp|svg))/gi, '<img src="$1" alt="Imagen" style="max-width: 200px; max-height: 150px;">')
          .replace(/(data:image\/(?:png|jpg|jpeg|gif|bmp|webp|svg);base64,[a-zA-Z0-9+/=]+)/gi, '<img src="$1" alt="Imagen" style="max-width: 200px; max-height: 150px;">')
          .replace(/(\r\n|\n|\r)/g, '<br>');
  }

  async function AutoSave_Firebase() {
      console.log("Ejecutando AutoSave_Firebase...");

      const switchRutaDinamica = localStorage.getItem('switch-ruta-dinamica') === 'true';
      const ruta = switchRutaDinamica
          ? localStorage.getItem('configRutaDinamic')
          : localStorage.getItem('configRuta');

      const dataPage = JSON.parse(sessionStorage.getItem('questions-AutoSave'));

      const dataPageNormalizada = await normalizarHTML(dataPage);
      console.log('DataPageNormalizada:', dataPageNormalizada);

      const dataFirebaseNormalizada = await idbGet("dataFirebaseNormalizada");
      console.log('DataFirebaseNormalizada:', dataFirebaseNormalizada);

      // 🟢 ESPERAR a que `compararPreguntas` termine antes de seguir
      const comparedData = await compararPreguntas(dataPageNormalizada, dataFirebaseNormalizada);

      console.log("DPN Existentes:", comparedData.dpnExistentes);
      console.log("DPN Nuevas:", comparedData.dpnNuevas);

      const dfnKeys = Object.keys(dataFirebaseNormalizada);

      const validKeys = dfnKeys.filter(key => key !== "ruta" && key !== "tabSessionId");

      const lastKey = validKeys.length
          ? validKeys.reduce((max, key) =>
              parseInt(key.replace("question", ""), 10) >
                  parseInt(max.replace("question", ""), 10)
                  ? key
                  : max,
              validKeys[0])
          : "question0000";

      console.log("lastKey1:", lastKey);

      // 🟢 Aseguramos que `saveNewQuestionsToFirebase` solo se ejecute después de que `compararPreguntas` termine
      saveNewQuestionsToFirebase(ruta, comparedData.dpnNuevas, lastKey);

      saveExistingQuestionsToFirebase(ruta, comparedData.dpnExistentes);

      // Si estás dentro de una función async
      getDataFromFirebaseAsync(true);

      // localStorage.removeItem('questions-AutoSave');




  }

  function crearBotonAutoSave() {
      // Buscar el botón original por su texto
      const originalButton = [...document.querySelectorAll("button.btn.btn-primary")].find(button =>
          button.textContent.trim() === "Enviar todo y terminar" ||
          button.textContent.trim() === "Submit all and finish"
      );

      if (!originalButton) {
          console.warn("El botón original no existe. No se creará el botón AutoSave.");
          return;
      }

      // Evitar duplicados
      if (document.getElementById("autoSaveButton")) return;

      // Crear el nuevo botón con clase personalizada
      const newButton = document.createElement("button");
      newButton.textContent = "AutoSave y terminar";
      newButton.className = "btn btn-primary"; // Clase propia para estilos personalizados
      newButton.id = "autoSaveButton";
      newButton.type = "button"; // IMPORTANTE: evita comportamiento de submit en formularios
      newButton.style.display = "block";
      newButton.style.marginBottom = "10px";

      // Crear un mensaje de error oculto
      const errorMessage = document.createElement("p");
      errorMessage.textContent = "Error en AutoSave. No se ha enviado.";
      errorMessage.style.color = "red";
      errorMessage.style.display = "none";
      errorMessage.id = "autoSaveErrorMessage";

      // Agregar evento de clic al nuevo botón
      newButton.addEventListener("click", async (event) => {
          // Evitar que el clic cause acciones por defecto o se propague
          event.preventDefault();
          event.stopPropagation();

          try {
              // Ocultar mensaje de error previo
              errorMessage.style.display = "none";

              // Verificar que AutoSave_Firebase esté definida
              if (typeof AutoSave_Firebase !== "function") {
                  throw new Error("AutoSave_Firebase no está definida.");
              }

              // Ejecutar la función AutoSave_Firebase y esperar su resultado
              const result = await AutoSave_Firebase();

              // Si AutoSave_Firebase retorna un objeto indicando fallo, lanzar error
              if (result && result.success === false) {
                  throw new Error("AutoSave_Firebase falló.");
              }

              // Solo si todo salió bien, simular el clic en el botón original
              originalButton.click();
          } catch (error) {
              console.error("Error en AutoSave_Firebase:", error);
              errorMessage.style.display = "block";
              // Se detiene la ejecución: no se llama a originalButton.click()
              return;
          }
      });

      // Crear un contenedor para el nuevo botón y el mensaje de error
      const wrapperDiv = document.createElement("div");
      wrapperDiv.style.width = "100%";
      wrapperDiv.appendChild(newButton);
      wrapperDiv.appendChild(errorMessage);

      // Insertar el contenedor antes del botón original
      originalButton.parentNode.insertBefore(wrapperDiv, originalButton);
  }

  function autoSaveHideApp() {
      // Buscar el botón original
      const originalButton = [...document.querySelectorAll("button.btn.btn-primary")].find(button =>
          button.textContent.trim() === "Enviar todo y terminar" ||
          button.textContent.trim() === "Submit all and finish"
      );

      if (!originalButton) {
          console.warn("El botón original no existe. No se aplicará autoSaveHideApp.");
          return;
      }

      // Flag para evitar recursión infinita al volver a disparar el click
      let bypassAutoSave = false;

      // Agregar listener de click al botón original
      originalButton.addEventListener("click", async function (event) {
          // Si bypassAutoSave está activo, se permite el click sin intervención adicional
          if (bypassAutoSave) {
              bypassAutoSave = false;
              return; // Permite que se ejecute el comportamiento original
          }

          // Prevenir la acción por defecto y la propagación del evento
          event.preventDefault();
          event.stopPropagation();

          try {
              // Verificar que AutoSave_Firebase esté definida
              if (typeof AutoSave_Firebase !== "function") {
                  throw new Error("AutoSave_Firebase no está definida.");
              }

              // Ejecutar AutoSave_Firebase y esperar a que termine
              const result = await AutoSave_Firebase();

              // Si AutoSave_Firebase retorna un objeto indicando fallo, lanzar error
              if (result && result.success === false) {
                  throw new Error("AutoSave_Firebase falló.");
              }

              // Si todo salió bien, activar bypass y simular el clic en el botón original
              bypassAutoSave = true;
              originalButton.click();
          } catch (error) {
              console.error("Error en AutoSave_Firebase:", error);
              // En caso de error no se dispara el clic del botón original
          }
      });
  }

  // Ejecuta el código solo si la URL incluye "altissia.org" o la página es Moodle
  if (window.location.href.includes('altissia.org') || esPaginaMoodle$1()) {
    (function () {
      console.log('[AutoFillQuiz-App] Creando Interfaz.');

      // 1. Insertar el contenido HTML en el DOM
      document.body.insertAdjacentHTML('beforeend', html);

      // 2. Referencias a los elementos en el DOM
      const barraLateral = document.getElementById('barra-lateral-autoquizfillapp');
      const botonMostrarOcultar = document.getElementById('boton-mostrar-ocultar-autoquizfillapp');
      const body = document.body;

      // 3. Verificar que los elementos existen
      if (!barraLateral || !botonMostrarOcultar) {
        console.error('initBarraLateral: Error: No se encontraron los elementos necesarios en el DOM.');
        return;
      }

      // Íconos de flecha
      const iconFlecha = '<i class="fa-solid fa-angles-right"></i>';
      const iconFlechaRotada = '<i class="fa-solid fa-angles-right fa-rotate-180"></i>';

      // 4. Lectura de valores desde localStorage
      const estadoBarraLocal = localStorage.getItem('barraLateralVisible');     // "true", "false" o null
      const hideAppLocal = localStorage.getItem('hideapp');                    // "true" o "false"
      let isBarraVisible = (estadoBarraLocal === null) ? true : (estadoBarraLocal === 'true');

      // 5. Funciones auxiliares

      /**
       * Aplica el estado (visible u oculto) a la barra lateral y al botón de mostrar/ocultar.
       * @param {boolean} visible - Indica si la barra debe estar visible (true) u oculta (false).
       */
      function aplicarEstadoBarra(visible) {
        if (visible) {
          barraLateral.style.display = 'flex';
          botonMostrarOcultar.innerHTML = iconFlechaRotada;
        } else {
          barraLateral.style.display = 'none';
          botonMostrarOcultar.innerHTML = iconFlecha;
          botonMostrarOcultar.style.left = '10px';
          body.style.marginLeft = '0';
          body.style.width = '100%';
        }
      }

      /**
       * Reposiciona el botón de mostrar/ocultar con base en el ancho actual de la barra lateral.
       */
      function reposicionarBoton() {
        const barraWidth = barraLateral.getBoundingClientRect().width;
        botonMostrarOcultar.style.left = `calc(${barraWidth}px + 10px)`;
      }

      /**
       * Ajusta el contenido de la página según el ancho de la barra lateral (margen e ancho).
       */
      function ajustarContenidoPagina() {
        const barraWidth = barraLateral.getBoundingClientRect().width;
        body.style.marginLeft = `${barraWidth}px`;
        body.style.width = `calc(100% - ${barraWidth}px)`;
      }

      /**
       * Alterna la visibilidad de la barra lateral y actualiza LocalStorage.
       */
      function alternarBarraLateral() {
        isBarraVisible = !isBarraVisible;
        localStorage.setItem('barraLateralVisible', String(isBarraVisible));

        if (isBarraVisible) {
          barraLateral.style.display = 'flex';
          botonMostrarOcultar.innerHTML = iconFlechaRotada;
          reposicionarBoton();
          ajustarContenidoPagina();
        } else {
          barraLateral.style.display = 'none';
          botonMostrarOcultar.innerHTML = iconFlecha;
          botonMostrarOcultar.style.left = '10px';
          body.style.marginLeft = '0';
          body.style.width = '100%';
        }
      }

      // 6. Aplicar estado inicial de la barra lateral
      aplicarEstadoBarra(isBarraVisible);

      // Si la barra lateral está oculta y hideApp = "true", ocultar también el botón
      if (!isBarraVisible && hideAppLocal === 'true') {
        botonMostrarOcultar.style.display = 'none';
      }

      // 7. Observador para detectar cambios de tamaño en la barra lateral
      const resizeObserver = new ResizeObserver(() => {
        reposicionarBoton();
        ajustarContenidoPagina();
      });
      resizeObserver.observe(barraLateral);

      // 8. Evento de clic en el botón de mostrar/ocultar
      botonMostrarOcultar.addEventListener('click', () => {
        alternarBarraLateral();
      });

      // 9. Evento de teclado (Ctrl + Q)
      document.addEventListener('keydown', (event) => {
        if (event.ctrlKey && (event.key === 'q' || event.key === 'Q')) {
          event.preventDefault();
          console.log('keydown: Ctrl + Q detectado');

          // Alternar la barra lateral
          alternarBarraLateral();

          // Lectura y asignación del nuevo estado
          const nuevaBarraVisible = localStorage.getItem('barraLateralVisible') === 'true';
          localStorage.setItem('hideapp', String(!nuevaBarraVisible));

          const btnAutoQuizFillApp = document.querySelector('#boton-mostrar-ocultar-autoquizfillapp');
          const btnAutoSave = document.querySelector('#autoSaveButton');

          const botonAutoSaveLocal = localStorage.getItem('botonAutoSave') || 'false';
          const hideApp = localStorage.getItem('hideapp') || 'false';

          if (nuevaBarraVisible) {
            btnAutoQuizFillApp.style.display = 'block';

            // Verifica las condiciones para mostrar el botón de autoSave
            if (botonAutoSaveLocal === 'true' && window.location.href.includes('mod/quiz/summary.php') && hideApp === 'false') {
              console.log('Condición cumplida, ejecutando crearBotonAutoSave()');
              crearBotonAutoSave();
            } else {
              console.log('Condición no cumplida, no se ejecuta crearBotonAutoSave()');
            }
            btnAutoSave.style.display = 'block';
          } else {
            btnAutoQuizFillApp.style.display = 'none';
            btnAutoSave.style.display = 'none';
          }
        }
      });

      // 10. Ajustar el contenido de la página inicialmente si la barra está visible
      if (isBarraVisible) {
        ajustarContenidoPagina();
      }

      // (Opcional) Retornar la barra si la necesitas en otro lugar de esta IIFE
      // return barraLateral;
    })();
  }

  var css_248z$6 = "\r\n\r\n /* Estilos para el contenedor principal */\r\n .contenedor-login-autoquizfillapp {\r\n    width: 90%;\r\n    max-width: 400px;\r\n    /* Limitar el ancho máximo */\r\n    padding: 20px;\r\n    box-sizing: border-box;\r\n    background-color: #ffffff;\r\n    border-radius: 8px;\r\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    position: absolute;\r\n    top: 25%;\r\n    /* Centra verticalmente en la mitad superior */\r\n    left: 50%;\r\n    transform: translate(-50%, -25%);\r\n    font-family: 'Poppins', sans-serif;\r\n    /* Aplicar fuente Poppins */\r\n}\r\n\r\n/* Estilos para el título */\r\n.contenedor-titulo-autoquizfillapp h2 {\r\n    font-family: 'Poppins', sans-serif;\r\n    /* Asegurar que el título también use Poppins */\r\n    font-size: 32px;\r\n    color: #333;\r\n    margin-bottom: 20px;\r\n    text-align: center;\r\n}\r\n\r\n\r\n#titulo-verified {\r\n    font-family: 'Poppins', sans-serif;\r\n    /* Asegurar que el título también use Poppins */\r\n    font-size: 18px;\r\n    margin-bottom: 20px;\r\n    text-align: center;\r\n    font-weight: 600;\r\n    color: #34495e;\r\n    margin: 0;\r\n\r\n}\r\n\r\n/* Estilos para los inputs */\r\n.contenedor-inputs-autoquizfillapp {\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 15px;\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.login-entrada-autoquizfillapp {\r\n    width: 100%;\r\n    padding: 10px;\r\n    font-size: 16px;\r\n    border: 1px solid #bdc3c7;\r\n    border-radius: 5px;\r\n    box-sizing: border-box;\r\n    font-family: 'Poppins', sans-serif;\r\n    /* Aplicar fuente Poppins a los inputs */\r\n}\r\n\r\n.login-entrada-autoquizfillapp:focus {\r\n    border-color: #3498db;\r\n    outline: none;\r\n    box-shadow: 0 0 5px rgba(52, 152, 219, 0.3);\r\n}\r\n\r\n/* Estilos para el botón */\r\n.contenedor-boton-autoquizfillapp {\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n.login-boton-autoquizfillapp {\r\n    width: 100%;\r\n    padding: 10px;\r\n    background-color: #3498db;\r\n    color: white;\r\n    font-size: 16px;\r\n    border: none;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s ease;\r\n    font-family: 'Poppins', sans-serif;\r\n    /* Aplicar fuente Poppins al botón */\r\n}\r\n\r\n.login-boton-autoquizfillapp:hover {\r\n    background-color: #2980b9;\r\n}";
  styleInject(css_248z$6);

  var css_248z$5 = "/* Título centrado */\r\n#titulo-autofillquizapp {\r\n    font-size: 1.5rem;\r\n    /* Tamaño más grande para el título */\r\n    font-weight: 600;\r\n    color: #34495e;\r\n    /* Un color más oscuro y elegante */\r\n    text-align: center;\r\n    flex-grow: 1;\r\n    /* Ocupar el espacio disponible */\r\n}\r\n\r\n/* Ajuste para asegurarse de que el botón tiene el espacio adecuado */\r\n#boton-hamburguesa-autofillquizapp {\r\n    background-color: #0073e6;\r\n    /* Fondo blanco */\r\n    color: #ffffff;\r\n    /* Azul moderno para el icono */\r\n    border: 2px solid #0073e6;\r\n    /* Bordes sutiles con el mismo color que el icono */\r\n    border-radius: 5px;\r\n    /* Botón redondo */\r\n    cursor: pointer;\r\n    /* Cambia el cursor a mano */\r\n    font-size: 24px;\r\n    /* Tamaño del icono */\r\n    width: 40px;\r\n    /* Ancho fijo */\r\n    height: 40px;\r\n    /* Alto fijo */\r\n    display: inline-flex;\r\n    /* Usar flexbox para alinear */\r\n    justify-content: center;\r\n    /* Centrar horizontalmente el icono */\r\n    align-items: center;\r\n    /* Centrar verticalmente el icono */\r\n    padding: 0;\r\n    /* Eliminar padding */\r\n    margin: 0;\r\n    /* Eliminar márgenes */\r\n    position: relative;\r\n    /* Mantener la posición en su contenedor */\r\n    z-index: 1000;\r\n    /* Asegura que el botón esté por encima de otros elementos */\r\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n    /* Sombra suave para darle profundidad */\r\n    transition: all 0.3s ease;\r\n    /* Transición suave para el hover */\r\n}\r\n\r\n/* Hover para darle efecto */\r\n#boton-hamburguesa-autofillquizapp:hover {\r\n    background-color: #002c67;\r\n    /* Fondo azul al hacer hover */\r\n    color: #ffffff;\r\n    /* Color blanco para el icono en hover */\r\n    border: 2px solid #002c67;\r\n    /* Bordes sutiles con el mismo color que el icono */\r\n\r\n    box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);\r\n    /* Aumenta ligeramente la sombra en hover */\r\n    transform: translateY(-2px);\r\n    /* Levanta el botón ligeramente en hover */\r\n}\r\n\r\n/* Icono del botón de hamburguesa */\r\n#boton-hamburguesa-autofillquizapp i {\r\n    pointer-events: none;\r\n    /* Asegura que el icono no interfiera con el clic */\r\n}\r\n\r\n\r\n/* Contenido principal ocupará el resto del espacio */\r\n\r\n\r\n/* Ocultar barra de desplazamiento en navegadores basados en WebKit */\r\n#contenido-principal::-webkit-scrollbar {\r\n    display: none;\r\n    /* Ocultar barra de desplazamiento */\r\n}\r\n\r\n    /* Cabecera del panel: botón a la izquierda, título centrado */\r\n    .panel-header {\r\n        display: flex;\r\n        justify-content: flex-start; /* Alinear el botón y el título */\r\n        align-items: center;\r\n        padding: 15px 20px; /* Mayor espacio para una mejor sensación */\r\n        background-color: #ffffff; /* Fondo blanco limpio para el header */\r\n        border-bottom: 1px solid #e1e4e8; /* Borde inferior suave */\r\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05); /* Sombra ligera */\r\n        position: relative;\r\n        border-radius: 4px 4px 0 0; /* Redondea solo los bordes superiores */\r\n        height: 70px;\r\n\r\n    }\r\n\r\n    #panel-autofillquizapp {\r\n        display: block;\r\n        border-radius: 4px;\r\n        width: 100%; /* Ocupa todo el ancho del contenedor */\r\n        height: 100vh; /* O ajustado al contenedor padre */\r\n        overflow-y: hidden; /* Deshabilita el desplazamiento vertical */\r\n        box-sizing: border-box;\r\n    }\r\n    \r\n    #contenido-principal {\r\n        width: 100%;\r\n        height: calc(100% - 70px); /* Por ejemplo, ajusta el espacio si hay un header */\r\n        padding: 10px 15px 10px 15px;\r\n        background-color: #ffffff;\r\n        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\r\n        /* overflow-y: auto; /* Permitir scroll si el contenido es largo */\r\n        -ms-overflow-style: none; /* Ocultar barra en IE y Edge */\r\n        scrollbar-width: none; /* Ocultar barra en Firefox */\r\n        border-radius: 0 0 8px 8px;\r\n        box-sizing: border-box;\r\n    }\r\n    ";
  styleInject(css_248z$5);

  var css_248z$4 = "/* ==========================================================================\r\n   1. Contenedor Principal\r\n   ========================================================================== */\r\n#autofillautosave_moodle {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    /* Altura ajustable según se requiera */\r\n}\r\n\r\n/* ==========================================================================\r\n     2. Sección: Ruta y Ciclo\r\n     ========================================================================== */\r\n\r\n#containerRutaFirebase .title {\r\n    font-size: 14px;\r\n    font-weight: 600;\r\n}\r\n\r\n#containerRutaFirebase .label {\r\n    font-size: 14px;\r\n    color: #34495e;\r\n}\r\n\r\n/* ==========================================================================\r\n     4. Sección: Ruta Dinámica\r\n     ========================================================================== */\r\n\r\n.select-ruta {\r\n    width: 100%;\r\n    padding: 3px;\r\n    font-size: 15px;\r\n    font-family: 'Poppins', sans-serif;\r\n    border: 1px solid #bdc3c7;\r\n    border-radius: 4px;\r\n    background-color: #ffffff;\r\n    color: #2c3e50;\r\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n    transition: border 0.3s ease, box-shadow 0.3s ease;\r\n    margin-bottom: 5px;\r\n}\r\n\r\n.boton-ruta {\r\n    width: 100%;\r\n    padding: 5px;\r\n    background-color: #0072c5;\r\n    color: white;\r\n    border: none;\r\n    border-radius: 5px;\r\n    font-size: 16px;\r\n    font-family: 'Poppins', sans-serif;\r\n    cursor: pointer;\r\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n    transition: background-color 0.3s ease, box-shadow 0.3s ease;\r\n}\r\n\r\n\r\n#containerRutaFirebase {\r\n  display: flex;\r\n  flex-direction: column; /* o row, dependiendo de cómo quieras alinear los div */\r\n  height: 38px;\r\n  margin-left: 2px;\r\n}\r\n\r\n#containerRutaFirebase div {\r\n  margin-top: -6px;\r\n  padding: 0;\r\n}\r\n\r\n\r\n\r\n/* ==========================================================================\r\n     5. Sección: Wrapper de AutoFill y AutoSave\r\n     ========================================================================== */\r\n/* Contenedor padre */\r\n#container-autofillautosave {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n    height: 580px; /* Se fija la altura total */\r\n    /* Si prefieres que sea máximo, podrías usar max-height en lugar de height */\r\n  }\r\n  \r\n  /* Reglas compartidas para cada subcontenedor */\r\n  .subcontainer-autoquiz-autofill {\r\n    background-color: #f4f4f4;\r\n    padding: 5px 5px 5px 10px;\r\n    border-radius: 8px;\r\n    border: 1px solid #dcdcdc;\r\n    margin: 0;\r\n    flex: 0 1 auto;        /* Altura basada en el contenido (auto) */\r\n    max-height: 50%;  \r\n    overflow-y: auto;\r\n  }\r\n\r\n\r\n  .subcontainer-autoquiz-autosave {\r\n    background-color: #f4f4f4;\r\n    padding: 5px 5px 5px 10px;\r\n    border-radius: 8px;\r\n    border: 1px solid #dcdcdc;\r\n    margin-bottom: 20px;\r\n    flex: 0 1 auto;        /* Altura basada en el contenido (auto) */\r\n    max-height: 50%;  \r\n    overflow-y: auto; \r\n\r\n}\r\n\r\n@media (max-height: 580px) {\r\n    .subcontainer-autoquiz-autofill,\r\n    .subcontainer-autoquiz-autosave {\r\n        flex: 1;\r\n        max-height: 50%;\r\n    }\r\n}\r\n\r\n\r\n  \r\n /* Asegura que el contenedor del cuerpo pueda usar todo el ancho disponible */\r\n#body-autoquiz-autosave,\r\n#body-autoquiz-autofill {\r\n    flex-direction: column;\r\n    font-size: 11px;\r\n    overflow-y: auto;\r\n    height: calc(100% - 30px);\r\n  }\r\n\r\n    /* Estilos para la barra de desplazamiento vertical en ambos subcontenedores */\r\n    #body-autoquiz-autosave::-webkit-scrollbar,\r\n    #body-autoquiz-autofill::-webkit-scrollbar {\r\n      width: 0.4em; /* Ancho de la barra de desplazamiento */\r\n    }\r\n    \r\n    #body-autoquiz-autosave::-webkit-scrollbar-thumb,\r\n    #body-autoquiz-autofill::-webkit-scrollbar-thumb {\r\n      background-color: rgba(0, 0, 0, 0.2); /* Color del thumb */\r\n      border-radius: 10px;\r\n    }\r\n    \r\n    #body-autoquiz-autosave::-webkit-scrollbar-track,\r\n    #body-autoquiz-autofill::-webkit-scrollbar-track {\r\n      background: transparent; /* Fondo transparente */\r\n    }\r\n    \r\n    #body-autoquiz-autosave::-webkit-scrollbar-button,\r\n    #body-autoquiz-autofill::-webkit-scrollbar-button {\r\n      display: none; /* Oculta botones (flechas) */\r\n    }\r\n  \r\n  /* Reglas para el elemento de la pregunta */\r\n  .preguntaautosave {\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    padding: 0;\r\n    color: #34495e;\r\n    flex-wrap: wrap;\r\n    width: 100%;\r\n    word-wrap: break-word;\r\n    word-break: break-word;\r\n  }\r\n  \r\n  /* Si es necesario, también se puede aplicar a los elementos internos de respuestas */\r\n  .respuestasautosave {\r\n    width: 100%;\r\n    min-width: 0;\r\n    overflow-wrap: break-word;\r\n    word-break: break-word;\r\n    white-space: normal;\r\n  }\r\n  \r\n  #moodle-config label {\r\n    margin-bottom: 0rem;\r\n  }\r\n  \r\n  #subopcion-config {\r\n    margin-bottom: 0rem;\r\n    font-weight: 500;\r\n    margin-left: 3px;\r\n  }\r\n\r\n/* --------------------------------------------------------------------------\r\n     5.1. Subcontenedor de AutoFill\r\n     -------------------------------------------------------------------------- */\r\n\r\n/* Header de AutoFill: título y switch */\r\n.header-autoquiz {\r\n    margin-top: 0px;\r\n    margin-bottom: 0px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    position: relative;\r\n    height: 30px;\r\n}\r\n\r\n.header-autoquiz h2 {\r\n    font-size: 20px;\r\n    font-weight: 600;\r\n    color: #34495e;\r\n    margin: 0;\r\n}\r\n\r\n/* Switch para AutoFill (y AutoSave) */\r\n.switch-autoquiz {\r\n    position: relative;\r\n    display: inline-block;\r\n    width: 34px;\r\n    height: 20px;\r\n    margin:0px;\r\n}\r\n\r\n.switch-autoquiz input {\r\n    opacity: 0;\r\n    width: 0;\r\n    height: 0;\r\n}\r\n\r\n.slider {\r\n    position: absolute;\r\n    cursor: pointer;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: #ccc;\r\n    transition: 0.4s;\r\n    border-radius: 20px;\r\n}\r\n\r\n.slider:before {\r\n    position: absolute;\r\n    content: \"\";\r\n    height: 12px;\r\n    width: 12px;\r\n    border-radius: 50%;\r\n    left: 4px;\r\n    bottom: 4px;\r\n    background-color: white;\r\n    transition: 0.4s;\r\n}\r\n\r\n.switch-autoquiz input:checked+.slider {\r\n    background-color: #3498db;\r\n}\r\n\r\n.switch-autoquiz input:checked+.slider:before {\r\n    transform: translateX(14px);\r\n}\r\n\r\n/* ==========================================================================\r\n     2. Sección de Usuarios\r\n     ========================================================================== */\r\n\r\n/* Contenedor de usuarios (oculto por defecto) */\r\n.users {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    margin-bottom: 15px;\r\n}\r\n\r\n/* Usuario actual: ícono y nombre */\r\n.usuario-actual {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    flex: 1;\r\n}\r\n\r\n.nombre-usuario {\r\n    font-size: 14px;\r\n    font-weight: 600;\r\n    color: #34495e;\r\n    margin: 0 5px;\r\n}\r\n\r\n/* Select para el siguiente usuario */\r\n.select-siguiente-usuario {\r\n    font-size: 14px;\r\n    font-weight: 600;\r\n    color: #34495e;\r\n    border: none;\r\n    background-color: transparent;\r\n    outline: none;\r\n    appearance: none;\r\n    cursor: pointer;\r\n    text-align: right;\r\n    padding-right: 0;\r\n    direction: rtl;\r\n    /* Alinea el desplegable a la derecha */\r\n}\r\n\r\n/* Opciones dentro del select */\r\n.select-siguiente-usuario option {\r\n    font-size: 12px;\r\n    padding: 10px;\r\n    text-align: right;\r\n    direction: ltr;\r\n}\r\n\r\n/* Limitación de altura y scroll vertical */\r\n.select-siguiente-usuario {\r\n    max-height: 30px;\r\n    overflow-y: auto;\r\n}\r\n\r\n/* Personalización de la barra de desplazamiento */\r\n.select-siguiente-usuario::-webkit-scrollbar {\r\n    width: 2px;\r\n}\r\n\r\n.select-siguiente-usuario::-webkit-scrollbar-thumb {\r\n    background-color: rgba(52, 73, 94, 0.2);\r\n    border-radius: 10px;\r\n}\r\n\r\n.select-siguiente-usuario::-webkit-scrollbar-track {\r\n    background-color: transparent;\r\n}\r\n\r\n/* Resalta la opción seleccionada */\r\n.select-siguiente-usuario option:checked {\r\n    background-color: #dcdde1;\r\n    font-weight: bold;\r\n}\r\n\r\n.select-siguiente-usuario option:hover {\r\n    background-color: #f1f2f6;\r\n}\r\n\r\n.select-siguiente-usuario option:hover:checked {\r\n    background-color: #dcdde1;\r\n}\r\n\r\n/* Botón para pasar al siguiente usuario */\r\n.boton-siguiente-usuario {\r\n    margin: 0;\r\n    font-weight: 600;\r\n    border: none;\r\n    background-color: transparent;\r\n    cursor: pointer;\r\n    padding: 0 3px;\r\n}\r\n\r\n.boton-siguiente-usuario i {\r\n    font-size: 0.90em;\r\n    color: #34495e;\r\n}\r\n\r\n\r\n.img-overlay {\r\n    position: relative; /* Necesario para que el ::after se posicione relativo a este contenedor */\r\n    display: inline-block; /* O block según convenga en tu diseño */\r\n}\r\n\r\n.img-overlay::after {\r\n    content: \"\";\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    /* Fondo MediumBlue con 10% de opacidad */\r\n    background-color: rgba(0, 0, 205, 0.2);\r\n    pointer-events: none; /* Permite que se hagan clics sobre la imagen si fuera necesario */\r\n}\r\n\r\n#upload-autosave {\r\n    position: relative;\r\n    display: inline-block;\r\n    border: none;\r\n    background: none;\r\n    cursor: pointer;\r\n    font-size:0.9em; /* Ajusta el tamaño según necesites */\r\n    color: inherit; /* Mantiene el color del texto */\r\n    transition: color 0.3s ease-in-out;\r\n}\r\n\r\n#upload-autosave:hover {\r\n    color: mediumblue;\r\n}\r\n\r\n\r\n/* Contenedor principal para cada pregunta */\r\n.question-container {\r\n    margin: 0px 0px 0px 0px;\r\n    padding: 5px 5px 5px 0px;\r\n  }\r\n  \r\n  /* Encabezado de la pregunta: título y badge de estado */\r\n  .question-header {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n  }\r\n  \r\n  /* Título de la pregunta (si deseas usar una clase específica en lugar de <strong>) */\r\n  .question-title {\r\n    font-weight: bold;\r\n    margin-right: 0.5rem;\r\n  }\r\n  \r\n  /* Badge del estado (color y tipografía) */\r\n  .question-state-badge {\r\n    /* Valores por defecto */\r\n    font-weight: 500;\r\n    padding: 0.2rem 0.4rem;\r\n    border-radius: 4px;\r\n    margin-left: 0.3rem;\r\n    color: #fff; /* Color de texto por defecto (blanco) */\r\n  }\r\n  \r\n  /* Botón para mostrar/ocultar la información (icono de ojo) */\r\n  .btn-toggle-visibility {\r\n    border: none;\r\n    background: transparent;\r\n    cursor: pointer;\r\n    font-size: 0.8rem;\r\n    margin-right: 0.5rem;\r\n    /* Ajusta si deseas más separación o estilos de hover */\r\n  }\r\n  \r\n  /* Contenedor que mostrará/ocultará el contenido de la pregunta */\r\n  .detail-container {\r\n    display: none; /* oculto por defecto */\r\n    margin-top: 0;\r\n  }\r\n  \r\n  /* Estilos de colores de fondo para cada estado, \r\n     si quieres usarlos como clases en lugar de inline-styles */\r\n  .badge-no-data {\r\n    background-color: #e63946; /* Rojo */\r\n    color: #fff;\r\n  }\r\n  \r\n  .badge-no-verificado {\r\n    background-color: #f1c40f; /* Amarillo mostaza */\r\n    color: #000;\r\n  }\r\n  \r\n  .badge-sin-responder {\r\n    background-color: #d3d3d3; /* Gris claro */\r\n    color: #000;\r\n  }\r\n  \r\n  .badge-verificado {\r\n    background-color: #28a745; /* Verde */\r\n    color: #fff;\r\n  }\r\n  \r\n  /* Ejemplo adicional: \r\n     si deseas animaciones suaves al mostrar/ocultar:\r\n     (requiere que cambies en JS de 'display: none' a \r\n     manipular la altura o la opacidad) */\r\n  \r\n  /* .detail-container {\r\n    transition: all 0.3s ease;\r\n  } */\r\n  ";
  styleInject(css_248z$4);

  function contenedorUsers_js() {
      const elementoDesplegableUsuario = document.querySelector('.dropdown-user-nick');
      const elementoUsuarioActual = document.getElementById('nombre-usuario-actual');
      const selectSiguienteUsuario = document.getElementById('siguiente-usuario');
      const botonSiguienteUsuario = document.getElementById('boton-siguiente-usuario');

      let nombreUsuarioActual = null; // Inicializado como null por defecto

      if (!elementoDesplegableUsuario) {
          console.warn("Elemento .dropdown-user-nick no encontrado. Estableciendo 'No login'.");
          nombreUsuarioActual = "No login"; // Asignar 'No login' como usuario actual
      } else {
          nombreUsuarioActual = elementoDesplegableUsuario.childNodes[1]?.textContent.trim();
          if (!nombreUsuarioActual) {
              console.error("No se pudo obtener el nombre del usuario actual.");
              botonSiguienteUsuario.style.display = 'none';
              return;
          }
      }

      elementoUsuarioActual.textContent = nombreUsuarioActual;

      const usuariosGuardados = JSON.parse(localStorage.getItem('listaUsuariosFiltrados'));
      if (!usuariosGuardados) {
          // console.error("No se encontraron usuarios en localStorage.");
          botonSiguienteUsuario.style.display = 'none';
          return;
      }

      // console.log("Usuarios encontrados en localStorage:", usuariosGuardados);
      const listaUsuarios = Object.values(usuariosGuardados);

      selectSiguienteUsuario.innerHTML = ""; // Limpia el select

      // Identifica el índice del usuario actual
      const indiceUsuarioActual = listaUsuarios.findIndex(usuario => usuario.usuario === nombreUsuarioActual);

      let siguienteUsuarioPredeterminado = null;

      // Si es "No login", selecciona el primer usuario como predeterminado
      if (nombreUsuarioActual === "No login") {
          siguienteUsuarioPredeterminado = listaUsuarios[0]?.usuario || null; // Primer usuario o null si la lista está vacía
      } else if (indiceUsuarioActual !== -1 && indiceUsuarioActual < listaUsuarios.length - 1) {
          siguienteUsuarioPredeterminado = listaUsuarios[indiceUsuarioActual + 1].usuario;
      }

      // Crear opciones en el select
      listaUsuarios.forEach((usuario) => {
          const optionElement = document.createElement("option");
          optionElement.value = usuario.usuario;
          optionElement.textContent = usuario.usuario;

          // Marca la opción predeterminada
          if (usuario.usuario === siguienteUsuarioPredeterminado) {
              optionElement.selected = true;
          }

          selectSiguienteUsuario.appendChild(optionElement);
      });

      if (siguienteUsuarioPredeterminado) ; else if (indiceUsuarioActual === listaUsuarios.length - 1) ; else ;

      // Agregar evento click al botón
      botonSiguienteUsuario.addEventListener('click', procesarUsuarioSeleccionado);

      contenedorRuta_js();
  }

  async function procesarUsuarioSeleccionado() {
      try {
          // Obtiene el valor seleccionado en el select
          const select = document.getElementById('siguiente-usuario');
          const selectedUser = select.value;

          if (!selectedUser) {
              console.error("No se selecciono ningun usuario.");
              return;
          }

          // Obtiene la lista de usuarios desde localStorage
          const listaUsuariosFiltrados = JSON.parse(localStorage.getItem('listaUsuariosFiltrados'));
          if (!listaUsuariosFiltrados) {
              console.error("No se encontro 'listaUsuariosFiltrados' en localStorage.");
              return;
          }

          // Busca el usuario en la lista
          const usuario = listaUsuariosFiltrados.find(user => user.usuario === selectedUser);
          if (!usuario) {
              console.error(`El usuario '${selectedUser}' no fue encontrado en 'listaUsuariosFiltrados'.`);
              return;
          }

          const { usuario: username, contraseña: password } = usuario;

          console.log(`Username: ${username}`);
          console.log(`Password: ${password}`);

          // Verifica si hay una sesion activa
          const sesionActiva = await verificarAutenticacion();
          if (sesionActiva) {
              console.log("Hay una sesion activa. Cerrando sesion...");
              const logoutExitoso = await autoLogout();
              if (!logoutExitoso) {
                  console.error("Error al cerrar la sesion.");
                  return;
              }
          }

          // Inicia sesion con el usuario seleccionado
          console.log(`Iniciando sesion para el usuario: ${username}`);
          const loginExitoso = await autoLogin(username, password);

          if (loginExitoso) {
              console.log(`Redirigiendo a la pagina de calificaciones para el usuario: ${username}`);
              const dominioActual = new URL(localStorage.getItem("selectedLoginUrl")).origin; // Obtiene solo el dominio
              window.location.href = `${dominioActual}/grade/report/overview/index.php`; // Redirige
          } else {
              console.error("No se pudo iniciar sesion. Verifique las credenciales.");
          }
      } catch (error) {
          console.error("Ocurrio un error durante el proceso:", error);
      }
  }

  function contenedorRuta_js$1() {

      const contenidoPrincipal = document.getElementById('contenido-principal');
      const containerOptionSelect = document.querySelector('.containerOption');
      const containerRutaFirebase = document.getElementById('containerRutaFirebase');
      const ruta = localStorage.getItem('configRuta');
      const ciclo = localStorage.getItem('ciclo');

      // Función para crear y mostrar el mensaje de ruta inválida
      const rutaInvalida = () => {
          if (!document.getElementById('mensaje-ruta-invalida')) {
              const mensaje = document.createElement('div');
              mensaje.id = 'ruta-invalida';
              mensaje.textContent = 'No ha seleccionado una ruta o ciclo';
              Object.assign(mensaje.style, {
                  color: 'red',
                  fontWeight: '500',
                  fontSize: '0.95em',
                  fontStyle: 'italic',
                  textAlign: 'center'
              });
              contenidoPrincipal.appendChild(mensaje);
              console.log('[opc-autofill-autosave-moodle: ruta]  No ha seleccionado una ruta o ciclo');
          }
      };

      if (!ruta || !ciclo) {
          if (containerOptionSelect) containerOptionSelect.style.display = 'none';
          localStorage.setItem('autofill-autoquizfillapp', 'desactivado');
          localStorage.setItem('autosave-autoquizfillapp', 'desactivado');
          rutaInvalida();
          return; // Salir de la función ya que faltan datos
      }

      // Si se tienen ruta y ciclo definidos, actualizamos los contenedores
      if (containerRutaFirebase) {
          // Eliminar mensaje de advertencia si existe
          const mensajeExistente = document.getElementById('ruta-invalida');

          if (mensajeExistente) {
              mensajeExistente.remove();
          }

          containerRutaFirebase.style.display = 'flex';
          containerRutaFirebase.innerHTML = `
        <div>
          <span class="title">Ruta:</span> <span class="label">${ruta}</span>
        </div>
        <div>
          <span class="title">Ciclo:</span> <span class="label">${ciclo}</span>
        </div>
      `;

          console.log(`[opc-autofill-autosave-moodle: ruta]  Valor de ruta: ${ruta}, Valor de ciclo:${ciclo}`);
      } else {
          console.error('[opc-autofill-autosave-moodle: ruta] No se encontró el contenedor de la ruta y ciclo.');
      }

  }

  // <<<<<<<<<<<<<< Ruta Dinamica >>>>>>>>>>>>>>

  async function contenedorRutaDinamica_js() {
      // Obtiene los valores 'configRuta' y 'ciclo' del almacenamiento local
      const ruta = localStorage.getItem('configRuta');
      const ciclo = localStorage.getItem('ciclo');
      const containerRutaFirebase = document.getElementById('containerRutaFirebase');
      
      // Se declara con let para poder actualizar su valor
      let rutaDinamica = sessionStorage.getItem('configRutaDinamic');

      // Verifica si 'configRuta' y 'ciclo' están definidos en el almacenamiento local
      if (!ruta || !ciclo) {
          // Si alguno de los valores no está definido, llama a la función 'contenedorRuta_js' y termina la ejecución
          contenedorRuta_js$1();
          return;
      } 
      
      else if (rutaDinamica && rutaDinamica !== "dinámica") {
          containerRutaFirebase.style.display = 'flex';
          containerRutaFirebase.innerHTML = `
            <div>
              <span class="title">Ruta:</span> <span class="label" style="font-weight: 500; color: green;">${rutaDinamica}</span>
            </div>
            <div>
              <span class="title">Ciclo:</span> <span class="label">${ciclo}</span>
            </div>
        `;
          
      } else {
          containerRutaFirebase.style.display = 'flex';

          // Espera a que la función asíncrona obtenga la ruta dinámica
          rutaDinamica = await obtenerRutaDinamica(ruta);
       
          if (rutaDinamica) {
              console.log("La nueva ruta dinámica es:", rutaDinamica);

              sessionStorage.setItem('configRutaDinamic', rutaDinamica);
              console.log("Se ha almacenado la ruta dinámica en sessionStorage bajo la key 'configRutaDinamic'");

              containerRutaFirebase.innerHTML = `
                <div>
                  <span class="title">Ruta:</span> <span class="label" style="font-weight: 500; color: green;">${rutaDinamica}</span>
                </div>
                <div>
                  <span class="title">Ciclo:</span> <span class="label">${ciclo}</span>
                </div>
            `;
          }
      }
  }



  async function obtenerRutaDinamica(ruta) {
      try {
          const universidad = ruta.split('/')[0]; // Universidad

          // Obtener Materia
          const elementosRutaCurso = document.querySelectorAll('.breadcrumb-item a[href*="/course/view.php"]');
          let materiaValor = null;

          if (elementosRutaCurso.length > 0) {
              // Obtener el atributo 'title' del primer elemento de la ruta
              const tituloRuta = elementosRutaCurso[0].getAttribute('title');

              // Extraer las claves entre corchetes del título usando una expresión regular
              const coincidencias = tituloRuta.match(/\[([A-Za-z]+[^\]]+)\]/g)?.filter(match => /[A-Za-z]/.test(match));

              if (coincidencias && coincidencias.length > 0) {
                  // Limpiar los corchetes para obtener la clave de búsqueda
                  const claveBusqueda = coincidencias[0].replace(/[\[\]]/g, '');
                  const rutaMateria = `ConfigRuta/opciones/${universidad}/unemi:codigo-materias-de-nivelacion`;

                  try {
                      // Obtener los datos de materias desde Firebase
                      const snapshotMateria = await get(ref(database, rutaMateria));
                      const opcionesMateria = snapshotMateria.val();

                      if (opcionesMateria) {
                          // Buscar la materia utilizando métodos funcionales para evitar bucles anidados
                          const entradaEncontrada = Object.entries(opcionesMateria).find(([key, value]) => {
                              return value.split(',')
                                  .map(item => item.trim())
                                  .some(val => {
                                      if (val.includes(':')) {
                                          const [parte1, parte2] = val.split(':').map(item => item.trim());
                                          return (parte1 === claveBusqueda && tituloRuta.includes(parte2));
                                      } else {
                                          return val === claveBusqueda;
                                      }
                                  });
                          });

                          if (entradaEncontrada) {
                              materiaValor = entradaEncontrada[0];
                              console.log(`[opc-autofill-autosave-moodle: ruta]  Materia encontrada: "${materiaValor}"`);
                          } else {
                              console.warn(`[opc-autofill-autosave-moodle: ruta]  No se encontró ninguna coincidencia para la clave de búsqueda: ${claveBusqueda}`);
                          }
                      } else {
                          console.warn(`[opc-autofill-autosave-moodle: ruta]  No se encontraron opciones para materias en la ruta: ${rutaMateria}`);
                      }
                  } catch (errorFirebase) {
                      console.error(`Error al obtener datos de Firebase en la ruta ${rutaMateria}:`, errorFirebase);
                  }
              } else {
                  console.warn('[opc-autofill-autosave-moodle: ruta]  No se encontraron coincidencias en el título del breadcrumb.');
              }
          } else {
              console.warn('[opc-autofill-autosave-moodle: ruta]  No se encontró materia.');
          }

          // Obtener Test 
          let testClave = null;
          const elementosQuiz = document.querySelectorAll('.breadcrumb-item a[href*="/mod/quiz/"]');

          if (elementosQuiz.length === 0) {
              console.warn('[opc-autofill-autosave-moodle: ruta]  No se encontró test.');
          } else {
              // Función auxiliar para obtener el número del quiz a partir del texto
              const obtenerNumeroQuiz = (texto) => {
                  // Buscar número en formato numérico
                  const matchNumero = texto.match(/\d+/);
                  if (matchNumero) return parseInt(matchNumero[0], 10);

                  // Si no se encuentra número, buscar número escrito en palabras
                  const numWords = {
                      'uno': 1,
                      'dos': 2,
                      'tres': 3,
                      'cuatro': 4,
                      'cinco': 5,
                      'seis': 6,
                      'siete': 7,
                      'ocho': 8,
                      'nueve': 9,
                      'diez': 10
                      // Se pueden agregar más si es necesario
                  };

                  const matchPalabra = texto.toLowerCase().match(/\b(uno|dos|tres|cuatro|cinco|seis|siete|ocho|nueve|diez)\b/);
                  return matchPalabra ? numWords[matchPalabra[0]] : null;
              };

              // Obtener el elemento que contiene el texto del quiz
              const quizTextElement = elementosQuiz[0].querySelector('span.text-truncate');
              if (!quizTextElement) {
                  console.warn('[opc-autofill-autosave-moodle: ruta]  No se encontró el elemento de texto del quiz.');
              } else {
                  const quizText = quizTextElement.textContent.trim();
                  const quizNumber = obtenerNumeroQuiz(quizText);

                  if (quizNumber === null) {
                      console.warn('[opc-autofill-autosave-moodle: ruta]  No se encontró número del test.');
                  } else {
                      const testRuta = `ConfigRuta/opciones/${universidad}/unemi:niv-test`;

                      try {
                          // Obtener los datos de tests desde Firebase
                          const testSnapshot = await get(ref(database, testRuta));
                          const testOptions = testSnapshot.val();

                          if (!testOptions) {
                              console.warn(`No se encontraron opciones para test en la ruta: ${testRuta}`);
                          } else {
                              // Buscar la clave que incluya "Test" seguido del número obtenido
                              testClave = Object.keys(testOptions).find(key => testOptions[key].includes(`Test ${quizNumber}`));

                              if (testClave) {
                                  console.log(`[opc-autofill-autosave-moodle: ruta]  Test encontrado: "${testClave}"`);
                              } else {
                                  console.warn(`[opc-autofill-autosave-moodle: ruta]  No se encontró una clave para Test ${quizNumber}`);
                              }
                          }
                      } catch (firebaseError) {
                          console.error(`Error al obtener datos de Firebase en la ruta ${testRuta}:`, firebaseError);
                      }
                  }
              }
          }

          // Verificar y Actualizar ConfigRutaDinamic
          if (materiaValor && testClave) {
              console.log("Se tienen valores para materiaValor y testClave:", materiaValor, testClave);

              // Dividir la configuración de ruta en partes
              const rutaSplit = ruta.split('/');
              console.log("La ruta se ha dividido en partes:", rutaSplit);

              // Reemplazar las últimas dos partes con materiaValor y testClave
              rutaSplit[rutaSplit.length - 2] = materiaValor;
              console.log("Se ha reemplazado la penúltima parte de la ruta con materiaValor:", rutaSplit);

              rutaSplit[rutaSplit.length - 1] = testClave;
              console.log("Se ha reemplazado la última parte de la ruta con testClave:", rutaSplit);

              // Unir las partes para formar la nueva configuración de ruta
              const rutaDinamica = rutaSplit.join('/');
              return rutaDinamica;
          } else if ((!testClave || !materiaValor) && !window.location.href.includes("mod/quiz/")) {
              return "dinámica";
          } else if ((!testClave || !materiaValor) && window.location.href.includes("mod/quiz/")) {
              // Obtener la configuración de ruta dinámica almacenada en sessionStorage
              console.log('[opc-autofill-autosave-moodle: ruta]  No se pudieron determinar la materia o quiz y el url incluye "mod/quiz/"');
              await crearSelectsDinamicos(materiaValor, testClave);
              return null;
          }

      } catch (error) {
          // Manejo de errores generales en la función
          console.error('Error en actualizaConfigRutaDinamic:', error);
          return null;
      }
  }

  async function crearSelectsDinamicos(materiaValor, testClave) {
      console.log('Creando Selects Dinamicos.');

      // Mostrar y configurar el contenedor principal
      const ciclo = localStorage.getItem('ciclo');
      const containerRutaFirebase = document.getElementById('containerRutaFirebase');
      containerRutaFirebase.style.display = 'flex';

      const rutaDinamica = "dinámica";
      containerRutaFirebase.innerHTML = `
        <div>
            <span class="title">Ruta:</span> <span class="label" style="font-weight: 500; color: green;">${rutaDinamica}</span>
        </div>
        <div>
            <span class="title">Ciclo:</span> <span class="label">${ciclo}</span>
        </div>`;

      // Mostrar y limpiar el contenedor donde se agregarán los selects
      const containerRutaDinamicaFirebase = document.getElementById('containerRutaDinamicaFirebase');
      if (!containerRutaDinamicaFirebase) {
          console.error('No se encontró el contenedor con id="containerRutaDinamicaFirebase".');
          return;
      }
      containerRutaDinamicaFirebase.style.display = 'block';
      containerRutaDinamicaFirebase.innerHTML = '';

      // Obtener configuración y validar si la ruta contiene "UNEMI"
      const configRuta = localStorage.getItem('configRuta') || '';
      const rutaLista = configRuta.split('/');

      if (!rutaLista.includes('UNEMI')) {
          console.log(`[opc-autofill-autosave-moodle: ruta]  Ruta no incluye UNEMI`);
          contenedorRuta_js$1();
          return;
      }

      // Verificar si la ruta corresponde a 'niv' o 'adm'
      if (rutaLista.includes('niv')) {
          // Definir las rutas dinámicas para Materia y Test
          const rutasSelectDinamics = [
              { 
                  path: "ConfigRuta/opciones/UNEMI/unemi:niv-materias-de-nivelacion",
                  defaultText: "Seleccionar Materia",
                  id: "select-materia"
              },
              { 
                  path: "ConfigRuta/opciones/UNEMI/unemi:niv-test",
                  defaultText: "Seleccionar Test",
                  id: "select-test"
              }
          ];

          console.log('[opc-autofill-autosave-moodle: ruta]  Generando selects dinámicos para Materia y Test');

          try {
              // Recorrer cada configuración de ruta para obtener las opciones desde Firebase
              for (const { path, defaultText, id } of rutasSelectDinamics) {
                  const optionsSnapshot = await get(ref(database, path));
                  if (!optionsSnapshot.exists()) {
                      console.warn(`No se encontraron datos en la ruta: ${path}`);
                      continue;
                  }

                  const options = optionsSnapshot.val();

                  // Crear el elemento select con la clase común "select-ruta" y un id único
                  const selectElement = document.createElement('select');
                  selectElement.classList.add('select-ruta');
                  selectElement.id = id;
                  selectElement.style.display = 'block';

                  // Opción por defecto
                  const defaultOption = document.createElement('option');
                  defaultOption.value = "";
                  defaultOption.textContent = defaultText;
                  defaultOption.disabled = true;
                  defaultOption.selected = true;
                  selectElement.appendChild(defaultOption);

                  // Agregar las opciones provenientes de Firebase
                  Object.entries(options).forEach(([key, value]) => {
                      const optionElement = document.createElement('option');
                      optionElement.value = key;
                      optionElement.textContent = value;
                      
                      // Seleccionar automáticamente si coincide con el valor pasado
                      if (id === "select-materia" && materiaValor !== null && key === materiaValor) {
                          optionElement.selected = true;
                      }
                      if (id === "select-test" && testClave !== null && key === testClave) {
                          optionElement.selected = true;
                      }
                      selectElement.appendChild(optionElement);
                  });

                  // Agregar el select al contenedor
                  containerRutaDinamicaFirebase.appendChild(selectElement);
              }

              // Crear y agregar el botón "Guardar Ruta"
              const botonGuardarRuta = document.createElement('button');
              botonGuardarRuta.textContent = 'Guardar Ruta';
              botonGuardarRuta.classList.add('boton-ruta');
              // Asignar un id único, por ejemplo, "boton-ruta-guardar"
              botonGuardarRuta.id = 'boton-ruta-guardar';
              botonGuardarRuta.addEventListener('click', guardarRutaDinamica);
              containerRutaDinamicaFirebase.appendChild(botonGuardarRuta);


              // Actualizar la visibilidad de los selects si es necesario
              actualizarVisibilidadSelects(true);

          } catch (error) {
              console.error('Error al procesar los selects dinámicos:', error);
          }
      } else if (rutaLista.includes('adm')) {
          console.log(`[opc-autofill-autosave-moodle: ruta]  Ruta Dinámica no disponible para ${configRuta}`);
          contenedorRuta_js$1();
      } else {
          console.log(`[opc-autofill-autosave-moodle: ruta]  Ruta Dinámica no disponible para ${configRuta}`);
          contenedorRuta_js$1();
      }
  }


  function guardarRutaDinamica() {
      console.log('Guardando ruta dinámica...');

      // Obtener configRuta desde localStorage
      const configRuta = localStorage.getItem('configRuta');
      if (!configRuta) {
          console.error('No se encontró configRuta en localStorage.');
          return;
      }

      // Dividir configRuta por "/" y eliminar los últimos dos elementos
      const configRutaParts = configRuta.split('/');
      configRutaParts.splice(-2); // Elimina los últimos dos elementos
      console.log('Partes de configRuta después de eliminar los últimos dos elementos:', configRutaParts);

      // Obtener el contenedor que agrupa los selects (y el botón)
      const container = document.getElementById('containerRutaDinamicaFirebase');
      if (!container) {
          console.error('No se encontró el contenedor con id "containerRutaDinamicaFirebase".');
          return;
      }

      // Obtener los selects de materia y test
      const selectMateria = container.querySelector('#select-materia');
      const selectTest = container.querySelector('#select-test');

      if (!selectMateria || !selectTest) {
          console.error('No se encontraron los selects "select-materia" y/o "select-test".');
          return;
      }

      // Obtener los valores seleccionados de cada select
      const materiaValue = selectMateria.value;
      const testValue = selectTest.value;
      console.log('Valor de materia:', materiaValue);
      console.log('Valor de test:', testValue);

      // Verificar que ambos selects tengan un valor válido
      if (!materiaValue) {
          alert('Por favor, selecciona una materia válida.');
          return;
      }
      if (!testValue) {
          alert('Por favor, selecciona un test válido.');
          return;
      }

      // Combinar las partes de configRuta con los valores seleccionados para formar la nueva ruta
      const newRuta = [...configRutaParts, materiaValue, testValue].join('/');
      console.log('Nueva ruta construida:', newRuta);

      // Guardar la nueva ruta en sessionStorage
      sessionStorage.setItem('configRutaDinamic', newRuta);
      console.log('Ruta dinámica guardada en sessionStorage:', newRuta);

      // Actualizar el contenido del elemento con id "ruta-configruta"
      contenedorRutaDinamica_js();

      // Ocultar el contenedor de selects, en este caso el id "subject-dinamic", si existe
      const contenedorSelects = document.getElementById('containerRutaDinamicaFirebase');
      if (contenedorSelects) {
          contenedorSelects.style.display = 'none';
          console.log('Contenedor "containerRutaDinamicaFirebase" ocultado.');
      } else {
          console.log('No se encontró el contenedor con id "containerRutaDinamicaFirebase" para ocultar.');
      }
  }




  function actualizarVisibilidadSelects(isVisible) {
      const selects = document.querySelectorAll('.dynamic-select');
      selects.forEach(select => select.style.display = 'block' );
      //console.log(`Selects ${isVisible ? "mostrados" : "ocultos"}`);
  }

  // <<<<<<<<<<<<<< Ruta >>>>>>>>>>>>>>

  async function response_inputradio_opcionmultiple_verdaderofalso(pregunta, questionData) {
      // console.log("Respondiendo preguntas inputradio_opcionmultiple_verdaderofalso");

    // Aseguramos que questionData.RespuestaCorrecta tenga un valor.
    const respuestaCorrectaEsperada = (questionData && typeof questionData.respuestaCorrecta === 'string')
      ? questionData.respuestaCorrecta
      : '';
    // console.log("Respuesta correcta esperada:", respuestaCorrectaEsperada);

    // Obtenemos el contenedor de la formulación.
    const formulation = obtenerFormulationClearfix(pregunta);
    // console.log("Formulation:", formulation);

    // Obtenemos todos los inputs radio dentro de la formulación.
    const allInputRadio = formulation.querySelectorAll('input[type="radio"]');

    // Iteramos sobre cada input radio.
    for (const inputRadio of allInputRadio) {
      // Se asume que el label asociado es el siguiente elemento en el DOM.
      let labelInput = inputRadio.nextElementSibling;
      let textoOpcion = '';

      if (labelInput) {
        // Si el label contiene un elemento con clase "flex-fill", se extrae el contenido desde allí.
        const flexFillElement = labelInput.querySelector('.flex-fill');
        if (flexFillElement) {
          textoOpcion = await extractContentInOrder(flexFillElement);
        } else {
          // Si no, se extrae directamente del label.
          textoOpcion = await extractContentInOrder(labelInput);
        }
        // Si no se encuentra un elemento MathJax, se eliminan literales iniciales (como "a.", "b.", etc.).
        const mathJaxElement = labelInput.querySelector('.MathJax');
        if (!mathJaxElement) {
          textoOpcion = textoOpcion.replace(/^[a-zA-Z]\.|^[ivxlcdmIVXLCDM]+\./, '').trim();
        }
      } else {
        console.log("No se encontró label asociado para el input radio:", inputRadio);
      }

      // Si el input ya está marcado, se registra su texto.
      if (inputRadio.checked) ;

      // Solo comparamos si tenemos una respuesta esperada.
      if (respuestaCorrectaEsperada && textoOpcion.trim() === respuestaCorrectaEsperada.trim()) {
        // console.log("Respuesta esperada encontrada. Seleccionando la opción:", textoOpcion);
        inputRadio.checked = true;
        // Disparamos un evento de cambio, si es necesario.
        inputRadio.dispatchEvent(new Event('change', { bubbles: true }));
      }
    }

    // console.log("Opciones de respuesta extraídas:", opcionesRespuesta);
    // console.log("Respuesta seleccionada:", respuestaCorrecta || respuestaCorrectaEsperada);
  }

  async function response_inputchecked_opcionmultiple(pregunta, questionData) {
    // console.log("Respondiendo preguntas inputchecked_opcionmultiple");

    // 1. Obtenemos las respuestas correctas esperadas desde questionData (clave: respuestaCorrecta).
    let respuestasCorrectasEsperadas = [];
    const respuestasData = questionData.respuestaCorrecta;
    if (respuestasData) {
      if (Array.isArray(respuestasData)) {
        respuestasCorrectasEsperadas = respuestasData.map(r => r.trim());
      } else if (typeof respuestasData === 'string') {
        respuestasCorrectasEsperadas = [respuestasData.trim()];
      }
    }
    // console.log("Respuestas correctas esperadas:", respuestasCorrectasEsperadas);

    // 2. Obtenemos el contenedor de la formulación.
    const formulation = obtenerFormulationClearfix(pregunta);
    // console.log("Formulation:", formulation);

    // 3. Obtenemos todos los inputs checkbox dentro de la formulación.
    const allInputCheckbox = formulation.querySelectorAll('input[type="checkbox"]');

    // 4. Iteramos sobre cada input checkbox.
    for (const inputCheckbox of allInputCheckbox) {
      // Se obtiene el id del label a partir del atributo "aria-labelledby".
      const labelId = inputCheckbox.getAttribute('aria-labelledby');
      if (!labelId) {
        console.log("No se encontró el atributo aria-labelledby para el input checkbox:", inputCheckbox);
        continue;
      }

      // Escapamos el id para usarlo en el selector.
      const escapedLabelId = CSS.escape(labelId);
      const labelElement = formulation.querySelector(`#${escapedLabelId}`);

      let textoOpcion = '';
      if (labelElement) {
        // Se extrae el contenido del label.
        textoOpcion = await extractContentInOrder(labelElement);
        // Se eliminan posibles literales iniciales (por ejemplo: "a.", "b.", etc.).
        textoOpcion = textoOpcion.replace(/^[a-zA-Z]\.|^[ivxlcdmIVXLCDM]+\./, '').trim();
      } else {
        console.log("No se encontró label asociado para el input checkbox con id:", labelId);
      }

      // Si el checkbox ya está marcado, se añade su texto a las respuestas correctas.
      if (inputCheckbox.checked) ;

      // Si el texto de la opción coincide con alguna de las respuestas correctas esperadas, se marca el checkbox.
      if (respuestasCorrectasEsperadas.some(r => r === textoOpcion)) {
        // console.log("Respuesta esperada encontrada. Seleccionando la opción:", textoOpcion);
        inputCheckbox.checked = true;
        inputCheckbox.dispatchEvent(new Event('change', { bubbles: true }));
      }
    }

    // console.log("Opciones de respuesta extraídas:", opcionesRespuesta);
    // console.log("Respuestas seleccionadas:",  respuestaCorrecta.length > 0 ? respuestaCorrecta : respuestasCorrectasEsperadas);
  }

  async function response_select_emparejamiento(pregunta, questionData) {
    // console.log("Respondiendo preguntas select emparejamiento");

    // 1. Extraer los arrays de enunciados y respuestas correctas de questionData.
    let opcionesEnunciadosEsperadas = [];
    let respuestasCorrectasEsperadas = [];
    if (questionData) {
      if (Array.isArray(questionData.opcionesEnunciados)) {
        opcionesEnunciadosEsperadas = questionData.opcionesEnunciados.map(enun => enun.trim());
      } else if (typeof questionData.opcionesEnunciados === 'string') {
        opcionesEnunciadosEsperadas = [questionData.opcionesEnunciados.trim()];
      }
      if (Array.isArray(questionData.respuestaCorrecta)) {
        respuestasCorrectasEsperadas = questionData.respuestaCorrecta.map(resp => resp.trim());
      } else if (typeof questionData.respuestaCorrecta === 'string') {
        respuestasCorrectasEsperadas = [questionData.respuestaCorrecta.trim()];
      }
    }
    // console.log("Opciones enunciados esperadas:", opcionesEnunciadosEsperadas);
    // console.log("Respuestas correctas esperadas:", respuestasCorrectasEsperadas);

    // 2. Obtener el contenedor de la formulación.
    const formulation = obtenerFormulationClearfix(pregunta);
    // console.log("Formulation:", formulation);

    // 3. Obtener todos los <select> dentro de la formulación.
    const allSelects = formulation.querySelectorAll('select');

    // 4. Iterar sobre cada <select>.
    for (const selectElement of allSelects) {
      // Buscamos el enunciado asociado al <select> en la misma fila (<tr>), en la celda con clase "text".
      let textoPregunta = '';
      const textoElement = selectElement.closest('tr')?.querySelector('td.text');
      if (textoElement) {
        // Si la celda tiene texto, lo usamos como enunciado.
        if (textoElement.innerText.trim()) {
          textoPregunta = textoElement.innerText.trim();
        } else {
          // Si no hay texto, buscamos si contiene una imagen.
          const imgElement = textoElement.querySelector('img');
          if (imgElement) {
            textoPregunta = imgElement.src;
            console.log('Obteniendo imagen ya convertida:', imgElement.src);
          }
        }
      }

      // Si se obtuvo un enunciado, lo procesamos.
      if (textoPregunta) {
        // Buscamos la posición de este enunciado en el array de enunciados esperados.
        const index = opcionesEnunciadosEsperadas.indexOf(textoPregunta);
        if (index !== -1) {
          // Si se encontró, la respuesta correcta correspondiente es:
          const respuestaEsperada = respuestasCorrectasEsperadas[index];
          // console.log("Enunciado encontrado:", textoPregunta, " - Respuesta esperada:", respuestaEsperada);

          // Recorremos las opciones del <select> para encontrar aquella que coincida con la respuesta.
          for (const option of selectElement.options) {
            // Se ignora la opción "Elegir..." (valor "0").
            if (option.value !== "0") {
              if (option.textContent.trim() === respuestaEsperada) {
                // Seleccionamos esta opción.
                selectElement.value = option.value;
                selectElement.dispatchEvent(new Event('change', { bubbles: true }));
                console.log("Seleccionado en select:", respuestaEsperada);
                break; // Terminamos de iterar las opciones para este <select>.
              }
            }
          }
        } else {
          console.log("El enunciado no coincide con ninguno esperado:", textoPregunta);
        }
      }
    }

    // console.log("Enunciados encontrados:", enunciadosEncontrados);
    // console.log("Respuestas seleccionadas:", respuestasSeleccionadas);
  }

  async function response_inputtext_respuestacorta(pregunta, questionData) {
    console.log("Iniciando response_inputtext_respuestacorta");
    console.log("Pregunta:", pregunta);
    console.log("Question Data:", questionData);

    // Aseguramos que questionData.respuestaCorrecta tenga un valor.
    let respuestaCorrectaEsperada = '';
    if (questionData) {
      if (typeof questionData.respuestaCorrecta === 'string') {
        respuestaCorrectaEsperada = questionData.respuestaCorrecta;
      } else if (Array.isArray(questionData.respuestaCorrecta) && questionData.respuestaCorrecta.length > 0) {
        respuestaCorrectaEsperada = questionData.respuestaCorrecta[0];
      }
    }
      
    console.log("Respuesta correcta esperada:", respuestaCorrectaEsperada);

    // Obtenemos el contenedor de la formulación.
    const formulation = obtenerFormulationClearfix(pregunta);
    console.log("Formulation encontrada:", formulation);

    // Buscamos el input text dentro de la formulación.
    const inputText = formulation.querySelector('input[type="text"]');
    if (!inputText) {
      console.log("No se encontró input text en la pregunta:", pregunta);
      return;
    }
    console.log("Input text encontrado:", inputText);

    // Asignamos el valor al input y actualizamos también el atributo "value"
    inputText.value = respuestaCorrectaEsperada;
    inputText.setAttribute('value', respuestaCorrectaEsperada);
    console.log("Valor asignado al input text:", inputText.value);

    // Disparamos eventos para notificar la modificación.
    const eventInput = new Event('input', { bubbles: true });
    const eventChange = new Event('change', { bubbles: true });
    inputText.dispatchEvent(eventInput);
    inputText.dispatchEvent(eventChange);
    console.log("Eventos 'input' y 'change' disparados en input text.");
  }

  async function response_inputtext_respuestacorta2(pregunta, questionData) {
    console.log("Iniciando response_inputtext_respuestacorta2");
    console.log("Pregunta:", pregunta);
    console.log("Question Data:", questionData);

    // Aseguramos que questionData.respuestaCorrecta tenga un valor.
    let respuestaCorrectaEsperada = '';
    if (questionData) {
      if (typeof questionData.respuestaCorrecta === 'string') {
        respuestaCorrectaEsperada = questionData.respuestaCorrecta;
      } else if (Array.isArray(questionData.respuestaCorrecta) && questionData.respuestaCorrecta.length > 0) {
        respuestaCorrectaEsperada = questionData.respuestaCorrecta[0];
      }
    }
      
    console.log("Respuesta correcta esperada:", respuestaCorrectaEsperada);

    // Obtenemos el contenedor de la formulación.
    const formulation = obtenerFormulationClearfix(pregunta);
    console.log("Formulation encontrada:", formulation);

    // Buscamos el input text dentro de la formulación.
    const inputText = formulation.querySelector('input[type="text"]');
    if (!inputText) {
      console.log("No se encontró input text en la pregunta:", pregunta);
      return;
    }
    console.log("Input text encontrado:", inputText);

    // Asignamos el valor al input y actualizamos también el atributo "value"
    inputText.value = respuestaCorrectaEsperada;
    inputText.setAttribute('value', respuestaCorrectaEsperada);
    console.log("Valor asignado al input text:", inputText.value);

    // Disparamos eventos para notificar la modificación.
    const eventInput = new Event('input', { bubbles: true });
    const eventChange = new Event('change', { bubbles: true });
    inputText.dispatchEvent(eventInput);
    inputText.dispatchEvent(eventChange);
    console.log("Eventos 'input' y 'change' disparados en input text.");
  }

  /**
   * Función que responde la pregunta de tipo "drag and drop image" utilizando los datos proporcionados.
   * @param {HTMLElement} pregunta - Elemento que representa la pregunta en el DOM.
   * @param {Object} questionData - Objeto con los datos de la pregunta, donde questionData.respuestaCorrecta es un array con las respuestas correctas.
   *                                 Algunas entradas pueden ser cadenas vacías, lo que indica que en esa posición no se debe colocar nada.
   */
  async function response_draganddrop_image(pregunta, questionData) {
      console.log('Iniciando response_draganddrop_image para la pregunta:', pregunta);

      // Se obtiene el contenedor de la formulación usando una función auxiliar (se asume que está definida en tu código)
      let formulation = obtenerFormulationClearfix(pregunta);
      if (!formulation) {
          console.error("No se encontró la formulación para la pregunta", pregunta);
          return;
      }

      // Buscar el primer dropzone para extraer la clase de grupo (por ejemplo, "group1")
      const firstDropzone = formulation.querySelector('.dropzone.group1.place1');
      if (!firstDropzone) {
          console.error('No se pudo encontrar un "dropzone" en esta formulación.');
          return;
      }
      const groupClass = Array.from(firstDropzone.classList).find(cls => cls.startsWith('group'));
      if (!groupClass) {
          console.error('No se pudo determinar el número del grupo.');
          return;
      }
      console.log(`Procesando grupo: ${groupClass}`);

      // Iterar secuencialmente sobre cada respuesta definida en questionData.respuestaCorrecta.
      // Se asume que la posición en el array corresponde a un dropzone (place1, place2, etc.)
      for (let index = 0; index < questionData.respuestaCorrecta.length; index++) {
          const respuesta = questionData.respuestaCorrecta[index];

          // Si la respuesta es vacía, se omite (dejando el dropzone sin respuesta).
          if (!respuesta || respuesta.trim() === "") {
              console.log(`No se coloca ninguna respuesta en la posición ${index + 1} (valor vacío).`);
              continue;
          }

          // Seleccionar el dropzone correspondiente basado en la posición y el grupo
          const dropzone = formulation.querySelector(`.dropzone.${groupClass}.place${index + 1}`);
          if (!dropzone) {
              console.log(`No se encontró el dropzone para la respuesta "${respuesta}" en el grupo ${groupClass}`);
              continue;
          }

          // Verificar si ya hay una respuesta colocada en este dropzone
          const existingPlaced = dropzone.querySelector('.draghome.placed');
          if (existingPlaced) {
              console.log(`El dropzone ${index + 1} ya tiene una respuesta colocada.`);
              continue;
          }

          // Buscar la opción de respuesta (dentro de la lista de "draghomes") que contenga exactamente el texto "respuesta"
          const choice = Array.from(formulation.querySelectorAll(`.draghomes .draghome.user-select-none.${groupClass}`))
                              .find(el => el.innerText.trim() === respuesta);
          if (!choice) {
              console.log(`No se encontró la respuesta "${respuesta}" en el grupo ${groupClass}`);
              continue;
          }
          console.log(`Colocando respuesta "${respuesta}" en el dropzone ${index + 1} del grupo ${groupClass}`);

          // Simular el drag and drop desde la opción "choice" al "dropzone"
          await simulateDragAndDropMouse$1(choice, dropzone);

          // Actualizar el valor del input oculto asociado al dropzone para que Moodle registre la respuesta
          const hiddenInput = formulation.querySelector(`input.place${index + 1}.${groupClass}`);
          if (hiddenInput) {
              const value = getValueForRespuesta$1(choice);
              hiddenInput.value = value;
              // Disparar eventos para que Moodle detecte el cambio
              if (window.jQuery) {
                  window.jQuery(hiddenInput).trigger('change');
                  window.jQuery(hiddenInput).trigger('input');
              } else {
                  hiddenInput.dispatchEvent(new Event('change', { bubbles: true }));
                  hiddenInput.dispatchEvent(new Event('input', { bubbles: true }));
              }
              console.log(`Actualizado el valor oculto para place${index + 1}: "${respuesta}" con valor "${value}"`);
          } else {
              console.error(`No se encontró el input oculto para place${index + 1} en el grupo ${groupClass}`);
              continue;
          }

          // Mostrar la opción ya colocada.
          // Se intenta buscar el span colocado; si no existe, se crea e inserta en el dropzone.
          let placedSpan = dropzone.querySelector(`.draghome.choice${getValueForRespuesta$1(choice)}.${groupClass}.placed`);
          if (!placedSpan) {
              // Crear el elemento visual que representa la respuesta
              const placedElementHTML = `<span class="draghome user-select-none choice${getValueForRespuesta$1(choice)} ${groupClass} placed" tabindex="0">${respuesta}</span>`;
              dropzone.insertAdjacentHTML('beforeend', placedElementHTML);
              placedSpan = dropzone.querySelector(`.draghome.choice${getValueForRespuesta$1(choice)}.${groupClass}.placed`);
          }
          if (placedSpan) {
              placedSpan.style.display = 'block';
          } else {
              console.error(`No se encontró ni se pudo crear el span colocado para "${respuesta}" en el dropzone ${index + 1}`);
          }

          // (Opcional) Ocultar la opción original en la lista de opciones, si se desea:
          // choice.style.display = 'none';

          console.log(`Respuesta "${respuesta}" colocada en el dropzone ${index + 1} del grupo ${groupClass}`);

          // Esperar un breve periodo para mayor estabilidad antes de procesar la siguiente respuesta
          await new Promise(resolve => setTimeout(resolve, 1000));
      }

      console.log('Automatización de drag and drop para imágenes finalizada.');
  }


  /**
   * Función auxiliar para extraer el valor de respuesta a partir del elemento draggable.
   * Se asume que dicho valor se encuentra en una clase con el formato "choiceX".
   * @param {HTMLElement} choiceElement - Elemento que representa la opción draggable.
   * @returns {string} - El número de la elección como string, o "0" si no se encuentra.
   */
  function getValueForRespuesta$1(choiceElement) {
      const classes = Array.from(choiceElement.classList);
      const choiceClass = classes.find(cls => cls.startsWith('choice'));
      if (choiceClass) {
          const choiceNumber = choiceClass.replace('choice', '');
          return choiceNumber;
      }
      return "0"; // Valor por defecto si no se encuentra la clase "choiceX"
  }


  /**
   * Función que simula el comportamiento de drag and drop utilizando eventos de mouse y drag.
   * @param {HTMLElement} draggableElement - Elemento que se va a arrastrar.
   * @param {HTMLElement} dropZoneElement - Zona donde se soltará el elemento.
   * @returns {Promise} - Se resuelve cuando la secuencia de eventos ha finalizado.
   */
  function simulateDragAndDropMouse$1(draggableElement, dropZoneElement) {
      return new Promise((resolve, reject) => {
          try {
              // Obtener las coordenadas de los elementos
              const draggableRect = draggableElement.getBoundingClientRect();
              const dropZoneRect = dropZoneElement.getBoundingClientRect();

              // Calcular las coordenadas centrales para simular los eventos
              const draggableCenter = {
                  x: draggableRect.left + draggableRect.width / 2,
                  y: draggableRect.top + draggableRect.height / 2
              };
              const dropZoneCenter = {
                  x: dropZoneRect.left + dropZoneRect.width / 2,
                  y: dropZoneRect.top + dropZoneRect.height / 2
              };

              // Crear un objeto DataTransfer para los eventos de drag
              const dataTransfer = new DataTransfer();

              /**
               * Función para crear un evento de mouse.
               * @param {string} type - Tipo de evento (e.g., 'mousedown', 'mousemove', 'mouseup').
               * @param {number} clientX - Coordenada X.
               * @param {number} clientY - Coordenada Y.
               * @param {number} buttons - Botones del mouse (por defecto 1).
               * @returns {MouseEvent} - El evento creado.
               */
              function createMouseEvent(type, clientX, clientY, buttons = 1) {
                  return new MouseEvent(type, {
                      bubbles: true,
                      cancelable: true,
                      view: window,
                      clientX: clientX,
                      clientY: clientY,
                      buttons: buttons
                  });
              }

              /**
               * Función para crear un evento de drag.
               * @param {string} type - Tipo de evento de drag (e.g., 'dragstart', 'dragover', 'drop').
               * @param {number} clientX - Coordenada X.
               * @param {number} clientY - Coordenada Y.
               * @returns {DragEvent} - El evento creado.
               */
              function createDragEvent(type, clientX, clientY) {
                  return new DragEvent(type, {
                      bubbles: true,
                      cancelable: true,
                      clientX: clientX,
                      clientY: clientY,
                      dataTransfer: dataTransfer
                  });
              }

              // Secuencia de eventos para simular el drag and drop
              async function dragAndDropSequence() {
                  try {
                      // 1. Mover el cursor al centro del elemento draggable
                      window.dispatchEvent(createMouseEvent('mousemove', draggableCenter.x, draggableCenter.y));
                      // 2. Presionar el botón del mouse sobre el draggable
                      draggableElement.dispatchEvent(createMouseEvent('mousedown', draggableCenter.x, draggableCenter.y));
                      // 3. Iniciar el drag (dragstart)
                      draggableElement.dispatchEvent(createDragEvent('dragstart', draggableCenter.x, draggableCenter.y));
                      // 4. Mover el cursor al centro del dropzone
                      window.dispatchEvent(createMouseEvent('mousemove', dropZoneCenter.x, dropZoneCenter.y));
                      // 5. Enviar eventos de drag sobre el dropzone
                      dropZoneElement.dispatchEvent(createDragEvent('dragenter', dropZoneCenter.x, dropZoneCenter.y));
                      dropZoneElement.dispatchEvent(createDragEvent('dragover', dropZoneCenter.x, dropZoneCenter.y));
                      // 6. Soltar el elemento (drop)
                      dropZoneElement.dispatchEvent(createDragEvent('drop', dropZoneCenter.x, dropZoneCenter.y));
                      // 7. Finalizar el drag (dragleave y dragend)
                      dropZoneElement.dispatchEvent(createDragEvent('dragleave', dropZoneCenter.x, dropZoneCenter.y));
                      draggableElement.dispatchEvent(createDragEvent('dragend', dropZoneCenter.x, dropZoneCenter.y));
                      // 8. Soltar el botón del mouse
                      dropZoneElement.dispatchEvent(createMouseEvent('mouseup', dropZoneCenter.x, dropZoneCenter.y, 0));

                      // Esperar un breve momento para asegurar que se procesen todos los eventos
                      setTimeout(() => {
                          resolve();
                      }, 1000);
                  } catch (error) {
                      console.error('Error en la secuencia de drag and drop:', error);
                      reject(error);
                  }
              }

              dragAndDropSequence();
          } catch (error) {
              console.error('Error en la simulación de drag and drop:', error);
              reject(error);
          }
      });
  }

  // Si lo deseas, puedes importar interactjs para usar funcionalidades avanzadas en el futuro

  /**
   * Función que responde la pregunta de tipo "drag and drop text" utilizando los datos proporcionados.
   * @param {HTMLElement} pregunta - Elemento que representa la pregunta en el DOM.
   * @param {Object} questionData - Objeto con los datos de la pregunta, donde questionData.respuestaCorrecta es un array con las respuestas correctas. 
   *                                 Algunas entradas pueden ser cadenas vacías, lo que indica que en esa posición no se debe colocar nada.
   */
  async function response_draganddrop_text(pregunta, questionData) {
      console.log('Iniciando response_draganddrop_text para la pregunta:', pregunta);

      // Se obtiene la formulación específica (el contenedor con las clases "formulation clearfix") usando la función auxiliar.
      let formulation = obtenerFormulationClearfix(pregunta);
      if (!formulation) {
          console.error("No se encontró la formulación para la pregunta", pregunta);
          return;
      }

      // Buscar el primer elemento "place" para extraer la clase de grupo (por ejemplo, "group1")
      const firstPlace = formulation.querySelector('[class*="place"][class*="drop"][class*="group"]');
      if (!firstPlace) {
          console.error('No se pudo encontrar un "place" en esta formulación.');
          return;
      }
      // Se extrae la clase que comience con "group" para identificar el grupo
      const groupClass = Array.from(firstPlace.classList).find(cls => cls.startsWith('group'));
      if (!groupClass) {
          console.error('No se pudo determinar el número del grupo.');
          return;
      }
      console.log(`Procesando grupo: ${groupClass}`);

      // Iteramos de forma secuencial sobre cada respuesta definida en questionData.respuestaCorrecta.
      // Se asume que el array tiene la posición de cada respuesta, pudiendo incluir cadenas vacías.
      for (let index = 0; index < questionData.respuestaCorrecta.length; index++) {
          const respuesta = questionData.respuestaCorrecta[index];

          // Si la respuesta es vacía, se omite la acción (es decir, se deja el drop zone sin respuesta).
          if (!respuesta || respuesta.trim() === "") {
              console.log(`No se coloca ninguna respuesta en la posición ${index + 1} (valor vacío).`);
              continue;
          }

          // Seleccionar el drop zone correspondiente, basado en la posición (place1, place2, etc.) y el grupo.
          const place = formulation.querySelector(`.place${index + 1}.drop.${groupClass}`);
          if (!place) {
              console.log(`No se encontró el lugar para la respuesta "${respuesta}" en el grupo ${groupClass}`);
              continue;
          }

          // Verificar si ya hay una respuesta colocada en este drop zone
          const existingPlaced = place.nextElementSibling &&
                                place.nextElementSibling.classList.contains('draghome') &&
                                place.nextElementSibling.classList.contains('placed');
          if (existingPlaced) {
              console.log(`El lugar ${index + 1} ya tiene una respuesta colocada.`);
              continue;
          }

          // Buscar la opción de respuesta (elemento draggable) que contenga exactamente el texto de "respuesta"
          const choice = Array.from(document.querySelectorAll(`.draghome.user-select-none.${groupClass}`))
                              .find(el => el.innerText.trim() === respuesta);
          if (!choice) {
              console.log(`No se encontró la respuesta "${respuesta}" en el grupo ${groupClass}`);
              continue;
          }

          console.log(`Colocando respuesta "${respuesta}" en el lugar ${index + 1} del grupo ${groupClass}`);

          // Simular el drag and drop: se arrastra el elemento "choice" y se suelta en el "place"
          await simulateDragAndDropMouse(choice, place);

          // Actualizar el valor del input oculto asociado al drop zone para que Moodle registre la respuesta
          const hiddenInput = formulation.querySelector(`input.place${index + 1}.${groupClass}`);
          if (hiddenInput) {
              const value = getValueForRespuesta(choice);
              hiddenInput.value = value;
              // Disparar eventos de cambio para que Moodle detecte la actualización
              if (window.jQuery) {
                  window.jQuery(hiddenInput).trigger('change');
                  window.jQuery(hiddenInput).trigger('input');
              } else {
                  hiddenInput.dispatchEvent(new Event('change', { bubbles: true }));
                  hiddenInput.dispatchEvent(new Event('input', { bubbles: true }));
              }
              console.log(`Actualizado el valor oculto para place${index + 1}: "${respuesta}" con valor "${value}"`);
          } else {
              console.error(`No se encontró el input oculto para place${index + 1} en el grupo ${groupClass}`);
              continue;
          }

          // Crear y añadir el elemento visual que representa la respuesta colocada
          const placedElementHTML = `<span class="draghome user-select-none choice${getValueForRespuesta(choice)} ${groupClass} placed inplace${index + 1}" tabindex="0">${respuesta}</span>`;
          place.insertAdjacentHTML('afterend', placedElementHTML);

          // Remover la clase "unplaced" del elemento draggable para indicar que ya ha sido utilizado
          choice.classList.remove('unplaced');

          // Ocultar el elemento draggable original, en caso de que Moodle requiera que no se muestre
          choice.style.display = 'none';

          console.log(`Respuesta "${respuesta}" colocada en el lugar ${index + 1} del grupo ${groupClass}`);

          // (Opcional) Esperar un breve periodo antes de procesar la siguiente respuesta para asegurar estabilidad
          await new Promise(resolve => setTimeout(resolve, 1500));
      }

      console.log('Automatización de drag and drop finalizada.');
  }


  /**
   * Función auxiliar para extraer el valor de respuesta a partir del elemento draggable.
   * Se asume que dicho valor se encuentra en una clase con el formato "choiceX".
   * @param {HTMLElement} choiceElement - Elemento que representa la opción draggable.
   * @returns {string} - El número de la elección como string, o "0" si no se encuentra.
   */
  function getValueForRespuesta(choiceElement) {
      const classes = Array.from(choiceElement.classList);
      const choiceClass = classes.find(cls => cls.startsWith('choice'));
      if (choiceClass) {
          const choiceNumber = choiceClass.replace('choice', '');
          return choiceNumber;
      }
      return "0"; // Valor por defecto si no se encuentra la clase "choiceX"
  }


  /**
   * Función que simula el comportamiento de drag and drop utilizando eventos de mouse y drag.
   * @param {HTMLElement} draggableElement - Elemento que se va a arrastrar.
   * @param {HTMLElement} dropZoneElement - Zona donde se soltará el elemento.
   * @returns {Promise} - Se resuelve cuando la secuencia de eventos ha finalizado.
   */
  function simulateDragAndDropMouse(draggableElement, dropZoneElement) {
      return new Promise((resolve, reject) => {
          try {
              // Obtener las coordenadas de los elementos (bounding box)
              const draggableRect = draggableElement.getBoundingClientRect();
              const dropZoneRect = dropZoneElement.getBoundingClientRect();

              // Calcular las coordenadas centrales para simular los eventos
              const draggableCenter = {
                  x: draggableRect.left + draggableRect.width / 2,
                  y: draggableRect.top + draggableRect.height / 2
              };
              const dropZoneCenter = {
                  x: dropZoneRect.left + dropZoneRect.width / 2,
                  y: dropZoneRect.top + dropZoneRect.height / 2
              };

              // Crear un objeto DataTransfer para los eventos de drag
              const dataTransfer = new DataTransfer();

              /**
               * Función para crear y despachar un evento de mouse.
               * @param {string} type - Tipo de evento (e.g., 'mousedown', 'mousemove', 'mouseup').
               * @param {number} clientX - Coordenada X.
               * @param {number} clientY - Coordenada Y.
               * @param {number} buttons - Botones del mouse (valor por defecto 1).
               * @returns {MouseEvent} - El evento creado.
               */
              function createMouseEvent(type, clientX, clientY, buttons = 1) {
                  return new MouseEvent(type, {
                      bubbles: true,
                      cancelable: true,
                      view: window,
                      clientX: clientX,
                      clientY: clientY,
                      buttons: buttons
                  });
              }

              /**
               * Función para crear y despachar un evento de drag.
               * @param {string} type - Tipo de evento de drag (e.g., 'dragstart', 'dragover', 'drop').
               * @param {number} clientX - Coordenada X.
               * @param {number} clientY - Coordenada Y.
               * @returns {DragEvent} - El evento creado.
               */
              function createDragEvent(type, clientX, clientY) {
                  return new DragEvent(type, {
                      bubbles: true,
                      cancelable: true,
                      clientX: clientX,
                      clientY: clientY,
                      dataTransfer: dataTransfer
                  });
              }

              // Secuencia asíncrona para disparar los eventos en orden:
              async function dragAndDropSequence() {
                  try {
                      // 1. Mover el cursor al centro del elemento draggable
                      window.dispatchEvent(createMouseEvent('mousemove', draggableCenter.x, draggableCenter.y));

                      // 2. Presionar el botón del mouse sobre el draggable
                      draggableElement.dispatchEvent(createMouseEvent('mousedown', draggableCenter.x, draggableCenter.y));

                      // 3. Iniciar el drag (dragstart)
                      draggableElement.dispatchEvent(createDragEvent('dragstart', draggableCenter.x, draggableCenter.y));

                      // 4. Mover el cursor hasta el centro de la drop zone
                      window.dispatchEvent(createMouseEvent('mousemove', dropZoneCenter.x, dropZoneCenter.y));

                      // 5. Disparar eventos de drag sobre la drop zone
                      dropZoneElement.dispatchEvent(createDragEvent('dragenter', dropZoneCenter.x, dropZoneCenter.y));
                      dropZoneElement.dispatchEvent(createDragEvent('dragover', dropZoneCenter.x, dropZoneCenter.y));

                      // 6. Soltar el elemento (drop)
                      dropZoneElement.dispatchEvent(createDragEvent('drop', dropZoneCenter.x, dropZoneCenter.y));

                      // 7. Finalizar el drag (dragleave y dragend)
                      dropZoneElement.dispatchEvent(createDragEvent('dragleave', dropZoneCenter.x, dropZoneCenter.y));
                      draggableElement.dispatchEvent(createDragEvent('dragend', dropZoneCenter.x, dropZoneCenter.y));

                      // 8. Soltar el botón del mouse
                      dropZoneElement.dispatchEvent(createMouseEvent('mouseup', dropZoneCenter.x, dropZoneCenter.y, 0));

                      // Esperar un momento para que se procesen los eventos
                      setTimeout(() => {
                          resolve();
                      }, 1000);
                  } catch (error) {
                      console.error('Error en la secuencia de drag and drop:', error);
                      reject(error);
                  }
              }

              dragAndDropSequence();
          } catch (error) {
              console.error('Error en la simulación de drag and drop:', error);
              reject(error);
          }
      });
  }

  async function contenedorAutoFill_js() {
      console.log(`[opc-autofill-autosave-moodle: autofill] Iniciando AutoFill...`);

      const switchRutaDinamica = localStorage.getItem('switch-ruta-dinamica') === 'true';
      switchRutaDinamica
          ? localStorage.getItem('configRutaDinamic')
          : localStorage.getItem('configRuta');

      const dataPage = JSON.parse(sessionStorage.getItem('questions-AutoSave'));

      const dataPageNormalizada = await normalizarHTML(dataPage);
      console.log('DataPageNormalizada:', dataPageNormalizada);

      const dataFirebaseNormalizada = await idbGet("dataFirebaseNormalizada");
      console.log('DataFirebaseNormalizada:', dataFirebaseNormalizada);

      // 🟢 ESPERAR a que `compararPreguntas` termine antes de seguir
      const comparedData = await compararPreguntas(dataPageNormalizada, dataFirebaseNormalizada);

      console.log("dpnExistentes", comparedData.dpnExistentes);
      console.log("dpnNuevas", comparedData.dpnNuevas);

      let preguntasFiltradas = filterQuestions(comparedData.dpnExistentes, comparedData.dpnNuevas);

      console.log("Todas las dpnExistentes Filtradas", preguntasFiltradas.dpnExistentesFilter);

      console.log("Todas las dpnExistentes y dpnNuevas Filtradas", preguntasFiltradas.dpnShowResponses);

      await AutoFill(preguntasFiltradas.dpnExistentesFilter);
      AutoFill_ShowResponses(preguntasFiltradas.dpnShowResponses);
      console.log(`[opc-autofill-autosave-moodle: autofill] Finalizando AutoFill...`);


  }

  function filterQuestions(dpnExistentes, dpnNuevas) {
      // 1. Filtramos dpnExistentes: conservamos aquellas entradas cuyo "previous" sea false.
      const filteredExistentes = Object.fromEntries(
          Object.entries(dpnExistentes).filter(([_, valor]) => {
              return !(valor.data && valor.data.previous === true);
          })
      );

      // 2. Filtramos dpnNuevas:
      //    Se excluyen aquellas entradas donde la propiedad "previous" sea true.
      //    Para las que queden, se asigna el valor "NO DATA".
      const filteredNuevas = Object.fromEntries(
          Object.entries(dpnNuevas)
              .filter(([_, value]) => !(value && value.previous === true))
              .map(([key]) => [key, "NO DATA"])
      );

      // 3. Combinamos ambos objetos (dpnExistentes filtrados y dpnNuevas con "NO DATA").
      const combined = { ...filteredExistentes, ...filteredNuevas };

      // Función auxiliar para poner en mayúsculas el estado si coincide
      // con "verificado", "no verificado" o "sin responder".
      function normalizeEstado(estado) {
          if (!estado) return "";
          const lower = estado.toLowerCase();
          if (["verificado", "no verificado", "sin responder"].includes(lower)) {
              return lower.toUpperCase();
          }
          return estado; // si no coincide, lo devolvemos tal cual
      }

      // 4. Construimos el objeto final dpnShowResponses,
      //    donde cada entrada tendrá la forma:
      //    { estado: 'ALGÚN_ESTADO_EN_MAYÚSCULA' | 'NO DATA', data: {...} }
      const dpnShowResponses = Object.entries(combined).reduce((acc, [key, value]) => {
          // Si "value" es exactamente el string "NO DATA", proviene de dpnNuevas:
          if (value === "NO DATA") {
              acc[key] = { estado: "NO DATA" };
              return acc;
          }

          // Caso contrario, es un objeto proveniente de dpnExistentes
          // y contiene la estructura { questionXXXX: { ... }, previous, data, ... }
          // Necesitamos leer el "estado" dentro de la parte questionXXXX
          if (typeof value === "object" && value !== null) {
              // Buscamos la clave que empiece por "question"
              const questionKey = Object.keys(value).find(k => k.startsWith("question"));
              // Si existe, sacamos su estado y lo convertimos con normalizeEstado
              if (questionKey) {
                  const questionData = value[questionKey];
                  const estadoOriginal = questionData?.estado || "";
                  const estadoNormalizado = normalizeEstado(estadoOriginal);

                  // Guardamos data completa (el objeto 'value') y el estado normalizado
                  acc[key] = {
                      estado: estadoNormalizado,
                      value
                  };
                  return acc;
              }
          }

          // Si no coincide con nada anterior, dejamos algo por defecto.
          // (No debería pasar a menos que haya un formato inesperado)
          acc[key] = {
              estado: "SIN ESTADO",
              data: value
          };
          return acc;
      }, {});

      return {
          dpnShowResponses,
          dpnExistentesFilter: filteredExistentes
      };
  }

  async function AutoFill(dpnExistentes) {
      try {
          // Mapeo de funciones según el tipo de pregunta
          const funcQuestionType = {
              'inputradio_opcionmultiple_verdaderofalso': response_inputradio_opcionmultiple_verdaderofalso,
              'inputchecked_opcionmultiple': response_inputchecked_opcionmultiple,
              'select_emparejamiento': response_select_emparejamiento,
              'inputtext_respuestacorta': response_inputtext_respuestacorta,
              'inputtext_respuestacorta2': response_inputtext_respuestacorta2,
              'draganddrop_text': response_draganddrop_text,
              'draganddrop_image': response_draganddrop_image,
          };

          // Se crea un arreglo para almacenar las tareas (promesas) a ejecutar
          const tareas = [];

          Object.entries(dpnExistentes).forEach(([dpnQuestion, questionContainer]) => {
              // Se verifica si la propiedad 'previous' es true, en cuyo caso se omite la pregunta.
              if (questionContainer.previous === true) {
                  console.log(`Omitiendo ${dpnQuestion} porque 'previous' es true`);
                  return; // Se omite esta iteración
              }

              // Se obtiene la clave que contiene los datos de la pregunta (ignorando la propiedad 'previous')
              const questionDataKey = Object.keys(questionContainer).find(key => key !== "previous");

              if (!questionDataKey) {
                  console.warn(`No se encontró la data de pregunta para ${dpnQuestion}`);
                  return;
              }

              // Se obtiene la data de la pregunta
              const questionData = questionContainer[questionDataKey];
              console.log(`Procesando ${dpnQuestion}:`, questionData);

              // Se extrae el tipo de pregunta para determinar la función a ejecutar
              const questionType = questionData.tipo;

              // Se verifica que exista una función mapeada para este tipo de pregunta
              if (funcQuestionType.hasOwnProperty(questionType)) {
                  // Se llama a la función correspondiente pasando la clave de la pregunta y su data.
                  // Se envuelve en Promise.resolve para tratarlo uniformemente como promesa.
                  tareas.push(Promise.resolve(funcQuestionType[questionType](dpnQuestion, questionData)));
              } else {
                  console.warn(`No se encontró función para el tipo de pregunta: ${questionType}`);
              }
          });

          // Se ejecutan todas las tareas en paralelo y se espera a que todas finalicen
          await Promise.all(tareas);
      } catch (error) {
          console.error("Error en AutoFill:", error);
      }
  }

  function AutoFill_ShowResponses(responseQuestions) {
      return new Promise((resolve, reject) => {
        const container = document.getElementById('respuestasautofill');
        if (!container) {
          console.error('Elemento "respuestasautofill" no encontrado.');
          return reject('Elemento "respuestasautofill" no encontrado.');
        }
    
        // Limpia el contenedor por si tuviera contenido anterior
        container.innerHTML = '';
    
        // 1) Obtener todas las claves y ordenarlas por número.
        //    Ej.: "Pregunta2" => 2, "Pregunta12" => 12, etc.
        let questionKeys = Object.keys(responseQuestions);
        questionKeys.sort((a, b) => {
          const numA = parseInt(a.replace('Pregunta', ''), 10);
          const numB = parseInt(b.replace('Pregunta', ''), 10);
          return numA - numB;
        });
    
        // Mapeo de los estados con las clases de badge correspondientes
        const stateToBadgeClass = {
          'NO DATA': 'badge-no-data',
          'NO VERIFICADO': 'badge-no-verificado',
          'SIN RESPONDER': 'badge-sin-responder',
          'VERIFICADO': 'badge-verificado'
        };
    
        // 2) Recorremos las claves ya ordenadas
        for (let key of questionKeys) {
          const questionData = responseQuestions[key];
          const estado = questionData.estado || 'NO DATA';
          const preguntaNumber = key.replace('Pregunta', ''); // Para extraer el número
    
          // Creamos el contenedor principal para cada pregunta
          const questionContainer = document.createElement('div');
          questionContainer.classList.add('question-container');
    
          // Creamos el encabezado (título, badge y botón de mostrar/ocultar si corresponde)
          const questionHeader = document.createElement('div');
          questionHeader.classList.add('question-header');
    
          // Título de la pregunta
          const questionTitle = document.createElement('div');
          questionTitle.classList.add('question-title');
          questionTitle.innerHTML = `Pregunta ${preguntaNumber}:`;
    
          // Badge de estado
          const badge = document.createElement('span');
          badge.classList.add(
            'question-state-badge',
            stateToBadgeClass[estado] || 'badge-no-data' // Por si no existe la clase, usa 'NO DATA'
          );
          badge.textContent = estado.toLowerCase();
    
          // Insertamos título y badge en el encabezado
          questionTitle.appendChild(badge);
          questionHeader.appendChild(questionTitle);
    
          // Crear contenedor de detalles que se mostrará/ocultará
          let detailContainer = null;
          let showHideBtn = null;
    
          // Solo mostramos el botón y el contenedor de detalles
          // en caso de 'NO VERIFICADO' o 'VERIFICADO'
          if (estado === 'NO VERIFICADO' || estado === 'VERIFICADO') {
            showHideBtn = document.createElement('button');
            showHideBtn.innerHTML = '<i class="fa-solid fa-eye"></i>';
            showHideBtn.classList.add('btn-toggle-visibility');
    
            // Contenedor con la info a mostrar/ocultar
            detailContainer = document.createElement('div');
            detailContainer.classList.add('detail-container'); // inicia con display: none
    
            // Lógica de mostrar/ocultar
            let isVisible = false;
            showHideBtn.addEventListener('click', () => {
              isVisible = !isVisible;
              if (isVisible) {
                detailContainer.style.display = 'block';
                showHideBtn.innerHTML = '<i class="fa-solid fa-eye-slash"></i>';
              } else {
                detailContainer.style.display = 'none';
                showHideBtn.innerHTML = '<i class="fa-solid fa-eye"></i>';
              }
            });
    
            // Agregamos el botón al header
            questionHeader.appendChild(showHideBtn);
          }
    
          // Insertamos el encabezado en el contenedor principal
          questionContainer.appendChild(questionHeader);
    
          // Para NO DATA o SIN RESPONDER, no mostramos info extra
          if (estado === 'NO VERIFICADO' || estado === 'VERIFICADO') {
            // Obtenemos la info de la pregunta (enunciado, respuestas, etc.)
            const questionValue = questionData.value || {};
            const infoData = questionValue.data || null;
    
            if (infoData) {
              // --- PARTE SIEMPRE VISIBLE (enunciado) ---
              const visiblePart = document.createElement('div');


               // Dependemos del tipo de pregunta
               const tipo = infoData.tipo || 'desconocido';

              if (tipo !== 'inputtext_respuestacorta'  || tipo !== 'inputtext_respuestacorta') {
              visiblePart.innerHTML = `
              <div>${processContent(infoData.enunciado) || '(Sin enunciado)'}</div>
            `;
          }
    
              // --- PARTE OCULTA (opciones, respuestas correctas, etc.) ---
              const hiddenPart = document.createElement('div');
    
             
    
              // ----------------------------------------------------------------
              // Aquí adaptamos la lógica de tu snippet original
              // ----------------------------------------------------------------
              if ( tipo === 'inputradio_opcionmultiple_verdaderofalso' || tipo === 'inputchecked_opcionmultiple') {
                // Se verifica si hay opciones
                if (
                  Array.isArray(infoData.opcionesRespuesta) &&
                  infoData.opcionesRespuesta.length
                ) {
                  // Usando tu lógica para formatear (puedes llamar a formatResponseOptions
                  // o bien reproducir la lógica inline).
                  hiddenPart.innerHTML = `
                <div class="respuestasautosave">
                  ${infoData.opcionesRespuesta
                    .map((opc, i) => {
                      // Generar la letra para cada opción: a, b, c, d, ...
                      const letter = String.fromCharCode(97 + i);
            
                      // Normalizar la opción y la respuesta correcta (quitando espacios al inicio y final)
                      const opcionNormalizada = opc.trim();
                      const respuestaNormalizada = (infoData.respuestaCorrecta || "").trim();
            
                      // Verificar si la respuesta correcta es un array o un valor único
                      const isCorrect = Array.isArray(infoData.respuestaCorrecta)
                        ? infoData.respuestaCorrecta.map(r => r.trim()).includes(opcionNormalizada)
                        : opcionNormalizada === respuestaNormalizada;
            
                      // Resaltar en color mediumblue si es respuesta correcta
                      return `
                        <div style="font-weight: 500; ${isCorrect ? 'color: mediumblue;' : ''}">
                          ${letter}. ${processContent(opc)}
                        </div>
                      `;
                    })
                    .join('')}
                </div>
              `;
                }
              } else if (tipo === 'select_emparejamiento') {
                // select_emparejamiento
                if (
                  Array.isArray(infoData.opcionesEnunciados) &&
                  Array.isArray(infoData.respuestaCorrecta)
                ) {
                  hiddenPart.innerHTML = `
                  <div class="respuestasautosave">
                    ${infoData.opcionesEnunciados
                      .map((enunciado, i) => {
                        const respuesta = infoData.respuestaCorrecta[i]?.trim() || 'Elegir...';
                        return `
                          <div>
                            • ${processContent(enunciado)} - 
                            <span style="font-weight:500; color:${
                              respuesta !== 'Elegir...' ? 'MediumBlue' : 'black'
                            };">${processContent(respuesta)}</span>
                          </div>
                        `;
                      })
                      .join('')}
                  </div>
                `;
                }
              } else if (tipo === 'inputtext_respuestacorta') {
                // Aquí la respuestaCorrecta puede ser un array o un string
                // Se busca reemplazar corchetes [ ] con las respuestas
                const respuestas = Array.isArray(infoData.respuestaCorrecta)
                  ? infoData.respuestaCorrecta
                  : [];
    
                let respuestaIndex = 0;
                let enunciadoProcesado = infoData.enunciado.replace(
                  /\[(.*?)\]/g,
                  (match, contenido) => {
                    let resp =
                      respuestas[respuestaIndex] !== undefined
                        ? respuestas[respuestaIndex]
                        : '';
                    respuestaIndex++;
                    return `<strong style="font-weight: 500;">[<span style="color: mediumblue;">${resp}</span>]</strong>`;
                  }
                );
    
                enunciadoProcesado = processContent(enunciadoProcesado);
    
                hiddenPart.innerHTML = `
                <div class="respuestasautosave">
                  ${enunciadoProcesado}
                </div>
              `;
              } else if (tipo === 'inputtext_respuestacorta2') {
                // Aquí las respuestas suelen listarse al final
                const respuestas = Array.isArray(infoData.respuestaCorrecta)
                  ? infoData.respuestaCorrecta
                  : [];
    
                hiddenPart.innerHTML = `
                <div class="respuestasautosave">
                  <strong style="font-weight: 500;">Respuesta:</strong><br>
                  ${respuestas
                    .map(
                      (resp) => `
                        <strong style="font-weight: 500;">[</strong>
                        <span style="color: mediumblue; font-weight: 500;">${resp}</span>
                        <strong style="font-weight: 500;">]</strong> 
                      `
                    )
                    .join('')}
                </div>
              `;
              } else if (tipo === 'draganddrop_text') {
                // Reemplazar [ ] vacíos con las respuestas
                let enunciado = infoData.enunciado;
                let contador = 0;
    
                enunciado = enunciado.replace(/\[\s*\]/g, () => {
                  const respuesta = infoData.respuestaCorrecta[contador] || '';
                  contador++;
                  return `
                  <span style="font-weight:500;">[</span>
                  <span style="font-weight:500; color:MediumBlue;">${respuesta}</span>
                  <span style="font-weight:500;">]</span>
                `;
                });
    
                hiddenPart.innerHTML = `
                <div class="enunciado">${processContent(enunciado)}</div>
              `;
              } else if (tipo === 'draganddrop_image') {
                // Mostramos la imagen y debajo las respuestas correctas
                const isArray = Array.isArray(infoData.respuestaCorrecta);
                const respuestaArray = isArray ? infoData.respuestaCorrecta : [infoData.respuestaCorrecta];
                const imagenDrop = infoData.imagenDrop;
    
                const opcionesHTML = respuestaArray
                  .map(
                    (opc) => `
                    <strong style="font-weight: 500">[</strong>
                    <strong style="font-weight: 500; color: mediumblue;">${opc}</strong>
                    <strong style="font-weight: 500">]</strong>
                  `
                  )
                  .join(' ');
    
                hiddenPart.innerHTML = `
                <div>
                  <div style="margin-bottom: 5px;">
                    ${opcionesHTML}
                  </div>
                  <img src="${imagenDrop}" alt="Imagen de arrastre" class="img-fluid w-100" />
                </div>
              `;
              } else {
                // Caso genérico
                hiddenPart.innerHTML = `
                <div><em>Tipo de pregunta:</em> ${tipo}</div>
                <div><em>(Vista sin personalizar para este tipo)</em></div>
              `;
              }
    
              // Insertamos la parte visible y la oculta en detailContainer
              if (detailContainer) {
                detailContainer.appendChild(visiblePart);
                detailContainer.appendChild(hiddenPart);
                questionContainer.appendChild(detailContainer);
              }
            } else {
              // Si no hay infoData
              if (detailContainer) {
                const noInfo = document.createElement('div');
                noInfo.style.marginTop = '1rem';
                noInfo.textContent = 'Sin información de la pregunta.';
                detailContainer.appendChild(noInfo);
                questionContainer.appendChild(detailContainer);
              }
            }
          }
    
          // Finalmente, añadimos el 'questionContainer' al contenedor principal
          container.appendChild(questionContainer);
        }
    
        // Si todo va bien, resolvemos la promesa
        resolve('HTML generado exitosamente');
      });
    }

  // global.js
  window.eventosPreguntasHabilitados = true;
  window.autoSaveEnEjecucion = false;

  function opcion_AutoFillAutoSave_Moodle_html() {
      return `
    <div id="autofillautosave_moodle" class="containerOption">

    <div id="users-autofill-moodle" class="users" style="display: none;">

        <!-- Columna para mostrar el nombre de usuario actual con icono de usuario -->
        <div class="usuario-actual">
            <i class="fa-solid fa-user"></i>
            <span id="nombre-usuario-actual" class="nombre-usuario"></span>
        </div>

        <select id="siguiente-usuario" class="select-siguiente-usuario">
        </select>

        <button id="boton-siguiente-usuario" class="boton-siguiente-usuario">
            <i class="fa-solid fa-angles-right"></i>
        </button>

    </div>

    <!-- Contenedor para Ruta y Ciclo -->
    <div id="containerRutaFirebase" style="display: none;">
    </div>

    <!-- Contenedor para Subject Dinamic -->
    <div id="containerRutaDinamicaFirebase" style="display: none;">
    </div>

    <div id="container-autofillautosave">



        <!-- Nuevo contenedor para AutoFill-->
        <div id="container-autofill" class="subcontainer-autoquiz-autofill">

            <div id="header-autofill" class="header-autoquiz">
                <h2 id="titulo-autoquiz">AutoFill</h2>

                <label class="switch-autoquiz">
                    <input type="checkbox" id="switch-autofill">
                    <span class="slider round"></span>
                </label>
            </div>

            <!-- Contenido de AutoFill-->
            <div id="body-autoquiz-autofill" class="body-autoquiz" style="display: none;">

                <div>
                    <span id="respuestasautofill"></span>
                </div>

            </div>
        </div>




        <!-- Contenedor para AutoSave -->
        <div id="container-autosave" class="subcontainer-autoquiz-autosave">

            <div id="header-autosave" class="header-autoquiz">

                <!-- Título y Botón -->
                <h2 id="titulo-autoquiz">
                    AutoSave

                    <button id="upload-autosave" class="icon-button">
                        <i class="fa-solid fa-cloud-arrow-up"></i>
                    </button>

                </h2>

                <label class="switch-autoquiz">
                    <input type="checkbox" id="switch-autosave">
                    <span class="slider round"></span>
                </label>

            </div>

            <!-- Contenido de AutoSave -->
            <div id="body-autoquiz-autosave">
                <div>
                    <span id="respuestasautosave"></span>
                </div>
            </div>
        </div>

    </div>
</div>   
    `;
  }

  async function opcion_AutoFillAutoSave_Moodle_js() {

      let esMoodle = esPaginaMoodle();
      const switchRutaDinamica = localStorage.getItem('switch-ruta-dinamica');

      if (esMoodle) {
          console.log("[opc-autofill-autosave-moodle: main]  Esta página está construida con Moodle");
      } else {
          console.log("[opc-autofill-autosave-moodle: main]  Esta página no está construida con Moodle");
      }

      if (localStorage.getItem('configUsersAutofill') === 'true' && esMoodle) {
          const autofillUsers = document.getElementById('users-autofill-moodle');
          autofillUsers.style.display = 'flex';
          contenedorUsers_js();
      } else {
          console.log("[opc-autofill-autosave-moodle: main]  AutoFill Users no ejecutado porque, no es Moodle");
      }

      if (esMoodle && switchRutaDinamica === 'true') {
          console.log('[opc-autofill-autosave-moodle: main]  Cargando Ruta Dinamica...');
          await contenedorRutaDinamica_js();
      } else {
          console.log('[opc-autofill-autosave-moodle: main]  Cargando Ruta...');
          contenedorRuta_js$1();
      }

      if (esMoodle) {
          contenedorAutoFillAutoSave_js$1();
      }

      detectarCambiosInterruptor$1();

      const botonAutoSave = localStorage.getItem("botonAutoSave") || "false";
      console.log("Valor de botonAutoSave recuperado:", botonAutoSave);
      const hideApp = localStorage.getItem("hideapp") || "false";
      
      if (botonAutoSave === "true" && window.location.href.includes('mod/quiz/summary.php') && hideApp === "false" ) {
          console.log("Condición cumplida, ejecutando crearBotonAutoSave()");
          crearBotonAutoSave();
      } else if (window.location.href.includes('mod/quiz/summary.php') && hideApp === "true" ) {
          autoSaveHideApp();
          console.log("Condición no cumplida, no se ejecuta crearBotonAutoSave()");
      }
      
  }

  async function contenedorAutoFillAutoSave_js$1() {
      const interruptorAutoSave = document.getElementById("switch-autosave");
      const interruptorAutoFill = document.getElementById("switch-autofill");

      if (!interruptorAutoSave || !interruptorAutoFill) return;

      const stateAutoSave = localStorage.getItem("autosave-autoquizfillapp") || "desactivado";
      const stateAutoFill = localStorage.getItem("autofill-autoquizfillapp") || "desactivado";

      interruptorAutoSave.checked = (stateAutoSave === "activado");
      interruptorAutoFill.checked = (stateAutoFill === "activado");

      const bodyAutoSave = document.getElementById("body-autoquiz-autosave");
      const bodyAutoFill = document.getElementById("body-autoquiz-autofill");

      if ((stateAutoSave === "activado" || stateAutoFill === "activado") && window.location.href.includes('/mod/quiz/attempt.php')) {

          getDataFromFirebaseAsync();
          const originalFormulations = document.querySelectorAll(".formulation.clearfix");
          await AutoSaveQuestions_SessionStorage(originalFormulations);

          if (stateAutoFill === "activado") {
              bodyAutoFill.style.display = 'flex';
              window.eventosPreguntasHabilitados = false;
              await contenedorAutoFill_js();
              // Rehabilitar después de finalizar la función
              window.eventosPreguntasHabilitados = true;

              await AutoSaveQuestions_SessionStorage(originalFormulations);

              if (stateAutoSave === "activado") {
                  contenedorAutoSave_js();
              }

          }

          if (stateAutoSave === "activado") {
              bodyAutoSave.style.display = 'flex';
              contenedorAutoSave_js();
          }

          renderizarPreguntas();

      } else if (!window.location.href.includes('/mod/quiz/summary.php')) {
          sessionStorage.removeItem('questions-AutoSave');
          bodyAutoFill.style.display = 'none';
          bodyAutoSave.style.display = 'none';
      }

  }

  function detectarCambiosInterruptor$1() {
      const interruptorAutoSave = document.getElementById("switch-autosave");
      const interruptorAutoFill = document.getElementById("switch-autofill");

      // Para el interruptor de AutoSave
      interruptorAutoSave.addEventListener("change", async () => {
          const bodyAutoSave = document.getElementById("body-autoquiz-autosave");
          const nuevoEstado = interruptorAutoSave.checked ? "activado" : "desactivado";
          localStorage.setItem("autosave-autoquizfillapp", nuevoEstado);
          console.log(`AutoSave: ${nuevoEstado}`);

          if (nuevoEstado === "activado") {
              bodyAutoSave.style.display = 'flex';
              contenedorAutoSave_js();
              renderizarPreguntas();
          } else {
              bodyAutoSave.style.display = 'none';
          }

          
      });

      // Para el interruptor de AutoFill
      interruptorAutoFill.addEventListener("change", async () => {
          const bodyAutoFill = document.getElementById("body-autoquiz-autofill");
          const nuevoEstado = interruptorAutoFill.checked ? "activado" : "desactivado";
          localStorage.setItem("autofill-autoquizfillapp", nuevoEstado);
          console.log(`AutoFill: ${nuevoEstado}`);

          if (nuevoEstado === "activado") {
              bodyAutoFill.style.display = 'flex';
              window.eventosPreguntasHabilitados = false;
              await contenedorAutoFill_js();
              // Rehabilitar después de finalizar la función
              window.eventosPreguntasHabilitados = true;

              const stateAutoSave = localStorage.getItem("autosave-autoquizfillapp") || "desactivado";
              const originalFormulations = document.querySelectorAll(".formulation.clearfix");

              await AutoSaveQuestions_SessionStorage(originalFormulations);

              if (stateAutoSave === "activado") {
                  contenedorAutoSave_js();
              }

          } else {
              bodyAutoFill.style.display = 'none';
          }
      });
  }

  // Función para verificar si la página está construida con Moodle
  function esPaginaMoodle() {
      // Método 1: Verificar la etiqueta meta "generator"
      const metaGenerator = document.querySelector('meta[name="generator"]');
      if (metaGenerator && metaGenerator.getAttribute('content').toLowerCase().includes('moodle')) {
          return true;
      }

      // Método 2: Verificar clases específicas en el <body>
      if (document.body.classList.contains('moodle')) {
          return true;
      }

      // Método 3: Verificar contenedores específicos de Moodle
      const moodleContainer = document.querySelector('.moodle-page');
      if (moodleContainer) {
          return true;
      }

      // Método 4: Verificar URLs o scripts específicos
      const scripts = document.querySelectorAll('script[src]');
      for (let script of scripts) {
          if (script.src.toLowerCase().includes('moodle')) {
              return true;
          }
      }

      // Si ninguno de los métodos anteriores detecta Moodle
      return false;
  }

  var css_248z$3 = "";
  styleInject(css_248z$3);

  async function interceptionQuestion(callback) {
      // Patrón de URL a interceptar
      const urlPattern = /\/gw\/languageassessmentapi\/main\/api\/la\/internal\/language-assessments\/\d+\/question/;

      // ---- Interceptar fetch ----
      const originalFetch = window.fetch;
      window.fetch = function (...args) {
          let url = args[0];
          if (typeof url === 'object' && url.url) {
              url = url.url;
          }
          if (urlPattern.test(url)) {
              console.log("Fetch interceptado:", url, args);
          }
          return originalFetch.apply(this, args)
              .then(response => {
                  // Si la URL coincide, clona la respuesta para procesarla sin afectar el flujo original
                  if (urlPattern.test(url)) {
                      const responseClone = response.clone();
                      // Dependiendo del tipo de respuesta, puedes usar .json(), .text(), etc.
                      responseClone.json().then(data => {
                          // Llama al callback pasando la respuesta como argumento
                          callback(data);
                      }).catch(err => {
                          console.error("Error al parsear la respuesta:", err);
                      });
                  }
                  return response;
              });
      };

      // ---- Interceptar XMLHttpRequest ----
      const OriginalXHR = window.XMLHttpRequest;
      function CustomXHR() {
          const xhr = new OriginalXHR();
          const originalOpen = xhr.open;
          xhr.open = function (method, url, async, user, password) {
              this._url = url;
              return originalOpen.apply(this, arguments);
          };

          const originalSend = xhr.send;
          xhr.send = function (body) {
              if (this._url && urlPattern.test(this._url)) {
                  console.log("XMLHttpRequest interceptado:", this._url, body);
                  // Escucha los cambios de estado para capturar la respuesta
                  this.addEventListener("load", function () {
                      // Intenta parsear la respuesta; si es JSON, se puede convertir automáticamente
                      let data;
                      try {
                          data = JSON.parse(xhr.responseText);
                      } catch (e) {
                          data = xhr.responseText;
                      }
                      // Llama al callback pasando la respuesta
                      callback(data);
                  });
              }
              return originalSend.apply(this, arguments);
          };
          return xhr;
      }
      window.XMLHttpRequest = CustomXHR;
  }


  async function saveAnswerMultipleChoice(answer) {
      // Si la respuesta no es un array, se envuelve en uno
      const answerArray = Array.isArray(answer) ? answer : [answer];

      // Obtener el objeto "questions" del sessionStorage o inicializarlo vacío
      let questions = JSON.parse(sessionStorage.getItem('questions') || '{}');
      // Obtener el identificador de la pregunta actual
      let currentQuestionId = sessionStorage.getItem('current-question');

      if (currentQuestionId && questions[currentQuestionId]) {
          // Agregar o actualizar la propiedad answerCorrect en la pregunta correspondiente
          questions[currentQuestionId].answerCorrect = answerArray;
          sessionStorage.setItem('questions', JSON.stringify(questions));
          console.log(`[Tampermonkey] answerCorrect guardada para la pregunta ${currentQuestionId}:`, answerArray);
      } else {
          console.warn('No se encontró la pregunta actual en sessionStorage o no existe en questions.');
      }
  }


  async function saveAnswerOpen() {
      // Seleccionamos todos los inputs de tipo "text" del documento
      const inputs = document.querySelectorAll('input[type="text"]');
      // Filtrar los inputs que NO estén dentro del contenedor con id "barra-lateral-autoquizfillapp"
      const filteredInputs = Array.from(inputs).filter(input => !input.closest('#barra-lateral-autoquizfillapp'));

      // Generar el arreglo de respuestas, cada respuesta es un array con el valor del input
      // Se utiliza trim() para eliminar espacios en blanco, de modo que si el input está vacío se guarde como ""
      const answer = filteredInputs.map(input => [input.value.trim()]);

      // Obtener el objeto "questions" del sessionStorage o inicializarlo vacío
      let questions = JSON.parse(sessionStorage.getItem('questions') || '{}');
      // Obtener el identificador de la pregunta actual
      let currentQuestionId = sessionStorage.getItem('current-question');

      if (currentQuestionId && questions[currentQuestionId]) {
          // Agregar o actualizar la propiedad answerCorrect en la pregunta correspondiente
          questions[currentQuestionId].answerCorrect = answer;
          sessionStorage.setItem('questions', JSON.stringify(questions));
          console.log(`[Tampermonkey] answerCorrect guardada para la pregunta ${currentQuestionId}:`, answer);
      } else {
          console.warn('No se encontró la pregunta actual en sessionStorage o no existe en questions.');
      }
  }



  function guardarCurrentQuestion(responseData) {
      if (responseData && responseData.question) {
          const { uuid, type } = responseData.question;
          
          if (uuid) {
              sessionStorage.setItem('current-question', uuid);
              console.log(`UUID ${uuid} guardado en sessionStorage con la clave 'current-question'.`);
          } else {
              console.warn('La pregunta no contiene un uuid válido.');
          }
          
          if (type) {
              sessionStorage.setItem('current-question-type', type);
              console.log(`Tipo ${type} guardado en sessionStorage con la clave 'current-question-type'.`);
          } else {
              console.warn('La pregunta no contiene un type válido.');
          }
          
          sessionStorage.setItem('responseData', JSON.stringify(responseData));
          console.log('responseData guardado en sessionStorage con la clave "responseData".');
      } else {
          console.warn('responseData no contiene una pregunta válida.');
      }
  }



  function guardarPreguntaEnSessionStorage(responseData) {
      if (responseData && responseData.question) {
          const { question } = responseData;
          if (question.uuid) {
              // Obtener el objeto "questions" del sessionStorage o inicializarlo vacío
              let questions = sessionStorage.getItem('questions');
              if (questions) {
                  try {
                      questions = JSON.parse(questions);
                  } catch (error) {
                      console.warn('No se pudo parsear el objeto existente en sessionStorage, se inicializa uno nuevo.');
                      questions = {};
                  }
              } else {
                  questions = {};
              }

              // Guardar o actualizar la pregunta utilizando su uuid como clave
              questions[question.uuid] = question;
              sessionStorage.setItem('questions', JSON.stringify(questions));
              console.log(`Pregunta guardada en sessionStorage dentro de 'questions' con la clave: ${question.uuid}`);
          } else {
              console.warn('La pregunta no contiene un uuid válido.');
          }
      } else {
          console.warn('responseData no contiene una pregunta válida.');
      }
  }

  function opcion_AutoFillAutoSave_Altissia_html() {
      return `
    <div id="autofillautosave_altissia" class="containerOption">

    <div id="users-autofill-altissia" class="users" style="display: none;">

        <!-- Columna para mostrar el nombre de usuario actual con icono de usuario -->
        <div class="usuario-actual">
            <i class="fa-solid fa-user"></i>
            <span id="nombre-usuario-actual" class="nombre-usuario"></span>
        </div>

        <select id="siguiente-usuario" class="select-siguiente-usuario">
        </select>

        <button id="boton-siguiente-usuario" class="boton-siguiente-usuario">
            <i class="fa-solid fa-angles-right"></i>
        </button>

    </div>

    <!-- Contenedor para Ruta y Ciclo -->
    <div id="containerRutaFirebase" style="display: none;">
    </div>

    <!-- Contenedor para Subject Dinamic -->
    <div id="containerRutaDinamicaFirebase" style="display: none;">
    </div>

    <div id="container-autofillautosave">

        <!-- Nuevo contenedor para AutoFill-->
        <div id="container-autofill" class="subcontainer-autoquiz-autofill">

            <div id="header-autofill" class="header-autoquiz">
                <h2 id="titulo-autoquiz">AutoFill</h2>

                <label class="switch-autoquiz">
                    <input type="checkbox" id="switch-autofill">
                    <span class="slider round"></span>
                </label>
            </div>

            <!-- Contenido de AutoFill-->
            <div id="body-autoquiz-autofill" class="body-autoquiz" style="display: none;">

                <!-- Contenedor dinámico para las preguntas generadas -->
                <div id="contenedor-preguntas" class="contenedor-preguntas">
                    <!-- Aquí se insertarán dinámicamente los detalles de cada pregunta -->
                </div>

            </div>
        </div>




       <!-- Contenedor para AutoSave -->
<div id="container-autosave" class="subcontainer-autoquiz-autosave">

    <div id="header-autosave" class="header-autoquiz">

        <!-- Título y Botones -->
        <h2 id="titulo-autoquiz">
            AutoSave

            <button id="upload-autosave" class="icon-button">
                <i class="fa-solid fa-cloud-arrow-up"></i>
            </button>
            <button id="copy-autosave" class="icon-button" style="display: none;">
            <i class="fa-solid fa-copy"></i>
            </button>
        </h2>

        <label class="switch-autoquiz">
            <input type="checkbox" id="switch-autosave">
            <span class="slider round"></span>
        </label>

    </div>

    <!-- Contenido de AutoSave -->
    <div id="body-autoquiz-autosave">
        <div>
            <span id="respuestasautosave"></span>
        </div>
    </div>
</div>


    </div>
</div>   
    `;
  }

  async function opcion_AutoFillAutoSave_Altissia_js() {

      let esAltissia = esPaginaAltissia();
      localStorage.getItem('switch-ruta-dinamica');

      if (esAltissia) {
          console.log("[opc-autofill-autosave-altissia: main]  Esta página está construida con Altissia");
      } else {
          console.log("[opc-autofill-autosave-altissia: main]  Esta página no está construida con Altissia");
      }

      // Llamada a la función para inicializar la asignación de atributos
      initializeDataGapIndexAssignment();
      // Llama a la función para inicializar el observador
      initAudioUrlObserver();


      // Detectar click en botones
      document.addEventListener('click', function (e) {
          // Ignorar eventos que sucedan dentro de #barra-lateral-autoquizfillapp
          if (e.target.closest('#barra-lateral-autoquizfillapp')) {
              return;
          }

          const target = e.target;
          if (target.tagName === 'BUTTON') {
              const buttonText = target.innerText.trim();
              const classList = target.className;
              const currentType = sessionStorage.getItem('current-question-type');

              // Verificar si la clase incluye 'isActive-true' y el tipo es MULTIPLE_CHOICE
              if (classList.includes('isActive-true') && currentType === 'MULTIPLE_CHOICE') {
                  saveAnswerMultipleChoice(buttonText);
                  highlightAnswer();
              }

          }
      });

      document.addEventListener('blur', function (e) {
          // Ignorar eventos que sucedan dentro de #barra-lateral-autoquizfillapp
          if (e.target.closest('#barra-lateral-autoquizfillapp')) {
              return;
          }

          const target = e.target;
          if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') {
              const inputValue = target.value.trim();
              console.log('Input perdió el foco con valor:', inputValue);

              // Verificar si el tipo en sessionStorage es "OPEN"
              const currentType = sessionStorage.getItem('current-question-type');
              if (currentType === 'OPEN') {
                  // 1. Obtener la clave de la pregunta actual
                  const currentQuestionKey = sessionStorage.getItem('current-question');

                  // 2. Obtener todas las preguntas y parsear el JSON
                  const questionsStr = sessionStorage.getItem('questions');
                  let currentQuestionObj = null;
                  if (questionsStr && currentQuestionKey) {
                      try {
                          const questionsObj = JSON.parse(questionsStr);
                          currentQuestionObj = questionsObj[currentQuestionKey];
                      } catch (error) {
                          console.error('Error al parsear las preguntas:', error);
                      }
                  }

                  // 3. Verificar si la pregunta actual tiene la cadena [GAP]
                  // Se asume que la propiedad que contiene el texto de la pregunta se llama "question"
                  const gapMatches = currentQuestionObj && currentQuestionObj.question
                      ? currentQuestionObj.question.match(/\[GAP\]/g)
                      : null;
                  const gapCount = gapMatches ? gapMatches.length : 0;

                  const answersEl = document.querySelector('.answers');
                  if (answersEl) {
                      if (gapCount > 1) {
                          // Caso: Más de un [GAP]
                          // Se espera que cada input tenga el atributo "data-gap-index"
                          const gapIndex = target.getAttribute('data-gap-index');
                          if (gapIndex !== null) {
                              let gapEl = answersEl.querySelector('[data-answer-index="' + gapIndex + '"]');
                              if (!gapEl) {
                                  // Crear el elemento para este gap si no existe
                                  gapEl = document.createElement('span');
                                  gapEl.setAttribute('data-answer-index', gapIndex);
                                  gapEl.style.fontWeight = '600';
                                  gapEl.style.color = 'blue';
                                  gapEl.style.display = 'block'; // Cada span se mostrará en línea separada
                                  answersEl.appendChild(gapEl);
                              }
                              // Actualizar el contenido del elemento correspondiente
                              gapEl.textContent = inputValue;
                          } else {
                              console.warn('El input no tiene atributo "data-gap-index", no se puede identificar el gap.');
                          }
                      } else if (gapCount === 1) {
                          // Caso: Solo hay un [GAP]
                          // Usamos un índice fijo (en este caso "1") para identificar el span
                          const fixedIndex = "1";
                          let gapEl = answersEl.querySelector('[data-answer-index="' + fixedIndex + '"]');
                          if (!gapEl) {
                              gapEl = document.createElement('span');
                              gapEl.setAttribute('data-answer-index', fixedIndex);
                              gapEl.style.fontWeight = '600';
                              gapEl.style.color = 'blue';
                              // En este caso, no es necesario el salto de línea ya que solo hay uno
                              answersEl.appendChild(gapEl);
                          }
                          // Actualizamos el contenido del mismo span (verifica que sea el mismo input)
                          gapEl.textContent = inputValue;
                      } else {
                          // Caso: No se encontró ningún [GAP] en la pregunta
                          // Se limpia el contenedor y se agrega un único span
                          answersEl.innerHTML = '';
                          if (inputValue) {
                              const newEl = document.createElement('span');
                              newEl.textContent = inputValue;
                              newEl.style.fontWeight = '600';
                              newEl.style.color = 'blue';
                              answersEl.appendChild(newEl);
                          }
                      }
                  }
                  else {
                      console.warn('No se encontró un elemento con la clase "answers".');
                  }
              }

              // Guardar la respuesta solo si hay valor
              if (inputValue) {
                  saveAnswerOpen();
              }
          }
      }, true);

      document.addEventListener('click', async (event) => {
          // Verificar si el elemento clickeado (o su contenedor) es un botón
          const button = event.target.closest('button');
          if (!button) return;

          // Comprobar si el texto del botón es "Validar" o "Validate"
          const btnText = button.textContent.trim();
          if (btnText !== "Validar" && btnText !== "Validate") return;

          // Evitar múltiples clics
          if (button.disabled) return;
          button.disabled = true;

          try {
              // Obtener datos y ruta desde localStorage
              const datosJSON = sessionStorage.getItem("questions");
              const configRuta = localStorage.getItem("configRuta");

              // Verificar que existan los datos necesarios
              if (!datosJSON || !configRuta) {
                  console.error("Faltan datos en localStorage");
                  return;
              }

              // Parsear los datos (se asume formato JSON)
              const datos = JSON.parse(datosJSON);

              // Ejecutar la función asíncrona con los datos extraídos
              await saveNewQuestionsToFirebaseAltissia(configRuta, datos);

              // Al finalizar, eliminar "questions" de sessionStorage
              sessionStorage.removeItem("questions");
              console.log("Proceso completado, se eliminó 'question' de localStorage");
          } catch (error) {
              console.error("Error al procesar las preguntas:", error);
          } finally {
              // Reactivar el botón
              // button.disabled = false;
          }
      });

      // Asociamos la función al botón
      document.getElementById("copy-autosave").addEventListener("click", copyAutosave);

      interceptionQuestion((responseData) => {
          console.log("Respuesta interceptada:", responseData);
          document.getElementById("copy-autosave").style.display = "inline-flex";

          guardarCurrentQuestion(responseData);
          guardarPreguntaEnSessionStorage(responseData);

          const elements = document.querySelectorAll('input, textarea');
          elements.forEach((el, index) => {
              if (!el.closest('#barra-lateral-autoquizfillapp')) {
                  el.setAttribute('data-gap-index', index);
              }
          });

          // Verificar si 'autofillAutoquizfillapp' está activado en el localStorage
          if (localStorage.getItem('autosave-autoquizfillapp') === "activado") {
              showAutoSave(responseData);
          }

      });

      console.log('[opc-autofill-autosave-moodle: main]  Cargando Ruta...');
      contenedorRuta_js$1();

      if (esAltissia) {
          contenedorAutoFillAutoSave_js();
      }

      detectarCambiosInterruptor();
  }

  async function contenedorAutoFillAutoSave_js() {
      const interruptorAutoSave = document.getElementById("switch-autosave");
      const interruptorAutoFill = document.getElementById("switch-autofill");

      if (!interruptorAutoSave || !interruptorAutoFill) return;

      const stateAutoSave = localStorage.getItem("autosave-autoquizfillapp") || "desactivado";
      const stateAutoFill = localStorage.getItem("autofill-autoquizfillapp") || "desactivado";

      interruptorAutoSave.checked = (stateAutoSave === "activado");
      interruptorAutoFill.checked = (stateAutoFill === "activado");

      document.getElementById("body-autoquiz-autosave");
      document.getElementById("body-autoquiz-autofill");
  }

  function detectarCambiosInterruptor() {
      const interruptorAutoSave = document.getElementById("switch-autosave");
      const interruptorAutoFill = document.getElementById("switch-autofill");

      // Para el interruptor de AutoSave
      interruptorAutoSave.addEventListener("change", async () => {
          const bodyAutoSave = document.getElementById("body-autoquiz-autosave");
          const nuevoEstado = interruptorAutoSave.checked ? "activado" : "desactivado";
          localStorage.setItem("autosave-autoquizfillapp", nuevoEstado);
          console.log(`AutoSave: ${nuevoEstado}`);

          if (nuevoEstado === "activado") {
              bodyAutoSave.style.display = 'flex';
              // Deshabilitar los eventos de preguntas
              //  contenedorAutoSave_js();
              // Rehabilitar después de finalizar la funció
          } else {
              bodyAutoSave.style.display = 'none';
          }
      });

      // Para el interruptor de AutoFill
      interruptorAutoFill.addEventListener("change", async () => {
          const bodyAutoFill = document.getElementById("body-autoquiz-autofill");
          const nuevoEstado = interruptorAutoFill.checked ? "activado" : "desactivado";
          localStorage.setItem("autofill-autoquizfillapp", nuevoEstado);
          console.log(`AutoFill: ${nuevoEstado}`);

          if (nuevoEstado === "activado") {
              bodyAutoFill.style.display = 'flex';
              window.eventosPreguntasHabilitados = false;
              console.log("Valor de eventosPreguntasHabilitados (deshabilitado): " + window.eventosPreguntasHabilitados);
              //  await contenedorAutoFill_js();
              // Rehabilitar después de finalizar la función
              window.eventosPreguntasHabilitados = true;
              console.log("Valor de eventosPreguntasHabilitados (reactivado): " + window.eventosPreguntasHabilitados);
              localStorage.getItem("autosave-autoquizfillapp") || "desactivado";

          } else {
              bodyAutoFill.style.display = 'none';
          }
      });
  }

  // Función para verificar si la página está construida con Moodle
  function esPaginaAltissia() {
      return window.location.href.includes("altissia.org");
  }

  async function showAutoSave(responseData) {
      // Extraemos la información de la pregunta del objeto anidado
      const q = responseData.question;
      const processedInstruction = String(q.instruction);
      let instructionText = "";

      if (processedInstruction === "la_select_sentence_instruction") {
          instructionText = "Elige la frase adecuada.";
      } else if (processedInstruction === "la_choose_instruction") {
          instructionText = "Elige la respuesta correcta.";
      } else if (processedInstruction === "la_fill_instruction") {
          instructionText = "Rellena el(los) campo(s) vacío(s).";
      } else if (processedInstruction === "la_summarise_instruction") {
          instructionText = "¿Qué frase resume mejor el siguiente pasaje/fragmento?";
      } else if (processedInstruction === "la_fill_two_words_instruction") {
          instructionText = "Rellena el campo vacío - 2 palabras.";
      } else if (processedInstruction === "la_fill_one_word_instruction") {
          instructionText = "Rellena el campo vacío - 1 palabra.";
      } else if (processedInstruction === "la_fill_four_words_instruction") {
          instructionText = "Rellena el campo vacío - 4 palabras.";
      } else if (processedInstruction === "fill_three_words_instruction") {
          instructionText = "Rellena el campo vacío - 3 palabras.";
      } else {
          instructionText = processedInstruction.split('_').slice(1).join(' ');
      }

      const processedSpecificInstruction = String(q.specificInstruction);
      let specificInstructionText = "";

      if (processedSpecificInstruction === "la_specific_verb_instruction") {
          specificInstructionText = "Verbo";
      } else if (processedSpecificInstruction === "la_specific_use_verb") {
          specificInstructionText = "Usa un verbo.";
      } else if (processedSpecificInstruction === "la_specific_complete_the_idiom") {
          specificInstructionText = "Completa la expresión idiomática.";
      } else if (processedSpecificInstruction === "la_specific_use_an_idiom") {
          specificInstructionText = "Usa una expresión idiomática.";
      } else if (processedSpecificInstruction === "la_specific_two_adjectives") {
          specificInstructionText = "Usa dos adjetivos.";
      } else if (processedSpecificInstruction === "la_specific_adjective_noun") {
          specificInstructionText = "Usa un adjetivo y un nombre.";
      } else if (processedSpecificInstruction === "la_specific_verb_noun") {
          specificInstructionText = "Usa un verbo y un nombre.";
      }

      else {
          specificInstructionText = processedSpecificInstruction.split('_').slice(1).join(' ');
      }

      const processedSpecificInstructionGap = String(q.specificInstructionGap);


      // Aseguramos que q.question sea tratado como string y reemplazamos [GAP] por "_____"
      const processedQuestion = String(q.question)
          .replace(/\[GAP\]/g, "_____")
          .replace(/\r?\n/g, '<br>')
          .replace(/(<br>\s*){2,}/g, '<br>');


      // Verificamos si ya existe transcripción usando la propiedad q.uuidSoundT
      const transcriptionExists = !!q.uuidSoundT;
      console.log("Existe transcripción? ", transcriptionExists);

      // Crear contenedor principal con clase "auto-save" para agrupar todo el contenido
      let html = `<div class="auto-save">`;

      // Instrucción
      html += `<p class="instruction" style="font-size: small; font-weight: 600; word-wrap: break-word; overflow-wrap: break-word; margin-top: 2px;">${instructionText}</p>`;

      // Área de transcripción y contenedor "ver más" si existe q.uuidSound
      if (q.uuidSound) {
          html += `<p class="transcription" id="transcription-${q.uuidSound}" style="font-size: small; word-wrap: break-word; overflow-wrap: break-word;"></p>`;
          html += `<div id="ver-mas-container-${q.uuidSound}"></div>`;
      }

      // Instrucción Especifica
      html += `<p class="specificInstruction" style="font-size: small; font-weight: 600; margin-top: 2px;">${specificInstructionText} ${processedSpecificInstructionGap} </p>`;


      // Pregunta
      html += `<p class="question" style="font-size: small; word-wrap: break-word; overflow-wrap: break-word; margin-top: 2px;">${processedQuestion}</p>`;

      // Respuestas (lista)
      html += `<div style="margin-top: 5px;">`;
      html += `<ul class="answers" style="font-size: small;">`;
      q.answers.forEach(answer => {
          html += `<li>· ${answer}</li>`;
      });
      html += `</ul>`;
      html += `</div>`;

      // Campo de ingreso para transcripción
      if (q.uuidSound) {
          html += `<div id="transcription-input-container-${q.uuidSound}" style="display:none; margin-top:0.5em;">`;
          html += `<input type="text" id="transcription-input-${q.uuidSound}" placeholder="Ingrese transcripción..." style="width:100%; height:50px; text-align: left; padding-top: 0; line-height: normal;"/>`;
          html += `</div>`;
      }

      // Contenedor de botones (solo transcripción, se eliminó el de copiar)
      if (q.uuidSound) {
          html += `<div style="display: flex; justify-content: space-between; margin-top: 5px;">`;
          const transcriptionBtnText = transcriptionExists ? "Editar transcripción" : "Agregar transcripción";
          html += `<button id="btn-transcription-${q.uuidSound}" class="btn-transcription">${transcriptionBtnText}</button>`;
          html += `</div>`;
      }

      // Cerrar contenedor principal
      html += `</div>`;

      // Mostrar el contenedor principal de la sección
      const bodyContainer = document.getElementById("body-autoquiz-autosave");
      if (bodyContainer) {
          bodyContainer.style.display = "block";
      }

      // Insertar el HTML en el contenedor con id "respuestasautosave"
      const container = document.getElementById("respuestasautosave");
      if (container) {
          container.innerHTML = html;
      } else {
          console.error('No se encontró el contenedor con id "respuestasautosave"');
      }

      // Eventos y funcionalidad para transcripción
      if (q.uuidSound) {
          const btnTranscription = document.getElementById(`btn-transcription-${q.uuidSound}`);
          const inputContainer = document.getElementById(`transcription-input-container-${q.uuidSound}`);
          const inputField = document.getElementById(`transcription-input-${q.uuidSound}`);
          const transcriptionElement = document.getElementById(`transcription-${q.uuidSound}`);
          const verMasContainer = document.getElementById(`ver-mas-container-${q.uuidSound}`);

          if (transcriptionExists && transcriptionElement) {
              // Mostrar transcripción completa
              const text = q.uuidSoundT;
              transcriptionElement.innerHTML = text;

              // Limitar altura máxima y ocultar desbordamiento
              const maxHeight = 100; // en píxeles
              transcriptionElement.style.maxHeight = `${maxHeight}px`;
              transcriptionElement.style.overflow = "hidden";

              // Agregar enlace "ver más" si es necesario
              if (transcriptionElement.scrollHeight > transcriptionElement.clientHeight) {
                  let verMasLink = document.getElementById(`ver-mas-${q.uuidSound}`);
                  if (!verMasLink) {
                      verMasLink = document.createElement("a");
                      verMasLink.href = "#";
                      verMasLink.id = `ver-mas-${q.uuidSound}`;
                      verMasLink.textContent = " ver más";
                      verMasContainer.appendChild(verMasLink);
                  }
                  verMasLink.addEventListener("click", function (e) {
                      e.preventDefault();
                      transcriptionElement.style.maxHeight = "none";
                      verMasLink.style.display = "none";
                  });
              }
          }

          // Evento para el botón de transcripción
          if (btnTranscription && inputContainer && inputField && transcriptionElement) {
              btnTranscription.addEventListener("click", function () {
                  if (inputContainer.style.display === "none") {
                      inputContainer.style.display = "block";
                      btnTranscription.textContent = "Guardar";
                      if (transcriptionExists) {
                          inputField.value = q.uuidSoundT;
                      }
                  } else {
                      const text = inputField.value.trim();

                      // Guardar transcripción en sessionStorage dentro del objeto "questions"
                      const currentQuestion = sessionStorage.getItem("current-question");
                      const questionsData = sessionStorage.getItem("questions");

                      if (currentQuestion && questionsData) {
                          try {
                              let questions = JSON.parse(questionsData);

                              // Verificamos que exista la pregunta dentro del objeto
                              if (questions.hasOwnProperty(currentQuestion)) {
                                  questions[currentQuestion].uuidSoundT = text;

                                  // Volvemos a guardar en sessionStorage
                                  sessionStorage.setItem("questions", JSON.stringify(questions));
                                  console.log("✅ Transcripción actualizada en questions[" + currentQuestion + "]");
                              } else {
                                  console.warn("⚠️ No se encontró la pregunta con UUID " + currentQuestion + " en 'questions'.");
                              }
                          } catch (err) {
                              console.error("❌ Error al parsear 'questions' desde sessionStorage:", err);
                          }
                      } else {
                          console.warn("⚠️ current-question o questions no están disponibles en sessionStorage.");
                      }


                      transcriptionElement.innerHTML = text;

                      const maxHeight = 100;
                      transcriptionElement.style.maxHeight = `${maxHeight}px`;
                      transcriptionElement.style.overflow = "hidden";

                      if (transcriptionElement.scrollHeight > transcriptionElement.clientHeight) {
                          let verMasLink = document.getElementById(`ver-mas-${q.uuidSound}`);
                          if (!verMasLink) {
                              verMasLink = document.createElement("a");
                              verMasLink.href = "#";
                              verMasLink.id = `ver-mas-${q.uuidSound}`;
                              verMasLink.textContent = " ver más";
                              verMasContainer.appendChild(verMasLink);
                          }
                          verMasLink.addEventListener("click", function (e) {
                              e.preventDefault();
                              transcriptionElement.style.maxHeight = "none";
                              verMasLink.style.display = "none";
                          });
                      } else {
                          const verMasLink = document.getElementById(`ver-mas-${q.uuidSound}`);
                          if (verMasLink) verMasLink.remove();
                      }

                      inputContainer.style.display = "none";
                      btnTranscription.textContent = "Editar transcripción";
                  }
              });
          }
      }
  }

  function highlightAnswer() {
      // Obtenemos todos los elementos <li> dentro del <ul> con clase "answers"
      const listItems = document.querySelectorAll('ul.answers li');
      console.log('Elementos <li> encontrados:', listItems);

      listItems.forEach(li => {
          // Obtenemos el texto del <li> y lo limpiamos de espacios extra
          let answerText = li.textContent.trim();
          console.log('Texto original del <li>:', answerText);

          // Eliminamos la marca "· " al inicio, si existe
          answerText = answerText.replace(/^·\s*/, '');
          console.log('Texto limpio del <li>:', answerText);

          // Buscamos un botón cuyo texto coincida exactamente con el del <li> (sin la marca)
          const matchingButton = Array.from(document.querySelectorAll('button'))
              .find(button => {
                  const buttonText = button.textContent.trim();
                  return buttonText === answerText;
              });

          console.log('Botón encontrado para el <li>:', matchingButton);

          if (matchingButton) {
              // Verificamos si alguna clase del botón contiene la subcadena "isActive-true"
              if ([...matchingButton.classList].some(clase => clase.includes('isActive-true'))) {
                  console.log('El botón tiene una clase que incluye "isActive-true". Se resalta el <li>.');
                  li.style.fontWeight = '600';
                  li.style.color = 'blue';
                  // Enfoca el elemento resaltado en pantalla con una transición suave
                  li.scrollIntoView({ behavior: 'smooth', block: 'center' });
              } else {
                  console.log('El botón NO tiene ninguna clase que incluya "isActive-true". Se remueven estilos del <li>.');
                  li.style.fontWeight = '';
                  li.style.color = '';
              }
          } else {
              console.log('No se encontró un botón que coincida. Se remueven estilos del <li>.');
              li.style.fontWeight = '';
              li.style.color = '';
          }
      });
  }

  function copyAutosave() {
      // Seleccionamos el contenedor principal
      const autoSaveDiv = document.querySelector(".auto-save");
      if (autoSaveDiv) {
          // Obtenemos el texto de cada elemento deseado, si existe
          const instruction = autoSaveDiv.querySelector(".instruction")?.textContent.trim() || "";
          // Se agrega el contenido de "specificInstruction"
          const specificInstruction = autoSaveDiv.querySelector(".specificInstruction")?.textContent.trim() || "";
          const transcription = autoSaveDiv.querySelector(".transcription")?.textContent.trim() || "";
          // Usamos innerText para preservar los saltos de línea en "question"
          const question = autoSaveDiv.querySelector(".question")?.innerText || "";

          // Procesamos el contenido de answers
          let answersText = "";
          const answersContainer = autoSaveDiv.querySelector(".answers");
          if (answersContainer) {
              const liItems = answersContainer.querySelectorAll("li");
              if (liItems.length > 0) {
                  // Si existen items <li>, se agrega un literal (a, b, c, …) sin punto y con salto de línea a cada uno.
                  const letters = 'abcdefghijklmnopqrstuvwxyz';
                  answersText = Array.from(liItems).map((li, index) => {
                      const literal = letters[index] || (index + 1); // en caso de más de 26 items
                      // Remover "· " si existe al principio del texto
                      const text = li.textContent.trim().replace(/^·\s*/, "");
                      return `${literal}. ${text}`;
                  }).join("\n");
              } else {
                  // Si no hay items <li>, usamos el contenido completo
                  answersText = answersContainer.textContent.trim();
              }
          }

          // Juntamos el contenido de cada uno en una cadena, separados por un salto de línea
          const textToCopy = [instruction, specificInstruction, transcription, question, answersText]
              .filter(Boolean)
              .join("\n");

          // Copiamos al portapapeles
          navigator.clipboard.writeText(textToCopy)
              .then(() => {
                  const btn = document.getElementById("copy-autosave");
                  if (btn) {
                      // Cambiamos el icono a "check"
                      btn.innerHTML = `<i class="fa-solid fa-check"></i>`;
                      // Después de 2 segundos, volvemos al icono original
                      setTimeout(() => {
                          btn.innerHTML = `<i class="fa-solid fa-copy"></i>`;
                      }, 2000);
                  }
              })
              .catch(err => {
                  console.error("Error al copiar: ", err);
              });
      }
  }

  function initializeDataGapIndexAssignment() {
      // Función interna para asignar atributos a los elementos ya existentes
      function assignAttributes() {
          const elements = document.querySelectorAll('input, textarea');
          let counter = 0;
          elements.forEach(el => {
              if (!el.closest('#barra-lateral-autoquizfillapp') && !el.hasAttribute('data-gap-index')) {
                  el.setAttribute('data-gap-index', counter);
                  counter++;
              }
          });
      }

      // Si el DOM aún no se ha cargado, esperar al evento DOMContentLoaded
      if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', assignAttributes);
      } else {
          assignAttributes();
      }

      // Crear un MutationObserver para detectar la inserción de nuevos elementos
      const observer = new MutationObserver(mutations => {
          mutations.forEach(mutation => {
              mutation.addedNodes.forEach(node => {
                  if (node.nodeType === Node.ELEMENT_NODE) {
                      // Si el nodo agregado es un input o textarea, asignar el atributo
                      if (node.matches('input, textarea')) {
                          if (!node.closest('#barra-lateral-autoquizfillapp') && !node.hasAttribute('data-gap-index')) {
                              const currentCount = document.querySelectorAll('input[data-gap-index], textarea[data-gap-index]').length;
                              node.setAttribute('data-gap-index', currentCount);
                          }
                      } else {
                          // Si el nodo es un contenedor, buscar inputs y textareas en su interior
                          node.querySelectorAll && node.querySelectorAll('input, textarea').forEach(child => {
                              if (!child.closest('#barra-lateral-autoquizfillapp') && !child.hasAttribute('data-gap-index')) {
                                  const currentCount = document.querySelectorAll('input[data-gap-index], textarea[data-gap-index]').length;
                                  child.setAttribute('data-gap-index', currentCount);
                              }
                          });
                      }
                  }
              });
          });
      });

      // Observar cambios en el body y todos sus descendientes
      observer.observe(document.body, { childList: true, subtree: true });
  }

  function initAudioUrlObserver() {
      // Función para encontrar el <h2> cuyo texto incluya "Comprensión auditiva" o "Listening Comprehension"
      function findTargetHeading() {
          const headings = document.querySelectorAll("h2");


          return Array.from(headings).find(el => {
              const text = el.textContent.trim();
              return text.includes("Comprensión auditiva") || text.includes("Listening Comprehension");

          });
      }

      // Crea el botón de copiar y lo inserta al lado izquierdo del <h2>
      function createCopyButton() {
          const targetHeading = findTargetHeading();
          if (!targetHeading) {
              console.error("No se encontró un h2 con 'Comprensión auditiva' o 'Listening Comprehension'");
              return;
          }

          // Evita duplicar el botón si ya existe
          if (document.getElementById("copy-audio-url-btn")) return;

          const btn = document.createElement("button");
          btn.id = "copy-audio-url-btn";
          btn.style.display = "inline-block";
          btn.style.marginTop = "0px";
          btn.style.padding = "0px";
          btn.style.cursor = "pointer";
          btn.style.fontSize = "12px";
          btn.innerHTML = '<i class="fa-solid fa-copy"></i> Copiar URL';

          targetHeading.insertAdjacentElement("beforebegin", btn);

          btn.addEventListener("click", async () => {
              try {
                  const sourceElement = document.querySelector("audio > source");
                  if (!sourceElement) {
                      console.error("No se encontró el elemento <source> en el <audio>");
                      alert("No se encontró el elemento de audio");
                      return;
                  }

                  const src = sourceElement.getAttribute("src");
                  const absoluteUrl = new URL(src, window.location.href).href;

                  await navigator.clipboard.writeText(absoluteUrl);
                  console.log("URL copiada al portapapeles:", absoluteUrl);

                  btn.innerHTML = '<i class="fa-solid fa-check"></i> Copiado';
                  setTimeout(() => {
                      btn.innerHTML = '<i class="fa-solid fa-copy"></i> Copiar URL';
                  }, 2000);
              } catch (err) {
                  console.error("Error al copiar la URL:", err);
                  alert("Error al copiar la URL");
              }
          });
      }

      // Observador de mutaciones para detectar <audio> con <source>
      const observer = new MutationObserver((mutations, obs) => {
          mutations.forEach(mutation => {
              mutation.addedNodes.forEach(node => {
                  if (node.nodeType === Node.ELEMENT_NODE) {
                      if (
                          (node.tagName.toLowerCase() === "audio" && node.querySelector("source")) ||
                          (node.querySelector && node.querySelector("audio > source"))
                      ) {
                          console.log("Elemento de audio detectado");
                          createCopyButton();
                          obs.disconnect();
                          initTranscriberWithURL();
                      }
                  }
              });
          });
      });

      observer.observe(document.body, { childList: true, subtree: true });

      if (document.querySelector("audio > source")) {
          console.log("Elemento de audio ya presente en el DOM");
          createCopyButton();
          observer.disconnect();
      }


  }

  function initTranscriberWithURL() {
      const UI = `
      <input type="text" id="audioUrl" placeholder="URL p\u00fablica del archivo" style="width:100%;padding:6px;"><br>
      <button id="startBtn" style="margin-top:8px;width:100%;padding:10px;background:#007bff;color:#fff;border:none;border-radius:6px;">Convertir y Transcribir</button>
      <div id="status" style="margin-top:10px;"></div>
      <div id="downloadLink" style="margin-top:10px;"></div>
      <div id="transcription" style="white-space:pre-wrap; position:relative; overflow:auto; max-height: 150px;"></div>
      <button id="copyBtn" style="display:none;margin-top:10px;">\ud83d\udccb Copiar</button>
    `;

      const panel = document.createElement('div');
      panel.id = 'transcriberPanel';
      panel.style = `
      position: fixed; bottom: 60px; right: 10px; width: 300px; max-height: 500px;
      background:#fff; padding:10px; border:1px solid #ccc;
      border-radius:10px; z-index:99998; box-shadow:0 0 10px rgba(0,0,0,0.15);
      font-family:sans-serif; display: none;
    `;
      panel.innerHTML = UI;
      document.body.appendChild(panel);

      const toggleBtn = document.createElement('button');
      toggleBtn.innerHTML = `<i class="fa-solid fa-microphone"></i>`;
      toggleBtn.style = `
      position: fixed; bottom: 10px; right: 10px;
      width: 50px; height: 40px;
      background: #007bff; color: white; border: none;
      border-radius: 10px; z-index: 99999; font-size: 18px;
      display: flex; align-items: center; justify-content: center;
      transition: background 0.3s;
    `;
      document.body.appendChild(toggleBtn);

      toggleBtn.onclick = () => {
          const visible = panel.style.display === 'block';
          panel.style.display = visible ? 'none' : 'block';
          toggleBtn.innerHTML = visible
              ? `<i class="fa-solid fa-microphone"></i>`
              : `<i class="fa-solid fa-minimize"></i>`;
          toggleBtn.style.background = visible ? '#007bff' : '#dc3545';
      };

      const audioUrlInput = panel.querySelector('#audioUrl');
      const startBtn = panel.querySelector('#startBtn');
      const statusDiv = panel.querySelector('#status');
      const transcriptionDiv = panel.querySelector('#transcription');
      const copyBtn = panel.querySelector('#copyBtn');

      // Variable de comunicaci\u00f3n para Puppeteer
      window.__readyToProcess = false;

      startBtn.onclick = () => {
          const url = audioUrlInput.value.trim();
          if (!url) {
              statusDiv.textContent = '⚠️ Ingresa una URL.';
              return;
          }
          statusDiv.textContent = '📡 Procesando...';

          fetch(url, {
              headers: {
                  "accept-language": "en-US,en;q=0.9",
                  "range": "bytes=0-"
              },
              referrer: "https://aprender.altissia.org/platform/need-analysis",
              referrerPolicy: "strict-origin-when-cross-origin",
              method: "GET",
              mode: "cors",
              credentials: "omit"
          })
              .then(response => {
                  if (!response.ok) {
                      throw new Error(`Error en la respuesta: ${response.status} ${response.statusText}`);
                  }
                  return response.blob();
              })
              .then(blob => new Promise((resolve, reject) => {
                  const reader = new FileReader();
                  reader.onloadend = () => resolve(reader.result);
                  reader.onerror = reject;
                  reader.readAsDataURL(blob); // Convierte el blob a una URL de datos (data URL)
              }))
              .then(dataURL => {
                  // La dataURL tiene formato "data:tipo/mediatype;base64,AAAA..."
                  localStorage.setItem('__audioToTranscribe', dataURL);
                  window.__readyToProcess = true;
                  statusDiv.innerHTML = '<i class="fa-solid fa-spinner"></i> Procesando...';
              })
              .catch(error => {
                  console.error('Error:', error);
                  statusDiv.textContent = '❌ Error al procesar.';
              });
      };


      copyBtn.onclick = async () => {
          try {
              await navigator.clipboard.writeText(transcriptionDiv.textContent);
              copyBtn.textContent = '✔️ Copiado';
              setTimeout(() => copyBtn.textContent = '📋 Copiar', 1500);
          } catch (err) {
              console.error('❌ No se pudo copiar al portapapeles', err);
          }
      };
  }

  var css_248z$2 = "/* Estilo para el Contenedor Principal */\r\n#titulo-config {\r\n    margin-bottom: 5px;\r\n    margin-top: 0;\r\n    display: flex;\r\n    color: #34495e;\r\n    padding: 0; /* Opcional: padding interno */\r\n    font-family: 'Poppins', sans-serif;\r\n    font-size: 1.4rem; /* Tamaño de fuente de 1rem */\r\n}\r\n\r\n.estilo-config-select {\r\n    width: 100%;\r\n    padding: 12px;\r\n    font-size: 14px;\r\n    font-family: 'Poppins', sans-serif;\r\n    border: 1px solid #bdc3c7;\r\n    border-radius: 4px;\r\n    background-color: #ffffff;\r\n    color: #2c3e50;\r\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n    transition: border 0.3s ease, box-shadow 0.3s ease;\r\n}\r\n.estilo-config-item {\r\n        font-family: 'Poppins', sans-serif;\r\n}\r\n\r\n/* styles.css */\r\n\r\n/* Contenedor que usa Flexbox para alinear elementos */\r\n.opc-config-switch-container {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    width: 100%; /* Ajusta el ancho según tus necesidades */\r\n    padding: 10px;\r\n    margin: 10px 0; /* Espaciado entre switches */\r\n    border: 1px solid #ddd; /* Opcional: para visualizar el contenedor */\r\n    border-radius: 8px;\r\n    background-color: #f9f9f9; /* Opcional: fondo del contenedor */\r\n  }\r\n  \r\n  /* Estilo para la etiqueta de texto */\r\n  .opc-config-switch-label {\r\n    font-size: 0.9rem;\r\n    color: #333;\r\n  }\r\n  \r\n  /* El switch - el contenedor alrededor del slider */\r\n  .opc-config-switch {\r\n    position: relative;\r\n    display: inline-block;\r\n    width: 40px; /* Tamaño reducido */\r\n    height: 20px; /* Tamaño reducido */\r\n  }\r\n  \r\n  /* Ocultar el checkbox HTML por defecto */\r\n  .opc-config-switch-checkbox {\r\n    opacity: 0;\r\n    width: 0;\r\n    height: 0;\r\n  }\r\n  \r\n  /* El slider */\r\n  .opc-config-slider {\r\n    position: absolute;\r\n    cursor: pointer;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: #ccc;\r\n    transition: .4s;\r\n    border-radius: 20px; /* Redondear el slider */\r\n  }\r\n  \r\n  .opc-config-slider:before {\r\n    position: absolute;\r\n    content: \"\";\r\n    height: 16px; /* Tamaño reducido */\r\n    width: 16px; /* Tamaño reducido */\r\n    left: 2px;\r\n    bottom: 2px;\r\n    background-color: white;\r\n    transition: .4s;\r\n    border-radius: 50%;\r\n  }\r\n  \r\n  /* Cambiar el color del slider cuando el checkbox está marcado */\r\n  .opc-config-switch-checkbox:checked + .opc-config-slider {\r\n    background-color: #2196F3;\r\n  }\r\n  \r\n  /* Añadir sombra al enfocar el checkbox */\r\n  .opc-config-switch-checkbox:focus + .opc-config-slider {\r\n    box-shadow: 0 0 1px #2196F3;\r\n  }\r\n  \r\n  /* Mover el slider cuando el checkbox está marcado */\r\n  .opc-config-switch-checkbox:checked + .opc-config-slider:before {\r\n    transform: translateX(20px); /* Ajusta según el tamaño reducido */\r\n  }\r\n  \r\n  /* Cambiar el color de la etiqueta cuando el switch está activo */\r\n  .opc-config-switch-checkbox:checked ~ .opc-config-switch-label {\r\n    color: #2196F3;\r\n  }\r\n  \r\n  /* Redondear el slider cuando tiene la clase 'round' */\r\n  .opc-config-slider.round {\r\n    border-radius: 20px;\r\n  }\r\n  \r\n  .opc-config-slider.round:before {\r\n    border-radius: 50%;\r\n  }\r\n  ";
  styleInject(css_248z$2);

  // configuracion.js


  /**
   * Retorna el HTML de la configuración con contenedores específicos para cada plataforma.
   */
  function opcionConfig_html() {
    return `
    <div class="contenido-config">
      <h3 id="titulo-config">Configuración</h3>
      
      <!-- Contenedor Select Dinámico -->
      <div id="selects-plataforma" class="estilo-config-item">
        <!-- Aquí se inyectará el select dinámicamente -->
      </div>

      <!-- Configuración específica para Moodle -->
      <div id="moodle-config" style="display: none">
        <!-- Switch de Ruta Dinámica -->
        <div id="dynamic-route-switch" class="opc-config-switch-container">
          <span class="opc-config-switch-label">Ruta Dinámica</span>
          <label class="opc-config-switch">
            <input type="checkbox" id="dynamic-route-switch-checkbox" class="opc-config-switch-checkbox">
            <span class="opc-config-slider round"></span>
          </label>

        </div>
        <!-- Switch AutoFill Users -->
        <div id="users-autofill-switch" class="opc-config-switch-container">
          <span class="opc-config-switch-label">AutoFill Users</span>
          <label class="opc-config-switch">
            <input type="checkbox" id="users-autofill-switch-checkbox" class="opc-config-switch-checkbox">
            <span class="opc-config-slider round"></span>
          </label>
        </div>

      <span id="subopcion-config" class="estilo-config-item" >AutoSave</span>

      <div id="botonterminaryguardar-autosave-switch" class="opc-config-switch-container" >
        <span class="opc-config-switch-label">Mostrar Botón Guardar y Terminar</span>
        <label class="opc-config-switch">
          <input type="checkbox" id="botonterminaryguardar-autosave-switch-checkbox" class="opc-config-switch-checkbox">
          <span class="opc-config-slider round"></span>
        </label>
      </div>


      </div>

      <!-- Configuración específica para Altissia -->
      <div id="altissia-config" style="display: none">
        <!-- Ejemplo de switch para Altissia -->
        <div id="altissia-switch-option" class="opc-config-switch-container">
          <span class="opc-config-switch-label">Opción Altissia</span>
          <label class="opc-config-switch">
            <input type="checkbox" id="altissia-switch-checkbox" class="opc-config-switch-checkbox">
            <span class="opc-config-slider round"></span>
          </label>
        </div>
      </div>

      <!-- Otros elementos adicionales (opcional) -->
  
    </div>
  `;
  }

  /**
   * Función que actualiza la visibilidad de las secciones de configuración según la plataforma seleccionada.
   */
  function updatePlatformConfigurationUI() {
    const platform = localStorage.getItem('ConfigPlataforma');
    const moodleConfig = document.getElementById('moodle-config');
    const altissiaConfig = document.getElementById('altissia-config');

    if (!moodleConfig || !altissiaConfig) {
      console.error('No se encontraron las secciones de configuración para las plataformas.');
      return;
    }

    if (platform === 'Moodle') {
      moodleConfig.style.display = 'block';
      altissiaConfig.style.display = 'none';
    } else if (platform === 'Altissia') {
      moodleConfig.style.display = 'none';
      altissiaConfig.style.display = 'block';
    } else {
      // Para cualquier otra plataforma, se ocultan ambas secciones
      moodleConfig.style.display = 'none';
      altissiaConfig.style.display = 'none';
    }
  }

  /**
   * Crea un select junto a su etiqueta y configura el listener para guardar la selección.
   * @param {Object} config - Configuración para crear el select.
   * @param {string} config.labelText - Texto de la etiqueta.
   * @param {string} config.selectId - ID y nombre del select.
   * @param {string} config.storageKey - Clave de localStorage para guardar la selección.
   * @param {Array<string>} config.options - Opciones a incluir en el select.
   * @param {string} config.defaultValue - Valor por defecto si no hay nada en localStorage.
   * @param {Function} config.onChange - Callback a ejecutar cuando cambie la selección.
   * @returns {DocumentFragment} Fragmento con la etiqueta y el select.
   */
  function createSelectWithLabel({ labelText, selectId, storageKey, options, defaultValue, onChange }) {
    const label = document.createElement('label');
    label.setAttribute('for', selectId);
    label.textContent = labelText;
    label.classList.add('estilo-config-item');

    const select = document.createElement('select');
    select.id = selectId;
    select.name = selectId;
    select.classList.add('estilo-config-select');

    options.forEach(optionValue => {
      const optionElement = document.createElement('option');
      optionElement.value = optionValue;
      optionElement.textContent = optionValue;
      select.appendChild(optionElement);
    });

    const storedValue = localStorage.getItem(storageKey) || defaultValue;
    select.value = options.includes(storedValue) ? storedValue : options[0];

    select.addEventListener('change', event => {
      const value = event.target.value;
      localStorage.setItem(storageKey, value);
      if (onChange) onChange(value);
    });

    const fragment = document.createDocumentFragment();
    fragment.appendChild(label);
    fragment.appendChild(select);
    return fragment;
  }

  /**
   * Inicializa un switch basado en el contenedor, checkbox y la clave en localStorage.
   * Solo se muestra si la plataforma actual coincide con 'platformRequired'.
   * @param {string} containerId - ID del contenedor del switch.
   * @param {string} checkboxId - ID del input checkbox.
   * @param {string} storageKey - Clave en localStorage para guardar el estado.
   * @param {string} platformRequired - Plataforma requerida para mostrar el switch.
   */
  function initSwitch(containerId, checkboxId, storageKey, platformRequired) {
    const container = document.getElementById(containerId);
    const checkbox = document.getElementById(checkboxId);

    if (!container || !checkbox) {
      console.error(`No se encontró el contenedor o checkbox para ${containerId}`);
      return;
    }

    const configPlataforma = localStorage.getItem("ConfigPlataforma");
    if (configPlataforma === platformRequired) {
      container.style.display = "flex";
      checkbox.checked = localStorage.getItem(storageKey) === "true";
    } else {
      localStorage.setItem(storageKey, "false");
      container.style.display = "none";
    }

    checkbox.addEventListener("change", () => {
      localStorage.setItem(storageKey, checkbox.checked.toString());
    });
  }

  /**
   * Genera un select dinámico basado en las claves de 'Config/Plataforma' en Firebase.
   * Establece el valor seleccionado según localStorage o por defecto a 'Moodle'.
   */
  async function opcionConfig_js() {
    try {
      // Si no existe la configuración de plataforma, se establece por defecto a "Moodle"
      if (!localStorage.getItem('ConfigPlataforma')) {
        localStorage.setItem('ConfigPlataforma', "Moodle");
      }

      // Obtener las plataformas desde Firebase
      const plataformaRef = ref(database, 'Config/Plataforma');
      const snapshot = await get(plataformaRef);

      if (snapshot.exists()) {
        const plataformas = snapshot.val();
        const plataformaKeys = Object.keys(plataformas);

        const selectsContainer = document.getElementById('selects-plataforma');
        if (!selectsContainer) {
          console.error('El contenedor con ID "selects-plataforma" no existe en el DOM.');
          return;
        }
        selectsContainer.innerHTML = '';

        // Crear el select con su etiqueta
        const selectFragment = createSelectWithLabel({
          labelText: 'Plataforma: ',
          selectId: 'select-plataforma',
          storageKey: 'ConfigPlataforma',
          options: plataformaKeys,
          defaultValue: 'Moodle',
          onChange: () => {
            // Actualiza la UI y reinicializa los switches al cambiar la plataforma
            updatePlatformConfigurationUI();
            initSwitch("dynamic-route-switch", "dynamic-route-switch-checkbox", "switch-ruta-dinamica", "Moodle");
            initSwitch("users-autofill-switch", "users-autofill-switch-checkbox", "configUsersAutofill", "Moodle");
            initSwitch("botonterminaryguardar-autosave-switch", "botonterminaryguardar-autosave-switch-checkbox", "botonAutoSave", "Moodle");
            initSwitch("altissia-switch-option", "altissia-switch-checkbox", "configAltissiaOption", "Altissia");
          }
        });

        selectsContainer.appendChild(selectFragment);
      } else {
        console.log('No se encontraron plataformas en Firebase.');
      }

      // Actualiza la UI según la plataforma seleccionada y se inicializan los switches
      updatePlatformConfigurationUI();
      initSwitch("dynamic-route-switch", "dynamic-route-switch-checkbox", "switch-ruta-dinamica", "Moodle");
      initSwitch("users-autofill-switch", "users-autofill-switch-checkbox", "configUsersAutofill", "Moodle");
      initSwitch("botonterminaryguardar-autosave-switch", "botonterminaryguardar-autosave-switch-checkbox", "botonAutoSave", "Moodle");
      initSwitch("altissia-switch-option", "altissia-switch-checkbox", "configAltissiaOption", "Altissia");

    } catch (error) {
      console.error('Error al obtener las plataformas de Firebase:', error);
    }
  }

  var css_248z$1 = "\r\n/* Estilo para el Contenedor Principal */\r\n#titulo-configruta {\r\n    margin-bottom: 5px;\r\n    margin-top: 0;\r\n    display: flex;\r\n    color: #34495e;\r\n    padding: 0; /* Opcional: padding interno */\r\n    font-family: 'Poppins', sans-serif;\r\n    font-size: 1.4rem; /* Tamaño de fuente de 1rem */\r\n}\r\n\r\n/* Estilo para Ruta y Ciclo (apilados verticalmente) */\r\n.ruta-ciclo-container {\r\n    display: flex;\r\n    flex-direction: column; /* Cambiado a columna para apilar */\r\n    align-items: flex-start; /* Alinea los elementos al inicio horizontalmente */\r\n    margin-bottom: 0; /* Espacio entre Ciclo y Mensaje Combinado */\r\n    color: #34495e;\r\n}\r\n\r\n/* Estilo para Ruta */\r\n.title-configruta-ruta {\r\n    padding: 0; /* Espacio vertical entre Ruta y Ciclo */\r\n    font-size: 14px; /* Tamaño de fuente para Ruta */\r\n    color: #333; /* Color del texto */\r\n    font-family: 'Poppins', sans-serif;\r\n    margin-bottom: -5px;\r\n}\r\n\r\n/* Estilo para Ciclo */\r\n.title-configruta-ciclo {\r\n    padding: 5px 0; /* Espacio vertical */\r\n    font-size: 14px; /* Tamaño de fuente para Ciclo */\r\n    font-family: 'Poppins', sans-serif;\r\n}\r\n\r\n.label-configruta {\r\n    font-weight: 600;\r\n    color: #34495e; /* Color más oscuro para destacar */\r\n    font-size: 14px; /* Ligero aumento en tamaño */\r\n}\r\n\r\n.ciclo-configruta,\r\n.ruta-configruta {\r\n    font-weight: 600;\r\n    color: #34495e; /* Color más oscuro para destacar */\r\n    font-size: 14px; /* Ligero aumento en tamaño */\r\n}\r\n\r\n/* Título estilizado */\r\n.title-optionmenu {\r\n    font-size: 22px;\r\n    font-weight: 700;\r\n    color: #34495e;\r\n    margin-bottom: 20px;\r\n    text-align: left;\r\n}\r\n\r\n/* Contenedores de elementos */\r\n.estilo-configruta-item {\r\n    margin-bottom: 10px;\r\n    font-family: 'Poppins', sans-serif;\r\n}\r\n\r\n/* Estilo para el Mensaje Combinado */\r\n.title-configruta-no-seleccionado {\r\n    display: none; /* Oculto por defecto */\r\n    width: 100%;\r\n    text-align: center;\r\n    margin-top: 10px;\r\n    color: red; /* Color del mensaje */\r\n    font-family: 'Poppins', sans-serif;\r\n    font-size: 10px; /* Tamaño de fuente para el mensaje combinado */\r\n}\r\n\r\n/* Opcional: Mostrar el mensaje cuando ambos no están seleccionados */\r\n.no-seleccionado .title-configruta-no-seleccionado {\r\n    display: block;\r\n}\r\n\r\n/* Estilos para los selects */\r\n.estilo-configruta-select {\r\n    width: 100%; /* Asegurarse de que ocupe todo el ancho disponible */\r\n    padding: 12px;\r\n    font-size: 16px;\r\n    font-family: 'Poppins', sans-serif;\r\n    border: 1px solid #bdc3c7;\r\n    border-radius: 4px;\r\n    background-color: #ffffff; /* Fondo blanco */\r\n    color: #2c3e50; /* Texto oscuro para mayor legibilidad */\r\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Sombra suave */\r\n    transition: border 0.3s ease, box-shadow 0.3s ease; /* Transición suave */\r\n}\r\n\r\n/* Efecto hover y foco en los selects */\r\n.estilo-configruta-select:hover,\r\n.estilo-configruta-select:focus {\r\n    border-color: #0072c5;\r\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\r\n    outline: none;\r\n}\r\n\r\n/* Botones estilizados */\r\n.estilo-configruta-boton {\r\n    width: 100%;\r\n    padding: 12px;\r\n    background-color: #0072c5;\r\n    color: white;\r\n    border: none;\r\n    border-radius: 5px;\r\n    font-size: 16px;\r\n    font-family: 'Poppins', sans-serif; /* Aplica la fuente Poppins */\r\n    cursor: pointer;\r\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n    transition: background-color 0.3s ease, box-shadow 0.3s ease;\r\n}\r\n\r\n\r\n/* Efecto hover en los botones */\r\n.estilo-configruta-boton:hover {\r\n    background-color: #002c67;\r\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\r\n}";
  styleInject(css_248z$1);

  // src/opc-config-ruta/script.js



  // Exporta las funciones que necesitas utilizar en otros módulos
  function opcionConfigRuta_html() {
      return `
    <div class="contenido-configruta">
        <h3 id="titulo-configruta">Configuración de Ruta</h3>

    <!-- Contenedor Principal -->
        <div id="ultima-ruta-configruta" class="estilo-configruta-title no-seleccionado">

            <!-- Contenedor para Ruta y Ciclo apilados verticalmente -->
            <div class="ruta-ciclo-container" style="display: none">

                <!-- Ruta -->
                <div id="ruta-configruta" class="title-configruta-ruta">
                    <span class="label-configruta">Ruta:</span>
                </div>

                <!-- Ciclo -->
                <div id="ciclo-configruta" class="title-configruta-ciclo">
                    <span class="label-configruta">Ciclo:</span>
                </div>

            </div>
        </div>

        <!-- Contenedor Selects Dinamicos -->
        <div id="selects-configruta">
            <!-- Aquí puedes agregar más contenido o elementos dinámicos -->
        </div>

        <button id="boton-guardar-configruta" class="estilo-configruta-boton guardar">Guardar Ruta</button>
    </div>
    `;
  } 

  // Función principal que ejecuta todo el proceso
  async function opcionConfigRuta_js() {
      comprobarRutaCiclo_ConfigRuta(); // Verifica y muestra la ruta y ciclo actuales
      await SelectUniversidad_ConfigRuta(); // Inicializa el select de Universidad

      // Añadir el evento para el botón guardar dentro de la función
      const botonGuardar = document.getElementById("boton-guardar-configruta");
      if (botonGuardar) {
          botonGuardar.addEventListener("click", guardarConfigRuta); // Asigna el manejador de evento
      } else {
          console.error('No se encontró el botón con id "boton-guardar-configruta"');
      }
  }

  // Verifica si la ruta y ciclo están configurados en localStorage
  function comprobarRutaCiclo_ConfigRuta() {
      const configRuta = localStorage.getItem('configRuta');
      const ciclo = localStorage.getItem('ciclo');

      console.log(`[opc-config-ruta] Valor de configRuta: ${configRuta}, Valor de ciclo: ${ciclo}`);

      // Verificar si configRuta y ciclo están definidos
      if (!configRuta || !ciclo) {
          console.log('[opc-config-ruta] configRuta o ciclo no están definidos.');

          // Desactivar autofill y autosave
          localStorage.setItem('autofill-autoquizfillapp', 'desactivado');
          localStorage.setItem('autosave-autoquizfillapp', 'desactivado');
          // Autofill y autosave desactivados en localStorage

          // Crear y mostrar el mensaje de advertencia en 'contenido-principal'
          const mensaje = document.createElement('div');
          mensaje.textContent = 'No ha seleccionado una ruta o ciclo';
          mensaje.style.color = 'red';
          mensaje.style.fontWeight = '500';
          mensaje.style.fontSize = '0.9em';
          mensaje.style.textAlign = 'left';
          mensaje.style.marginBottom = '10px';
          mensaje.id = 'mensaje-ruta-invalida';

          const ultimaRutaConfigruta = document.getElementById('ultima-ruta-configruta');

          if (ultimaRutaConfigruta && !document.getElementById('mensaje-ruta-invalida')) {
              ultimaRutaConfigruta.appendChild(mensaje);
              console.log('[opc-config-ruta] No ha seleccionado una ruta o ciclo.');
          }
      } else {
          const rutaCicloContainer = document.querySelector('.ruta-ciclo-container');

          // Mostrar los contenedores si configRuta y ciclo están definidos
          if (rutaCicloContainer) {
              rutaCicloContainer.style.display = 'block';
              console.log('[opc-config-ruta] Mostrando "rutaCicloContainer".');
          }

          // Eliminar el mensaje si existe
          const mensajeExistente = document.getElementById('mensaje-ruta-invalida');
          if (mensajeExistente) {
              mensajeExistente.remove();
          }

          // Establecer el valor de 'Ruta' y 'Ciclo' en el HTML correspondiente
          const rutaElemento = document.getElementById('ruta-configruta');
          const cicloElemento = document.getElementById('ciclo-configruta');

          if (rutaElemento && cicloElemento) {
              // Asignar los valores de configRuta y ciclo en los elementos del DOM
              rutaElemento.innerHTML = `<span class="ruta-configruta">Ruta:</span> ${configRuta}`;
              cicloElemento.innerHTML = `<span class="ciclo-configruta">Ciclo:</span> ${ciclo}`;
          }
      }
  }

  // Inicializa el select de Universidad y maneja su cambio
  async function SelectUniversidad_ConfigRuta() {
      const rutaFirebase = 'ConfigRuta/universidad';
      const databaseRef = ref(database, rutaFirebase); // Referencia a la ruta de Firebase
      const contenedorSelects = document.getElementById('selects-configruta');

      if (!contenedorSelects) {
          console.error('No se encontró el contenedor con id "selects-configruta"');
          return;
      }

      contenedorSelects.innerHTML = ''; // Limpia el contenedor

      try {
          const snapshot = await get(databaseRef); // Obtiene los datos de Firebase
          const data = snapshot.val();

          if (data) {
              // Crear etiqueta y select para Universidad
              const label = document.createElement('label');
              label.setAttribute('for', 'select-universidad-configruta');
              label.textContent = 'Universidad';
              label.className = 'estilo-configruta-item';

              const selectUniversidad = document.createElement('select');
              selectUniversidad.id = 'select-universidad-configruta';
              selectUniversidad.className = 'estilo-configruta-select';
              selectUniversidad.setAttribute('data-level', '1'); // Asigna nivel 1
              selectUniversidad.setAttribute('data-path', 'ConfigRuta/universidad');
              selectUniversidad.style.marginBottom = '10px';

              // Opción por defecto
              const defaultOption = document.createElement('option');
              defaultOption.value = '';
              defaultOption.textContent = 'Seleccione una opción';
              defaultOption.disabled = true;
              defaultOption.selected = true;
              selectUniversidad.appendChild(defaultOption);

              // Agregar opciones de Universidad
              for (const universidadKey in data) {
                  if (data.hasOwnProperty(universidadKey)) {
                      const option = document.createElement('option');
                      option.value = universidadKey;
                      option.textContent = typeof data[universidadKey] === 'string'
                          ? data[universidadKey]
                          : universidadKey;
                      selectUniversidad.appendChild(option);
                  }
              }

              // Evento al cambiar la selección de Universidad
              selectUniversidad.addEventListener('change', async (event) => {
                  const selectedUniversity = event.target.value;

                  // Remover la opción por defecto de la lista
                  if (defaultOption.parentNode) {
                      selectUniversidad.removeChild(defaultOption);
                  }

                  const currentLevel = parseInt(selectUniversidad.getAttribute('data-level'), 10);
                  const nextLevel = currentLevel + 1;

                  await limpiarSelectsDesdeNivel(nextLevel); // Limpia selects de niveles superiores
                  if (selectedUniversity) {
                      await cargarSelectsDinamicos(selectedUniversity, rutaFirebase, nextLevel, selectedUniversity); // Carga selects dinámicos
                  }
                  guardarEstadoSelects(); // Guarda el estado actual de los selects
              });

              contenedorSelects.appendChild(label); // Añade la etiqueta al contenedor
              contenedorSelects.appendChild(selectUniversidad); // Añade el select al contenedor

              // Llama a la función para restaurar el estado de los selects si existe en localStorage
              await manejarSeleccionesSecuenciales();
          }
      } catch (error) {
          console.error('Error al obtener datos de Firebase:', error);
          const mensajeError = document.createElement('p');
          mensajeError.textContent = 'Hubo un error al cargar las configuraciones.';
          contenedorSelects.appendChild(mensajeError);
      }
  }

  // Carga selects dinámicos basados en la selección anterior
  async function cargarSelectsDinamicos(selectedKey, rutaPadre, nivel, universidadSeleccionada) {
      let rutaActual;
      if (nivel === 2) {
          rutaActual = `${rutaPadre}/${selectedKey}`;
      } else {
          rutaActual = `ConfigRuta/opciones/${universidadSeleccionada}`;
      }

      const databaseRef = ref(database, rutaActual);

      try {
          const snapshot = await get(databaseRef);
          const data = snapshot.val();
          let keysPrincipales = [];

          // Solo buscamos claves si el valor devuelto es un objeto
          if (data && typeof data === 'object') {
              if (nivel === 2) {
                  keysPrincipales = Object.keys(data);
              } else {
                  keysPrincipales = Object.keys(data).filter(key => key.startsWith(selectedKey));
              }
          }

          // Verificar si hay claves principales que generen nuevos selects
          if (keysPrincipales.length > 0) {
              await limpiarSelectsDesdeNivel(nivel + 1);
              for (let keyPrincipal of keysPrincipales) {
                  await cargarOpciones(keyPrincipal, universidadSeleccionada, nivel + 1);
              }
          } else {
              // console.log("No se encontraron opciones para generar nuevos selects.");
          }
      } catch (error) {
          console.error(`Error al obtener datos de Firebase para '${rutaActual}':`, error);
      }
  }

  // Carga opciones para un select dinámico específico
  async function cargarOpciones(keyPrincipal, universidadSeleccionada, nivel) {
      const rutaOpciones = `ConfigRuta/opciones/${universidadSeleccionada}/${keyPrincipal}`;
      const databaseRef = ref(database, rutaOpciones);
      const contenedorSelects = document.getElementById('selects-configruta');

      try {
          const snapshot = await get(databaseRef);
          const opciones = snapshot.val();

          if (opciones && typeof opciones === 'object' && Object.keys(opciones).length > 0) {
              const div = document.createElement('div');
              div.className = 'estilo-configruta-item';
              div.setAttribute('data-path', rutaOpciones);

              // Crear etiqueta para el select dinámico
              const label = document.createElement('label');
              label.setAttribute('for', `select-${keyPrincipal}`);
              label.textContent = formatearLabelTexto(keyPrincipal);
              label.className = 'estilo-configruta-item';

              // Crear el select dinámico
              const selectDinamico = document.createElement('select');
              selectDinamico.id = `select-${keyPrincipal}`;
              selectDinamico.className = 'estilo-configruta-select';
              selectDinamico.setAttribute('data-level', nivel); // Asigna el nivel actual
              selectDinamico.setAttribute('data-path', rutaOpciones);

              // Opción por defecto
              const defaultOption = document.createElement('option');
              defaultOption.value = '';
              defaultOption.textContent = 'Seleccione una opción';
              defaultOption.disabled = true;
              defaultOption.selected = true;
              selectDinamico.appendChild(defaultOption);

              // Agregar opciones al select dinámico
              for (const opcionKey in opciones) {
                  if (opciones.hasOwnProperty(opcionKey)) {
                      const option = document.createElement('option');
                      option.value = opcionKey;
                      option.textContent = opciones[opcionKey] ? opciones[opcionKey] : opcionKey;
                      selectDinamico.appendChild(option);
                  }
              }

              // Evento al cambiar la selección del select dinámico
              selectDinamico.addEventListener('change', async (event) => {
                  const selectedOption = event.target.value;

                  // Remover la opción por defecto de la lista una vez seleccionada otra opción
                  if (defaultOption.parentNode) {
                      selectDinamico.removeChild(defaultOption);
                  }

                  const currentLevel = parseInt(selectDinamico.getAttribute('data-level'), 10);
                  const nextLevel = currentLevel + 1;

                  await limpiarSelectsDesdeNivel(nextLevel); // Limpia selects de niveles superiores
                  if (selectedOption) {
                      await cargarSelectsDinamicos(selectedOption, `ConfigRuta/opciones/${universidadSeleccionada}`, nextLevel, universidadSeleccionada); // Carga más selects si es necesario
                  }
                  guardarEstadoSelects(); // Guarda el estado actual de los selects
              });

              div.appendChild(label); // Añade la etiqueta al div
              div.appendChild(selectDinamico); // Añade el select al div
              contenedorSelects.appendChild(div); // Añade el div al contenedor principal
          }
      } catch (error) {
          console.error(`Error al obtener opciones de Firebase para '${rutaOpciones}':`, error);
      }
  }

  // Formatea el texto de la etiqueta a partir de la clave
  function formatearLabelTexto(key) {
      const partes = key.split('-').slice(1);
      return partes.map(palabra => palabra.charAt(0).toUpperCase() + palabra.slice(1)).join(' ');
  }

  // Guarda el estado actual de los selects en localStorage
  function guardarEstadoSelects() {
      const contenedorSelects = document.getElementById('selects-configruta');
      const selects = Array.from(contenedorSelects.querySelectorAll('select'));
      const estado = selects.map(select => ({
          nivel: select.getAttribute('data-level'),
          id: select.id,
          ruta: select.getAttribute('data-path'),
          seleccion: select.value  // Guarda el valor seleccionado actual
      }));
      // console.log("Guardando estado en localStorage:", estado);
      localStorage.setItem('estadoSelects', JSON.stringify(estado));
  }

  // Maneja la selección secuencial de opciones basadas en el estado guardado
  async function manejarSeleccionesSecuenciales() {
      // Obtiene el estado de los selects desde localStorage y lo parsea de JSON a objeto
      const estadoSelects = JSON.parse(localStorage.getItem('estadoSelects'));

      // Si no hay datos o el arreglo está vacío, registra un mensaje y termina la función
      if (!estadoSelects || estadoSelects.length === 0) {
          console.log("[opc-config-ruta] No existen datos para las listas desplegables para \"opc-config-ruta\"");
          return;
      }

      console.log("[opc-config-ruta] Existen datos para las listas desplegables para \"opc-config-ruta\", restableciendo...");
      // Ordenar los selects por nivel para asegurar que se procesen en orden
      estadoSelects.sort((a, b) => parseInt(a.nivel) - parseInt(b.nivel));

      // Itera sobre cada objeto selectData en el arreglo estadoSelects
      for (let selectData of estadoSelects) {
          const { id, seleccion, nivel } = selectData; // Desestructura el ID y la selección del objeto
          // console.log(`Procesando ${id} con valor: ${seleccion} en nivel ${nivel}`); // Registra el proceso actual
          // Espera a que se seleccione la opción correspondiente en el <select>
          await esperarYSeleccionarOpcion(id, seleccion);
      }
  }

  // Espera hasta que un select específico esté disponible en el DOM y selecciona una opción
  function esperarYSeleccionarOpcion(selectId, valorSeleccionado) {
      return new Promise((resolve) => {
          // Configura un intervalo que se ejecuta cada 100 ms
          const intervalo = setInterval(() => {
              // Intenta obtener el elemento <select> por su ID
              const select = document.getElementById(selectId);
              if (select) { // Si el <select> existe en el DOM
                  clearInterval(intervalo); // Detiene el intervalo
                  // Busca la opción dentro del <select> que coincide con el valor proporcionado
                  const option = Array.from(select.options).find(option => option.value === valorSeleccionado);
                  if (option) { // Si se encuentra la opción
                      select.value = option.value; // Establece el valor seleccionado del <select>
                      //console.log(`Opción seleccionada en ${selectId}: ${option.textContent.trim()}`); // Registra en la consola
                      // Simula el evento 'change' para que cualquier listener asociado responda a la selección
                      select.dispatchEvent(new Event('change'));
                  }
                  resolve(); // Resuelve la promesa una vez completada la selección
              }
          }, 100); // Intervalo de 100 milisegundos para reintentar la búsqueda del <select>
      });
  }

  // Limpia (elimina) los selects a partir de un nivel especificado
  async function limpiarSelectsDesdeNivel(nivelInicio) {
      //  console.log(`Limpiando selects desde nivel ${nivelInicio} en adelante`); // Registra la acción de limpieza
      // Obtiene el contenedor que contiene todos los elementos <select> relacionados con la configuración de ruta
      const contenedorSelects = document.getElementById('selects-configruta');
      // Obtiene una lista de todos los elementos <select> dentro del contenedor
      const selects = Array.from(contenedorSelects.querySelectorAll('select'));

      // Itera sobre cada <select> encontrado
      selects.forEach(select => {
          // Obtiene el nivel del <select> a partir del atributo 'data-level' y lo convierte a entero
          const selectNivel = parseInt(select.getAttribute('data-level'), 10);
          // Si el nivel del <select> es mayor o igual al nivel de inicio para limpiar
          if (selectNivel >= nivelInicio) {
              const parentDiv = select.parentElement; // Obtiene el elemento padre del <select>
              if (parentDiv) { // Si existe el elemento padre
                  const label = parentDiv.querySelector('label'); // Busca una etiqueta <label> dentro del padre
                  if (label) { // Si se encuentra la etiqueta <label>
                      label.remove(); // Elimina la etiqueta <label> del DOM
                  }
                  select.remove(); // Elimina el <select> del DOM
              }
          }
      });
  }

  // Guarda la configuración de ruta y ciclo en localStorage
  function guardarConfigRuta() {
      guardarEstadoSelects(); // Guarda el estado actual de los selects

      // Obtener el array de objetos desde localStorage
      const estadoSelects = JSON.parse(localStorage.getItem("estadoSelects")) || [];

      // Verificar si alguna selección está vacía
      const algunaSeleccionVacia = estadoSelects.some(item => item.seleccion === "");
      if (algunaSeleccionVacia) {
          alert("No se puede guardar ruta, debido a que una opción no está seleccionada.");
          return; // Detener la función si alguna selección está vacía
      }

      // Inicializar las variables para configRuta y ciclo
      let configRuta = "";
      let ciclo = "";

      // Recorrer cada elemento del array
      estadoSelects.forEach((item) => {
          // Realizar split en el valor de seleccion si contiene ":"
          let seleccion = item.seleccion.includes(":") ? item.seleccion.split(":").slice(1).join(":") : item.seleccion;

          // Si el id contiene la palabra "ciclo", asignar el valor de selección a la variable ciclo
          if (item.id.includes("ciclo")) {
              ciclo = seleccion;
          } else {
              // Para los demás elementos, agregar selección a configRuta con "/"
              configRuta += `${seleccion}/`;
          }
      });

      // Quitar el último "/" de configRuta
      configRuta = configRuta.slice(0, -1);

      // Guardar configRuta y ciclo en localStorage
      localStorage.setItem("configRuta", configRuta);
      localStorage.setItem("ciclo", ciclo);


      comprobarRutaCiclo_ConfigRuta(); // Verifica y muestra la nueva ruta y ciclo
      getDataFromFirebaseAsync();
  }

  // Exportación nombrada de la función para que pueda ser importada en otro script
  function panel_AutoFillQuizApp(barraLateral) {
    console.log('[AutoFillQuiz-App] Creando Panel Principal.');

    const contenedor = document.createElement('div');
    contenedor.id = 'panel-autofillquizapp';
    contenedor.classList.add('panel-autofillquizapp');
    contenedor.style.display = 'none';

    const panelHeader = document.createElement('div');
    panelHeader.classList.add('panel-header');

    const botonMenu = document.createElement('button');
    botonMenu.id = 'boton-hamburguesa-autofillquizapp';
    botonMenu.classList.add('boton-hamburguesa-autofillquizapp');
    botonMenu.innerHTML = '<i class="fa-solid fa-bars"></i>';

    const tituloOpcion = document.createElement('span');
    tituloOpcion.id = 'titulo-autofillquizapp';
    tituloOpcion.classList.add('titulo-autofillquizapp');
    tituloOpcion.innerHTML = 'AutoFillQuiz App';

    const contenedorContenido = document.createElement('div');
    contenedorContenido.id = 'contenido-principal';
    contenedorContenido.classList.add('contenido-principal-autofillquizapp');

    // Obtener los valores de localStorage
    const configPlataforma = localStorage.getItem('ConfigPlataforma');
    const ultimoHtml = localStorage.getItem('ultimoHtml');
    const ultimoJs = localStorage.getItem('ultimoJs');

    // Función para cargar contenido por defecto (opcionConfig)
    function cargarOpcionConfig() {
      console.log('[AutoFillQuiz-App] Iniciando Configuración.');
      localStorage.setItem('ultimoHtml', 'opcionConfig_html');
      localStorage.setItem('ultimoJs', 'opcionConfig_js');

      contenedorContenido.innerHTML = opcionConfig_html();

      setTimeout(() => {
        if (typeof opcionConfig_js === 'function') {
          opcionConfig_js();
        } else {
          console.warn('La función opcionConfig_js no está definida.');
        }
      }, 100);
    }

    // Función para cargar AutoFillMoodle por defecto
    function cargarAutoFillMoodle() {
      console.log('[main-panel] Cargando AutoFill Moodle.');
      
      {
        try {
          contenedorContenido.innerHTML = opcion_AutoFillAutoSave_Moodle_html();
          console.log('[main-panel] HTML cargado exitosamente.');
        } catch (error) {
          console.error('[main-panel] Error al ejecutar la función HTML:', error);
          return;
        }
      }
      
      // Ejecutar la función JS correspondiente
      setTimeout(() => {
        if (typeof opcion_AutoFillAutoSave_Moodle_js === 'function') {
          try {
            opcion_AutoFillAutoSave_Moodle_js();
            // console.log('[main-panel] JS ejecutada exitosamente.');
          } catch (error) {
            console.error('[main-panel] Error al ejecutar la función JS:', error);
          }
        } else {
          console.warn('[main-panel] La función JS "opcion_AutoFillAutoSave_Moodle_js" no está definida.');
        }
      }, 100);
    }

    // Función para cargar las últimas funciones almacenadas
    function cargarUltimasFunciones() {

      // Obtener las últimas funciones almacenadas en localStorage
      const ultimoHtml = localStorage.getItem('ultimoHtml');
      const ultimoJs = localStorage.getItem('ultimoJs');

      // Verificar que las variables se hayan obtenido correctamente
      if (!ultimoHtml || !ultimoJs) {
        console.warn('[AutoQuizFill] No se encontraron las últimas funciones en localStorage.');
        return;
      }

      // Mapeo de las posibles funciones HTML y JS
      const funcionesHtml = {
        'opcionConfigRuta_html': opcionConfigRuta_html,
        'opcion_AutoFillAutoSave_Moodle_html': opcion_AutoFillAutoSave_Moodle_html, 
        'opcion_AutoFillAutoSave_Altissia_html': opcion_AutoFillAutoSave_Altissia_html, 
        'opcionConfig_html': opcionConfig_html  
      };

      const funcionesJs = {
        'opcionConfigRuta_js': opcionConfigRuta_js,
        'opcion_AutoFillAutoSave_Moodle_js': opcion_AutoFillAutoSave_Moodle_js, 
        'opcion_AutoFillAutoSave_Altissia_js': opcion_AutoFillAutoSave_Altissia_js,  
        'opcionConfig_js': opcionConfig_js 
      };

      // Obtener y establecer el HTML correspondiente
      const funcionHtml = funcionesHtml[ultimoHtml];
      // console.log(`[AutoQuizFill] Función HTML seleccionada: "${ultimoHtml}"`);

      let opcionfuncionHtml = `${ultimoJs}_aplit`.split('_')[0];

      if (funcionHtml) {
        try {
          contenedorContenido.innerHTML = funcionHtml();
          console.log('[main-panel] HTML cargado exitosamente.');
        } catch (error) {
          console.error('[main-panel] Error al ejecutar la función HTML:', error);
          return;
        }
      } else {
        console.error(`[main-panel] La función HTML "${opcionfuncionHtml}" no está definida.`);
        return;
      }

      // Ejecutar la función JS correspondiente
      setTimeout(() => {
        const funcionJs = funcionesJs[ultimoJs];
        if (typeof funcionJs === 'function') {
          try {
            funcionJs();
            // console.log('[main-panel] JS ejecutada exitosamente.');
          } catch (error) {
            console.error('[main-panel] Error al ejecutar la función JS:', error);
          }
        } else {
          console.warn(`[main-panel] La función JS "${ultimoJs}" no está definida.`);
        }
      }, 100);
    }


    // Lógica principal para determinar qué contenido cargar
    if (configPlataforma && ultimoHtml && ultimoJs) {
      // Caso 1: Existe ConfigPlataforma y existen ultimoHtml y ultimoJs
      cargarUltimasFunciones();

    } else if (!configPlataforma) {
      if (ultimoHtml && ultimoJs) {
        // Caso 2: No existe ConfigPlataforma pero existen ultimoHtml y ultimoJs
        // Según la descripción, también se carga opcionConfig
        cargarOpcionConfig();
      } else {
        // Caso 4: No existe ConfigPlataforma y no existen ultimoHtml y ultimoJs
        cargarOpcionConfig();
      }
    } else {

      if (configPlataforma === "Moodle") {
        cargarAutoFillMoodle(); // Ejecuta la función específica para Moodle
      } else if (configPlataforma === "Altissia") ; else {
        console.log("Plataforma no soportada");
      }
    } 


    panelHeader.appendChild(botonMenu);
    panelHeader.appendChild(tituloOpcion);
    contenedor.appendChild(panelHeader);
    contenedor.appendChild(contenedorContenido);
    barraLateral.appendChild(contenedor);

    botonMenu.addEventListener('click', () => {
      const menu = document.getElementById('menu-autofillquizapp');
      if (menu) {
        menu.style.display = 'flex';
      } else {
        console.error("El menú no se encontró en el DOM.");
      }
    });

    return contenedor;
  }

  var css_248z = "/* Estilos para el menú lateral */\r\n#menu-autofillquizapp {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0; /* Posicionar el menú a la izquierda */\r\n    min-width: 350px; /* Ancho de 350px */\r\n    max-width: 500px;\r\n    height: 100vh; /* Ocupar toda la altura de la pantalla */\r\n    background-color: #2c3e50; /* Fondo oscuro elegante */\r\n    color: #ecf0f1; /* Texto claro */\r\n    z-index: 10000;\r\n    display: none; /* Oculto por defecto */\r\n    flex-direction: column;\r\n    padding-top: 20px;\r\n    border-radius: 0 5px 5px 0; /* Borde redondeado en los lados derecho */\r\n    overflow-y: hidden; /* Ocultar barra de desplazamiento vertical */\r\n    box-shadow: 2px 0 12px rgba(0, 0, 0, 0.2); /* Sombra suave */\r\n    font-family: 'Poppins', sans-serif; /* Aplicar Poppins a todo el menú */\r\n}\r\n\r\n\r\n/* Contenedor del botón cerrar y la palabra Menú */\r\n.contenedor-header-menu {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between; /* Alinear título a la izquierda y botón a la derecha */\r\n    padding: 10px;\r\n    position: relative;\r\n}\r\n\r\n/* Botón para cerrar el menú, alineado a la derecha */\r\n#boton-cerrar-menu-autofillquizapp {\r\n    background-color: #e74c3c; /* Fondo rojo típico de los botones de cerrar */\r\n    color: #fff;\r\n    border: none;\r\n    font-size: 18px;\r\n    cursor: pointer;\r\n    width: 40px;\r\n    height: 40px;\r\n    border-radius: 5px;\r\n    position: absolute;\r\n    right: 25px; /* Posicionar a la derecha */\r\n}\r\n\r\n#boton-cerrar-menu-autofillquizapp:hover {\r\n    background-color: #c0392b; /* Cambio de color en hover */\r\n}\r\n\r\n/* Título \"Menú\", alineado a la izquierda */\r\n.titulo-menu {\r\n    font-size: 22px;\r\n    font-weight: bold;\r\n    color: #ecf0f1;\r\n    font-family: 'Poppins', sans-serif; /* Aplicar Poppins al título */\r\n    text-align: left;\r\n    flex-grow: 1; /* Ocupa el espacio disponible */\r\n    margin-left: 10px; /* Separación desde el borde izquierdo */\r\n}\r\n\r\n/* Contenedor de las opciones */\r\n.contenedor-opciones-menu {\r\n    margin-top: 20px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow-y: auto; /* Activar desplazamiento vertical */\r\n    scrollbar-width: thin; /* Barra delgada para navegadores compatibles con Firefox */\r\n    scrollbar-color: transparent transparent; /* Barra y pista transparentes */\r\n}\r\n\r\n/* Estilo personalizado para la barra de desplazamiento en navegadores basados en Webkit (Chrome, Edge, Safari) */\r\n.contenedor-opciones-menu::-webkit-scrollbar {\r\n    width: 6px; /* Ancho de la barra de desplazamiento */\r\n}\r\n\r\n.contenedor-opciones-menu::-webkit-scrollbar-thumb {\r\n    background-color: rgba(255, 255, 255, 0.3); /* Barra de desplazamiento semitransparente */\r\n    border-radius: 10px; /* Borde redondeado */\r\n}\r\n\r\n.contenedor-opciones-menu::-webkit-scrollbar-track {\r\n    background: transparent; /* Pista transparente */\r\n}\r\n\r\n\r\n/* Opciones del menú */\r\n.opcion-menu-autofillquizapp {\r\n    width: 100%;\r\n    padding: 15px 20px;\r\n    background: none;\r\n    border: none;\r\n    color: #ecf0f1;\r\n    font-size: 18px;\r\n    text-align: left;\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n    font-family: 'Poppins', sans-serif; /* Aplicar Poppins a las opciones */\r\n    transition: background-color 0.3s ease, padding-left 0.3s ease;\r\n}\r\n\r\n.opcion-menu-autofillquizapp:hover {\r\n    background-color: rgba(255, 255, 255, 0.1); /* Efecto hover */\r\n    padding-left: 30px; /* Animación de desplazamiento */\r\n}\r\n\r\n.opcion-menu-autofillquizapp i {\r\n    margin-right: 15px; /* Espacio entre el icono y el texto */\r\n}\r\n\r\n/* Contenedor para el botón de cerrar sesión */\r\n.contenedor-cerrar-sesion {\r\n    margin-top: auto; /* Poner el botón de cerrar sesión al final del menú */\r\n    padding: 20px;\r\n}\r\n\r\n/* Botón para cerrar sesión */\r\n.boton-cerrar-sesion {\r\n    width: 100%;\r\n    padding: 12px;\r\n    background-color: #e74c3c;\r\n    color: white;\r\n    border: none;\r\n    border-radius: 5px;\r\n    font-size: 16px;\r\n    cursor: pointer;\r\n    text-align: center;\r\n    box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n    transition: background-color 0.3s ease, box-shadow 0.3s ease;\r\n    font-family: 'Poppins', sans-serif; /* Aplicar Poppins al botón de cerrar sesión */\r\n}\r\n\r\n.boton-cerrar-sesion:hover {\r\n    background-color: #c0392b;\r\n    box-shadow: 0 4px 10px rgba(0,0,0,0.2);\r\n}\r\n";
  styleInject(css_248z);

  function menu_AutoFillQuizApp() {
      console.log('[AutoFillQuiz-App] Creando Menú Principal.');

      // Crear el contenedor del menú lateral
      const menu = document.createElement('div');
      menu.id = 'menu-autofillquizapp';
      menu.classList.add('menu-autofillquizapp');
      menu.style.display = 'none'; // Oculto por defecto

      // Crear el contenedor para el botón de cerrar y la palabra Menú
      const contenedorHeader = document.createElement('div');
      contenedorHeader.classList.add('contenedor-header-menu');

      // Título "Menú"
      const tituloMenu = document.createElement('span');
      tituloMenu.classList.add('titulo-menu');
      tituloMenu.innerText = 'Menú';

      // Botón para cerrar el menú
      const botonCerrar = document.createElement('button');
      botonCerrar.id = 'boton-cerrar-menu-autofillquizapp';
      botonCerrar.classList.add('boton-cerrar-menu-autofillquizapp');
      botonCerrar.innerHTML = '<i class="fa-solid fa-times"></i>'; // Icono de cierre

      // Añadir evento para cerrar el menú cuando se haga clic en el botón
      botonCerrar.addEventListener('click', () => {
          menu.style.display = 'none'; // Ocultar menú
      });

      // Añadir el botón de cerrar y el título al contenedor de cabecera
      contenedorHeader.appendChild(botonCerrar);
      contenedorHeader.appendChild(tituloMenu);

      // Crear el contenedor de las opciones del menú
      const contenedorOpciones = document.createElement('div');
      contenedorOpciones.classList.add('contenedor-opciones-menu');

      // Crear las opciones del menú, incluyendo la nueva opción "Gestion de Usuarios"
      const opciones = ['AutoFill & AutoSave', 'Configuración de Ruta', 'Generar PDF de preguntas', 'Gestión de Usuarios', 'Configuración'];
      opciones.forEach(opcion => {
          const botonOpcion = document.createElement('button');
          botonOpcion.id = `opcion-${opcion.toLowerCase().replace(/ /g, '-')}-autofillquizapp`;
          botonOpcion.classList.add('opcion-menu-autofillquizapp');

          // Asignar el icono correspondiente
          let icono;
          switch (opcion) {
              case 'AutoFill & AutoSave':
                  icono = 'edit';
                  break;
              case 'Configuración de Ruta':
                  icono = 'database';
                  break;
              case 'Generar PDF de preguntas':
                  icono = 'file-pdf';
                  break;
              case 'Gestión de Usuarios':
                  icono = 'id-card';
                  break;
              case 'Configuración':
                  icono = 'cog';
                  break;
              default:
                  icono = 'circle';
          }

          botonOpcion.innerHTML = `<i class="fa-solid fa-${icono}"></i> ${opcion}`; // Icono según la opción

          // Añadir evento para manejar la selección de una opción del menú
          botonOpcion.addEventListener('click', async () => { // Convertir la función en asíncrona
              const contenedorContenido = document.getElementById('contenido-principal');
              if (contenedorContenido) {
                  // Mostrar el contenido y ejecutar el script correspondiente a la opción seleccionada
                  if (opcion === 'AutoFill & AutoSave') {
                      // Obtener la configuración de la plataforma desde localStorage
                      const configPlataforma = localStorage.getItem('ConfigPlataforma');
                  
                      // Verificar la plataforma configurada y ejecutar el código correspondiente
                      if (configPlataforma === 'Moodle') {
                          localStorage.setItem('ultimoHtml', 'opcion_AutoFillAutoSave_Moodle_html');
                          localStorage.setItem('ultimoJs', 'opcion_AutoFillAutoSave_Moodle_js');
                  
                          contenedorContenido.innerHTML = opcion_AutoFillAutoSave_Moodle_html(); // Mostrar contenido de AutoFill & AutoSavel para Moodle
                  
                          try {
                              await opcion_AutoFillAutoSave_Moodle_js(); // Ejecutar el script de AutoFill & AutoSave para Moodle y esperar su finalización
                          } catch (error) {
                              console.error('Error al ejecutar opcion_AutoFillAutoSave_Moodle_js:', error);
                          }
                      } else if (configPlataforma === 'Altissia') {
                          localStorage.setItem('ultimoHtml', 'opcion_AutoFillAutoSave_Altissia_html');
                          localStorage.setItem('ultimoJs', 'opcion_AutoFillAutoSave_Altissia_js');
                  
                          contenedorContenido.innerHTML = opcion_AutoFillAutoSave_Altissia_html(); // Mostrar contenido de AutoFill para Altissia
                  
                          try {
                              await opcion_AutoFillAutoSave_Altissia_js(); // Ejecutar el script de AutoFill para Altissia y esperar su finalización
                          } catch (error) {
                              console.error('Error al ejecutar opcion_AutoFillAutoSave_Altissia_js:', error);
                          }
                      } else {
                          console.warn('Plataforma desconocida en ConfigPlataforma:', configPlataforma);
                          // Opcional: manejar otras plataformas o establecer un comportamiento por defecto
                      }
                  }
                   else if (opcion === 'Configuración de Ruta') {
                      localStorage.setItem('ultimoHtml', 'opcionConfigRuta_html');
                      localStorage.setItem('ultimoJs', 'opcionConfigRuta_js');

                      contenedorContenido.innerHTML = opcionConfigRuta_html(); // Mostrar contenido de Configuración de Ruta
                      opcionConfigRuta_js(); // Ejecutar el script de Configuración de Ruta
                  } else if (opcion === 'Generar PDF de preguntas') {
                      localStorage.setItem('ultimoHtml', 'opcionGenerarPDF_html');
                      localStorage.setItem('ultimoJs', 'opcionGenerarPDF_js');

                      contenedorContenido.innerHTML = opcionGenerarPDF_html(); // Mostrar contenido de Generar PDF
                      opcionGenerarPDF_js(); // Ejecutar el script para generar PDF
                  } else if (opcion === 'Gestión de Usuarios') {
                      localStorage.setItem('ultimoHtml', 'opcionGestionUsuarios_html');
                      localStorage.setItem('ultimoJs', 'opcionGestionUsuarios_js');

                      contenedorContenido.innerHTML = opcionGestionUsuarios_html(); // Mostrar contenido de Gestión de Usuarios
                      opcionGestionUsuarios_js(); // Ejecutar el script para Gestión de Usuarios

                  } else if (opcion === 'Configuración') {
                      localStorage.setItem('ultimoHtml', 'opcionConfig_html');
                      localStorage.setItem('ultimoJs', 'opcionConfig_js');

                      contenedorContenido.innerHTML = opcionConfig_html(); // Mostrar contenido de Gestión de Usuarios
                      opcionConfig_js(); // Ejecutar el script para Gestión de Usuarios
                  }
                  menu.style.display = 'none'; // Ocultar el menú después de seleccionar una opción
              }
          });

          // Añadir el botón de opción al contenedor de opciones
          contenedorOpciones.appendChild(botonOpcion);
      });

      // Crear el contenedor para el botón de cerrar sesión
      const contenedorCerrarSesion = document.createElement('div');
      contenedorCerrarSesion.classList.add('contenedor-cerrar-sesion');

      // Botón para cerrar sesión
      const botonCerrarSesion = document.createElement('button');
      botonCerrarSesion.id = 'boton-cerrar-sesion';
      botonCerrarSesion.classList.add('boton-cerrar-sesion');
      botonCerrarSesion.innerText = 'Cerrar Sesión';

      // Asignar la función de cerrar sesión y ocultar el menú
      botonCerrarSesion.addEventListener('click', () => {
          cerrarSesionAutoQuiz(); // Llama a la función para cerrar sesión
          menu.style.display = 'none'; // Ocultar el menú después de cerrar sesión
      });

      // Añadir el botón de cerrar sesión al contenedor
      contenedorCerrarSesion.appendChild(botonCerrarSesion);

      // Añadir el contenedor de cabecera, opciones y el botón de cerrar sesión al menú
      menu.appendChild(contenedorHeader);
      menu.appendChild(contenedorOpciones);
      menu.appendChild(contenedorCerrarSesion);

      // Retornar el menú para ser usado en otro lugar
      return menu;
  }

  /* 
    Este script maneja la autenticación (inicio/cierre de sesión), 
    verifica el estado del usuario y controla la UI para AutoQuizFill.
  */


  // Mensaje informativo que indica la carga de este script
  console.log('[AutoFillQuiz-App] Iniciando Autenticación.');

  /* 
    CONSTANTES DE IDENTIFICADORES DE ELEMENTOS:
    Aquí definimos las IDs de los elementos del DOM que usaremos y que 
    inyectaremos en la página.
  */
  const ID_BARRA_LATERAL = 'barra-lateral-autoquizfillapp';
  const ID_LOGIN_CONTENEDOR = 'login-autoquizfillapp';
  const ID_PANEL_CONTENEDOR = 'panel-autofillquizapp';
  const ID_FORM_FAKE = 'fake-form';

  // Variable para almacenar el 'origen' de la sesión actual (dominio actual).
  let currentOriginLocal = null;

  /**
   * toggleElementById: Muestra u oculta un elemento en el DOM basado en su ID.
   * @param {string} elementId - El ID del elemento a modificar.
   * @param {boolean} show - true para mostrar, false para ocultar.
   */
  function toggleElementById(elementId, show) {
    const elemento = document.getElementById(elementId);
    if (elemento) {
      elemento.style.display = show ? 'block' : 'none';
    } else {
      console.warn(`[AutoQuizFill] toggleElementById: No se encontró el elemento con ID "${elementId}".`);
    }
  }

  /**
   * mostrarError: Muestra un mensaje de error en un alert y en la consola.
   * @param {string} mensaje - Mensaje de error a mostrar.
   */
  function mostrarError(mensaje) {
    alert(`Error en inicio de sesión: ${mensaje}`);
  }

  /**
   * crearFormularioLogin: Crea la sección de formulario de inicio de sesión y la agrega a la barra lateral.
   * @param {HTMLElement} barraLateral - El contenedor donde se inyectará el formulario de login.
   */
  function crearFormularioLogin(barraLateral) {
    // Creamos el contenedor principal del login y lo ocultamos inicialmente.
    const loginAutoFillQuizApp = document.createElement('div');
    loginAutoFillQuizApp.id = ID_LOGIN_CONTENEDOR;
    loginAutoFillQuizApp.style.display = 'none';

    // Se inyecta el formulario y campos necesarios para iniciar sesión.
    loginAutoFillQuizApp.innerHTML = `<div class="contenedor-login-autoquizfillapp">
  <div class="contenedor-titulo-autoquizfillapp">
    <img 
      src="https://i.ibb.co/6RZ3s8ms/Logo-AQF.png" 
      alt="AutoQuizFill Logo" 
      class="logo-autoquizfillapp"
    >
  </div>
  <div class="contenedor-inputs-autoquizfillapp">
    <input 
      type="email" 
      id="login-correo-autoquizfillapp" 
      class="login-entrada-autoquizfillapp" 
      placeholder="Correo electrónico"
      autocomplete="email" 
      form="${ID_FORM_FAKE}" 
      required
    >
    <input 
      type="password" 
      id="login-contrasena-autoquizfillapp" 
      class="login-entrada-autoquizfillapp" 
      placeholder="Contraseña"
      autocomplete="current-password" 
      form="${ID_FORM_FAKE}" 
      required
    >
  </div>
  <div class="contenedor-boton-autoquizfillapp">
    <button 
      id="login-boton-autoquizfillapp" 
      class="login-boton-autoquizfillapp"
    >
      Iniciar sesión
    </button>
  </div>
</div>
<!-- Formulario 'fantasma' para evitar problemas con autocompletado/Enter -->
<form id="${ID_FORM_FAKE}" style="display: none;"></form>

  `;

    // Insertamos el formulario de login en la barra lateral.
    barraLateral.appendChild(loginAutoFillQuizApp);

    // Obtenemos referencias a los campos de correo y contraseña, y el botón de login.
    const inputCorreo = document.getElementById('login-correo-autoquizfillapp');
    const inputContrasena = document.getElementById('login-contrasena-autoquizfillapp');
    const botonLogin = document.getElementById('login-boton-autoquizfillapp');

    // Verificamos que existan todos los elementos.
    if (inputCorreo && inputContrasena && botonLogin) {
      // Función encargada de procesar el inicio de sesión con los valores de los inputs.
      const iniciarSesionHandler = () => {
        iniciarSesionAutoQuiz(inputCorreo.value, inputContrasena.value);
      };

      // Si el usuario presiona Enter en el campo de contraseña, se ejecuta iniciarSesionHandler.
      inputContrasena.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          iniciarSesionHandler();
        }
      });

      // Si el usuario hace clic en el botón de login, también se ejecuta iniciarSesionHandler.
      botonLogin.addEventListener('click', () => {
        iniciarSesionHandler();
      });
    } else {
      console.error('[AutoQuizFill] crearFormularioLogin: No se encontraron todos los elementos del formulario de login.');
    }
  }

  /**
   * iniciarSesionAutoQuiz: Maneja la lógica para iniciar sesión con Firebase.
   * @param {string} correo - Correo electrónico ingresado por el usuario.
   * @param {string} contrasena - Contraseña ingresada por el usuario.
   */
  function iniciarSesionAutoQuiz(correo, contrasena) {
    // signInWithEmailAndPassword: Función de Firebase Auth que maneja el login de usuarios.
    signInWithEmailAndPassword(autenticacion, correo, contrasena)
      .then((usuarioCredential) => {
        // Si el login es exitoso, obtenemos el usuario
        const usuario = usuarioCredential.user;
        // Configuramos la sesión en la base de datos y en localStorage
        configurarSesion(usuario.uid);
        // Mostramos el panel principal de la aplicación
        mostrarPanel();
      })
      .catch((error) => {
        // Si ocurre un error, lo mostramos
        mostrarError(error.message);
      });
  }

  /**
   * configurarSesion: Configura la sesión del usuario en la base de datos y localStorage.
   * @param {string} uid - Identificador único del usuario en Firebase.
   */
  function configurarSesion(uid) {
    // currentOrigin: dominio actual donde se está ejecutando el script (por ejemplo: https://ejemplo.com).
    const currentOrigin = window.location.origin;
    // Guardamos este origen en localStorage para referencia futura.
    localStorage.setItem('currentOrigin', currentOrigin);
    currentOriginLocal = currentOrigin;

    // Creamos una referencia en la base de datos para el currentOrigin del usuario.
    const originRef = ref(database, `users/${uid}/currentOrigin`);

    // Almacenamos el currentOrigin en la base de datos de Firebase.
    set(originRef, currentOrigin)
      .then(() => {
        // Configuramos un listener para detectar si el currentOrigin cambia.
        // Si cambia, cerramos la sesión en este dominio para evitar conflictos.
        onValue(originRef, (snapshot) => {
          const dbOrigin = snapshot.val();
          if (dbOrigin !== currentOriginLocal) {
            cerrarSesionAutoQuiz$1();
          }
        });
      })
      .catch((error) => {
        console.error(`[AutoQuizFill] ConfigurarSesion: Error al actualizar currentOrigin - ${error.code}: ${error.message}`);
      });
  }

  /**
   * cerrarSesionAutoQuiz: Cierra la sesión actual del usuario, tanto en Firebase como en localStorage.
   */
  function cerrarSesionAutoQuiz$1() {
    signOut(autenticacion)
      .then(() => {
        // Si el signOut es exitoso, intentamos eliminar el currentOrigin de la base de datos.
        const usuario = autenticacion.currentUser;
        if (usuario) {
          const originRef = ref(database, `users/${usuario.uid}/currentOrigin`);
          remove(originRef)
            .then(() => {
              // También eliminamos el currentOrigin de localStorage.
              localStorage.removeItem('currentOrigin');
            })
            .catch((error) => {
              console.error(`[AutoQuizFill] cerrarSesionAutoQuiz: Error al eliminar currentOrigin - ${error.code}: ${error.message}`);
            });
        } else {
          // Si no existe un usuario activo, simplemente limpiamos localStorage.
          localStorage.removeItem('currentOrigin');
        }
        // Por último, mostramos la pantalla de login (ocultando el panel principal).
        mostrarLogin();
      })
      .catch((error) => {
        console.error(`[AutoQuizFill] cerrarSesionAutoQuiz: Error al cerrar sesión - ${error.code}: ${error.message}`);
      });
  }

  /**
   * mostrarLogin: Muestra el formulario de login y oculta el panel principal.
   */
  function mostrarLogin() {
    toggleElementById(ID_LOGIN_CONTENEDOR, true);
    toggleElementById(ID_PANEL_CONTENEDOR, false);
  }

  /**
   * mostrarPanel: Muestra el panel principal y oculta el formulario de login.
   */
  function mostrarPanel() {
    toggleElementById(ID_LOGIN_CONTENEDOR, false);
    toggleElementById(ID_PANEL_CONTENEDOR, true);
  }

  /**
   * startAFQ: Inicializa la aplicación AutoFillQuiz.
   *    - Verifica si existe la barra lateral en el DOM (donde inyectaremos nuestra UI).
   *    - Crea el formulario de login y lo inyecta en la barra lateral.
   *    - Observa el estado de autenticación (usuario logueado o no).
   *    - Dependiendo del estado, muestra el login o el panel principal.
   */
  function startAFQ() {
    // Intentamos obtener la barra lateral por su ID
    const barraLateral = document.getElementById(ID_BARRA_LATERAL);

    // Si la barra lateral no existe, no podemos continuar.
    if (!barraLateral) {
      console.error(`startAFQ: No se encontró el elemento con ID "${ID_BARRA_LATERAL}". Abortando inicialización.`);
      return;
    }

    // Creamos e inyectamos el formulario de login en la barra lateral
    crearFormularioLogin(barraLateral);

    // onAuthStateChanged: Escucha cambios en el estado de autenticación de Firebase.
    onAuthStateChanged(autenticacion, (usuario) => {
      if (usuario) {
        console.log('[login-auth] Usuario autenticado.');

        // Configura la sesión para el usuario activo (uid).
        configurarSesion(usuario.uid);

        // Crea el menú de AutoFillQuizApp y lo agrega a la barra lateral.
        const menu = menu_AutoFillQuizApp();
        if (menu) {
          barraLateral.appendChild(menu);
        }

        // Oculta el formulario de login y muestra el panel principal.
        toggleElementById(ID_LOGIN_CONTENEDOR, false);

        // Inicializamos el panel principal dentro de la barra lateral.
        panel_AutoFillQuizApp(barraLateral);

        // Aseguramos que el panel principal sea visible.
        toggleElementById(ID_PANEL_CONTENEDOR, true);

      } else {
        // Si no hay usuario autenticado, mostramos el login.
        console.log('[startAFQ] Usuario no autenticado.');
        toggleElementById(ID_LOGIN_CONTENEDOR, true);
      }
    });
  }

  /* 
    EJECUCIÓN PRINCIPAL:
    Se envuelve todo en una condición para que solo se ejecute si:
    - La URL actual incluye "altissia.org"
    - O es detectada como una página Moodle usando la función esPaginaMoodle().
  */
  if (window.location.href.includes('altissia.org') || esPaginaMoodle$1()) {
    // Verificamos si el DOM se está cargando:
    // Si aún está cargando, esperamos al evento 'DOMContentLoaded'.
    // Si ya terminó de cargar, iniciamos directamente startAFQ().
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        startAFQ();
      });
    } else {
      startAFQ();
    }

    /* 
      Exponemos la función de cierre de sesión (opcional).
      Esto permite usar `window.cerrarSesionAutoQuiz()` desde la consola 
      o desde otros scripts para cerrar sesión manualmente.
    */
    window.cerrarSesionAutoQuiz = cerrarSesionAutoQuiz$1;
  }

})();
